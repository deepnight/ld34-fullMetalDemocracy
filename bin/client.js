(function ($global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var hxd_Res = function() { };
$hxClasses["hxd.Res"] = hxd_Res;
hxd_Res.__name__ = "hxd.Res";
hxd_Res.load = function(name) {
	return hxd_Res.get_loader().load(name);
};
hxd_Res.get_loader = function() {
	var l = hxd_res_Loader.currentInstance;
	if(l == null) {
		throw haxe_Exception.thrown("Resource loader not initialized: call to hxd.Res.initXXX() required");
	}
	return l;
};
hxd_Res.set_loader = function(l) {
	return hxd_res_Loader.currentInstance = l;
};
var hxd_res_Loader = function(fs) {
	this.fs = fs;
	this.cache = new haxe_ds_StringMap();
};
$hxClasses["hxd.res.Loader"] = hxd_res_Loader;
hxd_res_Loader.__name__ = "hxd.res.Loader";
hxd_res_Loader.prototype = {
	exists: function(path) {
		return this.fs.exists(path);
	}
	,load: function(path) {
		return new hxd_res_Any(this,this.fs.get(path));
	}
	,loadCache: function(path,c) {
		var res = this.cache.h[path];
		if(res == null) {
			var entry = this.fs.get(path);
			var old = hxd_res_Loader.currentInstance;
			hxd_res_Loader.currentInstance = this;
			res = Type.createInstance(c,[entry]);
			hxd_res_Loader.currentInstance = old;
			this.cache.h[path] = res;
		} else if((js_Boot.__downcastCheck(res,c) ? res : null) == null) {
			throw haxe_Exception.thrown(path + " has been reintrepreted from " + Std.string(js_Boot.getClass(res)) + " to " + Std.string(c));
		}
		return res;
	}
	,__class__: hxd_res_Loader
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b;
		}
	}
	,__class__: EReg
};
var dn_heaps_assets_SfxDirectory = function() { };
$hxClasses["dn.heaps.assets.SfxDirectory"] = dn_heaps_assets_SfxDirectory;
dn_heaps_assets_SfxDirectory.__name__ = "dn.heaps.assets.SfxDirectory";
var dn_heaps_Sfx = function(s) {
	this.sound = s;
	this.volume = 1;
	if(this.lastChannel != null && !(this.lastChannel != null && this.lastChannel.pause)) {
		this.applyVolume();
	}
	this.spatialRangeMul = 1.0;
	this.groupId = dn_heaps_Sfx.DEFAULT_GROUP_ID;
};
$hxClasses["dn.heaps.Sfx"] = dn_heaps_Sfx;
dn_heaps_Sfx.__name__ = "dn.heaps.Sfx";
dn_heaps_Sfx.getGlobalGroup = function(id) {
	if(!dn_heaps_Sfx.GLOBAL_GROUPS.h.hasOwnProperty(id)) {
		var this1 = dn_heaps_Sfx.GLOBAL_GROUPS;
		var value = new dn_heaps__$Sfx_GlobalGroup(id);
		this1.h[id] = value;
	}
	return dn_heaps_Sfx.GLOBAL_GROUPS.h[id];
};
dn_heaps_Sfx.setGroupVolume = function(id,v) {
	var _this = dn_heaps_Sfx.getGlobalGroup(id);
	_this.volume = v < 0 ? 0 : v > 1 ? 1 : v;
	_this.soundGroup.volume = _this.muted ? 0 : _this.volume;
};
dn_heaps_Sfx.toggleMuteGroup = function(id) {
	var g = dn_heaps_Sfx.getGlobalGroup(id);
	g.set_muted(!g.muted);
	return g.muted;
};
dn_heaps_Sfx.prototype = {
	togglePlayPause: function() {
		if(this.lastChannel == null) {
			return false;
		}
		if(!(this.lastChannel != null && this.lastChannel.pause)) {
			this.pause();
			return false;
		} else {
			this.resume();
			return true;
		}
	}
	,pause: function() {
		if(this.lastChannel != null) {
			this.lastChannel.set_pause(true);
		}
	}
	,resume: function() {
		if(this.lastChannel != null) {
			this.lastChannel.set_pause(false);
		}
	}
	,onLoop: function() {
	}
	,play: function(loop,vol) {
		if(loop == null) {
			loop = false;
		}
		if(vol != null) {
			this.volume = vol < 0 ? 0 : vol > 1 ? 1 : vol;
			if(this.lastChannel != null && !(this.lastChannel != null && this.lastChannel.pause)) {
				this.applyVolume();
			}
		}
		if(this.lastChannel != null && !(this.lastChannel != null && this.lastChannel.pause)) {
			this.stop();
		}
		var this1 = dn_heaps_Sfx.SOUND_DEFAULT_GROUPS;
		var key = this.sound == null || this.sound.entry == null ? "?" : this.sound.entry.get_path();
		if(Object.prototype.hasOwnProperty.call(this1.h,key)) {
			var this1 = dn_heaps_Sfx.SOUND_DEFAULT_GROUPS;
			var key = this.sound == null || this.sound.entry == null ? "?" : this.sound.entry.get_path();
			this.groupId = this1.h[key];
		}
		var c = this.sound.play(loop,this.volume,null,dn_heaps_Sfx.getGlobalGroup(this.groupId).soundGroup);
		var _gthis = this;
		this.onEndCurrent = null;
		this.lastChannel = c;
		this.lastChannel.onEnd = function() {
			if(_gthis.lastChannel.loop) {
				_gthis.onLoop();
			}
			if(_gthis.onEndCurrent != null) {
				var cb = _gthis.onEndCurrent;
				_gthis.onEndCurrent = null;
				cb();
			}
		};
		this.applyVolume();
		var this1 = dn_heaps_Sfx.ON_PLAY_CB;
		var key = this.sound == null || this.sound.entry == null ? "?" : this.sound.entry.get_path();
		if(Object.prototype.hasOwnProperty.call(this1.h,key)) {
			var this1 = dn_heaps_Sfx.ON_PLAY_CB;
			var key = this.sound == null || this.sound.entry == null ? "?" : this.sound.entry.get_path();
			this1.h[key](this);
		}
		return this;
	}
	,applyVolume: function() {
		if(this.lastChannel == null || this.lastChannel.isReleased() ? false : true) {
			this.lastChannel.set_volume(this.getMixedVolumeFactor() * this.volume);
		}
	}
	,getMixedVolumeFactor: function() {
		var spatial = 1.0;
		var tmp;
		var v = this.spatialX;
		if(v != null && !isNaN(v) && isFinite(v)) {
			var v = this.spatialY;
			tmp = v != null && !isNaN(v) && isFinite(v);
		} else {
			tmp = false;
		}
		if(tmp) {
			var dist = Math.sqrt((this.spatialX - dn_heaps_Sfx.SPATIAL_LISTENER_X) * (this.spatialX - dn_heaps_Sfx.SPATIAL_LISTENER_X) + (this.spatialY - dn_heaps_Sfx.SPATIAL_LISTENER_Y) * (this.spatialY - dn_heaps_Sfx.SPATIAL_LISTENER_Y));
			var x = 1 - dist / (dn_heaps_Sfx.SPATIAL_LISTENER_RANGE * this.spatialRangeMul);
			var f = x < 0 ? 0 : x > 1 ? 1 : x;
			spatial = f * f * f;
		}
		var overrideVol;
		var this1 = dn_heaps_Sfx.SOUND_VOLUMES_OVERRIDE;
		var key = this.sound == null || this.sound.entry == null ? "?" : this.sound.entry.get_path();
		if(Object.prototype.hasOwnProperty.call(this1.h,key)) {
			var this1 = dn_heaps_Sfx.SOUND_VOLUMES_OVERRIDE;
			var key = this.sound == null || this.sound.entry == null ? "?" : this.sound.entry.get_path();
			overrideVol = this1.h[key];
		} else {
			overrideVol = 1;
		}
		var _this = dn_heaps_Sfx.getGlobalGroup(this.groupId);
		return (_this.muted ? 0 : _this.volume) * spatial * overrideVol;
	}
	,stop: function() {
		if(this.lastChannel != null) {
			this.lastChannel.stop();
		}
		this.lastChannel = null;
	}
	,__class__: dn_heaps_Sfx
};
var Assets = function() { };
$hxClasses["Assets"] = Assets;
Assets.__name__ = "Assets";
Assets.init = function() {
	if(Assets.font != null) {
		throw haxe_Exception.thrown("init twice");
	}
	Assets.lib = dn_heaps_assets_Atlas.load("lib.atlas");
	var this1 = hxd_Res.get_loader();
	Assets.font = this1.loadCache("fonts/alterebro.fnt",hxd_res_BitmapFont).toFont();
	var this1 = hxd_Res.get_loader();
	Assets.fontOutline = this1.loadCache("fonts/alterebroOutline.fnt",hxd_res_BitmapFont).toFont();
	Assets.lib.__defineAnim("humanWalk",[0,0,0,1,1,1]);
	Assets.lib.__defineAnim("humanRun",[0,0,0,1,2,2,2,1]);
	Assets.music = new dn_heaps_Sfx(hxd_Res.get_loader().loadCache("music_js.mp3",hxd_res_Sound));
	Assets.music.groupId = 1;
	dn_heaps_Sfx.setGroupVolume(1,0.7);
};
var h3d_IDrawable = function() { };
$hxClasses["h3d.IDrawable"] = h3d_IDrawable;
h3d_IDrawable.__name__ = "h3d.IDrawable";
h3d_IDrawable.__isInterface__ = true;
var hxd_App = function() {
	var _gthis = this;
	var engine = h3d_Engine.CURRENT;
	if(engine != null) {
		this.engine = engine;
		engine.onReady = $bind(this,this.setup);
		haxe_Timer.delay($bind(this,this.setup),0);
	} else {
		hxd_System.start(function() {
			engine = new h3d_Engine();
			_gthis.engine = engine;
			engine.onReady = $bind(_gthis,_gthis.setup);
			engine.init();
		});
	}
};
$hxClasses["hxd.App"] = hxd_App;
hxd_App.__name__ = "hxd.App";
hxd_App.__interfaces__ = [h3d_IDrawable];
hxd_App.staticHandler = function() {
};
hxd_App.prototype = {
	onResize: function() {
	}
	,onContextLost: function() {
		if(this.s3d != null) {
			this.s3d.onContextLost();
		}
	}
	,render: function(e) {
		this.s3d.render(e);
		this.s2d.render(e);
	}
	,setup: function() {
		var _gthis = this;
		var initDone = false;
		this.engine.onReady = hxd_App.staticHandler;
		this.engine.onContextLost = $bind(this,this.onContextLost);
		this.engine.onResized = function() {
			if(_gthis.s2d == null) {
				return;
			}
			_gthis.s2d.checkResize();
			if(initDone) {
				_gthis.onResize();
			}
		};
		this.s3d = new h3d_scene_Scene();
		this.s2d = new h2d_Scene();
		this.sevents = new hxd_SceneEvents();
		this.sevents.addScene(this.s2d);
		this.sevents.addScene(this.s3d);
		this.loadAssets(function() {
			initDone = true;
			_gthis.init();
			hxd_Timer.skip();
			_gthis.mainLoop();
			hxd_System.setLoop($bind(_gthis,_gthis.mainLoop));
			hxd_Key.initialize();
		});
	}
	,loadAssets: function(onLoaded) {
		onLoaded();
	}
	,init: function() {
	}
	,mainLoop: function() {
		hxd_Timer.update();
		this.sevents.checkEvents();
		if(this.isDisposed) {
			return;
		}
		this.update(hxd_Timer.dt);
		if(this.isDisposed) {
			return;
		}
		var dt = hxd_Timer.dt;
		if(this.s2d != null) {
			this.s2d.setElapsedTime(dt);
		}
		if(this.s3d != null) {
			this.s3d.setElapsedTime(dt);
		}
		this.engine.render(this);
	}
	,update: function(dt) {
	}
	,__class__: hxd_App
};
var Boot = function() {
	hxd_App.call(this);
};
$hxClasses["Boot"] = Boot;
Boot.__name__ = "Boot";
Boot.main = function() {
	new Boot();
};
Boot.__super__ = hxd_App;
Boot.prototype = $extend(hxd_App.prototype,{
	init: function() {
		Boot.ME = this;
		this.engine.backgroundColor = 0;
		new Main();
		this.onResize();
	}
	,onResize: function() {
		hxd_App.prototype.onResize.call(this);
		dn_Process.resizeAll();
	}
	,update: function(dt) {
		hxd_App.prototype.update.call(this,dt);
		var mul = 1.0;
		dn_Process.updateAll(hxd_Timer.dt * hxd_Timer.wantedFPS * mul);
	}
	,__class__: Boot
});
var Const = function() { };
$hxClasses["Const"] = Const;
Const.__name__ = "Const";
var dn_struct_FixedArray = function(name,maxSize) {
	this.name = name;
	var this1 = new Array(maxSize);
	this.values = this1;
	this.nalloc = 0;
};
$hxClasses["dn.struct.FixedArray"] = dn_struct_FixedArray;
dn_struct_FixedArray.__name__ = "dn.struct.FixedArray";
dn_struct_FixedArray.prototype = {
	toString: function() {
		return (this.name == null ? "FixedArray" : this.name) + (" " + this.nalloc + " / " + this.values.length);
	}
	,dumpContent: function() {
		var sub = [];
		var _g = 0;
		var _g1 = this.nalloc;
		while(_g < _g1) {
			var i = _g++;
			sub[i] = this.values[i];
		}
		return "[ " + sub.join(", ") + " ]";
	}
	,remove: function(e) {
		var found = false;
		var _g = 0;
		var _g1 = this.nalloc;
		while(_g < _g1) {
			var i = _g++;
			if(this.values[i] == e) {
				this.removeIndex(i);
				found = true;
				break;
			}
		}
		return found;
	}
	,removeIndex: function(i) {
		if(i < this.nalloc) {
			this.values[i] = null;
			if(this.nalloc > 1) {
				this.values[i] = this.values[this.nalloc - 1];
				this.values[this.nalloc - 1] = null;
				this.nalloc--;
			} else {
				this.nalloc = 0;
			}
		}
	}
	,__class__: dn_struct_FixedArray
};
var dn_Process = function(parent) {
	this.tmpProfilerTimes = new haxe_ds_StringMap();
	this._initOnceDone = false;
	this._fixedUpdateAccu = 0.;
	this.ignoreTimeMultipliers = false;
	this.baseTimeMul = 1.0;
	this.init();
	if(parent == null) {
		var _this = dn_Process.ROOTS;
		if(_this.nalloc >= _this.values.length) {
			throw haxe_Exception.thrown("FixedArray limit reached (" + _this.values.length + ")");
		}
		_this.values[_this.nalloc] = this;
		_this.nalloc++;
	} else {
		parent.addChild(this);
	}
	dn_Process.resizeAll(false);
};
$hxClasses["dn.Process"] = dn_Process;
dn_Process.__name__ = "dn.Process";
dn_Process._doPreUpdate = function(p,utmod) {
	var tmp;
	if(p._manuallyPaused) {
		tmp = true;
	} else if(p.parent != null) {
		var _this = p.parent;
		tmp = _this._manuallyPaused ? true : _this.parent != null && _this.parent.isPaused();
	} else {
		tmp = false;
	}
	if(!(!tmp && !p.destroyed)) {
		return;
	}
	p.utmod = utmod;
	p.ftime += p.utmod * p.getComputedTimeMultiplier();
	p.uftime += p.utmod;
	p.delayer.update(p.utmod * p.getComputedTimeMultiplier());
	var tmp;
	if(p._manuallyPaused) {
		tmp = true;
	} else if(p.parent != null) {
		var _this = p.parent;
		tmp = _this._manuallyPaused ? true : _this.parent != null && _this.parent.isPaused();
	} else {
		tmp = false;
	}
	if(!tmp && !p.destroyed) {
		p.udelayer.update(p.utmod);
	}
	var tmp;
	if(p._manuallyPaused) {
		tmp = true;
	} else if(p.parent != null) {
		var _this = p.parent;
		tmp = _this._manuallyPaused ? true : _this.parent != null && _this.parent.isPaused();
	} else {
		tmp = false;
	}
	if(!tmp && !p.destroyed) {
		p.cd.update(p.utmod * p.getComputedTimeMultiplier());
	}
	var tmp;
	if(p._manuallyPaused) {
		tmp = true;
	} else if(p.parent != null) {
		var _this = p.parent;
		tmp = _this._manuallyPaused ? true : _this.parent != null && _this.parent.isPaused();
	} else {
		tmp = false;
	}
	if(!tmp && !p.destroyed) {
		p.ucd.update(p.utmod);
	}
	var tmp;
	if(p._manuallyPaused) {
		tmp = true;
	} else if(p.parent != null) {
		var _this = p.parent;
		tmp = _this._manuallyPaused ? true : _this.parent != null && _this.parent.isPaused();
	} else {
		tmp = false;
	}
	if(!tmp && !p.destroyed) {
		p.tw.update(p.utmod * p.getComputedTimeMultiplier());
	}
	var tmp;
	if(p._manuallyPaused) {
		tmp = true;
	} else if(p.parent != null) {
		var _this = p.parent;
		tmp = _this._manuallyPaused ? true : _this.parent != null && _this.parent.isPaused();
	} else {
		tmp = false;
	}
	if(!tmp && !p.destroyed) {
		if(!p._initOnceDone) {
			p.initOnceBeforeUpdate();
			p._initOnceDone = true;
		}
		p.preUpdate();
	}
	var tmp;
	if(p._manuallyPaused) {
		tmp = true;
	} else if(p.parent != null) {
		var _this = p.parent;
		tmp = _this._manuallyPaused ? true : _this.parent != null && _this.parent.isPaused();
	} else {
		tmp = false;
	}
	if(!tmp && !p.destroyed) {
		var _g_arr = p.children;
		var _g_i = 0;
		while(_g_i < _g_arr.nalloc) {
			var c = _g_arr.values[_g_i++];
			dn_Process._doPreUpdate(c,p.utmod);
		}
	}
};
dn_Process._doMainUpdate = function(p) {
	var tmp;
	if(p._manuallyPaused) {
		tmp = true;
	} else if(p.parent != null) {
		var _this = p.parent;
		tmp = _this._manuallyPaused ? true : _this.parent != null && _this.parent.isPaused();
	} else {
		tmp = false;
	}
	if(!(!tmp && !p.destroyed)) {
		return;
	}
	var id = "update";
	if(dn_Process.PROFILING) {
		var id1;
		if(p.name != null) {
			id1 = p.name;
		} else {
			if(p._cachedClassName == null) {
				var c = js_Boot.getClass(p);
				p._cachedClassName = c.__name__;
			}
			id1 = p._cachedClassName;
		}
		id = id1 + "." + id;
		p.tmpProfilerTimes.h[id] = HxOverrides.now() / 1000;
	}
	p.update();
	if(p.onUpdateCb != null) {
		p.onUpdateCb();
	}
	var id = "update";
	if(dn_Process.PROFILING) {
		var id1;
		if(p.name != null) {
			id1 = p.name;
		} else {
			if(p._cachedClassName == null) {
				var c = js_Boot.getClass(p);
				p._cachedClassName = c.__name__;
			}
			id1 = p._cachedClassName;
		}
		id = id1 + "." + id;
		if(Object.prototype.hasOwnProperty.call(p.tmpProfilerTimes.h,id)) {
			var t = HxOverrides.now() / 1000 - p.tmpProfilerTimes.h[id];
			var _this = p.tmpProfilerTimes;
			if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
				delete(_this.h[id]);
			}
			if(!Object.prototype.hasOwnProperty.call(dn_Process.PROFILER_TIMES.h,id)) {
				dn_Process.PROFILER_TIMES.h[id] = t;
			} else {
				dn_Process.PROFILER_TIMES.h[id] += t;
			}
		}
	}
	var tmp;
	if(p._manuallyPaused) {
		tmp = true;
	} else if(p.parent != null) {
		var _this = p.parent;
		tmp = _this._manuallyPaused ? true : _this.parent != null && _this.parent.isPaused();
	} else {
		tmp = false;
	}
	if(!tmp && !p.destroyed) {
		var _g_arr = p.children;
		var _g_i = 0;
		while(_g_i < _g_arr.nalloc) {
			var p = _g_arr.values[_g_i++];
			dn_Process._doMainUpdate(p);
		}
	}
};
dn_Process._doFixedUpdate = function(p) {
	var tmp;
	if(p._manuallyPaused) {
		tmp = true;
	} else if(p.parent != null) {
		var _this = p.parent;
		tmp = _this._manuallyPaused ? true : _this.parent != null && _this.parent.isPaused();
	} else {
		tmp = false;
	}
	if(!(!tmp && !p.destroyed)) {
		return;
	}
	var id = "fixed";
	if(dn_Process.PROFILING) {
		var id1;
		if(p.name != null) {
			id1 = p.name;
		} else {
			if(p._cachedClassName == null) {
				var c = js_Boot.getClass(p);
				p._cachedClassName = c.__name__;
			}
			id1 = p._cachedClassName;
		}
		id = id1 + "." + id;
		p.tmpProfilerTimes.h[id] = HxOverrides.now() / 1000;
	}
	p._fixedUpdateAccu += p.utmod * p.getComputedTimeMultiplier();
	while(p._fixedUpdateAccu >= p.getDefaultFrameRate() / dn_Process.FIXED_UPDATE_FPS) {
		p._fixedUpdateAccu -= p.getDefaultFrameRate() / dn_Process.FIXED_UPDATE_FPS;
		var tmp;
		if(p._manuallyPaused) {
			tmp = true;
		} else if(p.parent != null) {
			var _this = p.parent;
			tmp = _this._manuallyPaused ? true : _this.parent != null && _this.parent.isPaused();
		} else {
			tmp = false;
		}
		if(!tmp && !p.destroyed) {
			p.fixedUpdate();
			if(p.onFixedUpdateCb != null) {
				p.onFixedUpdateCb();
			}
		}
	}
	var id = "fixed";
	if(dn_Process.PROFILING) {
		var id1;
		if(p.name != null) {
			id1 = p.name;
		} else {
			if(p._cachedClassName == null) {
				var c = js_Boot.getClass(p);
				p._cachedClassName = c.__name__;
			}
			id1 = p._cachedClassName;
		}
		id = id1 + "." + id;
		if(Object.prototype.hasOwnProperty.call(p.tmpProfilerTimes.h,id)) {
			var t = HxOverrides.now() / 1000 - p.tmpProfilerTimes.h[id];
			var _this = p.tmpProfilerTimes;
			if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
				delete(_this.h[id]);
			}
			if(!Object.prototype.hasOwnProperty.call(dn_Process.PROFILER_TIMES.h,id)) {
				dn_Process.PROFILER_TIMES.h[id] = t;
			} else {
				dn_Process.PROFILER_TIMES.h[id] += t;
			}
		}
	}
	var tmp;
	if(p._manuallyPaused) {
		tmp = true;
	} else if(p.parent != null) {
		var _this = p.parent;
		tmp = _this._manuallyPaused ? true : _this.parent != null && _this.parent.isPaused();
	} else {
		tmp = false;
	}
	if(!tmp && !p.destroyed) {
		var _g_arr = p.children;
		var _g_i = 0;
		while(_g_i < _g_arr.nalloc) {
			var p = _g_arr.values[_g_i++];
			dn_Process._doFixedUpdate(p);
		}
	}
};
dn_Process._doPostUpdate = function(p) {
	var tmp;
	if(p._manuallyPaused) {
		tmp = true;
	} else if(p.parent != null) {
		var _this = p.parent;
		tmp = _this._manuallyPaused ? true : _this.parent != null && _this.parent.isPaused();
	} else {
		tmp = false;
	}
	if(!(!tmp && !p.destroyed)) {
		return;
	}
	var id = "post";
	if(dn_Process.PROFILING) {
		var id1;
		if(p.name != null) {
			id1 = p.name;
		} else {
			if(p._cachedClassName == null) {
				var c = js_Boot.getClass(p);
				p._cachedClassName = c.__name__;
			}
			id1 = p._cachedClassName;
		}
		id = id1 + "." + id;
		p.tmpProfilerTimes.h[id] = HxOverrides.now() / 1000;
	}
	p.postUpdate();
	var id = "post";
	if(dn_Process.PROFILING) {
		var id1;
		if(p.name != null) {
			id1 = p.name;
		} else {
			if(p._cachedClassName == null) {
				var c = js_Boot.getClass(p);
				p._cachedClassName = c.__name__;
			}
			id1 = p._cachedClassName;
		}
		id = id1 + "." + id;
		if(Object.prototype.hasOwnProperty.call(p.tmpProfilerTimes.h,id)) {
			var t = HxOverrides.now() / 1000 - p.tmpProfilerTimes.h[id];
			var _this = p.tmpProfilerTimes;
			if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
				delete(_this.h[id]);
			}
			if(!Object.prototype.hasOwnProperty.call(dn_Process.PROFILER_TIMES.h,id)) {
				dn_Process.PROFILER_TIMES.h[id] = t;
			} else {
				dn_Process.PROFILER_TIMES.h[id] += t;
			}
		}
	}
	if(!p.destroyed) {
		var _g_arr = p.children;
		var _g_i = 0;
		while(_g_i < _g_arr.nalloc) {
			var c = _g_arr.values[_g_i++];
			dn_Process._doPostUpdate(c);
		}
	}
};
dn_Process._garbageCollector = function(plist) {
	var i = 0;
	var p;
	while(i < plist.nalloc) {
		p = i < 0 || i >= plist.nalloc ? null : plist.values[i];
		if(p.destroyed) {
			dn_Process._disposeProcess(p);
		} else {
			dn_Process._garbageCollector(p.children);
			++i;
		}
	}
};
dn_Process._disposeProcess = function(p) {
	var _g_arr = p.children;
	var _g_i = 0;
	while(_g_i < _g_arr.nalloc) {
		var p1 = _g_arr.values[_g_i++];
		p1.destroyed = true;
	}
	dn_Process._garbageCollector(p.children);
	p.delayer.destroy();
	p.udelayer.destroy();
	p.cd.dispose();
	p.ucd.dispose();
	p.tw.destroy();
	if(p.parent != null) {
		p.parent.children.remove(p);
	} else {
		dn_Process.ROOTS.remove(p);
	}
	if(p.root != null) {
		var _this = p.root;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
	}
	p.onDispose();
	if(p.onDisposeCb != null) {
		p.onDisposeCb();
	}
	p.parent = null;
	p.children = null;
	p.cd = null;
	p.ucd = null;
	p.delayer = null;
	p.udelayer = null;
	p.tw = null;
	p.root = null;
};
dn_Process._resizeProcess = function(p) {
	if(!p.destroyed) {
		p.onResize();
		var _g_arr = p.children;
		var _g_i = 0;
		while(_g_i < _g_arr.nalloc) {
			var p = _g_arr.values[_g_i++];
			dn_Process._resizeProcess(p);
		}
	}
};
dn_Process.updateAll = function(utmod) {
	if(dn_Process.BEGINNING_OF_FRAME_CALLBACKS.nalloc > 0) {
		var _g_arr = dn_Process.BEGINNING_OF_FRAME_CALLBACKS;
		var _g_i = 0;
		while(_g_i < _g_arr.nalloc) {
			var cb = _g_arr.values[_g_i++];
			cb();
		}
		dn_Process.BEGINNING_OF_FRAME_CALLBACKS.nalloc = 0;
	}
	var _g_arr = dn_Process.ROOTS;
	var _g_i = 0;
	while(_g_i < _g_arr.nalloc) {
		var p = _g_arr.values[_g_i++];
		var tmp;
		if(p._manuallyPaused) {
			tmp = true;
		} else if(p.parent != null) {
			var _this = p.parent;
			tmp = _this._manuallyPaused ? true : _this.parent != null && _this.parent.isPaused();
		} else {
			tmp = false;
		}
		if(!tmp && !p.destroyed) {
			p.utmod = utmod;
			p.ftime += p.utmod * p.getComputedTimeMultiplier();
			p.uftime += p.utmod;
			p.delayer.update(p.utmod * p.getComputedTimeMultiplier());
			var tmp1;
			if(p._manuallyPaused) {
				tmp1 = true;
			} else if(p.parent != null) {
				var _this1 = p.parent;
				tmp1 = _this1._manuallyPaused ? true : _this1.parent != null && _this1.parent.isPaused();
			} else {
				tmp1 = false;
			}
			if(!tmp1 && !p.destroyed) {
				p.udelayer.update(p.utmod);
			}
			var tmp2;
			if(p._manuallyPaused) {
				tmp2 = true;
			} else if(p.parent != null) {
				var _this2 = p.parent;
				tmp2 = _this2._manuallyPaused ? true : _this2.parent != null && _this2.parent.isPaused();
			} else {
				tmp2 = false;
			}
			if(!tmp2 && !p.destroyed) {
				p.cd.update(p.utmod * p.getComputedTimeMultiplier());
			}
			var tmp3;
			if(p._manuallyPaused) {
				tmp3 = true;
			} else if(p.parent != null) {
				var _this3 = p.parent;
				tmp3 = _this3._manuallyPaused ? true : _this3.parent != null && _this3.parent.isPaused();
			} else {
				tmp3 = false;
			}
			if(!tmp3 && !p.destroyed) {
				p.ucd.update(p.utmod);
			}
			var tmp4;
			if(p._manuallyPaused) {
				tmp4 = true;
			} else if(p.parent != null) {
				var _this4 = p.parent;
				tmp4 = _this4._manuallyPaused ? true : _this4.parent != null && _this4.parent.isPaused();
			} else {
				tmp4 = false;
			}
			if(!tmp4 && !p.destroyed) {
				p.tw.update(p.utmod * p.getComputedTimeMultiplier());
			}
			var tmp5;
			if(p._manuallyPaused) {
				tmp5 = true;
			} else if(p.parent != null) {
				var _this5 = p.parent;
				tmp5 = _this5._manuallyPaused ? true : _this5.parent != null && _this5.parent.isPaused();
			} else {
				tmp5 = false;
			}
			if(!tmp5 && !p.destroyed) {
				if(!p._initOnceDone) {
					p.initOnceBeforeUpdate();
					p._initOnceDone = true;
				}
				p.preUpdate();
			}
			var tmp6;
			if(p._manuallyPaused) {
				tmp6 = true;
			} else if(p.parent != null) {
				var _this6 = p.parent;
				tmp6 = _this6._manuallyPaused ? true : _this6.parent != null && _this6.parent.isPaused();
			} else {
				tmp6 = false;
			}
			if(!tmp6 && !p.destroyed) {
				var _g_arr1 = p.children;
				var _g_i1 = 0;
				while(_g_i1 < _g_arr1.nalloc) {
					var c = _g_arr1.values[_g_i1++];
					var utmod1 = p.utmod;
					var tmp7;
					if(c._manuallyPaused) {
						tmp7 = true;
					} else if(c.parent != null) {
						var _this7 = c.parent;
						if(_this7._manuallyPaused) {
							tmp7 = true;
						} else if(_this7.parent != null) {
							var _this8 = _this7.parent;
							tmp7 = _this8._manuallyPaused ? true : _this8.parent != null && _this8.parent.isPaused();
						} else {
							tmp7 = false;
						}
					} else {
						tmp7 = false;
					}
					if(!tmp7 && !c.destroyed) {
						c.utmod = utmod1;
						c.ftime += c.utmod * c.getComputedTimeMultiplier();
						c.uftime += c.utmod;
						c.delayer.update(c.utmod * c.getComputedTimeMultiplier());
						var tmp8;
						if(c._manuallyPaused) {
							tmp8 = true;
						} else if(c.parent != null) {
							var _this9 = c.parent;
							if(_this9._manuallyPaused) {
								tmp8 = true;
							} else if(_this9.parent != null) {
								var _this10 = _this9.parent;
								tmp8 = _this10._manuallyPaused ? true : _this10.parent != null && _this10.parent.isPaused();
							} else {
								tmp8 = false;
							}
						} else {
							tmp8 = false;
						}
						if(!tmp8 && !c.destroyed) {
							c.udelayer.update(c.utmod);
						}
						var tmp9;
						if(c._manuallyPaused) {
							tmp9 = true;
						} else if(c.parent != null) {
							var _this11 = c.parent;
							if(_this11._manuallyPaused) {
								tmp9 = true;
							} else if(_this11.parent != null) {
								var _this12 = _this11.parent;
								tmp9 = _this12._manuallyPaused ? true : _this12.parent != null && _this12.parent.isPaused();
							} else {
								tmp9 = false;
							}
						} else {
							tmp9 = false;
						}
						if(!tmp9 && !c.destroyed) {
							c.cd.update(c.utmod * c.getComputedTimeMultiplier());
						}
						var tmp10;
						if(c._manuallyPaused) {
							tmp10 = true;
						} else if(c.parent != null) {
							var _this13 = c.parent;
							if(_this13._manuallyPaused) {
								tmp10 = true;
							} else if(_this13.parent != null) {
								var _this14 = _this13.parent;
								tmp10 = _this14._manuallyPaused ? true : _this14.parent != null && _this14.parent.isPaused();
							} else {
								tmp10 = false;
							}
						} else {
							tmp10 = false;
						}
						if(!tmp10 && !c.destroyed) {
							c.ucd.update(c.utmod);
						}
						var tmp11;
						if(c._manuallyPaused) {
							tmp11 = true;
						} else if(c.parent != null) {
							var _this15 = c.parent;
							if(_this15._manuallyPaused) {
								tmp11 = true;
							} else if(_this15.parent != null) {
								var _this16 = _this15.parent;
								tmp11 = _this16._manuallyPaused ? true : _this16.parent != null && _this16.parent.isPaused();
							} else {
								tmp11 = false;
							}
						} else {
							tmp11 = false;
						}
						if(!tmp11 && !c.destroyed) {
							c.tw.update(c.utmod * c.getComputedTimeMultiplier());
						}
						var tmp12;
						if(c._manuallyPaused) {
							tmp12 = true;
						} else if(c.parent != null) {
							var _this17 = c.parent;
							if(_this17._manuallyPaused) {
								tmp12 = true;
							} else if(_this17.parent != null) {
								var _this18 = _this17.parent;
								tmp12 = _this18._manuallyPaused ? true : _this18.parent != null && _this18.parent.isPaused();
							} else {
								tmp12 = false;
							}
						} else {
							tmp12 = false;
						}
						if(!tmp12 && !c.destroyed) {
							if(!c._initOnceDone) {
								c.initOnceBeforeUpdate();
								c._initOnceDone = true;
							}
							c.preUpdate();
						}
						var tmp13;
						if(c._manuallyPaused) {
							tmp13 = true;
						} else if(c.parent != null) {
							var _this19 = c.parent;
							if(_this19._manuallyPaused) {
								tmp13 = true;
							} else if(_this19.parent != null) {
								var _this20 = _this19.parent;
								tmp13 = _this20._manuallyPaused ? true : _this20.parent != null && _this20.parent.isPaused();
							} else {
								tmp13 = false;
							}
						} else {
							tmp13 = false;
						}
						if(!tmp13 && !c.destroyed) {
							var _g_arr2 = c.children;
							var _g_i2 = 0;
							while(_g_i2 < _g_arr2.nalloc) {
								var c1 = _g_arr2.values[_g_i2++];
								dn_Process._doPreUpdate(c1,c.utmod);
							}
						}
					}
				}
			}
		}
	}
	var _g1_arr = dn_Process.ROOTS;
	var _g1_i = 0;
	while(_g1_i < _g1_arr.nalloc) {
		var p = _g1_arr.values[_g1_i++];
		dn_Process._doMainUpdate(p);
	}
	var _g2_arr = dn_Process.ROOTS;
	var _g2_i = 0;
	while(_g2_i < _g2_arr.nalloc) {
		var p = _g2_arr.values[_g2_i++];
		dn_Process._doFixedUpdate(p);
	}
	var _g3_arr = dn_Process.ROOTS;
	var _g3_i = 0;
	while(_g3_i < _g3_arr.nalloc) {
		var p = _g3_arr.values[_g3_i++];
		var tmp;
		if(p._manuallyPaused) {
			tmp = true;
		} else if(p.parent != null) {
			var _this = p.parent;
			tmp = _this._manuallyPaused ? true : _this.parent != null && _this.parent.isPaused();
		} else {
			tmp = false;
		}
		if(!tmp && !p.destroyed) {
			var id = "post";
			if(dn_Process.PROFILING) {
				var id1;
				if(p.name != null) {
					id1 = p.name;
				} else {
					if(p._cachedClassName == null) {
						var c = js_Boot.getClass(p);
						p._cachedClassName = c.__name__;
					}
					id1 = p._cachedClassName;
				}
				id = id1 + "." + id;
				p.tmpProfilerTimes.h[id] = HxOverrides.now() / 1000;
			}
			p.postUpdate();
			var id2 = "post";
			if(dn_Process.PROFILING) {
				var id3;
				if(p.name != null) {
					id3 = p.name;
				} else {
					if(p._cachedClassName == null) {
						var c1 = js_Boot.getClass(p);
						p._cachedClassName = c1.__name__;
					}
					id3 = p._cachedClassName;
				}
				id2 = id3 + "." + id2;
				if(Object.prototype.hasOwnProperty.call(p.tmpProfilerTimes.h,id2)) {
					var t = HxOverrides.now() / 1000 - p.tmpProfilerTimes.h[id2];
					var _this1 = p.tmpProfilerTimes;
					if(Object.prototype.hasOwnProperty.call(_this1.h,id2)) {
						delete(_this1.h[id2]);
					}
					if(!Object.prototype.hasOwnProperty.call(dn_Process.PROFILER_TIMES.h,id2)) {
						dn_Process.PROFILER_TIMES.h[id2] = t;
					} else {
						dn_Process.PROFILER_TIMES.h[id2] += t;
					}
				}
			}
			if(!p.destroyed) {
				var _g_arr = p.children;
				var _g_i = 0;
				while(_g_i < _g_arr.nalloc) {
					var c2 = _g_arr.values[_g_i++];
					var tmp1;
					if(c2._manuallyPaused) {
						tmp1 = true;
					} else if(c2.parent != null) {
						var _this2 = c2.parent;
						if(_this2._manuallyPaused) {
							tmp1 = true;
						} else if(_this2.parent != null) {
							var _this3 = _this2.parent;
							tmp1 = _this3._manuallyPaused ? true : _this3.parent != null && _this3.parent.isPaused();
						} else {
							tmp1 = false;
						}
					} else {
						tmp1 = false;
					}
					if(!tmp1 && !c2.destroyed) {
						var id4 = "post";
						if(dn_Process.PROFILING) {
							var id5;
							if(c2.name != null) {
								id5 = c2.name;
							} else {
								if(c2._cachedClassName == null) {
									var c3 = js_Boot.getClass(c2);
									c2._cachedClassName = c3.__name__;
								}
								id5 = c2._cachedClassName;
							}
							id4 = id5 + "." + id4;
							c2.tmpProfilerTimes.h[id4] = HxOverrides.now() / 1000;
						}
						c2.postUpdate();
						var id6 = "post";
						if(dn_Process.PROFILING) {
							var id7;
							if(c2.name != null) {
								id7 = c2.name;
							} else {
								if(c2._cachedClassName == null) {
									var c4 = js_Boot.getClass(c2);
									c2._cachedClassName = c4.__name__;
								}
								id7 = c2._cachedClassName;
							}
							id6 = id7 + "." + id6;
							if(Object.prototype.hasOwnProperty.call(c2.tmpProfilerTimes.h,id6)) {
								var t1 = HxOverrides.now() / 1000 - c2.tmpProfilerTimes.h[id6];
								var _this4 = c2.tmpProfilerTimes;
								if(Object.prototype.hasOwnProperty.call(_this4.h,id6)) {
									delete(_this4.h[id6]);
								}
								if(!Object.prototype.hasOwnProperty.call(dn_Process.PROFILER_TIMES.h,id6)) {
									dn_Process.PROFILER_TIMES.h[id6] = t1;
								} else {
									dn_Process.PROFILER_TIMES.h[id6] += t1;
								}
							}
						}
						if(!c2.destroyed) {
							var _g_arr1 = c2.children;
							var _g_i1 = 0;
							while(_g_i1 < _g_arr1.nalloc) {
								var c5 = _g_arr1.values[_g_i1++];
								dn_Process._doPostUpdate(c5);
							}
						}
					}
				}
			}
		}
	}
	if(dn_Process.RESIZE_REQUESTED) {
		dn_Process.RESIZE_REQUESTED = false;
		var _g4_arr = dn_Process.ROOTS;
		var _g4_i = 0;
		while(_g4_i < _g4_arr.nalloc) {
			var p = _g4_arr.values[_g4_i++];
			if(!p.destroyed) {
				p.onResize();
				var _g_arr = p.children;
				var _g_i = 0;
				while(_g_i < _g_arr.nalloc) {
					var p1 = _g_arr.values[_g_i++];
					if(!p1.destroyed) {
						p1.onResize();
						var _g_arr1 = p1.children;
						var _g_i1 = 0;
						while(_g_i1 < _g_arr1.nalloc) {
							var p2 = _g_arr1.values[_g_i1++];
							dn_Process._resizeProcess(p2);
						}
					}
				}
			}
		}
	}
	dn_Process._garbageCollector(dn_Process.ROOTS);
	if(dn_Process.END_OF_FRAME_CALLBACKS.nalloc > 0) {
		var _g4_arr = dn_Process.END_OF_FRAME_CALLBACKS;
		var _g4_i = 0;
		while(_g4_i < _g4_arr.nalloc) {
			var cb = _g4_arr.values[_g4_i++];
			cb();
		}
		dn_Process.END_OF_FRAME_CALLBACKS.nalloc = 0;
	}
};
dn_Process.resizeAll = function(immediately) {
	if(immediately == null) {
		immediately = false;
	}
	if(immediately) {
		var _g_arr = dn_Process.ROOTS;
		var _g_i = 0;
		while(_g_i < _g_arr.nalloc) {
			var p = _g_arr.values[_g_i++];
			if(!p.destroyed) {
				p.onResize();
				var _g_arr1 = p.children;
				var _g_i1 = 0;
				while(_g_i1 < _g_arr1.nalloc) {
					var p1 = _g_arr1.values[_g_i1++];
					if(!p1.destroyed) {
						p1.onResize();
						var _g_arr2 = p1.children;
						var _g_i2 = 0;
						while(_g_i2 < _g_arr2.nalloc) {
							var p2 = _g_arr2.values[_g_i2++];
							dn_Process._resizeProcess(p2);
						}
					}
				}
			}
		}
	} else {
		dn_Process.RESIZE_REQUESTED = true;
	}
};
dn_Process.prototype = {
	init: function() {
		this.uniqId = dn_Process.UNIQ_ID++;
		this.children = new dn_struct_FixedArray(null,dn_Process.MAX_PROCESSES);
		this._manuallyPaused = false;
		this.destroyed = false;
		this.ftime = 0;
		this.uftime = 0;
		this.utmod = 1;
		this.baseTimeMul = 1;
		this.cd = new dn_Cooldown(this.getDefaultFrameRate());
		this.delayer = new dn_Delayer(this.getDefaultFrameRate());
		this.tw = new dn_Tweenie(this.getDefaultFrameRate());
		this.ucd = new dn_Cooldown(this.getDefaultFrameRate());
		this.udelayer = new dn_Delayer(this.getDefaultFrameRate());
	}
	,initOnceBeforeUpdate: function() {
	}
	,createRoot: function(ctx) {
		if(this.root != null) {
			throw haxe_Exception.thrown(Std.string(this) + ": root already created!");
		}
		if(ctx == null) {
			if(this.parent == null || this.parent.root == null) {
				throw haxe_Exception.thrown(Std.string(this) + ": context required");
			}
			ctx = this.parent.root;
		}
		this.root = new h2d_Layers(ctx);
		var tmp;
		if(this.name != null) {
			tmp = this.name;
		} else {
			if(this._cachedClassName == null) {
				var c = js_Boot.getClass(this);
				this._cachedClassName = c.__name__;
			}
			tmp = this._cachedClassName;
		}
		this.root.name = tmp;
	}
	,createRootInLayers: function(ctx,plan) {
		if(this.root != null) {
			throw haxe_Exception.thrown(Std.string(this) + ": root already exists");
		}
		this.root = new h2d_Layers();
		var tmp;
		if(this.name != null) {
			tmp = this.name;
		} else {
			if(this._cachedClassName == null) {
				var c = js_Boot.getClass(this);
				this._cachedClassName = c.__name__;
			}
			tmp = this._cachedClassName;
		}
		this.root.name = tmp;
		ctx.add(this.root,plan);
	}
	,preUpdate: function() {
	}
	,update: function() {
	}
	,fixedUpdate: function() {
	}
	,postUpdate: function() {
	}
	,onResize: function() {
	}
	,onDispose: function() {
	}
	,onUpdateCb: function() {
	}
	,onFixedUpdateCb: function() {
	}
	,onDisposeCb: function() {
	}
	,toString: function() {
		var tmp = "#" + this.uniqId + " ";
		var tmp1;
		if(this.name != null) {
			tmp1 = this.name;
		} else {
			if(this._cachedClassName == null) {
				var c = js_Boot.getClass(this);
				this._cachedClassName = c.__name__;
			}
			tmp1 = this._cachedClassName;
		}
		var tmp2;
		if(this._manuallyPaused) {
			tmp2 = true;
		} else if(this.parent != null) {
			var _this = this.parent;
			tmp2 = _this._manuallyPaused ? true : _this.parent != null && _this.parent.isPaused();
		} else {
			tmp2 = false;
		}
		return tmp + tmp1 + (tmp2 ? " [PAUSED]" : "");
	}
	,secToFrames: function(v) {
		return v * this.getDefaultFrameRate();
	}
	,getDefaultFrameRate: function() {
		var x = hxd_Timer.wantedFPS;
		return (x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0;
	}
	,getComputedTimeMultiplier: function() {
		if(this.ignoreTimeMultipliers) {
			return 1.0;
		} else {
			var y = this.baseTimeMul * (this.parent == null ? 1 : this.parent.getComputedTimeMultiplier());
			if(0 > y) {
				return 0;
			} else {
				return y;
			}
		}
	}
	,isPaused: function() {
		if(this._manuallyPaused) {
			return true;
		} else if(this.parent != null) {
			return this.parent.isPaused();
		} else {
			return false;
		}
	}
	,pause: function() {
		this._manuallyPaused = true;
	}
	,resume: function() {
		this._manuallyPaused = false;
	}
	,addChild: function(p) {
		if(p.parent == null) {
			dn_Process.ROOTS.remove(p);
		} else {
			p.parent.children.remove(p);
		}
		p.parent = this;
		var _this = this.children;
		if(_this.nalloc >= _this.values.length) {
			throw haxe_Exception.thrown("FixedArray limit reached (" + _this.values.length + ")");
		}
		_this.values[_this.nalloc] = p;
		_this.nalloc++;
	}
	,createChildProcess: function(onUpdate,onDispose,runUpdateImmediatly) {
		if(runUpdateImmediatly == null) {
			runUpdateImmediatly = false;
		}
		var p = new dn_Process(this);
		if(onUpdate != null) {
			p.onUpdateCb = function() {
				onUpdate(p);
			};
		}
		if(onDispose != null) {
			p.onDisposeCb = function() {
				onDispose(p);
			};
		}
		if(runUpdateImmediatly) {
			var tmp;
			if(p._manuallyPaused) {
				tmp = true;
			} else if(p.parent != null) {
				var _this = p.parent;
				tmp = _this._manuallyPaused ? true : _this.parent != null && _this.parent.isPaused();
			} else {
				tmp = false;
			}
			if(!tmp && !p.destroyed) {
				p.utmod = 1;
				p.ftime += p.utmod * p.getComputedTimeMultiplier();
				p.uftime += p.utmod;
				p.delayer.update(p.utmod * p.getComputedTimeMultiplier());
				var tmp;
				if(p._manuallyPaused) {
					tmp = true;
				} else if(p.parent != null) {
					var _this = p.parent;
					tmp = _this._manuallyPaused ? true : _this.parent != null && _this.parent.isPaused();
				} else {
					tmp = false;
				}
				if(!tmp && !p.destroyed) {
					p.udelayer.update(p.utmod);
				}
				var tmp;
				if(p._manuallyPaused) {
					tmp = true;
				} else if(p.parent != null) {
					var _this = p.parent;
					tmp = _this._manuallyPaused ? true : _this.parent != null && _this.parent.isPaused();
				} else {
					tmp = false;
				}
				if(!tmp && !p.destroyed) {
					p.cd.update(p.utmod * p.getComputedTimeMultiplier());
				}
				var tmp;
				if(p._manuallyPaused) {
					tmp = true;
				} else if(p.parent != null) {
					var _this = p.parent;
					tmp = _this._manuallyPaused ? true : _this.parent != null && _this.parent.isPaused();
				} else {
					tmp = false;
				}
				if(!tmp && !p.destroyed) {
					p.ucd.update(p.utmod);
				}
				var tmp;
				if(p._manuallyPaused) {
					tmp = true;
				} else if(p.parent != null) {
					var _this = p.parent;
					tmp = _this._manuallyPaused ? true : _this.parent != null && _this.parent.isPaused();
				} else {
					tmp = false;
				}
				if(!tmp && !p.destroyed) {
					p.tw.update(p.utmod * p.getComputedTimeMultiplier());
				}
				var tmp;
				if(p._manuallyPaused) {
					tmp = true;
				} else if(p.parent != null) {
					var _this = p.parent;
					tmp = _this._manuallyPaused ? true : _this.parent != null && _this.parent.isPaused();
				} else {
					tmp = false;
				}
				if(!tmp && !p.destroyed) {
					if(!p._initOnceDone) {
						p.initOnceBeforeUpdate();
						p._initOnceDone = true;
					}
					p.preUpdate();
				}
				var tmp;
				if(p._manuallyPaused) {
					tmp = true;
				} else if(p.parent != null) {
					var _this = p.parent;
					tmp = _this._manuallyPaused ? true : _this.parent != null && _this.parent.isPaused();
				} else {
					tmp = false;
				}
				if(!tmp && !p.destroyed) {
					var _g_arr = p.children;
					var _g_i = 0;
					while(_g_i < _g_arr.nalloc) {
						var c = _g_arr.values[_g_i++];
						var utmod = p.utmod;
						var tmp;
						if(c._manuallyPaused) {
							tmp = true;
						} else if(c.parent != null) {
							var _this = c.parent;
							tmp = _this._manuallyPaused ? true : _this.parent != null && _this.parent.isPaused();
						} else {
							tmp = false;
						}
						if(!tmp && !c.destroyed) {
							c.utmod = utmod;
							c.ftime += c.utmod * c.getComputedTimeMultiplier();
							c.uftime += c.utmod;
							c.delayer.update(c.utmod * c.getComputedTimeMultiplier());
							var tmp1;
							if(c._manuallyPaused) {
								tmp1 = true;
							} else if(c.parent != null) {
								var _this1 = c.parent;
								tmp1 = _this1._manuallyPaused ? true : _this1.parent != null && _this1.parent.isPaused();
							} else {
								tmp1 = false;
							}
							if(!tmp1 && !c.destroyed) {
								c.udelayer.update(c.utmod);
							}
							var tmp2;
							if(c._manuallyPaused) {
								tmp2 = true;
							} else if(c.parent != null) {
								var _this2 = c.parent;
								tmp2 = _this2._manuallyPaused ? true : _this2.parent != null && _this2.parent.isPaused();
							} else {
								tmp2 = false;
							}
							if(!tmp2 && !c.destroyed) {
								c.cd.update(c.utmod * c.getComputedTimeMultiplier());
							}
							var tmp3;
							if(c._manuallyPaused) {
								tmp3 = true;
							} else if(c.parent != null) {
								var _this3 = c.parent;
								tmp3 = _this3._manuallyPaused ? true : _this3.parent != null && _this3.parent.isPaused();
							} else {
								tmp3 = false;
							}
							if(!tmp3 && !c.destroyed) {
								c.ucd.update(c.utmod);
							}
							var tmp4;
							if(c._manuallyPaused) {
								tmp4 = true;
							} else if(c.parent != null) {
								var _this4 = c.parent;
								tmp4 = _this4._manuallyPaused ? true : _this4.parent != null && _this4.parent.isPaused();
							} else {
								tmp4 = false;
							}
							if(!tmp4 && !c.destroyed) {
								c.tw.update(c.utmod * c.getComputedTimeMultiplier());
							}
							var tmp5;
							if(c._manuallyPaused) {
								tmp5 = true;
							} else if(c.parent != null) {
								var _this5 = c.parent;
								tmp5 = _this5._manuallyPaused ? true : _this5.parent != null && _this5.parent.isPaused();
							} else {
								tmp5 = false;
							}
							if(!tmp5 && !c.destroyed) {
								if(!c._initOnceDone) {
									c.initOnceBeforeUpdate();
									c._initOnceDone = true;
								}
								c.preUpdate();
							}
							var tmp6;
							if(c._manuallyPaused) {
								tmp6 = true;
							} else if(c.parent != null) {
								var _this6 = c.parent;
								tmp6 = _this6._manuallyPaused ? true : _this6.parent != null && _this6.parent.isPaused();
							} else {
								tmp6 = false;
							}
							if(!tmp6 && !c.destroyed) {
								var _g_arr1 = c.children;
								var _g_i1 = 0;
								while(_g_i1 < _g_arr1.nalloc) {
									var c1 = _g_arr1.values[_g_i1++];
									dn_Process._doPreUpdate(c1,c.utmod);
								}
							}
						}
					}
				}
			}
			dn_Process._doMainUpdate(p);
		}
		return p;
	}
	,__class__: dn_Process
};
var Entity = function(x,y) {
	dn_Process.call(this,Game.ME);
	this.collides = false;
	this.dx = this.dy = 0;
	this.frict = 0.85;
	this.radius = 5;
	this.initLife(1);
	this.spd = 1;
	this.spr = new dn_heaps_slib_HSprite(Assets.lib,"enemy");
	var xRatio = 0.5;
	var yRatio = 0.5;
	if(yRatio == null) {
		yRatio = 0.5;
	}
	if(xRatio == null) {
		xRatio = 0.5;
	}
	var _this = this.spr.pivot;
	_this.centerFactorX = xRatio;
	_this.centerFactorY = yRatio;
	_this.usingFactor = true;
	_this.isUndefined = false;
	Game.ME.scroller.add(this.spr,Const.DP_ENTITY);
	this.setPosition(x,y);
};
$hxClasses["Entity"] = Entity;
Entity.__name__ = "Entity";
Entity.__super__ = dn_Process;
Entity.prototype = $extend(dn_Process.prototype,{
	is: function(t) {
		return js_Boot.__instanceof(this,t);
	}
	,initLife: function(v) {
		this.life = this.maxLife = v;
	}
	,hit: function(dmg) {
		if(dmg <= 0) {
			var tmp;
			if(!this.cd.fastCheck.h.hasOwnProperty(92274688)) {
				var _this = this.cd;
				var tmp1;
				if(_this.fastCheck.h.hasOwnProperty(96468992)) {
					tmp1 = true;
				} else {
					var onComplete = null;
					var cur = _this._getCdObject(96468992);
					if(!(cur != null && 8 < cur.frames && false)) {
						_this.fastCheck.h[96468992] = true;
						if(cur != null) {
							cur.frames = 8;
							cur.initial = 8;
						} else {
							var _this1 = _this.cds;
							if(_this1.nalloc >= _this1.size) {
								throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
							}
							var e = _this1.pool[_this1.nalloc++];
							e.recycle();
							var cd = e;
							cd.k = 96468992;
							cd.frames = 8;
							cd.initial = 8;
						}
						if(onComplete != null) {
							var cd = _this._getCdObject(96468992);
							if(cd == null) {
								throw haxe_Exception.thrown("cannot bind onComplete(" + 96468992 + "): cooldown " + 96468992 + " isn't running");
							}
							cd.onCompleteOnce = onComplete;
						}
					}
					tmp1 = false;
				}
				tmp = !tmp1;
			} else {
				tmp = false;
			}
			if(tmp) {
				var s = Assets.SBANK.resist01();
				var x = this.x;
				var y = this.y;
				var vol = 0.3;
				if(vol == null) {
					vol = 1.0;
				}
				s.play(null,vol);
				Game.ME.fx.resist(this);
			}
		} else {
			var _this = this.cd;
			var allowLower = true;
			var onComplete = null;
			if(allowLower == null) {
				allowLower = true;
			}
			var cur = _this._getCdObject(92274688);
			if(!(cur != null && 4 < cur.frames && !allowLower)) {
				_this.fastCheck.h[92274688] = true;
				if(cur != null) {
					cur.frames = 4;
					cur.initial = 4;
				} else {
					var _this1 = _this.cds;
					if(_this1.nalloc >= _this1.size) {
						throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
					}
					var e = _this1.pool[_this1.nalloc++];
					e.recycle();
					var cd = e;
					cd.k = 92274688;
					cd.frames = 4;
					cd.initial = 4;
				}
				if(onComplete != null) {
					var cd = _this._getCdObject(92274688);
					if(cd == null) {
						throw haxe_Exception.thrown("cannot bind onComplete(" + 92274688 + "): cooldown " + 92274688 + " isn't running");
					}
					cd.onCompleteOnce = onComplete;
				}
			}
			this.life -= dmg;
		}
		if(this.life <= 0) {
			this.onDie();
		}
	}
	,onDie: function() {
		this.destroyed = true;
	}
	,setPosition: function(x,y) {
		this.x = x;
		this.y = y;
	}
	,onDispose: function() {
		dn_Process.prototype.onDispose.call(this);
		var _this = this.spr;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
	}
	,isColliding: function(e) {
		var d = this.radius + e.radius;
		var ax = this.x;
		var ay = this.y;
		var bx = e.x;
		var by = e.y;
		return (ax - bx) * (ax - bx) + (ay - by) * (ay - by) <= d * d;
	}
	,postUpdate: function() {
		dn_Process.prototype.postUpdate.call(this);
		this.updateRender();
	}
	,updateRender: function() {
		var _this = this.spr;
		_this.posChanged = true;
		_this.x = this.x | 0;
		var _this = this.spr;
		_this.posChanged = true;
		_this.y = this.y | 0;
	}
	,update: function() {
		dn_Process.prototype.update.call(this);
		if(this.collides) {
			var tmp;
			if(this.x / Const.GRID - (this.x / Const.GRID | 0) <= 0.3 && this.dx < 0) {
				var _this = Game.ME.level;
				var cx = (this.x / Const.GRID | 0) - 1;
				var cy = this.y / Const.GRID | 0;
				tmp = cx < 0 || cy < 0 || cx >= _this.wid || cy >= _this.hei ? true : _this.colMap[cx][cy];
			} else {
				tmp = false;
			}
			if(tmp) {
				this.dx = 0;
			}
			var tmp;
			if(this.x / Const.GRID - (this.x / Const.GRID | 0) >= 0.7 && this.dx > 0) {
				var _this = Game.ME.level;
				var cx = (this.x / Const.GRID | 0) + 1;
				var cy = this.y / Const.GRID | 0;
				tmp = cx < 0 || cy < 0 || cx >= _this.wid || cy >= _this.hei ? true : _this.colMap[cx][cy];
			} else {
				tmp = false;
			}
			if(tmp) {
				this.dx = 0;
			}
			var tmp;
			if(this.y / Const.GRID - (this.y / Const.GRID | 0) <= 0.3 && this.dy < 0) {
				var _this = Game.ME.level;
				var cx = this.x / Const.GRID | 0;
				var cy = (this.y / Const.GRID | 0) - 1;
				tmp = cx < 0 || cy < 0 || cx >= _this.wid || cy >= _this.hei ? true : _this.colMap[cx][cy];
			} else {
				tmp = false;
			}
			if(tmp) {
				this.dy = 0;
			}
			var tmp;
			if(this.y / Const.GRID - (this.y / Const.GRID | 0) >= 0.7 && this.dy > 0) {
				var _this = Game.ME.level;
				var cx = this.x / Const.GRID | 0;
				var cy = (this.y / Const.GRID | 0) + 1;
				tmp = cx < 0 || cy < 0 || cx >= _this.wid || cy >= _this.hei ? true : _this.colMap[cx][cy];
			} else {
				tmp = false;
			}
			if(tmp) {
				this.dy = 0;
			}
		}
		this.x += this.dx * (this.utmod * this.getComputedTimeMultiplier());
		this.dx *= Math.pow(this.frict,this.utmod * this.getComputedTimeMultiplier());
		this.y += this.dy * (this.utmod * this.getComputedTimeMultiplier());
		this.dy *= Math.pow(this.frict,this.utmod * this.getComputedTimeMultiplier());
		var x = this.dx;
		if((x < 0 ? -x : x) <= 0.05 * (this.utmod * this.getComputedTimeMultiplier())) {
			this.dx = 0;
		}
		var x = this.dy;
		if((x < 0 ? -x : x) <= 0.05 * (this.utmod * this.getComputedTimeMultiplier())) {
			this.dy = 0;
		}
	}
	,__class__: Entity
});
var Fx = function() {
	dn_Process.call(this,Game.ME);
	var _this = Assets.lib;
	if(_this.pages.length > 1) {
		throw haxe_Exception.thrown("Cannot access tile when there is multiple pages");
	}
	this.addSb = new h2d_SpriteBatch(_this.pages[0]);
	Game.ME.scroller.add(this.addSb,Const.DP_FX);
	this.addSb.blendMode = h2d_BlendMode.Add;
	this.addSb.hasRotationScale = true;
	var _this = Assets.lib;
	if(_this.pages.length > 1) {
		throw haxe_Exception.thrown("Cannot access tile when there is multiple pages");
	}
	this.normalSb = new h2d_SpriteBatch(_this.pages[0]);
	Game.ME.scroller.add(this.normalSb,Const.DP_FX);
	this.normalSb.hasRotationScale = true;
	var _this = Assets.lib;
	if(_this.pages.length > 1) {
		throw haxe_Exception.thrown("Cannot access tile when there is multiple pages");
	}
	this.pool = new dn_heaps_ParticlePool(_this.pages[0],1024,Const.FPS);
};
$hxClasses["Fx"] = Fx;
Fx.__name__ = "Fx";
Fx.__super__ = dn_Process;
Fx.prototype = $extend(dn_Process.prototype,{
	onDispose: function() {
		dn_Process.prototype.onDispose.call(this);
		this.pool.dispose();
		var _this = this.addSb;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
		var _this = this.normalSb;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
	}
	,alloc: function(t,x,y,additive) {
		if(additive == null) {
			additive = true;
		}
		var _this = this.pool;
		var sb = additive ? this.addSb : this.normalSb;
		var p;
		if(_this.nalloc < _this.all.length) {
			var p1 = _this.all[_this.nalloc];
			var x1 = x;
			var y1 = y;
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			if(t != null) {
				p1.t.setPosition(t.x,t.y);
				p1.t.setSize(t.width,t.height);
				p1.t.dx = t.dx;
				p1.t.dy = t.dy;
				p1.t.setTexture(t.innerTex);
			}
			if(p1.batch != sb) {
				if(p1.batch != null) {
					p1.remove();
				}
				if(sb != null) {
					sb.add(p1);
				}
			}
			p1.x = x1;
			p1.y = y1;
			p1.scaleX = 1;
			p1.scaleY = 1;
			p1.rotation = 0;
			p1.r = p1.g = p1.b = p1.a = 1;
			p1.a = 1;
			p1.visible = true;
			p1.data0 = p1.data1 = p1.data2 = p1.data3 = p1.data4 = p1.data5 = p1.data6 = p1.data7 = NaN;
			p1.customTmod = null;
			p1.animId = null;
			p1.animLib = null;
			p1.scaleMul = 1;
			p1.scaleXMul = p1.scaleYMul = 1;
			p1.dsFrict = 1;
			p1.alphaFlicker = 0;
			p1.fromColor = 0;
			p1.dColor = p1.rColor = NaN;
			p1.stamp = HxOverrides.now() / 1000;
			var xr = 0.5;
			var yr = 0.5;
			var _this1 = p1.t;
			var px = xr;
			var py = yr;
			if(py == null) {
				py = 0.5;
			}
			if(px == null) {
				px = 0.5;
			}
			_this1.dx = -(px * _this1.width);
			_this1.dy = -(py * _this1.height);
			p1.animXr = xr;
			p1.animYr = yr;
			p1.killed = false;
			if(p1.a > 1) {
				p1.a = 1;
			}
			p1.maxAlpha = 1;
			p1.dx = p1.dy = 0;
			p1.da = 0;
			p1.dr = 0;
			p1.ds = p1.dsX = p1.dsY = 0;
			p1.gx = p1.gy = 0;
			p1.frictX = p1.frictY = 1;
			p1.drFrict = 1;
			p1.fadeOutSpeed = 0.1;
			p1.bounceMul = 0.85;
			var d = 0 * p1.fps;
			if(0 > d) {
				d = 0;
			}
			p1.visible = !p1.killed && d <= 0;
			p1.delayF = d;
			var x1 = p1.fps;
			p1.rLifeF = p1.maxLifeF = x1 > 0 ? x1 : 0;
			p1.bounds = dn_heaps_HParticle.DEFAULT_BOUNDS;
			p1.killOnLifeOut = false;
			p1.groundY = null;
			p1.groupId = null;
			p1.autoRotateSpeed = 0;
			p1.delayedCbTimeS = 0;
			p1.onStart = null;
			p1.onKillP = null;
			p1.onKill = null;
			p1.onBounce = null;
			p1.onUpdate = null;
			p1.onFadeOutStart = null;
			p1.onTouchGround = null;
			p1.onLeaveBounds = null;
			p1.delayedCb = null;
			p1.poolIdx = _this.nalloc;
			_this.nalloc++;
			p = p1;
		} else {
			var best = null;
			var _g = 0;
			var _g1 = _this.all;
			while(_g < _g1.length) {
				var p1 = _g1[_g];
				++_g;
				if(best == null || p1.stamp <= best.stamp) {
					best = p1;
				}
			}
			var any = false;
			if(best.onKillP != null) {
				var cb = best.onKillP;
				best.onKillP = null;
				cb(best);
				any = true;
			}
			if(best.onKill != null) {
				var cb = best.onKill;
				best.onKill = null;
				cb();
				any = true;
			}
			var x1 = x;
			var y1 = y;
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			if(t != null) {
				best.t.setPosition(t.x,t.y);
				best.t.setSize(t.width,t.height);
				best.t.dx = t.dx;
				best.t.dy = t.dy;
				best.t.setTexture(t.innerTex);
			}
			if(best.batch != sb) {
				if(best.batch != null) {
					best.remove();
				}
				if(sb != null) {
					sb.add(best);
				}
			}
			best.x = x1;
			best.y = y1;
			best.scaleX = 1;
			best.scaleY = 1;
			best.rotation = 0;
			best.r = best.g = best.b = best.a = 1;
			best.a = 1;
			best.visible = true;
			best.data0 = best.data1 = best.data2 = best.data3 = best.data4 = best.data5 = best.data6 = best.data7 = NaN;
			best.customTmod = null;
			best.animId = null;
			best.animLib = null;
			best.scaleMul = 1;
			best.scaleXMul = best.scaleYMul = 1;
			best.dsFrict = 1;
			best.alphaFlicker = 0;
			best.fromColor = 0;
			best.dColor = best.rColor = NaN;
			best.stamp = HxOverrides.now() / 1000;
			var xr = 0.5;
			var yr = 0.5;
			var _this = best.t;
			var px = xr;
			var py = yr;
			if(py == null) {
				py = 0.5;
			}
			if(px == null) {
				px = 0.5;
			}
			_this.dx = -(px * _this.width);
			_this.dy = -(py * _this.height);
			best.animXr = xr;
			best.animYr = yr;
			best.killed = false;
			if(best.a > 1) {
				best.a = 1;
			}
			best.maxAlpha = 1;
			best.dx = best.dy = 0;
			best.da = 0;
			best.dr = 0;
			best.ds = best.dsX = best.dsY = 0;
			best.gx = best.gy = 0;
			best.frictX = best.frictY = 1;
			best.drFrict = 1;
			best.fadeOutSpeed = 0.1;
			best.bounceMul = 0.85;
			var d = 0 * best.fps;
			if(0 > d) {
				d = 0;
			}
			best.visible = !best.killed && d <= 0;
			best.delayF = d;
			var x = best.fps;
			best.rLifeF = best.maxLifeF = x > 0 ? x : 0;
			best.bounds = dn_heaps_HParticle.DEFAULT_BOUNDS;
			best.killOnLifeOut = false;
			best.groundY = null;
			best.groupId = null;
			best.autoRotateSpeed = 0;
			best.delayedCbTimeS = 0;
			best.onStart = null;
			best.onKillP = null;
			best.onKill = null;
			best.onBounce = null;
			best.onUpdate = null;
			best.onFadeOutStart = null;
			best.onTouchGround = null;
			best.onLeaveBounds = null;
			best.delayedCb = null;
			p = best;
		}
		var xr = 0.5;
		var yr = 0.5;
		var _this = p.t;
		var px = xr;
		var py = yr;
		if(py == null) {
			py = 0.5;
		}
		if(px == null) {
			px = 0.5;
		}
		_this.dx = -(px * _this.width);
		_this.dy = -(py * _this.height);
		p.animXr = xr;
		p.animYr = yr;
		return p;
	}
	,shoot: function(x,y,a) {
		var _this = Assets.lib;
		var frame = 0;
		if(frame == null) {
			frame = 0;
		}
		var g = _this.groups.h["blueGlow"];
		var fd = g == null ? null : g.frames[frame];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "blueGlow" + "#" + 0 + "!");
		}
		var t = _this.pages[fd.page].clone();
		var frame = 0;
		var px = 0.0;
		var py = 0.0;
		if(py == null) {
			py = 0.0;
		}
		if(px == null) {
			px = 0.0;
		}
		if(frame == null) {
			frame = 0;
		}
		var frame1 = frame;
		if(frame1 == null) {
			frame1 = 0;
		}
		var g = _this.groups.h["blueGlow"];
		var fd = g == null ? null : g.frames[frame1];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "blueGlow" + "#" + frame + "!");
		}
		t.setPosition(fd.x,fd.y);
		t.setSize(fd.wid,fd.hei);
		t.dx = -(fd.realWid * px + fd.realX | 0);
		t.dy = -(fd.realHei * py + fd.realY | 0);
		var p = this.alloc(t,x,y);
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		p.scaleX = p.scaleY = sign ? (1.5 + Math.random() * 1.5) * (Std.random(2) * 2 - 1) : 1.5 + Math.random() * 1.5;
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		p.a = sign ? (0.2 + Math.random() * 0.3) * (Std.random(2) * 2 - 1) : 0.2 + Math.random() * 0.3;
		p.ds = 0.2;
		p.scaleMul = 0.93;
		p.rLifeF = p.maxLifeF = 0;
		var _this = Assets.lib;
		var frame = 0;
		if(frame == null) {
			frame = 0;
		}
		var g = _this.groups.h["whiteSmoke"];
		var fd = g == null ? null : g.frames[frame];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "whiteSmoke" + "#" + 0 + "!");
		}
		var t = _this.pages[fd.page].clone();
		var frame = 0;
		var px = 0.0;
		var py = 0.0;
		if(py == null) {
			py = 0.0;
		}
		if(px == null) {
			px = 0.0;
		}
		if(frame == null) {
			frame = 0;
		}
		var frame1 = frame;
		if(frame1 == null) {
			frame1 = 0;
		}
		var g = _this.groups.h["whiteSmoke"];
		var fd = g == null ? null : g.frames[frame1];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "whiteSmoke" + "#" + frame + "!");
		}
		t.setPosition(fd.x,fd.y);
		t.setSize(fd.wid,fd.hei);
		t.dx = -(fd.realWid * px + fd.realX | 0);
		t.dy = -(fd.realHei * py + fd.realY | 0);
		var sign = true;
		if(sign == null) {
			sign = false;
		}
		var p = sign ? Math.random() * 10 * (Std.random(2) * 2 - 1) : Math.random() * 10;
		var sign = true;
		if(sign == null) {
			sign = false;
		}
		var p1 = this.alloc(t,x + p,y + (sign ? Math.random() * 10 * (Std.random(2) * 2 - 1) : Math.random() * 10),true);
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		p1.scaleX = p1.scaleY = sign ? (1 + Math.random() * 0.5) * (Std.random(2) * 2 - 1) : 1 + Math.random() * 0.5;
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		p1.rotation = sign ? Math.random() * 6.28 * (Std.random(2) * 2 - 1) : Math.random() * 6.28;
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		p1.a = sign ? (0.1 + Math.random() * 0.1) * (Std.random(2) * 2 - 1) : 0.1 + Math.random() * 0.1;
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		var spd = sign ? (0.5 + Math.random() * 2.5) * (Std.random(2) * 2 - 1) : 0.5 + Math.random() * 2.5;
		p1.dx = Math.cos(a) * spd;
		p1.dy = Math.sin(a) * spd;
		p1.frictX = p1.frictY = 0.96;
		var sign = true;
		if(sign == null) {
			sign = false;
		}
		p1.dr = sign ? Math.random() * 0.02 * (Std.random(2) * 2 - 1) : Math.random() * 0.02;
		p1.fadeOutSpeed = 0.01;
		p1.scaleMul = 0.98;
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		var v = sign ? (20 + Math.random() * 20) * (Std.random(2) * 2 - 1) : 20 + Math.random() * 20;
		p1.rLifeF = p1.maxLifeF = v > 0 ? v : 0;
	}
	,hit: function(x,y) {
		var _this = Assets.lib;
		var frame = 0;
		if(frame == null) {
			frame = 0;
		}
		var g = _this.groups.h["redGlow"];
		var fd = g == null ? null : g.frames[frame];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "redGlow" + "#" + 0 + "!");
		}
		var t = _this.pages[fd.page].clone();
		var frame = 0;
		var px = 0.0;
		var py = 0.0;
		if(py == null) {
			py = 0.0;
		}
		if(px == null) {
			px = 0.0;
		}
		if(frame == null) {
			frame = 0;
		}
		var frame1 = frame;
		if(frame1 == null) {
			frame1 = 0;
		}
		var g = _this.groups.h["redGlow"];
		var fd = g == null ? null : g.frames[frame1];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "redGlow" + "#" + frame + "!");
		}
		t.setPosition(fd.x,fd.y);
		t.setSize(fd.wid,fd.hei);
		t.dx = -(fd.realWid * px + fd.realX | 0);
		t.dy = -(fd.realHei * py + fd.realY | 0);
		var p = this.alloc(t,x,y);
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		p.scaleX = p.scaleY = sign ? (2.5 + Math.random() * 1.5) * (Std.random(2) * 2 - 1) : 2.5 + Math.random() * 1.5;
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		p.a = sign ? (0.2 + Math.random() * 0.3) * (Std.random(2) * 2 - 1) : 0.2 + Math.random() * 0.3;
		p.ds = 0.2;
		p.scaleMul = 0.93;
		p.rLifeF = p.maxLifeF = 0;
		var _this = Assets.lib;
		var frame = 0;
		if(frame == null) {
			frame = 0;
		}
		var g = _this.groups.h["explosion"];
		var fd = g == null ? null : g.frames[frame];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "explosion" + "#" + 0 + "!");
		}
		var t = _this.pages[fd.page].clone();
		var frame = 0;
		var px = 0.0;
		var py = 0.0;
		if(py == null) {
			py = 0.0;
		}
		if(px == null) {
			px = 0.0;
		}
		if(frame == null) {
			frame = 0;
		}
		var frame1 = frame;
		if(frame1 == null) {
			frame1 = 0;
		}
		var g = _this.groups.h["explosion"];
		var fd = g == null ? null : g.frames[frame1];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "explosion" + "#" + frame + "!");
		}
		t.setPosition(fd.x,fd.y);
		t.setSize(fd.wid,fd.hei);
		t.dx = -(fd.realWid * px + fd.realX | 0);
		t.dy = -(fd.realHei * py + fd.realY | 0);
		var p = this.alloc(t,x,y,true);
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		p.scaleX = p.scaleY = sign ? (0.3 + Math.random() * 0.10000000000000003) * (Std.random(2) * 2 - 1) : 0.3 + Math.random() * 0.10000000000000003;
		p.a = 0.2;
		p.scaleMul = 1.005;
		p.rLifeF = p.maxLifeF = 1;
	}
	,stun: function(x,y) {
		var _this = Assets.lib;
		var frame = 0;
		if(frame == null) {
			frame = 0;
		}
		var g = _this.groups.h["blueGlow"];
		var fd = g == null ? null : g.frames[frame];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "blueGlow" + "#" + 0 + "!");
		}
		var t = _this.pages[fd.page].clone();
		var frame = 0;
		var px = 0.0;
		var py = 0.0;
		if(py == null) {
			py = 0.0;
		}
		if(px == null) {
			px = 0.0;
		}
		if(frame == null) {
			frame = 0;
		}
		var frame1 = frame;
		if(frame1 == null) {
			frame1 = 0;
		}
		var g = _this.groups.h["blueGlow"];
		var fd = g == null ? null : g.frames[frame1];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "blueGlow" + "#" + frame + "!");
		}
		t.setPosition(fd.x,fd.y);
		t.setSize(fd.wid,fd.hei);
		t.dx = -(fd.realWid * px + fd.realX | 0);
		t.dy = -(fd.realHei * py + fd.realY | 0);
		var p = this.alloc(t,x,y);
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		p.scaleX = p.scaleY = sign ? (2.5 + Math.random() * 1.5) * (Std.random(2) * 2 - 1) : 2.5 + Math.random() * 1.5;
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		p.a = sign ? (0.2 + Math.random() * 0.3) * (Std.random(2) * 2 - 1) : 0.2 + Math.random() * 0.3;
		p.ds = 0.4;
		p.dsFrict = 0.9;
		p.rLifeF = p.maxLifeF = 2;
	}
	,gibs: function(x,y,k,n) {
		if(n == null) {
			n = 30;
		}
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			var _this = Assets.lib;
			var rndFunc = null;
			if(!(k != null && Object.prototype.hasOwnProperty.call(_this.groups.h,k) && _this.groups.h[k].frames.length > 0)) {
				throw haxe_Exception.thrown("Unknown group " + k);
			}
			var frame = (rndFunc == null ? Std.random : rndFunc)((k == null ? _this.currentGroup : _this.groups.h[k]).frames.length);
			var px = 0.0;
			var py = 0.0;
			if(py == null) {
				py = 0.0;
			}
			if(px == null) {
				px = 0.0;
			}
			if(frame == null) {
				frame = 0;
			}
			var frame1 = frame;
			if(frame1 == null) {
				frame1 = 0;
			}
			var g = k == null ? _this.currentGroup : _this.groups.h[k];
			var fd = g == null ? null : g.frames[frame1];
			if(fd == null) {
				throw haxe_Exception.thrown("Unknown group " + k + "#" + frame + "!");
			}
			var t = _this.pages[fd.page].clone();
			var frame2 = frame;
			var px1 = px;
			var py1 = py;
			if(py1 == null) {
				py1 = 0.0;
			}
			if(px1 == null) {
				px1 = 0.0;
			}
			if(frame2 == null) {
				frame2 = 0;
			}
			var frame3 = frame2;
			if(frame3 == null) {
				frame3 = 0;
			}
			var g1 = k == null ? _this.currentGroup : _this.groups.h[k];
			var fd1 = g1 == null ? null : g1.frames[frame3];
			if(fd1 == null) {
				throw haxe_Exception.thrown("Unknown group " + k + "#" + frame2 + "!");
			}
			t.setPosition(fd1.x,fd1.y);
			t.setSize(fd1.wid,fd1.hei);
			t.dx = -(fd1.realWid * px1 + fd1.realX | 0);
			t.dy = -(fd1.realHei * py1 + fd1.realY | 0);
			var sign = true;
			if(sign == null) {
				sign = false;
			}
			var p = sign ? Math.random() * 10 * (Std.random(2) * 2 - 1) : Math.random() * 10;
			var sign1 = true;
			if(sign1 == null) {
				sign1 = false;
			}
			var p1 = [this.alloc(t,x + p,y + (sign1 ? Math.random() * 10 * (Std.random(2) * 2 - 1) : Math.random() * 10),false)];
			var sign2 = null;
			if(sign2 == null) {
				sign2 = false;
			}
			var v = sign2 ? (0.5 + Math.random() * 0.5) * (Std.random(2) * 2 - 1) : 0.5 + Math.random() * 0.5;
			p1[0].a = v;
			var sign3 = null;
			if(sign3 == null) {
				sign3 = false;
			}
			var v1 = sign3 ? (0.5 + Math.random()) * (Std.random(2) * 2 - 1) : 0.5 + Math.random();
			p1[0].scaleX = p1[0].scaleY = v1;
			var sign4 = true;
			if(sign4 == null) {
				sign4 = false;
			}
			var tmp = sign4 ? (1 + Math.random() * 3) * (Std.random(2) * 2 - 1) : 1 + Math.random() * 3;
			p1[0].dx = tmp;
			var tmp1;
			if(i <= 4) {
				var sign5 = null;
				if(sign5 == null) {
					sign5 = false;
				}
				tmp1 = -(sign5 ? (7 + Math.random() * 5) * (Std.random(2) * 2 - 1) : 7 + Math.random() * 5);
			} else {
				var sign6 = null;
				if(sign6 == null) {
					sign6 = false;
				}
				tmp1 = -(sign6 ? (2 + Math.random() * 4) * (Std.random(2) * 2 - 1) : 2 + Math.random() * 4);
			}
			p1[0].dy = tmp1;
			var sign7 = null;
			if(sign7 == null) {
				sign7 = false;
			}
			var tmp2 = sign7 ? (0.3 + Math.random() * 0.2) * (Std.random(2) * 2 - 1) : 0.3 + Math.random() * 0.2;
			p1[0].gy = tmp2;
			p1[0].frictX = p1[0].frictY = 0.95;
			var sign8 = null;
			if(sign8 == null) {
				sign8 = false;
			}
			var v2 = sign8 ? (30 + Math.random() * 60) * (Std.random(2) * 2 - 1) : 30 + Math.random() * 60;
			p1[0].rLifeF = p1[0].maxLifeF = v2 > 0 ? v2 : 0;
			var sign9 = null;
			if(sign9 == null) {
				sign9 = false;
			}
			var tmp3 = sign9 ? Math.random() * 6.28 * (Std.random(2) * 2 - 1) : Math.random() * 6.28;
			p1[0].rotation = tmp3;
			var sign10 = true;
			if(sign10 == null) {
				sign10 = false;
			}
			var tmp4 = sign10 ? Math.random() * 0.25 * (Std.random(2) * 2 - 1) : Math.random() * 0.25;
			p1[0].dr = tmp4;
			var sign11 = null;
			if(sign11 == null) {
				sign11 = false;
			}
			var tmp5 = sign11 ? Math.random() * 40 * (Std.random(2) * 2 - 1) : Math.random() * 40;
			p1[0].groundY = y + tmp5;
			p1[0].onBounce = (function(p) {
				return function() {
					p[0].dr = 0;
					p[0].rotation = 0;
				};
			})(p1);
		}
	}
	,shakeGibs: function(x,y,k) {
		var _this = Assets.lib;
		var rndFunc = null;
		if(!(k != null && Object.prototype.hasOwnProperty.call(_this.groups.h,k) && _this.groups.h[k].frames.length > 0)) {
			throw haxe_Exception.thrown("Unknown group " + k);
		}
		var frame = (rndFunc == null ? Std.random : rndFunc)((k == null ? _this.currentGroup : _this.groups.h[k]).frames.length);
		var px = 0.0;
		var py = 0.0;
		if(py == null) {
			py = 0.0;
		}
		if(px == null) {
			px = 0.0;
		}
		if(frame == null) {
			frame = 0;
		}
		var frame1 = frame;
		if(frame1 == null) {
			frame1 = 0;
		}
		var g = k == null ? _this.currentGroup : _this.groups.h[k];
		var fd = g == null ? null : g.frames[frame1];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + k + "#" + frame + "!");
		}
		var t = _this.pages[fd.page].clone();
		var frame1 = frame;
		var px1 = px;
		var py1 = py;
		if(py1 == null) {
			py1 = 0.0;
		}
		if(px1 == null) {
			px1 = 0.0;
		}
		if(frame1 == null) {
			frame1 = 0;
		}
		var frame = frame1;
		if(frame == null) {
			frame = 0;
		}
		var g = k == null ? _this.currentGroup : _this.groups.h[k];
		var fd = g == null ? null : g.frames[frame];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + k + "#" + frame1 + "!");
		}
		t.setPosition(fd.x,fd.y);
		t.setSize(fd.wid,fd.hei);
		t.dx = -(fd.realWid * px1 + fd.realX | 0);
		t.dy = -(fd.realHei * py1 + fd.realY | 0);
		var sign = true;
		if(sign == null) {
			sign = false;
		}
		var p = sign ? Math.random() * 20 * (Std.random(2) * 2 - 1) : Math.random() * 20;
		var sign = true;
		if(sign == null) {
			sign = false;
		}
		var p1 = this.alloc(t,x + p,y + (sign ? Math.random() * 20 * (Std.random(2) * 2 - 1) : Math.random() * 20),false);
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		var v = sign ? (0.5 + Math.random() * 0.5) * (Std.random(2) * 2 - 1) : 0.5 + Math.random() * 0.5;
		p1.a = v;
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		var v = sign ? (0.5 + Math.random()) * (Std.random(2) * 2 - 1) : 0.5 + Math.random();
		p1.scaleX = p1.scaleY = v;
		var sign = true;
		if(sign == null) {
			sign = false;
		}
		var tmp = sign ? Math.random() * 2 * (Std.random(2) * 2 - 1) : Math.random() * 2;
		p1.dx = tmp;
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		var tmp = sign ? (1 + Math.random() * 2) * (Std.random(2) * 2 - 1) : 1 + Math.random() * 2;
		p1.dy = -tmp;
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		var tmp = sign ? (0.3 + Math.random() * 0.2) * (Std.random(2) * 2 - 1) : 0.3 + Math.random() * 0.2;
		p1.gy = tmp;
		p1.frictX = p1.frictY = 0.94;
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		var v = sign ? (5 + Math.random() * 25) * (Std.random(2) * 2 - 1) : 5 + Math.random() * 25;
		p1.rLifeF = p1.maxLifeF = v > 0 ? v : 0;
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		var tmp = sign ? Math.random() * 6.28 * (Std.random(2) * 2 - 1) : Math.random() * 6.28;
		p1.rotation = tmp;
		var sign = true;
		if(sign == null) {
			sign = false;
		}
		var tmp = sign ? Math.random() * 0.25 * (Std.random(2) * 2 - 1) : Math.random() * 0.25;
		p1.dr = tmp;
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		var tmp = sign ? Math.random() * 40 * (Std.random(2) * 2 - 1) : Math.random() * 40;
		p1.groundY = y + tmp;
		p1.onBounce = function() {
			p1.dr = 0;
			p1.rotation = 0;
		};
	}
	,burn: function(x,y) {
		if((Game.ME.ftime | 0) % 5 == 0) {
			var _this = Assets.lib;
			var rndFunc = null;
			if(!(Object.prototype.hasOwnProperty.call(_this.groups.h,"spark") && _this.groups.h["spark"].frames.length > 0)) {
				throw haxe_Exception.thrown("Unknown group " + "spark");
			}
			var frame = (rndFunc == null ? Std.random : rndFunc)(_this.groups.h["spark"].frames.length);
			var px = 0.0;
			var py = 0.0;
			if(py == null) {
				py = 0.0;
			}
			if(px == null) {
				px = 0.0;
			}
			if(frame == null) {
				frame = 0;
			}
			var frame1 = frame;
			if(frame1 == null) {
				frame1 = 0;
			}
			var g = _this.groups.h["spark"];
			var fd = g == null ? null : g.frames[frame1];
			if(fd == null) {
				throw haxe_Exception.thrown("Unknown group " + "spark" + "#" + frame + "!");
			}
			var t = _this.pages[fd.page].clone();
			var frame1 = frame;
			var px1 = px;
			var py1 = py;
			if(py1 == null) {
				py1 = 0.0;
			}
			if(px1 == null) {
				px1 = 0.0;
			}
			if(frame1 == null) {
				frame1 = 0;
			}
			var frame = frame1;
			if(frame == null) {
				frame = 0;
			}
			var g = _this.groups.h["spark"];
			var fd = g == null ? null : g.frames[frame];
			if(fd == null) {
				throw haxe_Exception.thrown("Unknown group " + "spark" + "#" + frame1 + "!");
			}
			t.setPosition(fd.x,fd.y);
			t.setSize(fd.wid,fd.hei);
			t.dx = -(fd.realWid * px1 + fd.realX | 0);
			t.dy = -(fd.realHei * py1 + fd.realY | 0);
			var p = this.alloc(t,x,y);
			var sign = null;
			if(sign == null) {
				sign = false;
			}
			p.scaleX = p.scaleY = sign ? (1 + Math.random()) * (Std.random(2) * 2 - 1) : 1 + Math.random();
			var sign = null;
			if(sign == null) {
				sign = false;
			}
			p.scaleMul = sign ? (0.9 + Math.random() * 0.099999999999999978) * (Std.random(2) * 2 - 1) : 0.9 + Math.random() * 0.099999999999999978;
			var sign = null;
			if(sign == null) {
				sign = false;
			}
			p.dy = -(sign ? Math.random() * 0.5 * (Std.random(2) * 2 - 1) : Math.random() * 0.5);
			p.frictX = p.frictY = 0.94;
			var sign = null;
			if(sign == null) {
				sign = false;
			}
			var alpha = sign ? (0.4 + Math.random() * 0.6) * (Std.random(2) * 2 - 1) : 0.4 + Math.random() * 0.6;
			p.a = 0;
			if(p.a > alpha) {
				p.a = alpha;
			}
			p.maxAlpha = alpha;
			p.da = 0.1;
			var sign = null;
			if(sign == null) {
				sign = false;
			}
			p.fadeOutSpeed = sign ? (0.03 + Math.random() * 0.07) * (Std.random(2) * 2 - 1) : 0.03 + Math.random() * 0.07;
			var sign = null;
			if(sign == null) {
				sign = false;
			}
			var v = sign ? Math.random() * 30 * (Std.random(2) * 2 - 1) : Math.random() * 30;
			p.rLifeF = p.maxLifeF = v > 0 ? v : 0;
		}
		if((Game.ME.ftime | 0) % 10 == 0) {
			var _this = Assets.lib;
			var rndFunc = null;
			if(!(Object.prototype.hasOwnProperty.call(_this.groups.h,"blackSmoke") && _this.groups.h["blackSmoke"].frames.length > 0)) {
				throw haxe_Exception.thrown("Unknown group " + "blackSmoke");
			}
			var frame = (rndFunc == null ? Std.random : rndFunc)(_this.groups.h["blackSmoke"].frames.length);
			var px = 0.0;
			var py = 0.0;
			if(py == null) {
				py = 0.0;
			}
			if(px == null) {
				px = 0.0;
			}
			if(frame == null) {
				frame = 0;
			}
			var frame1 = frame;
			if(frame1 == null) {
				frame1 = 0;
			}
			var g = _this.groups.h["blackSmoke"];
			var fd = g == null ? null : g.frames[frame1];
			if(fd == null) {
				throw haxe_Exception.thrown("Unknown group " + "blackSmoke" + "#" + frame + "!");
			}
			var t = _this.pages[fd.page].clone();
			var frame1 = frame;
			var px1 = px;
			var py1 = py;
			if(py1 == null) {
				py1 = 0.0;
			}
			if(px1 == null) {
				px1 = 0.0;
			}
			if(frame1 == null) {
				frame1 = 0;
			}
			var frame = frame1;
			if(frame == null) {
				frame = 0;
			}
			var g = _this.groups.h["blackSmoke"];
			var fd = g == null ? null : g.frames[frame];
			if(fd == null) {
				throw haxe_Exception.thrown("Unknown group " + "blackSmoke" + "#" + frame1 + "!");
			}
			t.setPosition(fd.x,fd.y);
			t.setSize(fd.wid,fd.hei);
			t.dx = -(fd.realWid * px1 + fd.realX | 0);
			t.dy = -(fd.realHei * py1 + fd.realY | 0);
			var p = this.alloc(t,x,y,false);
			var sign = null;
			if(sign == null) {
				sign = false;
			}
			p.scaleX = p.scaleY = sign ? (1.5 + Math.random() * 1.5) * (Std.random(2) * 2 - 1) : 1.5 + Math.random() * 1.5;
			var sign = null;
			if(sign == null) {
				sign = false;
			}
			p.scaleMul = sign ? (0.97 + Math.random() * 0.020000000000000018) * (Std.random(2) * 2 - 1) : 0.97 + Math.random() * 0.020000000000000018;
			var sign = null;
			if(sign == null) {
				sign = false;
			}
			p.gy = -(sign ? (0.1 + Math.random() * 0.19999999999999998) * (Std.random(2) * 2 - 1) : 0.1 + Math.random() * 0.19999999999999998);
			p.frictX = p.frictY = 0.8;
			var sign = null;
			if(sign == null) {
				sign = false;
			}
			var alpha = sign ? (0.3 + Math.random() * 0.2) * (Std.random(2) * 2 - 1) : 0.3 + Math.random() * 0.2;
			p.a = 0;
			if(p.a > alpha) {
				p.a = alpha;
			}
			p.maxAlpha = alpha;
			p.da = 0.02;
			var sign = null;
			if(sign == null) {
				sign = false;
			}
			p.fadeOutSpeed = sign ? (0.03 + Math.random() * 0.020000000000000004) * (Std.random(2) * 2 - 1) : 0.03 + Math.random() * 0.020000000000000004;
			var sign = null;
			if(sign == null) {
				sign = false;
			}
			var v = sign ? (30 + Math.random() * 30) * (Std.random(2) * 2 - 1) : 30 + Math.random() * 30;
			p.rLifeF = p.maxLifeF = v > 0 ? v : 0;
		}
	}
	,explosion: function(x,y,n) {
		var _this = Assets.lib;
		var frame = 0;
		if(frame == null) {
			frame = 0;
		}
		var g = _this.groups.h["redGlow"];
		var fd = g == null ? null : g.frames[frame];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "redGlow" + "#" + 0 + "!");
		}
		var t = _this.pages[fd.page].clone();
		var frame = 0;
		var px = 0.0;
		var py = 0.0;
		if(py == null) {
			py = 0.0;
		}
		if(px == null) {
			px = 0.0;
		}
		if(frame == null) {
			frame = 0;
		}
		var frame1 = frame;
		if(frame1 == null) {
			frame1 = 0;
		}
		var g = _this.groups.h["redGlow"];
		var fd = g == null ? null : g.frames[frame1];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "redGlow" + "#" + frame + "!");
		}
		t.setPosition(fd.x,fd.y);
		t.setSize(fd.wid,fd.hei);
		t.dx = -(fd.realWid * px + fd.realX | 0);
		t.dy = -(fd.realHei * py + fd.realY | 0);
		var p = this.alloc(t,x,y);
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		p.scaleX = p.scaleY = sign ? (2.5 + Math.random() * 1.5) * (Std.random(2) * 2 - 1) : 2.5 + Math.random() * 1.5;
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		p.a = sign ? (0.4 + Math.random() * 0.29999999999999993) * (Std.random(2) * 2 - 1) : 0.4 + Math.random() * 0.29999999999999993;
		p.ds = 0.2;
		p.scaleMul = 0.93;
		p.rLifeF = p.maxLifeF = 0;
		var _this = Assets.lib;
		var frame = 0;
		if(frame == null) {
			frame = 0;
		}
		var g = _this.groups.h["explosion"];
		var fd = g == null ? null : g.frames[frame];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "explosion" + "#" + 0 + "!");
		}
		var t = _this.pages[fd.page].clone();
		var frame = 0;
		var px = 0.0;
		var py = 0.0;
		if(py == null) {
			py = 0.0;
		}
		if(px == null) {
			px = 0.0;
		}
		if(frame == null) {
			frame = 0;
		}
		var frame1 = frame;
		if(frame1 == null) {
			frame1 = 0;
		}
		var g = _this.groups.h["explosion"];
		var fd = g == null ? null : g.frames[frame1];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "explosion" + "#" + frame + "!");
		}
		t.setPosition(fd.x,fd.y);
		t.setSize(fd.wid,fd.hei);
		t.dx = -(fd.realWid * px + fd.realX | 0);
		t.dy = -(fd.realHei * py + fd.realY | 0);
		var p = this.alloc(t,x,y,true);
		p.scaleX = p.scaleY = n == 1 ? 0.6 : 1;
		p.a = n == 1 ? 0.7 : 1;
		p.scaleMul = 1.005;
		p.rLifeF = p.maxLifeF = 1;
		var _g = 0;
		var _g1 = n - 1;
		while(_g < _g1) {
			var i = _g++;
			var _this = Assets.lib;
			var frame = 0;
			if(frame == null) {
				frame = 0;
			}
			var g = _this.groups.h["explosion"];
			var fd = g == null ? null : g.frames[frame];
			if(fd == null) {
				throw haxe_Exception.thrown("Unknown group " + "explosion" + "#" + 0 + "!");
			}
			var t = _this.pages[fd.page].clone();
			var frame1 = 0;
			var px = 0.0;
			var py = 0.0;
			if(py == null) {
				py = 0.0;
			}
			if(px == null) {
				px = 0.0;
			}
			if(frame1 == null) {
				frame1 = 0;
			}
			var frame2 = frame1;
			if(frame2 == null) {
				frame2 = 0;
			}
			var g1 = _this.groups.h["explosion"];
			var fd1 = g1 == null ? null : g1.frames[frame2];
			if(fd1 == null) {
				throw haxe_Exception.thrown("Unknown group " + "explosion" + "#" + frame1 + "!");
			}
			t.setPosition(fd1.x,fd1.y);
			t.setSize(fd1.wid,fd1.hei);
			t.dx = -(fd1.realWid * px + fd1.realX | 0);
			t.dy = -(fd1.realHei * py + fd1.realY | 0);
			var sign = true;
			if(sign == null) {
				sign = false;
			}
			var p = sign ? (4 + Math.random() * 12) * (Std.random(2) * 2 - 1) : 4 + Math.random() * 12;
			var sign1 = true;
			if(sign1 == null) {
				sign1 = false;
			}
			var p1 = this.alloc(t,x + p,y + (sign1 ? (4 + Math.random() * 12) * (Std.random(2) * 2 - 1) : 4 + Math.random() * 12),true);
			var sign2 = null;
			if(sign2 == null) {
				sign2 = false;
			}
			p1.scaleX = p1.scaleY = sign2 ? (0.75 + Math.random() * 0.15000000000000002) * (Std.random(2) * 2 - 1) : 0.75 + Math.random() * 0.15000000000000002;
			p1.scaleMul = 0.89;
			p1.rLifeF = p1.maxLifeF = 0;
			var sign3 = null;
			if(sign3 == null) {
				sign3 = false;
			}
			var d = 1 + i + (sign3 ? Std.random(2) * (Std.random(2) * 2 - 1) : Std.random(2));
			if(0 > d) {
				d = 0;
			}
			p1.visible = !p1.killed && d <= 0;
			p1.delayF = d;
		}
	}
	,ignite: function(x,y,a) {
		var _this = Assets.lib;
		var frame = 0;
		if(frame == null) {
			frame = 0;
		}
		var g = _this.groups.h["redGlow"];
		var fd = g == null ? null : g.frames[frame];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "redGlow" + "#" + 0 + "!");
		}
		var t = _this.pages[fd.page].clone();
		var frame = 0;
		var px = 0.0;
		var py = 0.0;
		if(py == null) {
			py = 0.0;
		}
		if(px == null) {
			px = 0.0;
		}
		if(frame == null) {
			frame = 0;
		}
		var frame1 = frame;
		if(frame1 == null) {
			frame1 = 0;
		}
		var g = _this.groups.h["redGlow"];
		var fd = g == null ? null : g.frames[frame1];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "redGlow" + "#" + frame + "!");
		}
		t.setPosition(fd.x,fd.y);
		t.setSize(fd.wid,fd.hei);
		t.dx = -(fd.realWid * px + fd.realX | 0);
		t.dy = -(fd.realHei * py + fd.realY | 0);
		var p = this.alloc(t,x,y);
		p.scaleX = p.scaleY = 0.6;
		p.rotation = a;
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		p.a = sign ? (0.7 + Math.random() * 0.30000000000000004) * (Std.random(2) * 2 - 1) : 0.7 + Math.random() * 0.30000000000000004;
		p.scaleMul = 1.005;
		p.rLifeF = p.maxLifeF = 0;
	}
	,missileTail: function(lx,ly,x,y) {
		var _this = Assets.lib;
		var frame = 0;
		if(frame == null) {
			frame = 0;
		}
		var g = _this.groups.h["missileSmoke"];
		var fd = g == null ? null : g.frames[frame];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "missileSmoke" + "#" + 0 + "!");
		}
		var t = _this.pages[fd.page].clone();
		var frame = 0;
		var px = 0.0;
		var py = 0.0;
		if(py == null) {
			py = 0.0;
		}
		if(px == null) {
			px = 0.0;
		}
		if(frame == null) {
			frame = 0;
		}
		var frame1 = frame;
		if(frame1 == null) {
			frame1 = 0;
		}
		var g = _this.groups.h["missileSmoke"];
		var fd = g == null ? null : g.frames[frame1];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "missileSmoke" + "#" + frame + "!");
		}
		t.setPosition(fd.x,fd.y);
		t.setSize(fd.wid,fd.hei);
		t.dx = -(fd.realWid * px + fd.realX | 0);
		t.dy = -(fd.realHei * py + fd.realY | 0);
		var p = this.alloc(t,lx,ly);
		p.a = 0.5;
		p.rotation = Math.atan2(y - ly,x - lx);
		p.scaleX = p.scaleY = (3 + Math.sqrt((lx - x) * (lx - x) + (ly - y) * (ly - y))) / p.t.width;
		p.frictX = p.frictY = 0.9;
		p.fadeOutSpeed = 0.01;
		p.rLifeF = p.maxLifeF = 3;
	}
	,spawn: function(x,y) {
		var _this = Assets.lib;
		var frame = 0;
		if(frame == null) {
			frame = 0;
		}
		var g = _this.groups.h["smokeCircle"];
		var fd = g == null ? null : g.frames[frame];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "smokeCircle" + "#" + 0 + "!");
		}
		var t = _this.pages[fd.page].clone();
		var frame = 0;
		var px = 0.0;
		var py = 0.0;
		if(py == null) {
			py = 0.0;
		}
		if(px == null) {
			px = 0.0;
		}
		if(frame == null) {
			frame = 0;
		}
		var frame1 = frame;
		if(frame1 == null) {
			frame1 = 0;
		}
		var g = _this.groups.h["smokeCircle"];
		var fd = g == null ? null : g.frames[frame1];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "smokeCircle" + "#" + frame + "!");
		}
		t.setPosition(fd.x,fd.y);
		t.setSize(fd.wid,fd.hei);
		t.dx = -(fd.realWid * px + fd.realX | 0);
		t.dy = -(fd.realHei * py + fd.realY | 0);
		var p = this.alloc(t,x,y,false);
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		p.a = sign ? (0.8 + Math.random() * 0.19999999999999996) * (Std.random(2) * 2 - 1) : 0.8 + Math.random() * 0.19999999999999996;
		p.ds = 0.5;
		p.scaleMul = 0.8;
		p.rLifeF = p.maxLifeF = 0;
	}
	,blood: function(x,y) {
		var _g = 0;
		while(_g < 20) {
			var i = _g++;
			var _this = Assets.lib;
			var rndFunc = null;
			if(!(Object.prototype.hasOwnProperty.call(_this.groups.h,"blood") && _this.groups.h["blood"].frames.length > 0)) {
				throw haxe_Exception.thrown("Unknown group " + "blood");
			}
			var frame = (rndFunc == null ? Std.random : rndFunc)(_this.groups.h["blood"].frames.length);
			var px = 0.0;
			var py = 0.0;
			if(py == null) {
				py = 0.0;
			}
			if(px == null) {
				px = 0.0;
			}
			if(frame == null) {
				frame = 0;
			}
			var frame1 = frame;
			if(frame1 == null) {
				frame1 = 0;
			}
			var g = _this.groups.h["blood"];
			var fd = g == null ? null : g.frames[frame1];
			if(fd == null) {
				throw haxe_Exception.thrown("Unknown group " + "blood" + "#" + frame + "!");
			}
			var t = _this.pages[fd.page].clone();
			var frame2 = frame;
			var px1 = px;
			var py1 = py;
			if(py1 == null) {
				py1 = 0.0;
			}
			if(px1 == null) {
				px1 = 0.0;
			}
			if(frame2 == null) {
				frame2 = 0;
			}
			var frame3 = frame2;
			if(frame3 == null) {
				frame3 = 0;
			}
			var g1 = _this.groups.h["blood"];
			var fd1 = g1 == null ? null : g1.frames[frame3];
			if(fd1 == null) {
				throw haxe_Exception.thrown("Unknown group " + "blood" + "#" + frame2 + "!");
			}
			t.setPosition(fd1.x,fd1.y);
			t.setSize(fd1.wid,fd1.hei);
			t.dx = -(fd1.realWid * px1 + fd1.realX | 0);
			t.dy = -(fd1.realHei * py1 + fd1.realY | 0);
			var p = this.alloc(t,x,y,false);
			var sign = null;
			if(sign == null) {
				sign = false;
			}
			p.scaleX = p.scaleY = sign ? (0.5 + Math.random() * 0.5) * (Std.random(2) * 2 - 1) : 0.5 + Math.random() * 0.5;
			var sign1 = null;
			if(sign1 == null) {
				sign1 = false;
			}
			var v = sign1 ? (5 + Math.random() * 15) * (Std.random(2) * 2 - 1) : 5 + Math.random() * 15;
			p.rLifeF = p.maxLifeF = v > 0 ? v : 0;
			var sign2 = true;
			if(sign2 == null) {
				sign2 = false;
			}
			p.dx = sign2 ? Math.random() * 2.4 * (Std.random(2) * 2 - 1) : Math.random() * 2.4;
			var sign3 = null;
			if(sign3 == null) {
				sign3 = false;
			}
			p.dy = -(sign3 ? (1 + Math.random() * 3) * (Std.random(2) * 2 - 1) : 1 + Math.random() * 3);
			p.gy = 0.25;
			p.frictX = p.frictY = 0.95;
			var sign4 = true;
			if(sign4 == null) {
				sign4 = false;
			}
			p.groundY = y + (sign4 ? Math.random() * 4 * (Std.random(2) * 2 - 1) : Math.random() * 4);
			p.bounceMul = 0;
		}
	}
	,resist: function(e) {
		var _this = Assets.lib;
		var frame = 0;
		if(frame == null) {
			frame = 0;
		}
		var g = _this.groups.h["resist"];
		var fd = g == null ? null : g.frames[frame];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "resist" + "#" + 0 + "!");
		}
		var t = _this.pages[fd.page].clone();
		var frame = 0;
		var px = 0.0;
		var py = 0.0;
		if(py == null) {
			py = 0.0;
		}
		if(px == null) {
			px = 0.0;
		}
		if(frame == null) {
			frame = 0;
		}
		var frame1 = frame;
		if(frame1 == null) {
			frame1 = 0;
		}
		var g = _this.groups.h["resist"];
		var fd = g == null ? null : g.frames[frame1];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "resist" + "#" + frame + "!");
		}
		t.setPosition(fd.x,fd.y);
		t.setSize(fd.wid,fd.hei);
		t.dx = -(fd.realWid * px + fd.realX | 0);
		t.dy = -(fd.realHei * py + fd.realY | 0);
		var p = this.alloc(t,e.x,e.y);
		p.scaleX = p.scaleY = 2;
		p.rLifeF = p.maxLifeF = 5;
		p.ds = 0.2;
		p.dsFrict = 0.8;
	}
	,update: function() {
		dn_Process.prototype.update.call(this);
		var _this = this.pool;
		var tmod = this.utmod * this.getComputedTimeMultiplier();
		var updateCb = null;
		var i = 0;
		var p;
		while(i < _this.nalloc) {
			p = _this.all[i];
			var tmod1 = tmod;
			if(p.customTmod != null) {
				tmod1 = p.customTmod();
			}
			var d = p.delayF - tmod1;
			if(0 > d) {
				d = 0;
			}
			p.visible = !p.killed && d <= 0;
			p.delayF = d;
			if(p.delayF <= 0 && !p.killed) {
				if(p.onStart != null) {
					var cb = p.onStart;
					p.onStart = null;
					cb();
				}
				if(p.animId != null) {
					var _this1 = p.animLib;
					var k = p.animId;
					var f = (k == null ? _this1.currentGroup : _this1.groups.h[k]).anim[p.animCursor | 0];
					var _this2 = p.animLib;
					var k1 = p.animId;
					var frame = f;
					if(frame == null) {
						frame = 0;
					}
					var g = k1 == null ? _this2.currentGroup : _this2.groups.h[k1];
					var fd = g == null ? null : g.frames[frame];
					var _this3 = p.animLib;
					var g1 = p.animId;
					var frame1 = f;
					if(frame1 == null) {
						frame1 = 0;
					}
					var frame2 = frame1;
					if(frame2 == null) {
						frame2 = 0;
					}
					var g2 = g1 == null ? _this3.currentGroup : _this3.groups.h[g1];
					var fd1 = g2 == null ? null : g2.frames[frame2];
					if(fd1 == null) {
						throw haxe_Exception.thrown("Unknown group " + g1 + "#" + frame1 + "!");
					}
					var t = _this3.pages[fd1.page].clone();
					var frame3 = frame1;
					var px = 0.0;
					var py = 0.0;
					if(py == null) {
						py = 0.0;
					}
					if(px == null) {
						px = 0.0;
					}
					if(frame3 == null) {
						frame3 = 0;
					}
					var frame4 = frame3;
					if(frame4 == null) {
						frame4 = 0;
					}
					var g3 = g1 == null ? _this3.currentGroup : _this3.groups.h[g1];
					var fd2 = g3 == null ? null : g3.frames[frame4];
					if(fd2 == null) {
						throw haxe_Exception.thrown("Unknown group " + g1 + "#" + frame3 + "!");
					}
					t.setPosition(fd2.x,fd2.y);
					t.setSize(fd2.wid,fd2.hei);
					t.dx = -(fd2.realWid * px + fd2.realX | 0);
					t.dy = -(fd2.realHei * py + fd2.realY | 0);
					var tile = t;
					p.t.setPosition(tile.x,tile.y);
					p.t.setSize(tile.width,tile.height);
					p.t.dx = -(fd.realWid * p.animXr + fd.realX | 0);
					p.t.dy = -(fd.realHei * p.animYr + fd.realY | 0);
					p.animCursor += p.animSpd * tmod1;
					var _this4 = p.animLib;
					var k2 = p.animId;
					if(p.animCursor >= (k2 == null ? _this4.currentGroup : _this4.groups.h[k2]).anim.length) {
						if(p.animLoop) {
							var _this5 = p.animLib;
							var k3 = p.animId;
							p.animCursor -= (k3 == null ? _this5.currentGroup : _this5.groups.h[k3]).anim.length;
						} else if(p.animStop) {
							p.animId = null;
							p.animLib = null;
						} else {
							p.animId = null;
							p.animLib = null;
							p.animCursor = 0;
							if(!p.killed) {
								var any = false;
								if(p.onKillP != null) {
									var cb1 = p.onKillP;
									p.onKillP = null;
									cb1(p);
									any = true;
								}
								if(p.onKill != null) {
									var cb2 = p.onKill;
									p.onKill = null;
									cb2();
									any = true;
								}
								p.a = 0;
								var x = p.fps * 0;
								p.rLifeF = p.maxLifeF = x > 0 ? x : 0;
								var d1 = 0 * p.fps;
								if(0 > d1) {
									d1 = 0;
								}
								p.visible = !p.killed && d1 <= 0;
								p.delayF = d1;
								p.killed = true;
								p.visible = false;
								var _this6 = p.pool;
								if(_this6.all != null) {
									if(_this6.nalloc > 1) {
										var idx = p.poolIdx;
										var tmp = _this6.all[idx];
										_this6.all[idx] = _this6.all[_this6.nalloc - 1];
										_this6.all[idx].poolIdx = idx;
										_this6.all[_this6.nalloc - 1] = tmp;
										_this6.nalloc--;
									} else {
										_this6.nalloc = 0;
									}
								}
							}
						}
					}
				}
				if(!p.killed) {
					p.dx += p.gx * tmod1;
					p.dy += p.gy * tmod1;
					p.x += p.dx * tmod1;
					p.y += p.dy * tmod1;
					if(p.frictX == p.frictY) {
						var v = p.frictX;
						var frictTmod = tmod1 == 1 || v == 0 || v == 1 ? v : Math.pow(v,tmod1);
						p.dx *= frictTmod;
						p.dy *= frictTmod;
					} else {
						var v1 = p.frictX;
						p.dx *= tmod1 == 1 || v1 == 0 || v1 == 1 ? v1 : Math.pow(v1,tmod1);
						var v2 = p.frictY;
						p.dy *= tmod1 == 1 || v2 == 0 || v2 == 1 ? v2 : Math.pow(v2,tmod1);
					}
					if(p.groundY != null && p.dy > 0 && p.y >= p.groundY) {
						p.dy = -p.dy * p.bounceMul;
						p.y = p.groundY - 1;
						if(p.onBounce != null) {
							p.onBounce();
						}
						if(p.onTouchGround != null) {
							p.onTouchGround(p);
						}
					}
					if(!p.killed) {
						p.rotation += p.dr * tmod1;
						var v3 = p.drFrict;
						p.dr *= tmod1 == 1 || v3 == 0 || v3 == 1 ? v3 : Math.pow(v3,tmod1);
						p.scaleX += (p.ds + p.dsX) * tmod1;
						p.scaleY += (p.ds + p.dsY) * tmod1;
						var v4 = p.scaleMul;
						var scaleMulTmod = tmod1 == 1 || v4 == 0 || v4 == 1 ? v4 : Math.pow(v4,tmod1);
						p.scaleX *= scaleMulTmod;
						var v5 = p.scaleXMul;
						p.scaleX *= tmod1 == 1 || v5 == 0 || v5 == 1 ? v5 : Math.pow(v5,tmod1);
						p.scaleY *= scaleMulTmod;
						var v6 = p.scaleYMul;
						p.scaleY *= tmod1 == 1 || v6 == 0 || v6 == 1 ? v6 : Math.pow(v6,tmod1);
						var v7 = p.dsFrict;
						p.ds *= tmod1 == 1 || v7 == 0 || v7 == 1 ? v7 : Math.pow(v7,tmod1);
						var v8 = p.dsFrict;
						p.dsX *= tmod1 == 1 || v8 == 0 || v8 == 1 ? v8 : Math.pow(v8,tmod1);
						var v9 = p.dsFrict;
						p.dsY *= tmod1 == 1 || v9 == 0 || v9 == 1 ? v9 : Math.pow(v9,tmod1);
						if(p.autoRotateSpeed != 0) {
							var p1 = p;
							var p2 = p1.rotation;
							var a = Math.atan2(p.dy,p.dx);
							var b = p.rotation;
							var a1 = a;
							while(a1 < -3.1415926535897931) a1 += 6.283185307179586;
							while(a1 > 3.141592653589793) a1 -= 6.283185307179586;
							a = a1;
							var a2 = b;
							while(a2 < -3.1415926535897931) a2 += 6.283185307179586;
							while(a2 > 3.141592653589793) a2 -= 6.283185307179586;
							b = a2;
							var a3 = a - b;
							while(a3 < -3.1415926535897931) a3 += 6.283185307179586;
							while(a3 > 3.141592653589793) a3 -= 6.283185307179586;
							var y = p.autoRotateSpeed * tmod1;
							p1.rotation = p2 + a3 * (1 < y ? 1 : y);
						}
						var f1 = p.rColor;
						if(!isNaN(f1)) {
							var x1 = p.rColor + p.dColor * tmod1;
							p.rColor = x1 < 0 ? 0 : x1 > 1 ? 1 : x1;
							var this1 = p.fromColor;
							var to = p.toColor;
							var ratio = p.rColor;
							var a4 = this1 >> 24 & 255;
							var x2 = a4 + ((to >> 24 & 255) - a4) * ratio;
							var a5 = this1 >> 16 & 255;
							var x3 = a5 + ((to >> 16 & 255) - a5) * ratio;
							var a6 = this1 >> 8 & 255;
							var x4 = a6 + ((to >> 8 & 255) - a6) * ratio;
							var a7 = this1 & 255;
							var x5 = a7 + ((to & 255) - a7) * ratio;
							var c = ((x2 > 0 ? x2 + .5 : x2 < 0 ? x2 - .5 : 0) | 0) << 24 | ((x3 > 0 ? x3 + .5 : x3 < 0 ? x3 - .5 : 0) | 0) << 16 | ((x4 > 0 ? x4 + .5 : x4 < 0 ? x4 - .5 : 0) | 0) << 8 | ((x5 > 0 ? x5 + .5 : x5 < 0 ? x5 - .5 : 0) | 0);
							var ratio1 = 1.0;
							if(ratio1 == null) {
								ratio1 = 1.0;
							}
							p.r = 16777215 + ((c >> 16 & 255) / 255 - 16777215) * ratio1;
							p.g = 16777215 + ((c >> 8 & 255) / 255 - 16777215) * ratio1;
							p.b = 16777215 + ((c & 255) / 255 - 16777215) * ratio1;
						}
						if(p.rLifeF > 0 && p.da != 0) {
							p.a += p.da * tmod1;
							if(p.a > p.maxAlpha) {
								p.da = 0;
								p.a = p.maxAlpha;
							}
						}
						if(p.onFadeOutStart != null && p.rLifeF > 0 && p.rLifeF - tmod1 <= 0) {
							p.onFadeOutStart(p);
						}
						p.rLifeF -= tmod1;
						if(p.rLifeF <= 0) {
							p.a -= p.fadeOutSpeed * tmod1;
						} else if(p.alphaFlicker > 0) {
							var max = p.alphaFlicker;
							var sign = true;
							if(sign == null) {
								sign = false;
							}
							var x6 = p.a + (sign ? Math.random() * max * (Std.random(2) * 2 - 1) : Math.random() * max);
							var max1 = p.maxAlpha;
							p.a = x6 < 0 ? 0 : x6 > max1 ? max1 : x6;
						}
						if(p.bounds != null && !(p.x >= p.bounds.xMin && p.x < p.bounds.xMax && p.y >= p.bounds.yMin && p.y < p.bounds.yMax)) {
							if(p.onLeaveBounds != null) {
								p.onLeaveBounds(p);
							}
							if(!p.killed) {
								var any1 = false;
								if(p.onKillP != null) {
									var cb3 = p.onKillP;
									p.onKillP = null;
									cb3(p);
									any1 = true;
								}
								if(p.onKill != null) {
									var cb4 = p.onKill;
									p.onKill = null;
									cb4();
									any1 = true;
								}
								p.a = 0;
								var x7 = p.fps * 0;
								p.rLifeF = p.maxLifeF = x7 > 0 ? x7 : 0;
								var d2 = 0 * p.fps;
								if(0 > d2) {
									d2 = 0;
								}
								p.visible = !p.killed && d2 <= 0;
								p.delayF = d2;
								p.killed = true;
								p.visible = false;
								var _this7 = p.pool;
								if(_this7.all != null) {
									if(_this7.nalloc > 1) {
										var idx1 = p.poolIdx;
										var tmp1 = _this7.all[idx1];
										_this7.all[idx1] = _this7.all[_this7.nalloc - 1];
										_this7.all[idx1].poolIdx = idx1;
										_this7.all[_this7.nalloc - 1] = tmp1;
										_this7.nalloc--;
									} else {
										_this7.nalloc = 0;
									}
								}
							}
						} else if(p.rLifeF <= 0 && (p.a <= 0 || p.killOnLifeOut)) {
							if(!p.killed) {
								var any2 = false;
								if(p.onKillP != null) {
									var cb5 = p.onKillP;
									p.onKillP = null;
									cb5(p);
									any2 = true;
								}
								if(p.onKill != null) {
									var cb6 = p.onKill;
									p.onKill = null;
									cb6();
									any2 = true;
								}
								p.a = 0;
								var x8 = p.fps * 0;
								p.rLifeF = p.maxLifeF = x8 > 0 ? x8 : 0;
								var d3 = 0 * p.fps;
								if(0 > d3) {
									d3 = 0;
								}
								p.visible = !p.killed && d3 <= 0;
								p.delayF = d3;
								p.killed = true;
								p.visible = false;
								var _this8 = p.pool;
								if(_this8.all != null) {
									if(_this8.nalloc > 1) {
										var idx2 = p.poolIdx;
										var tmp2 = _this8.all[idx2];
										_this8.all[idx2] = _this8.all[_this8.nalloc - 1];
										_this8.all[idx2].poolIdx = idx2;
										_this8.all[_this8.nalloc - 1] = tmp2;
										_this8.nalloc--;
									} else {
										_this8.nalloc = 0;
									}
								}
							}
						} else if(p.onUpdate != null) {
							p.onUpdate(p);
						}
						if(!p.killed && p.delayedCb != null && (p.maxLifeF - p.rLifeF) / p.fps >= p.delayedCbTimeS) {
							var cb7 = p.delayedCb;
							p.delayedCb = null;
							p.delayedCbTimeS = 0;
							cb7(p);
						}
					}
				}
			}
			if(!p.killed) {
				if(updateCb != null) {
					updateCb(p);
				}
				++i;
			}
		}
	}
	,__class__: Fx
});
var Game = function(lid) {
	if(lid == null) {
		lid = 0;
	}
	var _gthis = this;
	dn_Process.call(this,Main.ME);
	Game.ME = this;
	this.ended = false;
	this.createRoot(Main.ME.root);
	this.scroller = new h2d_Layers(this.root);
	this.level = new Level(lid);
	this.fx = new Fx();
	var id = 0;
	var _this = this.level;
	var k = "quad" + id;
	var pt = (Object.prototype.hasOwnProperty.call(_this.spots.h,k) ? _this.spots.h[k] : [])[0];
	new en_Quad(id,(pt.cx + 0.5) * Const.GRID,(pt.cy + 0.5) * Const.GRID,id);
	var id = 1;
	var _this = this.level;
	var k = "quad" + id;
	var pt = (Object.prototype.hasOwnProperty.call(_this.spots.h,k) ? _this.spots.h[k] : [])[0];
	new en_Quad(id,(pt.cx + 0.5) * Const.GRID,(pt.cy + 0.5) * Const.GRID,id);
	this.current = en_Quad.ALL[0];
	var _g = 0;
	var _this = this.level;
	var _g1 = Object.prototype.hasOwnProperty.call(_this.spots.h,"zerg") ? _this.spots.h["zerg"] : [];
	while(_g < _g1.length) {
		var pt = _g1[_g];
		++_g;
		new en_m_Zergling((pt.cx + 0.5) * Const.GRID,(pt.cy + 0.5) * Const.GRID,null);
	}
	var _g = 0;
	var _this = this.level;
	var _g1 = Object.prototype.hasOwnProperty.call(_this.spots.h,"zergWander") ? _this.spots.h["zergWander"] : [];
	while(_g < _g1.length) {
		var pt = _g1[_g];
		++_g;
		var e = new en_m_Zergling((pt.cx + 0.5) * Const.GRID,(pt.cy + 0.5) * Const.GRID,null);
		var _this = e.cd;
		var allowLower = true;
		var onComplete = null;
		if(allowLower == null) {
			allowLower = true;
		}
		var cur = _this._getCdObject(37748736);
		if(!(cur != null && 99999 < cur.frames && !allowLower)) {
			_this.fastCheck.h[37748736] = true;
			if(cur != null) {
				cur.frames = 99999;
				cur.initial = 99999;
			} else {
				var _this1 = _this.cds;
				if(_this1.nalloc >= _this1.size) {
					throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
				}
				var e1 = _this1.pool[_this1.nalloc++];
				e1.recycle();
				var cd = e1;
				cd.k = 37748736;
				cd.frames = 99999;
				cd.initial = 99999;
			}
			if(onComplete != null) {
				var cd1 = _this._getCdObject(37748736);
				if(cd1 == null) {
					throw haxe_Exception.thrown("cannot bind onComplete(" + 37748736 + "): cooldown " + 37748736 + " isn't running");
				}
				cd1.onCompleteOnce = onComplete;
			}
		}
	}
	var _this = this.level;
	var spots = Object.prototype.hasOwnProperty.call(_this.spots.h,"human") ? _this.spots.h["human"] : [];
	var _g = 0;
	while(_g < 200) {
		var i = _g++;
		var pt = spots[Std.random(spots.length)];
		new en_Human((pt.cx + 0.5) * Const.GRID,(pt.cy + 0.5) * Const.GRID);
	}
	new MiniMap();
	this.delayer.addMs(null,function() {
		if(lid > 0) {
			_gthis.notify("ENTERING SECTOR #" + _gthis.level.lid,"CAUTION: contamined area.");
		}
		if(lid == 0) {
			_gthis.delayer.addMs(null,function() {
				_gthis.message("Use ARROW keys to move. Attacks are automatics.",null,true);
			},500);
		}
	},350);
	if(lid != null) {
		if(lid == 0) {
			var _this = this.cd;
			var allowLower = true;
			var onComplete = null;
			if(allowLower == null) {
				allowLower = true;
			}
			var cur = _this._getCdObject(50331648);
			if(!(cur != null && 99999 < cur.frames && !allowLower)) {
				_this.fastCheck.h[50331648] = true;
				if(cur != null) {
					cur.frames = 99999;
					cur.initial = 99999;
				} else {
					var _this1 = _this.cds;
					if(_this1.nalloc >= _this1.size) {
						throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
					}
					var e = _this1.pool[_this1.nalloc++];
					e.recycle();
					var cd = e;
					cd.k = 50331648;
					cd.frames = 99999;
					cd.initial = 99999;
				}
				if(onComplete != null) {
					var cd = _this._getCdObject(50331648);
					if(cd == null) {
						throw haxe_Exception.thrown("cannot bind onComplete(" + 50331648 + "): cooldown " + 50331648 + " isn't running");
					}
					cd.onCompleteOnce = onComplete;
				}
			}
		}
	}
};
$hxClasses["Game"] = Game;
Game.__name__ = "Game";
Game.__super__ = dn_Process;
Game.prototype = $extend(dn_Process.prototype,{
	switchCurrent: function() {
		if(this.cd.fastCheck.h.hasOwnProperty(50331648)) {
			return;
		}
		if(en_Quad.ALL.length == 0 || this.cd.fastCheck.h.hasOwnProperty(104857600)) {
			return;
		}
		var _this = this.cd;
		var allowLower = true;
		var onComplete = null;
		if(allowLower == null) {
			allowLower = true;
		}
		var cur = _this._getCdObject(104857600);
		if(!(cur != null && 3 < cur.frames && !allowLower)) {
			_this.fastCheck.h[104857600] = true;
			if(cur != null) {
				cur.frames = 3;
				cur.initial = 3;
			} else {
				var _this1 = _this.cds;
				if(_this1.nalloc >= _this1.size) {
					throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
				}
				var e = _this1.pool[_this1.nalloc++];
				e.recycle();
				var cd = e;
				cd.k = 104857600;
				cd.frames = 3;
				cd.initial = 3;
			}
			if(onComplete != null) {
				var cd = _this._getCdObject(104857600);
				if(cd == null) {
					throw haxe_Exception.thrown("cannot bind onComplete(" + 104857600 + "): cooldown " + 104857600 + " isn't running");
				}
				cd.onCompleteOnce = onComplete;
			}
		}
		var idx = 0;
		var _g = 0;
		var _g1 = en_Quad.ALL;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(e == this.current) {
				break;
			}
			++idx;
		}
		if(idx < en_Quad.ALL.length - 1) {
			this.current = en_Quad.ALL[idx + 1];
		} else {
			this.current = en_Quad.ALL[0];
		}
		Assets.SBANK.switch01(0.7);
	}
	,onDispose: function() {
		dn_Process.prototype.onDispose.call(this);
		var _g = 0;
		var _g1 = Scenery.ALL.slice();
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			e.dispose();
		}
		if(Game.ME == this) {
			Game.ME = null;
		}
	}
	,onResize: function() {
		dn_Process.prototype.onResize.call(this);
	}
	,isPlayArea: function(x,y) {
		var m = 40;
		if(x >= m && y >= m && x < this.level.wid * Const.GRID - m) {
			return y < this.level.hei * Const.GRID - m;
		} else {
			return false;
		}
	}
	,clearMsg: function() {
		if(this.lastMsg != null) {
			this.lastMsg.destroyed = true;
			this.lastMsg = null;
		}
	}
	,tutorial: function(id,str) {
		var _this = this.cd;
		var k = 142606336 | id & 4194303;
		var tmp;
		if(_this.fastCheck.h.hasOwnProperty(k)) {
			tmp = true;
		} else {
			var onComplete = null;
			var cur = _this._getCdObject(k);
			if(!(cur != null && 99999 < cur.frames && false)) {
				_this.fastCheck.h[k] = true;
				if(cur != null) {
					cur.frames = 99999;
					cur.initial = 99999;
				} else {
					var _this1 = _this.cds;
					if(_this1.nalloc >= _this1.size) {
						throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
					}
					var e = _this1.pool[_this1.nalloc++];
					e.recycle();
					var cd = e;
					cd.k = k;
					cd.frames = 99999;
					cd.initial = 99999;
				}
				if(onComplete != null) {
					var cd = _this._getCdObject(k);
					if(cd == null) {
						throw haxe_Exception.thrown("cannot bind onComplete(" + k + "): cooldown " + k + " isn't running");
					}
					cd.onCompleteOnce = onComplete;
				}
			}
			tmp = false;
		}
		if(!tmp) {
			this.message(str,null,true);
			return true;
		}
		return false;
	}
	,message: function(str,col,perma) {
		if(perma == null) {
			perma = false;
		}
		if(col == null) {
			col = 12635879;
		}
		var _gthis = this;
		var wrapper = new h2d_Object();
		this.root.add(wrapper,Const.DP_UI);
		Assets.SBANK.msg01().play(null,0.8);
		var maxWid = 100;
		var bg = new h2d_Bitmap(h2d_Tile.fromColor((255. | 0) << 24 | 1184291),wrapper);
		bg.alpha = 0.85;
		var tf = new h2d_Text(Assets.font,wrapper);
		tf.set_text(str);
		tf.set_maxWidth(maxWid);
		tf.posChanged = true;
		tf.scaleX = 1;
		tf.posChanged = true;
		tf.scaleY = 1;
		tf.set_textColor(col);
		var _this = this.cd;
		var frames = this.secToFrames(4);
		var allowLower = true;
		var onComplete = null;
		if(allowLower == null) {
			allowLower = true;
		}
		var cur = _this._getCdObject(41943040);
		if(!(cur != null && frames < cur.frames && !allowLower)) {
			if(frames <= 0) {
				if(cur != null) {
					_this.fastCheck.remove(cur.k);
					var _this1 = _this.cds;
					var _g = 0;
					var _g1 = _this1.nalloc;
					while(_g < _g1) {
						var i = _g++;
						if(_this1.pool[i] == cur) {
							if(i >= 0 && i < _this1.nalloc) {
								if(_this1.nalloc > 1) {
									var tmp = _this1.pool[i];
									_this1.pool[i] = _this1.pool[_this1.nalloc - 1];
									_this1.pool[_this1.nalloc - 1] = tmp;
									_this1.nalloc--;
								} else {
									_this1.nalloc = 0;
								}
							}
							break;
						}
					}
				}
			} else {
				_this.fastCheck.h[41943040] = true;
				if(cur != null) {
					cur.frames = frames;
					cur.initial = frames;
				} else {
					var _this1 = _this.cds;
					if(_this1.nalloc >= _this1.size) {
						throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
					}
					var e = _this1.pool[_this1.nalloc++];
					e.recycle();
					var cd = e;
					cd.k = 41943040;
					cd.frames = frames;
					cd.initial = frames;
				}
			}
			if(onComplete != null) {
				if(frames <= 0) {
					onComplete();
				} else {
					var cd = _this._getCdObject(41943040);
					if(cd == null) {
						throw haxe_Exception.thrown("cannot bind onComplete(" + 41943040 + "): cooldown " + 41943040 + " isn't running");
					}
					cd.onCompleteOnce = onComplete;
				}
			}
		}
		if(this.lastMsg != null) {
			this.lastMsg.destroyed = true;
		}
		this.lastMsg = this.createChildProcess(function(p) {
			if(!_gthis.cd.fastCheck.h.hasOwnProperty(41943040) && !perma) {
				p.destroyed = true;
				var _tween = _gthis.tw.create_(function() {
					return wrapper.x;
				},function(_setV) {
					wrapper.posChanged = true;
					wrapper.x = _setV;
				},null,Const.LWID,null,1000);
				_tween.end($bind(wrapper,wrapper.remove));
			}
		},function(p) {
			if(wrapper != null && wrapper.parent != null) {
				wrapper.parent.removeChild(wrapper);
			}
			if(_gthis.lastMsg == p) {
				_gthis.clearMsg();
			}
		});
		var p = 5;
		var h = tf.get_textHeight() * tf.scaleY + p * 2;
		bg.posChanged = true;
		bg.scaleX = (maxWid + p * 2) / bg.tile.width;
		bg.posChanged = true;
		bg.scaleY = h / bg.tile.height;
		tf.posChanged = true;
		tf.x = p;
		tf.posChanged = true;
		tf.y = p;
		var v = Const.LWID - maxWid * wrapper.scaleX - p * 2;
		wrapper.posChanged = true;
		wrapper.x = v;
		var _tween = this.tw.create_(function() {
			return wrapper.y;
		},function(_setV) {
			wrapper.posChanged = true;
			wrapper.y = _setV;
		},Const.LHEI,Const.LHEI * 0.2,null,700);
	}
	,notify: function(title,sub,col,bg,perma) {
		if(perma == null) {
			perma = false;
		}
		if(bg == null) {
			bg = 1184291;
		}
		if(col == null) {
			col = 10857675;
		}
		var _gthis = this;
		var wrapper = new h2d_Object();
		this.root.add(wrapper,Const.DP_UI);
		var _tween = this.tw.create_(function() {
			return wrapper.alpha;
		},function(_setV) {
			wrapper.alpha = _setV;
		},0,1,null,350);
		var _tween = this.tw.create_(function() {
			return wrapper.y;
		},function(_setV) {
			wrapper.posChanged = true;
			wrapper.y = _setV;
		},0,Const.LHEI * 0.2,null,500);
		var blurWrapper = new h2d_Object(wrapper);
		var smooth = null;
		var s = new dn_heaps_slib_HSprite(Assets.lib,"notifBg",0);
		if(wrapper != null) {
			wrapper.addChild(s);
		}
		var xRatio = 0.;
		var yRatio = 0.;
		if(yRatio == null) {
			yRatio = 0.5;
		}
		if(xRatio == null) {
			xRatio = 0.5;
		}
		var _this = s.pivot;
		_this.centerFactorX = xRatio;
		_this.centerFactorY = yRatio;
		_this.usingFactor = true;
		_this.isUndefined = false;
		if(smooth != null) {
			s.smooth = smooth;
		}
		var bar = s;
		var alpha = 0.8;
		if(alpha == null) {
			alpha = 1.0;
		}
		var _this = bar.color;
		var a = alpha;
		if(a == null) {
			a = 1.0;
		}
		var c = (a * 255 | 0) << 24 | bg;
		_this.x = (c >> 16 & 255) / 255;
		_this.y = (c >> 8 & 255) / 255;
		_this.z = (c & 255) / 255;
		_this.w = (c >>> 24) / 255;
		var v = Const.LWID;
		var v1;
		if(bar.customTile != null) {
			var _this = bar.pivot;
			if(!_this.isUndefined && !_this.usingFactor) {
				bar.customTile.dx = -(bar.pivot.coordX | 0);
				bar.customTile.dy = -(bar.pivot.coordY | 0);
			} else {
				var _this = bar.pivot;
				if(!_this.isUndefined && _this.usingFactor) {
					bar.customTile.dx = -(bar.customTile.width * bar.pivot.centerFactorX | 0);
					bar.customTile.dy = -(bar.customTile.height * bar.pivot.centerFactorY | 0);
				}
			}
			v1 = bar.customTile;
		} else if(!bar.destroyed && bar.lib != null && bar.groupName != null) {
			var fd = bar.frameData;
			bar.rawTile.setPosition(fd.x,fd.y);
			bar.rawTile.setSize(fd.wid,fd.hei);
			var _this = bar.pivot;
			if(!_this.isUndefined && !_this.usingFactor) {
				bar.rawTile.dx = -(bar.pivot.coordX + fd.realX | 0);
				bar.rawTile.dy = -(bar.pivot.coordY + fd.realY | 0);
			} else {
				var _this = bar.pivot;
				if(!_this.isUndefined && _this.usingFactor) {
					bar.rawTile.dx = -(fd.realWid * bar.pivot.centerFactorX + fd.realX | 0);
					bar.rawTile.dy = -(fd.realHei * bar.pivot.centerFactorY + fd.realY | 0);
				}
			}
			v1 = bar.rawTile;
		} else {
			var _this = bar.pivot;
			if(!_this.isUndefined && !_this.usingFactor) {
				bar.rawTile.dx = -(bar.pivot.coordX | 0);
				bar.rawTile.dy = -(bar.pivot.coordY | 0);
			} else {
				var _this = bar.pivot;
				if(!_this.isUndefined && _this.usingFactor) {
					bar.rawTile.dx = -(bar.rawTile.width * bar.pivot.centerFactorX | 0);
					bar.rawTile.dy = -(bar.rawTile.height * bar.pivot.centerFactorY | 0);
				}
			}
			v1 = bar.rawTile;
		}
		bar.posChanged = true;
		bar.scaleX = v / v1.width;
		var tf = new h2d_Text(Assets.font,wrapper);
		tf.set_text(title);
		tf.posChanged = true;
		tf.scaleX = 2;
		tf.posChanged = true;
		tf.scaleY = 2;
		tf.set_textColor(col);
		var x = Const.LWID * 0.5 - tf.get_textWidth() * tf.scaleX * 0.5;
		tf.posChanged = true;
		tf.x = x;
		tf.posChanged = true;
		tf.y = 0;
		var title = tf;
		var tf = new h2d_Text(Assets.font,wrapper);
		tf.set_text(sub);
		tf.set_textColor(16777215);
		var x = Const.LWID * 0.5 - tf.get_textWidth() * tf.scaleX * 0.5;
		tf.posChanged = true;
		tf.x = x;
		tf.posChanged = true;
		tf.y = 25;
		var sub = tf;
		var _this = this.cd;
		var frames = this.secToFrames(4);
		var allowLower = true;
		var onComplete = null;
		if(allowLower == null) {
			allowLower = true;
		}
		var cur = _this._getCdObject(41943040);
		if(!(cur != null && frames < cur.frames && !allowLower)) {
			if(frames <= 0) {
				if(cur != null) {
					_this.fastCheck.remove(cur.k);
					var _this1 = _this.cds;
					var _g = 0;
					var _g1 = _this1.nalloc;
					while(_g < _g1) {
						var i = _g++;
						if(_this1.pool[i] == cur) {
							if(i >= 0 && i < _this1.nalloc) {
								if(_this1.nalloc > 1) {
									var tmp = _this1.pool[i];
									_this1.pool[i] = _this1.pool[_this1.nalloc - 1];
									_this1.pool[_this1.nalloc - 1] = tmp;
									_this1.nalloc--;
								} else {
									_this1.nalloc = 0;
								}
							}
							break;
						}
					}
				}
			} else {
				_this.fastCheck.h[41943040] = true;
				if(cur != null) {
					cur.frames = frames;
					cur.initial = frames;
				} else {
					var _this1 = _this.cds;
					if(_this1.nalloc >= _this1.size) {
						throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
					}
					var e = _this1.pool[_this1.nalloc++];
					e.recycle();
					var cd = e;
					cd.k = 41943040;
					cd.frames = frames;
					cd.initial = frames;
				}
			}
			if(onComplete != null) {
				if(frames <= 0) {
					onComplete();
				} else {
					var cd = _this._getCdObject(41943040);
					if(cd == null) {
						throw haxe_Exception.thrown("cannot bind onComplete(" + 41943040 + "): cooldown " + 41943040 + " isn't running");
					}
					cd.onCompleteOnce = onComplete;
				}
			}
		}
		this.createChildProcess(function(p) {
			var _this = _gthis.cd;
			var tmp;
			if(_this.fastCheck.h.hasOwnProperty(46137344)) {
				tmp = true;
			} else {
				var onComplete = null;
				var cur = _this._getCdObject(46137344);
				if(!(cur != null && 1 < cur.frames && false)) {
					_this.fastCheck.h[46137344] = true;
					if(cur != null) {
						cur.frames = 1;
						cur.initial = 1;
					} else {
						var _this1 = _this.cds;
						if(_this1.nalloc >= _this1.size) {
							throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
						}
						var e = _this1.pool[_this1.nalloc++];
						e.recycle();
						var cd = e;
						cd.k = 46137344;
						cd.frames = 1;
						cd.initial = 1;
					}
					if(onComplete != null) {
						var cd = _this._getCdObject(46137344);
						if(cd == null) {
							throw haxe_Exception.thrown("cannot bind onComplete(" + 46137344 + "): cooldown " + 46137344 + " isn't running");
						}
						cd.onCompleteOnce = onComplete;
					}
				}
				tmp = false;
			}
			if(!tmp) {
				var smooth = null;
				var s = new dn_heaps_slib_HSprite(Assets.lib,"blur",0);
				if(blurWrapper != null) {
					blurWrapper.addChild(s);
				}
				var xRatio = 0.;
				var yRatio = 0.;
				if(yRatio == null) {
					yRatio = 0.5;
				}
				if(xRatio == null) {
					xRatio = 0.5;
				}
				var _this = s.pivot;
				_this.centerFactorX = xRatio;
				_this.centerFactorY = yRatio;
				_this.usingFactor = true;
				_this.isUndefined = false;
				if(smooth != null) {
					s.smooth = smooth;
				}
				var s1 = s;
				var sign = null;
				if(sign == null) {
					sign = false;
				}
				var alpha = sign ? (0.2 + Math.random() * 0.099999999999999978) * (Std.random(2) * 2 - 1) : 0.2 + Math.random() * 0.099999999999999978;
				if(alpha == null) {
					alpha = 1.0;
				}
				var _this = s1.color;
				var a = alpha;
				if(a == null) {
					a = 1.0;
				}
				var c = (a * 255 | 0) << 24 | bg;
				_this.x = (c >> 16 & 255) / 255;
				_this.y = (c >> 8 & 255) / 255;
				_this.z = (c & 255) / 255;
				_this.w = (c >>> 24) / 255;
				s1.fitToBox(Const.LWID);
				var v = Const.LWID;
				var sign = null;
				if(sign == null) {
					sign = false;
				}
				var v1 = sign ? (0.5 + Math.random() * 0.5) * (Std.random(2) * 2 - 1) : 0.5 + Math.random() * 0.5;
				s1.posChanged = true;
				s1.x = v * v1;
				var v = s1.scaleY * 0.35;
				s1.posChanged = true;
				s1.scaleY = v;
				var max;
				if(bar.customTile != null) {
					var _this = bar.pivot;
					if(!_this.isUndefined && !_this.usingFactor) {
						bar.customTile.dx = -(bar.pivot.coordX | 0);
						bar.customTile.dy = -(bar.pivot.coordY | 0);
					} else {
						var _this = bar.pivot;
						if(!_this.isUndefined && _this.usingFactor) {
							bar.customTile.dx = -(bar.customTile.width * bar.pivot.centerFactorX | 0);
							bar.customTile.dy = -(bar.customTile.height * bar.pivot.centerFactorY | 0);
						}
					}
					max = bar.customTile;
				} else if(!bar.destroyed && bar.lib != null && bar.groupName != null) {
					var fd = bar.frameData;
					bar.rawTile.setPosition(fd.x,fd.y);
					bar.rawTile.setSize(fd.wid,fd.hei);
					var _this = bar.pivot;
					if(!_this.isUndefined && !_this.usingFactor) {
						bar.rawTile.dx = -(bar.pivot.coordX + fd.realX | 0);
						bar.rawTile.dy = -(bar.pivot.coordY + fd.realY | 0);
					} else {
						var _this = bar.pivot;
						if(!_this.isUndefined && _this.usingFactor) {
							bar.rawTile.dx = -(fd.realWid * bar.pivot.centerFactorX + fd.realX | 0);
							bar.rawTile.dy = -(fd.realHei * bar.pivot.centerFactorY + fd.realY | 0);
						}
					}
					max = bar.rawTile;
				} else {
					var _this = bar.pivot;
					if(!_this.isUndefined && !_this.usingFactor) {
						bar.rawTile.dx = -(bar.pivot.coordX | 0);
						bar.rawTile.dy = -(bar.pivot.coordY | 0);
					} else {
						var _this = bar.pivot;
						if(!_this.isUndefined && _this.usingFactor) {
							bar.rawTile.dx = -(bar.rawTile.width * bar.pivot.centerFactorX | 0);
							bar.rawTile.dy = -(bar.rawTile.height * bar.pivot.centerFactorY | 0);
						}
					}
					max = bar.rawTile;
				}
				var max1 = max.height * bar.scaleY;
				var max;
				if(s1.customTile != null) {
					var _this = s1.pivot;
					if(!_this.isUndefined && !_this.usingFactor) {
						s1.customTile.dx = -(s1.pivot.coordX | 0);
						s1.customTile.dy = -(s1.pivot.coordY | 0);
					} else {
						var _this = s1.pivot;
						if(!_this.isUndefined && _this.usingFactor) {
							s1.customTile.dx = -(s1.customTile.width * s1.pivot.centerFactorX | 0);
							s1.customTile.dy = -(s1.customTile.height * s1.pivot.centerFactorY | 0);
						}
					}
					max = s1.customTile;
				} else if(!s1.destroyed && s1.lib != null && s1.groupName != null) {
					var fd = s1.frameData;
					s1.rawTile.setPosition(fd.x,fd.y);
					s1.rawTile.setSize(fd.wid,fd.hei);
					var _this = s1.pivot;
					if(!_this.isUndefined && !_this.usingFactor) {
						s1.rawTile.dx = -(s1.pivot.coordX + fd.realX | 0);
						s1.rawTile.dy = -(s1.pivot.coordY + fd.realY | 0);
					} else {
						var _this = s1.pivot;
						if(!_this.isUndefined && _this.usingFactor) {
							s1.rawTile.dx = -(fd.realWid * s1.pivot.centerFactorX + fd.realX | 0);
							s1.rawTile.dy = -(fd.realHei * s1.pivot.centerFactorY + fd.realY | 0);
						}
					}
					max = s1.rawTile;
				} else {
					var _this = s1.pivot;
					if(!_this.isUndefined && !_this.usingFactor) {
						s1.rawTile.dx = -(s1.pivot.coordX | 0);
						s1.rawTile.dy = -(s1.pivot.coordY | 0);
					} else {
						var _this = s1.pivot;
						if(!_this.isUndefined && _this.usingFactor) {
							s1.rawTile.dx = -(s1.rawTile.width * s1.pivot.centerFactorX | 0);
							s1.rawTile.dy = -(s1.rawTile.height * s1.pivot.centerFactorY | 0);
						}
					}
					max = s1.rawTile;
				}
				var max2 = max1 - max.height * s1.scaleY;
				var sign = null;
				if(sign == null) {
					sign = false;
				}
				var v = sign ? Math.random() * max2 * (Std.random(2) * 2 - 1) : Math.random() * max2;
				s1.posChanged = true;
				s1.y = v;
				var _tween = _gthis.tw.create_(function() {
					return s1.alpha;
				},function(_setV) {
					s1.alpha = _setV;
				},null,0,null,500);
				var _tween = _gthis.tw.create_(function() {
					return s1.x;
				},function(_setV) {
					s1.posChanged = true;
					s1.x = _setV;
				},null,s1.x - Const.LWID * 1.5,dn_TType.TLinear,500);
				_tween.end($bind(s1,s1.remove));
			}
			if(!_gthis.cd.fastCheck.h.hasOwnProperty(41943040) && !perma) {
				p.destroyed = true;
				var _tween = _gthis.tw.create_(function() {
					return wrapper.alpha;
				},function(_setV) {
					wrapper.alpha = _setV;
				},1,0,null,1500);
				_tween.end($bind(wrapper,wrapper.remove));
			}
		});
	}
	,getScore: function() {
		var x = (1 - 2 * MiniMap.ME.creepRatio) * 1000;
		return (x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0;
	}
	,win: function() {
		this.ended = true;
		var _this = this.cd;
		var allowLower = true;
		var onComplete = null;
		if(allowLower == null) {
			allowLower = true;
		}
		var cur = _this._getCdObject(146800640);
		if(!(cur != null && 9999 < cur.frames && !allowLower)) {
			_this.fastCheck.h[146800640] = true;
			if(cur != null) {
				cur.frames = 9999;
				cur.initial = 9999;
			} else {
				var _this1 = _this.cds;
				if(_this1.nalloc >= _this1.size) {
					throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
				}
				var e = _this1.pool[_this1.nalloc++];
				e.recycle();
				var cd = e;
				cd.k = 146800640;
				cd.frames = 9999;
				cd.initial = 9999;
			}
			if(onComplete != null) {
				var cd = _this._getCdObject(146800640);
				if(cd == null) {
					throw haxe_Exception.thrown("cannot bind onComplete(" + 146800640 + "): cooldown " + 146800640 + " isn't running");
				}
				cd.onCompleteOnce = onComplete;
			}
		}
		this.clearMsg();
		var wrapper = new h2d_Object();
		this.root.add(wrapper,Const.DP_UI);
		this.notify("SECTOR CLEARED!","Enemy expansion stopped!",16768768,null,true);
		var tf = new h2d_Text(Assets.fontOutline,wrapper);
		tf.posChanged = true;
		tf.scaleX = 2;
		tf.posChanged = true;
		tf.scaleY = 2;
		tf.set_text(["INFECTION: " + (MiniMap.ME.creepRatio * 100 | 0) + "%","SCORE: " + this.getScore(),"","Press C to continue"].join("\n"));
		var v = Const.LWID * 0.5 - tf.get_textWidth() * tf.scaleX * 0.5;
		tf.posChanged = true;
		tf.x = v;
		tf.posChanged = true;
		tf.y = Const.LHEI * 0.4;
		var _tween = this.tw.create_(function() {
			return tf.x;
		},function(_setV) {
			tf.posChanged = true;
			tf.x = _setV;
		},Const.LWID,tf.x,null,350);
		_tween.delayMs(250);
		this.teint(12271620,0.5);
	}
	,teint: function(c,tr) {
		var f = new h2d_filter_ColorMatrix();
		this.scroller.set_filter(f);
		var r = 0.;
		var _tween = this.tw.create_(function() {
			return r;
		},function(_setV) {
			r = _setV;
		},null,tr,null,2000);
		_tween.update(function() {
			var ratioNewColor = r;
			var ratioOldColor = 1 - r;
			if(ratioNewColor == null) {
				ratioNewColor = 1.0;
			}
			if(ratioOldColor == null) {
				ratioOldColor = 1 - ratioNewColor;
			}
			var rgb_r = c >> 16 & 255;
			var rgb_g = c >> 8 & 255;
			var rgb_b = c & 255;
			var r1 = ratioNewColor * rgb_r / 255;
			var g = ratioNewColor * rgb_g / 255;
			var b = ratioNewColor * rgb_b / 255;
			var m = [ratioOldColor + r1,g,b,0,r1,ratioOldColor + g,b,0,r1,g,ratioOldColor + b,0,0,0,0,1];
			var m1 = h3d_Matrix.L(m);
			f.pass.shader.matrix__ = m1;
		});
	}
	,gameOver: function() {
		this.ended = true;
		this.clearMsg();
		var wrapper = new h2d_Object();
		this.root.add(wrapper,Const.DP_UI);
		this.notify("You failed!","The contamination reached 50% of the area!",16711680,null,true);
		var tf = new h2d_Text(Assets.fontOutline,wrapper);
		tf.posChanged = true;
		tf.scaleX = 2;
		tf.posChanged = true;
		tf.scaleY = 2;
		tf.set_text(["Press C to continue"].join("\n"));
		var v = Const.LWID * 0.5 - tf.get_textWidth() * tf.scaleX * 0.5;
		tf.posChanged = true;
		tf.x = v;
		tf.posChanged = true;
		tf.y = Const.LHEI * 0.4;
		var _tween = this.tw.create_(function() {
			return tf.x;
		},function(_setV) {
			tf.posChanged = true;
			tf.x = _setV;
		},Const.LWID,tf.x,null,350);
		_tween.delayMs(250);
		this.teint(9895936,0.7);
	}
	,postUpdate: function() {
		dn_Process.prototype.postUpdate.call(this);
		var tmp = this.utmod;
		var tmp1 = this.getComputedTimeMultiplier();
		Assets.lib.tmod = tmp * tmp1;
	}
	,nextLevel: function() {
		var _gthis = this;
		var _this = Assets.lib;
		var frame = this.level.lid + 1;
		if(frame == null) {
			frame = 0;
		}
		if(!(frame >= 0 && Object.prototype.hasOwnProperty.call(_this.groups.h,"level") && _this.groups.h["level"].frames.length > frame)) {
			Main.ME.transition(this,function() {
				new Outro();
			});
		} else {
			Main.ME.transition(this,function() {
				new Game(_gthis.level.lid + 1);
			});
		}
	}
	,update: function() {
		var _gthis = this;
		dn_Process.prototype.update.call(this);
		if(this.level.lid == 0) {
			if(this.level.lid == 0 && (this.current.x / Const.GRID | 0) >= 55 && this.cd.fastCheck.h.hasOwnProperty(50331648)) {
				var _this = this.cd;
				var _g = 0;
				var _g1 = _this.cds.nalloc;
				while(_g < _g1) {
					var i = _g++;
					var _this1 = _this.cds;
					if((i < 0 || i >= _this1.nalloc ? null : _this1.pool[i]).k == 50331648) {
						var _this2 = _this.cds;
						_this.fastCheck.remove((i < 0 || i >= _this2.nalloc ? null : _this2.pool[i]).k);
						var _this3 = _this.cds;
						if(i >= 0 && i < _this3.nalloc) {
							if(_this3.nalloc > 1) {
								var tmp = _this3.pool[i];
								_this3.pool[i] = _this3.pool[_this3.nalloc - 1];
								_this3.pool[_this3.nalloc - 1] = tmp;
								_this3.nalloc--;
							} else {
								_this3.nalloc = 0;
							}
						}
						break;
					}
				}
				this.message("You cannot destroy GENERATORS using your current weapon. Press SPACE to switch to your secondary robot.",null,true);
			}
			if(this.current.id == 1) {
				this.tutorial(0,"Missiles from this robot can destroy GENERATORS, but have NO effect on enemy TROOPS.");
			}
		}
		var s = 0.3;
		var fh = this.scroller;
		fh.posChanged = true;
		fh.x += (-(this.current.x - Const.LWID * 0.5) - this.scroller.x) * s;
		var fh = this.scroller;
		fh.posChanged = true;
		fh.y += (-(this.current.y - Const.LHEI * 0.5) - this.scroller.y) * s;
		var _this = this.scroller;
		var x = this.scroller.x;
		var min = -this.level.wid * Const.GRID + Const.LWID;
		_this.posChanged = true;
		_this.x = x < min ? min : x > 0 ? 0 : x;
		var _this = this.scroller;
		var x = this.scroller.y;
		var min = -this.level.hei * Const.GRID + Const.LHEI;
		_this.posChanged = true;
		_this.y = x < min ? min : x > 0 ? 0 : x;
		var tmp;
		if(this.ended && hxd_Key.isPressed(67)) {
			var _this = this.cd;
			var tmp1;
			if(_this.fastCheck.h.hasOwnProperty(150994944)) {
				tmp1 = true;
			} else {
				var onComplete = null;
				var cur = _this._getCdObject(150994944);
				if(!(cur != null && 9999 < cur.frames && false)) {
					_this.fastCheck.h[150994944] = true;
					if(cur != null) {
						cur.frames = 9999;
						cur.initial = 9999;
					} else {
						var _this1 = _this.cds;
						if(_this1.nalloc >= _this1.size) {
							throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
						}
						var e = _this1.pool[_this1.nalloc++];
						e.recycle();
						var cd = e;
						cd.k = 150994944;
						cd.frames = 9999;
						cd.initial = 9999;
					}
					if(onComplete != null) {
						var cd = _this._getCdObject(150994944);
						if(cd == null) {
							throw haxe_Exception.thrown("cannot bind onComplete(" + 150994944 + "): cooldown " + 150994944 + " isn't running");
						}
						cd.onCompleteOnce = onComplete;
					}
				}
				tmp1 = false;
			}
			tmp = !tmp1;
		} else {
			tmp = false;
		}
		if(tmp) {
			Assets.SBANK.menu01(0.8);
			if(this.cd.fastCheck.h.hasOwnProperty(146800640)) {
				this.nextLevel();
			} else {
				Main.ME.transition(this,function() {
					new Game(_gthis.level.lid);
				});
			}
		}
		if(hxd_Key.isPressed(75)) {
			Game.kidMode = !Game.kidMode;
			this.notify("Kid mode",Game.kidMode ? "ON" : "Off");
		}
		if(!this.ended && MiniMap.ME.creepRatio >= 0.5) {
			this.gameOver();
		}
		if(!this.ended && en_Mob.ALL.length == 0) {
			this.win();
		}
		var w = 30;
		var tmp;
		if(MiniMap.ME.creepRatio >= w / 100) {
			var _this = this.cd;
			var k = 155189248 | w & 4194303;
			var tmp1;
			if(_this.fastCheck.h.hasOwnProperty(k)) {
				tmp1 = true;
			} else {
				var onComplete = null;
				var cur = _this._getCdObject(k);
				if(!(cur != null && 99999 < cur.frames && false)) {
					_this.fastCheck.h[k] = true;
					if(cur != null) {
						cur.frames = 99999;
						cur.initial = 99999;
					} else {
						var _this1 = _this.cds;
						if(_this1.nalloc >= _this1.size) {
							throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
						}
						var e = _this1.pool[_this1.nalloc++];
						e.recycle();
						var cd = e;
						cd.k = k;
						cd.frames = 99999;
						cd.initial = 99999;
					}
					if(onComplete != null) {
						var cd = _this._getCdObject(k);
						if(cd == null) {
							throw haxe_Exception.thrown("cannot bind onComplete(" + k + "): cooldown " + k + " isn't running");
						}
						cd.onCompleteOnce = onComplete;
					}
				}
				tmp1 = false;
			}
			tmp = !tmp1;
		} else {
			tmp = false;
		}
		if(tmp) {
			this.notify("WARNING","Sector contamination at " + w + "%!",16764712,16711680);
		}
		var w = 40;
		var tmp;
		if(MiniMap.ME.creepRatio >= w / 100) {
			var _this = this.cd;
			var k = 155189248 | w & 4194303;
			var tmp1;
			if(_this.fastCheck.h.hasOwnProperty(k)) {
				tmp1 = true;
			} else {
				var onComplete = null;
				var cur = _this._getCdObject(k);
				if(!(cur != null && 99999 < cur.frames && false)) {
					_this.fastCheck.h[k] = true;
					if(cur != null) {
						cur.frames = 99999;
						cur.initial = 99999;
					} else {
						var _this1 = _this.cds;
						if(_this1.nalloc >= _this1.size) {
							throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
						}
						var e = _this1.pool[_this1.nalloc++];
						e.recycle();
						var cd = e;
						cd.k = k;
						cd.frames = 99999;
						cd.initial = 99999;
					}
					if(onComplete != null) {
						var cd = _this._getCdObject(k);
						if(cd == null) {
							throw haxe_Exception.thrown("cannot bind onComplete(" + k + "): cooldown " + k + " isn't running");
						}
						cd.onCompleteOnce = onComplete;
					}
				}
				tmp1 = false;
			}
			tmp = !tmp1;
		} else {
			tmp = false;
		}
		if(tmp) {
			this.notify("WARNING","Sector contamination at " + w + "%!",16764712,16711680);
		}
		var _g = 0;
		var _g1 = Scenery.ALL;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			e.update();
		}
		var i = 0;
		while(i < Scenery.ALL.length) if(Scenery.ALL[i].destroyed) {
			Scenery.ALL[i].dispose();
		} else {
			++i;
		}
	}
	,__class__: Game
});
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k = s.split("-");
		return new Date(k[0],k[1] - 1,k[2],0,0,0);
	case 19:
		var k = s.split(" ");
		var y = k[0].split("-");
		var t = k[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw haxe_Exception.thrown("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Intro = function() {
	var _gthis = this;
	dn_Process.call(this,Main.ME);
	this.createRoot(Main.ME.root);
	var xr = 0.5;
	var yr = 0.5;
	var smooth = null;
	var p = this.root;
	if(yr == null) {
		yr = 0.;
	}
	if(xr == null) {
		xr = 0.;
	}
	var s = new dn_heaps_slib_HSprite(Assets.lib,"logo",0);
	if(p != null) {
		p.addChild(s);
	}
	var xRatio = xr;
	var yRatio = yr;
	if(yRatio == null) {
		yRatio = 0.5;
	}
	if(xRatio == null) {
		xRatio = 0.5;
	}
	var _this = s.pivot;
	_this.centerFactorX = xRatio;
	_this.centerFactorY = yRatio;
	_this.usingFactor = true;
	_this.isUndefined = false;
	if(smooth != null) {
		s.smooth = smooth;
	}
	var logo = s;
	logo.posChanged = true;
	logo.x = Const.LWID * 0.5;
	logo.posChanged = true;
	logo.y = Const.LHEI * 0.5;
	var _tween = this.tw.create_(function() {
		return logo.alpha;
	},function(_setV) {
		logo.alpha = _setV;
	},0,1,null,500);
	var tf = new h2d_Text(Assets.font,this.root);
	tf.set_text("A game by Sébastien Bénard");
	var v = Const.LWID * 0.5 - tf.get_textWidth() * tf.scaleX * 0.5;
	tf.posChanged = true;
	tf.x = v;
	tf.posChanged = true;
	tf.y = Const.LHEI * 0.62;
	var _tween = this.tw.create_(function() {
		return tf.alpha;
	},function(_setV) {
		tf.alpha = _setV;
	},0,1,null,1500);
	_tween.delayMs(500);
	var tf1 = tf;
	var tf2 = new h2d_Text(Assets.font,this.root);
	tf2.set_textColor(8556972);
	tf2.set_text("Click to start");
	var v = Const.LWID * 0.5 - tf2.get_textWidth() * tf2.scaleX * 0.5;
	tf2.posChanged = true;
	tf2.x = v;
	tf2.posChanged = true;
	tf2.y = Const.LHEI * 0.8;
	var _tween = this.tw.create_(function() {
		return tf2.alpha;
	},function(_setV) {
		tf2.alpha = _setV;
	},0,1,null,1500);
	_tween.delayMs(1200);
	var tf21 = tf2;
	var i = new h2d_Interactive(dn_Process.CUSTOM_STAGE_WIDTH > 0 ? dn_Process.CUSTOM_STAGE_WIDTH : hxd_Window.getInstance().get_width(),dn_Process.CUSTOM_STAGE_HEIGHT > 0 ? dn_Process.CUSTOM_STAGE_HEIGHT : hxd_Window.getInstance().get_height(),this.root);
	i.onClick = function(_) {
		var _this = _gthis.cd;
		var tmp;
		if(_this.fastCheck.h.hasOwnProperty(20971520)) {
			tmp = true;
		} else {
			var onComplete = null;
			var cur = _this._getCdObject(20971520);
			if(!(cur != null && 9999 < cur.frames && false)) {
				_this.fastCheck.h[20971520] = true;
				if(cur != null) {
					cur.frames = 9999;
					cur.initial = 9999;
				} else {
					var _this1 = _this.cds;
					if(_this1.nalloc >= _this1.size) {
						throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
					}
					var e = _this1.pool[_this1.nalloc++];
					e.recycle();
					var cd = e;
					cd.k = 20971520;
					cd.frames = 9999;
					cd.initial = 9999;
				}
				if(onComplete != null) {
					var cd = _this._getCdObject(20971520);
					if(cd == null) {
						throw haxe_Exception.thrown("cannot bind onComplete(" + 20971520 + "): cooldown " + 20971520 + " isn't running");
					}
					cd.onCompleteOnce = onComplete;
				}
			}
			tmp = false;
		}
		if(!tmp) {
			var _this = _gthis.cd;
			var allowLower = true;
			var onComplete = null;
			if(allowLower == null) {
				allowLower = true;
			}
			var cur = _this._getCdObject(25165824);
			if(!(cur != null && 30 < cur.frames && !allowLower)) {
				_this.fastCheck.h[25165824] = true;
				if(cur != null) {
					cur.frames = 30;
					cur.initial = 30;
				} else {
					var _this1 = _this.cds;
					if(_this1.nalloc >= _this1.size) {
						throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
					}
					var e = _this1.pool[_this1.nalloc++];
					e.recycle();
					var cd = e;
					cd.k = 25165824;
					cd.frames = 30;
					cd.initial = 30;
				}
				if(onComplete != null) {
					var cd = _this._getCdObject(25165824);
					if(cd == null) {
						throw haxe_Exception.thrown("cannot bind onComplete(" + 25165824 + "): cooldown " + 25165824 + " isn't running");
					}
					cd.onCompleteOnce = onComplete;
				}
			}
			Assets.SBANK.menu01(0.8);
			var _tween = _gthis.tw.create_(function() {
				return tf1.alpha;
			},function(_setV) {
				tf1.alpha = _setV;
			},null,0,null,500);
			var _tween = _gthis.tw.create_(function() {
				return tf21.alpha;
			},function(_setV) {
				tf21.alpha = _setV;
			},null,0,null,500);
			var _tween = _gthis.tw.create_(function() {
				return logo.y;
			},function(_setV) {
				logo.posChanged = true;
				logo.y = _setV;
			},null,logo.y - 100,null,250);
			var tf = new h2d_Text(Assets.font,_gthis.root);
			tf.set_textColor(9810911);
			tf.set_text(["EARTH IS IN GREAT DANGER.","A new terrifying menace is spreading everywhere, growing really rapidly.","Some call it the CREEP.","But we call it a fucking good reason to draw our biggest guns to kick some ass. And show YOU who the hell really rule this world.","To protect freedom, we use lethal force.","We are the FULL METAL DEMOCRACY special unit."].join("\n\n"));
			tf.set_maxWidth(200);
			var v = Const.LWID * 0.5 - tf.maxWidth * tf.scaleX * 0.5;
			tf.posChanged = true;
			tf.x = v;
			tf.posChanged = true;
			tf.y = Const.LHEI * 0.35;
			tf.set_textAlign(h2d_Align.Center);
			var _tween = _gthis.tw.create_(function() {
				return tf.alpha;
			},function(_setV) {
				tf.alpha = _setV;
			},0,1,null,1000);
			_tween.delayMs(500);
		} else {
			var tmp;
			if(!_gthis.cd.fastCheck.h.hasOwnProperty(25165824) && _gthis.cd.fastCheck.h.hasOwnProperty(20971520)) {
				var _this = _gthis.cd;
				var tmp1;
				if(_this.fastCheck.h.hasOwnProperty(29360128)) {
					tmp1 = true;
				} else {
					var onComplete = null;
					var cur = _this._getCdObject(29360128);
					if(!(cur != null && 9999 < cur.frames && false)) {
						_this.fastCheck.h[29360128] = true;
						if(cur != null) {
							cur.frames = 9999;
							cur.initial = 9999;
						} else {
							var _this1 = _this.cds;
							if(_this1.nalloc >= _this1.size) {
								throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
							}
							var e = _this1.pool[_this1.nalloc++];
							e.recycle();
							var cd = e;
							cd.k = 29360128;
							cd.frames = 9999;
							cd.initial = 9999;
						}
						if(onComplete != null) {
							var cd = _this._getCdObject(29360128);
							if(cd == null) {
								throw haxe_Exception.thrown("cannot bind onComplete(" + 29360128 + "): cooldown " + 29360128 + " isn't running");
							}
							cd.onCompleteOnce = onComplete;
						}
					}
					tmp1 = false;
				}
				tmp = !tmp1;
			} else {
				tmp = false;
			}
			if(tmp) {
				Assets.SBANK.menu01(0.8);
				Main.ME.transition(_gthis,function() {
					new Game();
				});
			}
		}
	};
};
$hxClasses["Intro"] = Intro;
Intro.__name__ = "Intro";
Intro.__super__ = dn_Process;
Intro.prototype = $extend(dn_Process.prototype,{
	onDispose: function() {
		dn_Process.prototype.onDispose.call(this);
	}
	,onResize: function() {
		dn_Process.prototype.onResize.call(this);
	}
	,update: function() {
		dn_Process.prototype.update.call(this);
	}
	,__class__: Intro
});
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
var Level = function(lid) {
	dn_Process.call(this,Game.ME);
	this.lid = lid;
	this.createRootInLayers(Game.ME.scroller,Const.DP_BG);
	this.spots = new haxe_ds_StringMap();
	this.creepMap = new haxe_ds_IntMap();
	this.curDirtGroup = 0;
	this.dirtGroups = [];
	var _this = Assets.lib;
	if(_this.pages.length > 1) {
		throw haxe_Exception.thrown("Cannot access tile when there is multiple pages");
	}
	var roads = new h2d_TileGroup(_this.pages[0],this.root);
	var _this = Assets.lib;
	if(_this.pages.length > 1) {
		throw haxe_Exception.thrown("Cannot access tile when there is multiple pages");
	}
	var ground = new h2d_TileGroup(_this.pages[0],this.root);
	var _this = Assets.lib;
	if(_this.pages.length > 1) {
		throw haxe_Exception.thrown("Cannot access tile when there is multiple pages");
	}
	this.creep = new h2d_TileGroup(_this.pages[0],this.root);
	var tmp = this.dirtGroups;
	var _this = Assets.lib;
	if(_this.pages.length > 1) {
		throw haxe_Exception.thrown("Cannot access tile when there is multiple pages");
	}
	tmp.push(new h2d_TileGroup(_this.pages[0],this.root));
	var tmp = this.dirtGroups;
	var _this = Assets.lib;
	if(_this.pages.length > 1) {
		throw haxe_Exception.thrown("Cannot access tile when there is multiple pages");
	}
	tmp.push(new h2d_TileGroup(_this.pages[0],this.root));
	var tmp = this.dirtGroups;
	var _this = Assets.lib;
	if(_this.pages.length > 1) {
		throw haxe_Exception.thrown("Cannot access tile when there is multiple pages");
	}
	tmp.push(new h2d_TileGroup(_this.pages[0],this.root));
	var tmp = this.dirtGroups;
	var _this = Assets.lib;
	if(_this.pages.length > 1) {
		throw haxe_Exception.thrown("Cannot access tile when there is multiple pages");
	}
	tmp.push(new h2d_TileGroup(_this.pages[0],this.root));
	var tmp = this.dirtGroups;
	var _this = Assets.lib;
	if(_this.pages.length > 1) {
		throw haxe_Exception.thrown("Cannot access tile when there is multiple pages");
	}
	tmp.push(new h2d_TileGroup(_this.pages[0],this.root));
	var tmp = this.dirtGroups;
	var _this = Assets.lib;
	if(_this.pages.length > 1) {
		throw haxe_Exception.thrown("Cannot access tile when there is multiple pages");
	}
	tmp.push(new h2d_TileGroup(_this.pages[0],this.root));
	var tmp = this.dirtGroups;
	var _this = Assets.lib;
	if(_this.pages.length > 1) {
		throw haxe_Exception.thrown("Cannot access tile when there is multiple pages");
	}
	tmp.push(new h2d_TileGroup(_this.pages[0],this.root));
	var tmp = this.dirtGroups;
	var _this = Assets.lib;
	if(_this.pages.length > 1) {
		throw haxe_Exception.thrown("Cannot access tile when there is multiple pages");
	}
	tmp.push(new h2d_TileGroup(_this.pages[0],this.root));
	var tmp = this.dirtGroups;
	var _this = Assets.lib;
	if(_this.pages.length > 1) {
		throw haxe_Exception.thrown("Cannot access tile when there is multiple pages");
	}
	tmp.push(new h2d_TileGroup(_this.pages[0],this.root));
	var tmp = this.dirtGroups;
	var _this = Assets.lib;
	if(_this.pages.length > 1) {
		throw haxe_Exception.thrown("Cannot access tile when there is multiple pages");
	}
	tmp.push(new h2d_TileGroup(_this.pages[0],this.root));
	var _this = Assets.lib;
	if(_this.pages.length > 1) {
		throw haxe_Exception.thrown("Cannot access tile when there is multiple pages");
	}
	var shadows = new h2d_TileGroup(_this.pages[0],this.root);
	shadows.alpha = Const.SHADOW;
	var _this = Assets.lib;
	if(_this.pages.length > 1) {
		throw haxe_Exception.thrown("Cannot access tile when there is multiple pages");
	}
	this.fronts = new h2d_TileGroup(_this.pages[0]);
	Game.ME.scroller.add(this.fronts,Const.DP_BG_FRONTS);
	var pixels;
	switch(lid) {
	case 0:
		pixels = hxd_Res.get_loader().loadCache("level0.png",hxd_res_Image).getPixels();
		break;
	case 1:
		pixels = hxd_Res.get_loader().loadCache("level1.png",hxd_res_Image).getPixels();
		break;
	case 2:
		pixels = hxd_Res.get_loader().loadCache("level2.png",hxd_res_Image).getPixels();
		break;
	default:
		pixels = hxd_Res.get_loader().loadCache("level3.png",hxd_res_Image).getPixels();
	}
	this.wid = pixels.width;
	this.hei = pixels.height;
	this.colMap = [];
	var _g = 0;
	var _g1 = this.wid;
	while(_g < _g1) {
		var cx = _g++;
		this.colMap[cx] = [];
		var _g2 = 0;
		var _g3 = this.hei;
		while(_g2 < _g3) {
			var cy = _g2++;
			var p = pixels.getPixel(cx,cy);
			var k;
			switch(p) {
			case -16745748:
				k = "quad0";
				break;
			case -16711681:
				k = "zergWander";
				break;
			case -9332698:
				k = "tree";
				break;
			case -3453391:
				k = "house";
				break;
			case -1823233:
				k = "csource";
				break;
			case -1720417:
				k = "road";
				break;
			case -65536:
				k = "zerg";
				break;
			case -65281:
				k = "quad1";
				break;
			default:
				k = null;
			}
			if(k != null) {
				if(!Object.prototype.hasOwnProperty.call(this.spots.h,k)) {
					this.spots.h[k] = [];
				}
				this.spots.h[k].push({ cx : cx, cy : cy});
			}
		}
	}
	pixels.dispose();
	var _g = 0;
	var _g1 = Object.prototype.hasOwnProperty.call(this.spots.h,"road") ? this.spots.h["road"] : [];
	while(_g < _g1.length) {
		var pt = _g1[_g];
		++_g;
		if(Std.random(100) < 20) {
			var x = pt.cx;
			var y = pt.cy;
			if(!Object.prototype.hasOwnProperty.call(this.spots.h,"human")) {
				this.spots.h["human"] = [];
			}
			this.spots.h["human"].push({ cx : x, cy : y});
		}
	}
	var _g = 0;
	var _g1 = Object.prototype.hasOwnProperty.call(this.spots.h,"house") ? this.spots.h["house"] : [];
	while(_g < _g1.length) {
		var pt = _g1[_g];
		++_g;
		if(!this.hasSpot("house",pt.cx - 1,pt.cy)) {
			var x = pt.cx - 1;
			var y = pt.cy;
			if(!Object.prototype.hasOwnProperty.call(this.spots.h,"human")) {
				this.spots.h["human"] = [];
			}
			this.spots.h["human"].push({ cx : x, cy : y});
		}
		if(!this.hasSpot("house",pt.cx,pt.cy + 1)) {
			var x1 = pt.cx;
			var y1 = pt.cy + 1;
			if(!Object.prototype.hasOwnProperty.call(this.spots.h,"human")) {
				this.spots.h["human"] = [];
			}
			this.spots.h["human"].push({ cx : x1, cy : y1});
		}
	}
	var _g = 0;
	var _g1 = this.wid;
	while(_g < _g1) {
		var cx = _g++;
		var _g2 = 0;
		var _g3 = this.wid;
		while(_g2 < _g3) {
			var cy = _g2++;
			var x = cx * Const.GRID;
			var y = cy * Const.GRID;
			if(this.hasSpot("road",cx,cy)) {
				if(!this.hasSpot("road",cx - 1,cy) && !this.hasSpot("road",cx + 1,cy)) {
					var _this = Assets.lib;
					var rndFunc = null;
					if(!(Object.prototype.hasOwnProperty.call(_this.groups.h,"roadV") && _this.groups.h["roadV"].frames.length > 0)) {
						throw haxe_Exception.thrown("Unknown group " + "roadV");
					}
					var frame = (rndFunc == null ? Std.random : rndFunc)(_this.groups.h["roadV"].frames.length);
					var px = 0.0;
					var py = 0.0;
					if(py == null) {
						py = 0.0;
					}
					if(px == null) {
						px = 0.0;
					}
					if(frame == null) {
						frame = 0;
					}
					var frame1 = frame;
					if(frame1 == null) {
						frame1 = 0;
					}
					var g = _this.groups.h["roadV"];
					var fd = g == null ? null : g.frames[frame1];
					if(fd == null) {
						throw haxe_Exception.thrown("Unknown group " + "roadV" + "#" + frame + "!");
					}
					var t = _this.pages[fd.page].clone();
					var frame2 = frame;
					var px1 = px;
					var py1 = py;
					if(py1 == null) {
						py1 = 0.0;
					}
					if(px1 == null) {
						px1 = 0.0;
					}
					if(frame2 == null) {
						frame2 = 0;
					}
					var frame3 = frame2;
					if(frame3 == null) {
						frame3 = 0;
					}
					var g1 = _this.groups.h["roadV"];
					var fd1 = g1 == null ? null : g1.frames[frame3];
					if(fd1 == null) {
						throw haxe_Exception.thrown("Unknown group " + "roadV" + "#" + frame2 + "!");
					}
					t.setPosition(fd1.x,fd1.y);
					t.setSize(fd1.wid,fd1.hei);
					t.dx = -(fd1.realWid * px1 + fd1.realX | 0);
					t.dy = -(fd1.realHei * py1 + fd1.realY | 0);
					roads.content.add(x,y,roads.curColor.x,roads.curColor.y,roads.curColor.z,roads.curColor.w,t);
				} else if(!this.hasSpot("road",cx,cy - 1) && !this.hasSpot("road",cx,cy + 1)) {
					var _this1 = Assets.lib;
					var rndFunc1 = null;
					if(!(Object.prototype.hasOwnProperty.call(_this1.groups.h,"roadH") && _this1.groups.h["roadH"].frames.length > 0)) {
						throw haxe_Exception.thrown("Unknown group " + "roadH");
					}
					var frame4 = (rndFunc1 == null ? Std.random : rndFunc1)(_this1.groups.h["roadH"].frames.length);
					var px2 = 0.0;
					var py2 = 0.0;
					if(py2 == null) {
						py2 = 0.0;
					}
					if(px2 == null) {
						px2 = 0.0;
					}
					if(frame4 == null) {
						frame4 = 0;
					}
					var frame5 = frame4;
					if(frame5 == null) {
						frame5 = 0;
					}
					var g2 = _this1.groups.h["roadH"];
					var fd2 = g2 == null ? null : g2.frames[frame5];
					if(fd2 == null) {
						throw haxe_Exception.thrown("Unknown group " + "roadH" + "#" + frame4 + "!");
					}
					var t1 = _this1.pages[fd2.page].clone();
					var frame6 = frame4;
					var px3 = px2;
					var py3 = py2;
					if(py3 == null) {
						py3 = 0.0;
					}
					if(px3 == null) {
						px3 = 0.0;
					}
					if(frame6 == null) {
						frame6 = 0;
					}
					var frame7 = frame6;
					if(frame7 == null) {
						frame7 = 0;
					}
					var g3 = _this1.groups.h["roadH"];
					var fd3 = g3 == null ? null : g3.frames[frame7];
					if(fd3 == null) {
						throw haxe_Exception.thrown("Unknown group " + "roadH" + "#" + frame6 + "!");
					}
					t1.setPosition(fd3.x,fd3.y);
					t1.setSize(fd3.wid,fd3.hei);
					t1.dx = -(fd3.realWid * px3 + fd3.realX | 0);
					t1.dy = -(fd3.realHei * py3 + fd3.realY | 0);
					roads.content.add(x,y,roads.curColor.x,roads.curColor.y,roads.curColor.z,roads.curColor.w,t1);
				} else {
					var _this2 = Assets.lib;
					var rndFunc2 = null;
					if(!(Object.prototype.hasOwnProperty.call(_this2.groups.h,"roadC") && _this2.groups.h["roadC"].frames.length > 0)) {
						throw haxe_Exception.thrown("Unknown group " + "roadC");
					}
					var frame8 = (rndFunc2 == null ? Std.random : rndFunc2)(_this2.groups.h["roadC"].frames.length);
					var px4 = 0.0;
					var py4 = 0.0;
					if(py4 == null) {
						py4 = 0.0;
					}
					if(px4 == null) {
						px4 = 0.0;
					}
					if(frame8 == null) {
						frame8 = 0;
					}
					var frame9 = frame8;
					if(frame9 == null) {
						frame9 = 0;
					}
					var g4 = _this2.groups.h["roadC"];
					var fd4 = g4 == null ? null : g4.frames[frame9];
					if(fd4 == null) {
						throw haxe_Exception.thrown("Unknown group " + "roadC" + "#" + frame8 + "!");
					}
					var t2 = _this2.pages[fd4.page].clone();
					var frame10 = frame8;
					var px5 = px4;
					var py5 = py4;
					if(py5 == null) {
						py5 = 0.0;
					}
					if(px5 == null) {
						px5 = 0.0;
					}
					if(frame10 == null) {
						frame10 = 0;
					}
					var frame11 = frame10;
					if(frame11 == null) {
						frame11 = 0;
					}
					var g5 = _this2.groups.h["roadC"];
					var fd5 = g5 == null ? null : g5.frames[frame11];
					if(fd5 == null) {
						throw haxe_Exception.thrown("Unknown group " + "roadC" + "#" + frame10 + "!");
					}
					t2.setPosition(fd5.x,fd5.y);
					t2.setSize(fd5.wid,fd5.hei);
					t2.dx = -(fd5.realWid * px5 + fd5.realX | 0);
					t2.dy = -(fd5.realHei * py5 + fd5.realY | 0);
					roads.content.add(x,y,roads.curColor.x,roads.curColor.y,roads.curColor.z,roads.curColor.w,t2);
				}
			} else {
				var _this3 = Assets.lib;
				var rndFunc3 = null;
				if(!(Object.prototype.hasOwnProperty.call(_this3.groups.h,"grass") && _this3.groups.h["grass"].frames.length > 0)) {
					throw haxe_Exception.thrown("Unknown group " + "grass");
				}
				var frame12 = (rndFunc3 == null ? Std.random : rndFunc3)(_this3.groups.h["grass"].frames.length);
				var px6 = 0.0;
				var py6 = 0.0;
				if(py6 == null) {
					py6 = 0.0;
				}
				if(px6 == null) {
					px6 = 0.0;
				}
				if(frame12 == null) {
					frame12 = 0;
				}
				var frame13 = frame12;
				if(frame13 == null) {
					frame13 = 0;
				}
				var g6 = _this3.groups.h["grass"];
				var fd6 = g6 == null ? null : g6.frames[frame13];
				if(fd6 == null) {
					throw haxe_Exception.thrown("Unknown group " + "grass" + "#" + frame12 + "!");
				}
				var t3 = _this3.pages[fd6.page].clone();
				var frame14 = frame12;
				var px7 = px6;
				var py7 = py6;
				if(py7 == null) {
					py7 = 0.0;
				}
				if(px7 == null) {
					px7 = 0.0;
				}
				if(frame14 == null) {
					frame14 = 0;
				}
				var frame15 = frame14;
				if(frame15 == null) {
					frame15 = 0;
				}
				var g7 = _this3.groups.h["grass"];
				var fd7 = g7 == null ? null : g7.frames[frame15];
				if(fd7 == null) {
					throw haxe_Exception.thrown("Unknown group " + "grass" + "#" + frame14 + "!");
				}
				t3.setPosition(fd7.x,fd7.y);
				t3.setSize(fd7.wid,fd7.hei);
				t3.dx = -(fd7.realWid * px7 + fd7.realX | 0);
				t3.dy = -(fd7.realHei * py7 + fd7.realY | 0);
				ground.content.add(x - 1,y - 1,ground.curColor.x,ground.curColor.y,ground.curColor.z,ground.curColor.w,t3);
				if(Std.random(100) < 25) {
					var _this4 = Assets.lib;
					var rndFunc4 = null;
					if(!(Object.prototype.hasOwnProperty.call(_this4.groups.h,"grassDetail") && _this4.groups.h["grassDetail"].frames.length > 0)) {
						throw haxe_Exception.thrown("Unknown group " + "grassDetail");
					}
					var frame16 = (rndFunc4 == null ? Std.random : rndFunc4)(_this4.groups.h["grassDetail"].frames.length);
					var px8 = 0.0;
					var py8 = 0.0;
					if(py8 == null) {
						py8 = 0.0;
					}
					if(px8 == null) {
						px8 = 0.0;
					}
					if(frame16 == null) {
						frame16 = 0;
					}
					var frame17 = frame16;
					if(frame17 == null) {
						frame17 = 0;
					}
					var g8 = _this4.groups.h["grassDetail"];
					var fd8 = g8 == null ? null : g8.frames[frame17];
					if(fd8 == null) {
						throw haxe_Exception.thrown("Unknown group " + "grassDetail" + "#" + frame16 + "!");
					}
					var t4 = _this4.pages[fd8.page].clone();
					var frame18 = frame16;
					var px9 = px8;
					var py9 = py8;
					if(py9 == null) {
						py9 = 0.0;
					}
					if(px9 == null) {
						px9 = 0.0;
					}
					if(frame18 == null) {
						frame18 = 0;
					}
					var frame19 = frame18;
					if(frame19 == null) {
						frame19 = 0;
					}
					var g9 = _this4.groups.h["grassDetail"];
					var fd9 = g9 == null ? null : g9.frames[frame19];
					if(fd9 == null) {
						throw haxe_Exception.thrown("Unknown group " + "grassDetail" + "#" + frame18 + "!");
					}
					t4.setPosition(fd9.x,fd9.y);
					t4.setSize(fd9.wid,fd9.hei);
					t4.dx = -(fd9.realWid * px9 + fd9.realX | 0);
					t4.dy = -(fd9.realHei * py9 + fd9.realY | 0);
					ground.content.add(x - 1,y - 1,ground.curColor.x,ground.curColor.y,ground.curColor.z,ground.curColor.w,t4);
				}
			}
		}
	}
	var _g = 0;
	var _g1 = this.spots.h["house"];
	while(_g < _g1.length) {
		var pt = _g1[_g];
		++_g;
		if(!this.hasSpot("house",pt.cx,pt.cy - 1) && !this.hasSpot("house",pt.cx - 1,pt.cy)) {
			var x = pt.cx * Const.GRID;
			var y = pt.cy * Const.GRID;
			var _this = Assets.lib;
			var rndFunc = null;
			if(!(Object.prototype.hasOwnProperty.call(_this.groups.h,"shadow2x2") && _this.groups.h["shadow2x2"].frames.length > 0)) {
				throw haxe_Exception.thrown("Unknown group " + "shadow2x2");
			}
			var frame = (rndFunc == null ? Std.random : rndFunc)(_this.groups.h["shadow2x2"].frames.length);
			var px = 0.0;
			var py = 0.0;
			if(py == null) {
				py = 0.0;
			}
			if(px == null) {
				px = 0.0;
			}
			if(frame == null) {
				frame = 0;
			}
			var frame1 = frame;
			if(frame1 == null) {
				frame1 = 0;
			}
			var g = _this.groups.h["shadow2x2"];
			var fd = g == null ? null : g.frames[frame1];
			if(fd == null) {
				throw haxe_Exception.thrown("Unknown group " + "shadow2x2" + "#" + frame + "!");
			}
			var t = _this.pages[fd.page].clone();
			var frame2 = frame;
			var px1 = px;
			var py1 = py;
			if(py1 == null) {
				py1 = 0.0;
			}
			if(px1 == null) {
				px1 = 0.0;
			}
			if(frame2 == null) {
				frame2 = 0;
			}
			var frame3 = frame2;
			if(frame3 == null) {
				frame3 = 0;
			}
			var g1 = _this.groups.h["shadow2x2"];
			var fd1 = g1 == null ? null : g1.frames[frame3];
			if(fd1 == null) {
				throw haxe_Exception.thrown("Unknown group " + "shadow2x2" + "#" + frame2 + "!");
			}
			t.setPosition(fd1.x,fd1.y);
			t.setSize(fd1.wid,fd1.hei);
			t.dx = -(fd1.realWid * px1 + fd1.realX | 0);
			t.dy = -(fd1.realHei * py1 + fd1.realY | 0);
			shadows.content.add(x,y,shadows.curColor.x,shadows.curColor.y,shadows.curColor.z,shadows.curColor.w,t);
			new Scenery("house2x2",false,(pt.cx + 1) * Const.GRID,(pt.cy + 1) * Const.GRID);
			this.addColl(pt.cx,pt.cy,2,2);
		}
	}
	var treeSpots_h = { };
	var _g = 0;
	var _g1 = this.spots.h["tree"];
	while(_g < _g1.length) {
		var pt = _g1[_g];
		++_g;
		if(!treeSpots_h.hasOwnProperty(pt.cx + (pt.cy - 1) * this.hei) && !treeSpots_h.hasOwnProperty(pt.cx - 1 + pt.cy * this.hei)) {
			var e = (pt.cx + 0.5) * Const.GRID;
			var sign = true;
			if(sign == null) {
				sign = false;
			}
			var e1 = sign ? Math.random() * 5 * (Std.random(2) * 2 - 1) : Math.random() * 5;
			var sign1 = true;
			if(sign1 == null) {
				sign1 = false;
			}
			var e2 = new Scenery("tree",true,e + e1,(pt.cy + 0.5) * Const.GRID + (sign1 ? Math.random() * 5 * (Std.random(2) * 2 - 1) : Math.random() * 5));
			e2.partId = "leaves";
			e2.solid = Std.random(100) < 60;
			e2.burnable = false;
			treeSpots_h[pt.cx + pt.cy * this.hei] = true;
		}
	}
};
$hxClasses["Level"] = Level;
Level.__name__ = "Level";
Level.__super__ = dn_Process;
Level.prototype = $extend(dn_Process.prototype,{
	addColl: function(cx,cy,w,h) {
		if(h == null) {
			h = 1;
		}
		if(w == null) {
			w = 1;
		}
		var _g = cx;
		var _g1 = cx + w;
		while(_g < _g1) {
			var x = _g++;
			var _g2 = cy;
			var _g3 = cy + h;
			while(_g2 < _g3) {
				var y = _g2++;
				this.colMap[x][y] = true;
			}
		}
	}
	,addCreep: function(cx,cy,center) {
		if(center == null) {
			center = false;
		}
		if(this.creepMap.h[cx + cy * this.wid] != true) {
			this.creepMap.h[cx + cy * this.wid] = true;
			var _this = Assets.lib;
			var g = center ? "creepPop" : "creep";
			var rndFunc = null;
			if(!(g != null && Object.prototype.hasOwnProperty.call(_this.groups.h,g) && _this.groups.h[g].frames.length > 0)) {
				throw haxe_Exception.thrown("Unknown group " + g);
			}
			var frame = (rndFunc == null ? Std.random : rndFunc)((g == null ? _this.currentGroup : _this.groups.h[g]).frames.length);
			var px = 0.0;
			var py = 0.0;
			if(py == null) {
				py = 0.0;
			}
			if(px == null) {
				px = 0.0;
			}
			if(frame == null) {
				frame = 0;
			}
			var frame1 = frame;
			if(frame1 == null) {
				frame1 = 0;
			}
			var g1 = g == null ? _this.currentGroup : _this.groups.h[g];
			var fd = g1 == null ? null : g1.frames[frame1];
			if(fd == null) {
				throw haxe_Exception.thrown("Unknown group " + g + "#" + frame + "!");
			}
			var t = _this.pages[fd.page].clone();
			var frame1 = frame;
			var px1 = px;
			var py1 = py;
			if(py1 == null) {
				py1 = 0.0;
			}
			if(px1 == null) {
				px1 = 0.0;
			}
			if(frame1 == null) {
				frame1 = 0;
			}
			var frame = frame1;
			if(frame == null) {
				frame = 0;
			}
			var g1 = g == null ? _this.currentGroup : _this.groups.h[g];
			var fd = g1 == null ? null : g1.frames[frame];
			if(fd == null) {
				throw haxe_Exception.thrown("Unknown group " + g + "#" + frame1 + "!");
			}
			t.setPosition(fd.x,fd.y);
			t.setSize(fd.wid,fd.hei);
			t.dx = -(fd.realWid * px1 + fd.realX | 0);
			t.dy = -(fd.realHei * py1 + fd.realY | 0);
			var t1 = t;
			var _this = this.creep;
			_this.content.add((cx + 0.5) * Const.GRID - t1.width * 0.5 | 0,(cy + 0.5) * Const.GRID - t1.height * 0.5 | 0,_this.curColor.x,_this.curColor.y,_this.curColor.z,_this.curColor.w,t1);
			this.creep.invalidate();
		}
	}
	,addCreepArea: function(cx,cy,r) {
		var _g = cx - r;
		var _g1 = cx + r + 1;
		while(_g < _g1) {
			var x = _g++;
			var _g2 = cy - r;
			var _g3 = cy + r + 1;
			while(_g2 < _g3) {
				var y = _g2++;
				if((cx - x) * (cx - x) + (cy - y) * (cy - y) <= r * r) {
					this.addCreep(x,y,x == cx && y == cy);
				}
			}
		}
	}
	,hasSpot: function(k,cx,cy) {
		var _g = 0;
		var _g1 = this.spots.h[k];
		while(_g < _g1.length) {
			var pt = _g1[_g];
			++_g;
			if(pt.cx == cx && pt.cy == cy) {
				return true;
			}
		}
		return false;
	}
	,update: function() {
		dn_Process.prototype.update.call(this);
	}
	,__class__: Level
});
var Main = function() {
	dn_Process.call(this);
	Main.ME = this;
	hxd_Res.set_loader(new hxd_res_Loader(new hxd_fs_EmbedFileSystem(haxe_Unserializer.run("oy10:level0.pngty10:level3.pngty9:lib.atlasty10:props.jsonty10:level2.pngty10:level1.pngty3:sfxoy12:resist01.wavty13:explode02.wavty12:switch01.wavty13:explode01.wavty10:step03.wavty11:death02.wavty10:step01.wavty11:death01.wavty9:hit01.wavty10:step02.wavty11:death03.wavty10:hive01.wavty13:explode03.wavty10:menu01.wavty13:missile01.wavty13:missile02.wavty9:msg01.wavty11:shoot01.wavty13:explode04.wavtgy12:music_js.mp3ty5:fontsoy13:alterebro.fntty13:alterebro.pngty20:alterebroOutline.pngty20:alterebroOutline.fnttgy7:lib.pngtg"))));
	Assets.init();
	hxd_Timer.wantedFPS = Const.FPS;
	this.createRoot(Boot.ME.s2d);
	this.root.set_filter(new h2d_filter_ColorMatrix());
	this.onResize();
	new dn_heaps_GameFocusHelper(Boot.ME.s2d,Assets.font);
	this.delayer.addF(null,function() {
		Assets.music.play(true);
		new Intro();
	},1);
};
$hxClasses["Main"] = Main;
Main.__name__ = "Main";
Main.__super__ = dn_Process;
Main.prototype = $extend(dn_Process.prototype,{
	transition: function(p,cb) {
		var _gthis = this;
		if(p != null) {
			p.pause();
		}
		var mask = new h2d_Bitmap(h2d_Tile.fromColor((255. | 0) << 24 | 16772795),Boot.ME.s2d);
		var v = (dn_Process.CUSTOM_STAGE_WIDTH > 0 ? dn_Process.CUSTOM_STAGE_WIDTH : hxd_Window.getInstance().get_width()) / mask.tile.width;
		mask.posChanged = true;
		mask.scaleX = v;
		var v = (dn_Process.CUSTOM_STAGE_HEIGHT > 0 ? dn_Process.CUSTOM_STAGE_HEIGHT : hxd_Window.getInstance().get_height()) / mask.tile.height;
		mask.posChanged = true;
		mask.scaleY = v;
		var _tween = this.tw.create_(function() {
			return mask.alpha;
		},function(_setV) {
			mask.alpha = _setV;
		},0,1,null,500);
		_tween.end(function() {
			if(p != null) {
				p.destroyed = true;
			}
			_gthis.delayer.addMs(null,function() {
				cb();
				var _tween = _gthis.tw.create_(function() {
					return mask.alpha;
				},function(_setV) {
					mask.alpha = _setV;
				},null,0,null,1500);
				_tween.end($bind(mask,mask.remove));
			},100);
		});
	}
	,onDispose: function() {
		dn_Process.prototype.onDispose.call(this);
		if(Main.ME == this) {
			Main.ME = null;
		}
	}
	,onResize: function() {
		dn_Process.prototype.onResize.call(this);
		if(Const.AUTO_SCALE_TARGET_WID > 0) {
			var x = (dn_Process.CUSTOM_STAGE_WIDTH > 0 ? dn_Process.CUSTOM_STAGE_WIDTH : hxd_Window.getInstance().get_width()) / Const.AUTO_SCALE_TARGET_WID;
			var tmp;
			if(x > .0) {
				var t = x + .5 | 0;
				tmp = t < x ? t + 1 : t;
			} else if(x < .0) {
				var t = x - .5 | 0;
				tmp = t < x ? t + 1 : t;
			} else {
				tmp = 0;
			}
			Const.SCALE = tmp;
		} else if(Const.AUTO_SCALE_TARGET_HEI > 0) {
			var x = (dn_Process.CUSTOM_STAGE_HEIGHT > 0 ? dn_Process.CUSTOM_STAGE_HEIGHT : hxd_Window.getInstance().get_height()) / Const.AUTO_SCALE_TARGET_HEI;
			var tmp;
			if(x > .0) {
				var t = x + .5 | 0;
				tmp = t < x ? t + 1 : t;
			} else if(x < .0) {
				var t = x - .5 | 0;
				tmp = t < x ? t + 1 : t;
			} else {
				tmp = 0;
			}
			Const.SCALE = tmp;
		}
		var x = (dn_Process.CUSTOM_STAGE_WIDTH > 0 ? dn_Process.CUSTOM_STAGE_WIDTH : hxd_Window.getInstance().get_width()) / Const.SCALE;
		var tmp;
		if(x > .0) {
			var t = x + .5 | 0;
			tmp = t < x ? t + 1 : t;
		} else if(x < .0) {
			var t = x - .5 | 0;
			tmp = t < x ? t + 1 : t;
		} else {
			tmp = 0;
		}
		Const.LWID = tmp;
		var x = (dn_Process.CUSTOM_STAGE_HEIGHT > 0 ? dn_Process.CUSTOM_STAGE_HEIGHT : hxd_Window.getInstance().get_height()) / Const.SCALE;
		var tmp;
		if(x > .0) {
			var t = x + .5 | 0;
			tmp = t < x ? t + 1 : t;
		} else if(x < .0) {
			var t = x - .5 | 0;
			tmp = t < x ? t + 1 : t;
		} else {
			tmp = 0;
		}
		Const.LHEI = tmp;
		var _this = this.root;
		var v = Const.SCALE;
		_this.posChanged = true;
		_this.scaleX = v;
		_this.posChanged = true;
		_this.scaleY = v;
	}
	,update: function() {
		dn_Process.prototype.update.call(this);
		if(hxd_Key.isPressed(77)) {
			Assets.music.togglePlayPause();
		}
		if(hxd_Key.isPressed(83)) {
			dn_heaps_Sfx.toggleMuteGroup(0);
		}
	}
	,__class__: Main
});
Math.__name__ = "Math";
var MiniMap = function() {
	this.blink = false;
	this.scale = 0.06;
	var _gthis = this;
	dn_Process.call(this,Game.ME);
	MiniMap.ME = this;
	this.creepRatio = 0;
	this.createRootInLayers(Game.ME.root,Const.DP_UI);
	var _this = this.root;
	_this.posChanged = true;
	_this.x = 2;
	_this.posChanged = true;
	_this.y = 2;
	var w = Game.ME.level.wid * Const.GRID * this.scale | 0;
	var h = Game.ME.level.hei * Const.GRID * this.scale | 0;
	var bg = new h2d_Bitmap(h2d_Tile.fromColor((255. | 0) << 24 | 0,w + 2,h + 2),this.root);
	bg.posChanged = true;
	bg.x = -1;
	bg.posChanged = true;
	bg.y = -1;
	var _this = Assets.lib;
	if(_this.pages.length > 1) {
		throw haxe_Exception.thrown("Cannot access tile when there is multiple pages");
	}
	this.tg = new h2d_TileGroup(_this.pages[0],this.root);
	this.bd = new hxd_BitmapData(w,h);
	this.tex = h3d_mat_Texture.fromBitmap(this.bd);
	this.bdBase = this.bd.clone();
	this.bdBase.fill(0,0,this.bd.ctx.canvas.width,this.bd.ctx.canvas.height,(255. | 0) << 24 | 4675868);
	var tf = new h2d_Text(Assets.fontOutline,this.root);
	tf.posChanged = true;
	tf.x = 1;
	tf.posChanged = true;
	tf.y = this.bd.ctx.canvas.height;
	this.createChildProcess(function(_) {
		if((_gthis.ftime | 0) % 5 == 0) {
			tf.set_text("Infection: " + (_gthis.creepRatio * 100 | 0) + "%");
		}
	});
	this.root.addChild(new h2d_Bitmap(h2d_Tile.fromTexture(this.tex)));
};
$hxClasses["MiniMap"] = MiniMap;
MiniMap.__name__ = "MiniMap";
MiniMap.__super__ = dn_Process;
MiniMap.prototype = $extend(dn_Process.prototype,{
	onDispose: function() {
		dn_Process.prototype.onDispose.call(this);
		this.tex.dispose();
		var _this = this.bd;
		_this.ctx = null;
		_this.pixel = null;
		if(MiniMap.ME == this) {
			MiniMap.ME = null;
		}
	}
	,update: function() {
		dn_Process.prototype.update.call(this);
		var _this = this.cd;
		var tmp;
		if(_this.fastCheck.h.hasOwnProperty(54525952)) {
			tmp = true;
		} else {
			var onComplete = null;
			var cur = _this._getCdObject(54525952);
			if(!(cur != null && 10 < cur.frames && false)) {
				_this.fastCheck.h[54525952] = true;
				if(cur != null) {
					cur.frames = 10;
					cur.initial = 10;
				} else {
					var _this1 = _this.cds;
					if(_this1.nalloc >= _this1.size) {
						throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
					}
					var e = _this1.pool[_this1.nalloc++];
					e.recycle();
					var cd = e;
					cd.k = 54525952;
					cd.frames = 10;
					cd.initial = 10;
				}
				if(onComplete != null) {
					var cd = _this._getCdObject(54525952);
					if(cd == null) {
						throw haxe_Exception.thrown("cannot bind onComplete(" + 54525952 + "): cooldown " + 54525952 + " isn't running");
					}
					cd.onCompleteOnce = onComplete;
				}
			}
			tmp = false;
		}
		if(!tmp) {
			this.blink = !this.blink;
			var ccount = 0;
			this.tg.clear();
			var _g = 0;
			var _this = Game.ME.level;
			var _g1 = Object.prototype.hasOwnProperty.call(_this.spots.h,"road") ? _this.spots.h["road"] : [];
			while(_g < _g1.length) {
				var pt = _g1[_g];
				++_g;
				var _this = this.tg;
				var x = pt.cx * Const.GRID * this.scale | 0;
				var y = pt.cy * Const.GRID * this.scale | 0;
				var _this1 = Assets.lib;
				var frame = 0;
				if(frame == null) {
					frame = 0;
				}
				var g = _this1.groups.h["pixel"];
				var fd = g == null ? null : g.frames[frame];
				if(fd == null) {
					throw haxe_Exception.thrown("Unknown group " + "pixel" + "#" + 0 + "!");
				}
				var t = _this1.pages[fd.page].clone();
				var frame1 = 0;
				var px = 0.0;
				var py = 0.0;
				if(py == null) {
					py = 0.0;
				}
				if(px == null) {
					px = 0.0;
				}
				if(frame1 == null) {
					frame1 = 0;
				}
				var frame2 = frame1;
				if(frame2 == null) {
					frame2 = 0;
				}
				var g1 = _this1.groups.h["pixel"];
				var fd1 = g1 == null ? null : g1.frames[frame2];
				if(fd1 == null) {
					throw haxe_Exception.thrown("Unknown group " + "pixel" + "#" + frame1 + "!");
				}
				t.setPosition(fd1.x,fd1.y);
				t.setSize(fd1.wid,fd1.hei);
				t.dx = -(fd1.realWid * px + fd1.realX | 0);
				t.dy = -(fd1.realHei * py + fd1.realY | 0);
				_this.content.add(x,y,0.49411764705882355,0.4392156862745098,0.35294117647058826,1.0,t);
			}
			var _g = 0;
			var _this = Game.ME.level;
			var _g1 = Object.prototype.hasOwnProperty.call(_this.spots.h,"tree") ? _this.spots.h["tree"] : [];
			while(_g < _g1.length) {
				var pt = _g1[_g];
				++_g;
				var _this = this.tg;
				var x = pt.cx * Const.GRID * this.scale | 0;
				var y = pt.cy * Const.GRID * this.scale | 0;
				var _this1 = Assets.lib;
				var frame = 0;
				if(frame == null) {
					frame = 0;
				}
				var g = _this1.groups.h["pixel"];
				var fd = g == null ? null : g.frames[frame];
				if(fd == null) {
					throw haxe_Exception.thrown("Unknown group " + "pixel" + "#" + 0 + "!");
				}
				var t = _this1.pages[fd.page].clone();
				var frame1 = 0;
				var px = 0.0;
				var py = 0.0;
				if(py == null) {
					py = 0.0;
				}
				if(px == null) {
					px = 0.0;
				}
				if(frame1 == null) {
					frame1 = 0;
				}
				var frame2 = frame1;
				if(frame2 == null) {
					frame2 = 0;
				}
				var g1 = _this1.groups.h["pixel"];
				var fd1 = g1 == null ? null : g1.frames[frame2];
				if(fd1 == null) {
					throw haxe_Exception.thrown("Unknown group " + "pixel" + "#" + frame1 + "!");
				}
				t.setPosition(fd1.x,fd1.y);
				t.setSize(fd1.wid,fd1.hei);
				t.dx = -(fd1.realWid * px + fd1.realX | 0);
				t.dy = -(fd1.realHei * py + fd1.realY | 0);
				_this.content.add(x,y,0.35686274509803922,0.45098039215686275,0.14117647058823529,1.0,t);
			}
			var _g = 0;
			var _g1 = Game.ME.level.wid;
			while(_g < _g1) {
				var cx = _g++;
				var _g2 = 0;
				var _g3 = Game.ME.level.hei;
				while(_g2 < _g3) {
					var cy = _g2++;
					var _this = Game.ME.level;
					if(_this.creepMap.h[cx + cy * _this.wid] == true) {
						++ccount;
						var _this1 = this.tg;
						var x = cx * Const.GRID * this.scale | 0;
						var y = cy * Const.GRID * this.scale | 0;
						var _this2 = Assets.lib;
						var frame = 0;
						if(frame == null) {
							frame = 0;
						}
						var g = _this2.groups.h["pixel"];
						var fd = g == null ? null : g.frames[frame];
						if(fd == null) {
							throw haxe_Exception.thrown("Unknown group " + "pixel" + "#" + 0 + "!");
						}
						var t = _this2.pages[fd.page].clone();
						var frame1 = 0;
						var px = 0.0;
						var py = 0.0;
						if(py == null) {
							py = 0.0;
						}
						if(px == null) {
							px = 0.0;
						}
						if(frame1 == null) {
							frame1 = 0;
						}
						var frame2 = frame1;
						if(frame2 == null) {
							frame2 = 0;
						}
						var g1 = _this2.groups.h["pixel"];
						var fd1 = g1 == null ? null : g1.frames[frame2];
						if(fd1 == null) {
							throw haxe_Exception.thrown("Unknown group " + "pixel" + "#" + frame1 + "!");
						}
						t.setPosition(fd1.x,fd1.y);
						t.setSize(fd1.wid,fd1.hei);
						t.dx = -(fd1.realWid * px + fd1.realX | 0);
						t.dy = -(fd1.realHei * py + fd1.realY | 0);
						_this1.content.add(x,y,0.45490196078431372,0.054901960784313725,0.16078431372549021,1.0,t);
					}
				}
			}
			var _g = 0;
			var _g1 = en_Mob.ALL;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				if(((e) instanceof en_m_Zergling)) {
					var _this = this.tg;
					var x = e.x * this.scale | 0;
					var y = e.y * this.scale | 0;
					var _this1 = Assets.lib;
					var frame = 0;
					if(frame == null) {
						frame = 0;
					}
					var g = _this1.groups.h["pixel"];
					var fd = g == null ? null : g.frames[frame];
					if(fd == null) {
						throw haxe_Exception.thrown("Unknown group " + "pixel" + "#" + 0 + "!");
					}
					var t = _this1.pages[fd.page].clone();
					var frame1 = 0;
					var px = 0.0;
					var py = 0.0;
					if(py == null) {
						py = 0.0;
					}
					if(px == null) {
						px = 0.0;
					}
					if(frame1 == null) {
						frame1 = 0;
					}
					var frame2 = frame1;
					if(frame2 == null) {
						frame2 = 0;
					}
					var g1 = _this1.groups.h["pixel"];
					var fd1 = g1 == null ? null : g1.frames[frame2];
					if(fd1 == null) {
						throw haxe_Exception.thrown("Unknown group " + "pixel" + "#" + frame1 + "!");
					}
					t.setPosition(fd1.x,fd1.y);
					t.setSize(fd1.wid,fd1.hei);
					t.dx = -(fd1.realWid * px + fd1.realX | 0);
					t.dy = -(fd1.realHei * py + fd1.realY | 0);
					_this.content.add(x,y,0.55686274509803924,0.4823529411764706,0.91764705882352937,1.0,t);
				}
			}
			var _g = 0;
			var _g1 = en_Mob.ALL;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				if(((e) instanceof en_m_Creeper)) {
					var x = e.x;
					var y = e.y;
					var _this = Assets.lib;
					var frame = 0;
					if(frame == null) {
						frame = 0;
					}
					var g = _this.groups.h["triangle"];
					var fd = g == null ? null : g.frames[frame];
					if(fd == null) {
						throw haxe_Exception.thrown("Unknown group " + "triangle" + "#" + 0 + "!");
					}
					var t = _this.pages[fd.page].clone();
					var frame1 = 0;
					var px = 0.0;
					var py = 0.0;
					if(py == null) {
						py = 0.0;
					}
					if(px == null) {
						px = 0.0;
					}
					if(frame1 == null) {
						frame1 = 0;
					}
					var frame2 = frame1;
					if(frame2 == null) {
						frame2 = 0;
					}
					var g1 = _this.groups.h["triangle"];
					var fd1 = g1 == null ? null : g1.frames[frame2];
					if(fd1 == null) {
						throw haxe_Exception.thrown("Unknown group " + "triangle" + "#" + frame1 + "!");
					}
					t.setPosition(fd1.x,fd1.y);
					t.setSize(fd1.wid,fd1.hei);
					t.dx = -(fd1.realWid * px + fd1.realX | 0);
					t.dy = -(fd1.realHei * py + fd1.realY | 0);
					this.tg.content.add(x * this.scale | 0,y * this.scale | 0,1.,0.,0.,1.0,t);
				}
			}
			var _g = 0;
			var _g1 = en_Quad.ALL;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				var x = e.x;
				var y = e.y;
				var col = this.blink && Game.ME.current == e ? 16777215 : e.id == 0 ? 14794517 : 13838290;
				var _this = Assets.lib;
				var frame = 0;
				if(frame == null) {
					frame = 0;
				}
				var g = _this.groups.h["heart"];
				var fd = g == null ? null : g.frames[frame];
				if(fd == null) {
					throw haxe_Exception.thrown("Unknown group " + "heart" + "#" + 0 + "!");
				}
				var t = _this.pages[fd.page].clone();
				var frame1 = 0;
				var px = 0.0;
				var py = 0.0;
				if(py == null) {
					py = 0.0;
				}
				if(px == null) {
					px = 0.0;
				}
				if(frame1 == null) {
					frame1 = 0;
				}
				var frame2 = frame1;
				if(frame2 == null) {
					frame2 = 0;
				}
				var g1 = _this.groups.h["heart"];
				var fd1 = g1 == null ? null : g1.frames[frame2];
				if(fd1 == null) {
					throw haxe_Exception.thrown("Unknown group " + "heart" + "#" + frame1 + "!");
				}
				t.setPosition(fd1.x,fd1.y);
				t.setSize(fd1.wid,fd1.hei);
				t.dx = -(fd1.realWid * px + fd1.realX | 0);
				t.dy = -(fd1.realHei * py + fd1.realY | 0);
				this.tg.content.add(x * this.scale | 0,y * this.scale | 0,(col >> 16 & 255) / 255,(col >> 8 & 255) / 255,(col & 255) / 255,1.0,t);
			}
			this.creepRatio = ccount / (Game.ME.level.wid * Game.ME.level.hei);
		}
	}
	,__class__: MiniMap
});
var Outro = function() {
	var _gthis = this;
	dn_Process.call(this,Main.ME);
	this.cm = new dn_Cinematic(Const.FPS);
	this.createChildProcess(function(_) {
		_gthis.cm.update(_gthis.utmod * _gthis.getComputedTimeMultiplier());
	});
	this.createRoot(Main.ME.root);
	var xr = 0.5;
	var yr = 0.5;
	var smooth = null;
	var p = this.root;
	if(yr == null) {
		yr = 0.;
	}
	if(xr == null) {
		xr = 0.;
	}
	var s = new dn_heaps_slib_HSprite(Assets.lib,"logo",0);
	if(p != null) {
		p.addChild(s);
	}
	var xRatio = xr;
	var yRatio = yr;
	if(yRatio == null) {
		yRatio = 0.5;
	}
	if(xRatio == null) {
		xRatio = 0.5;
	}
	var _this = s.pivot;
	_this.centerFactorX = xRatio;
	_this.centerFactorY = yRatio;
	_this.usingFactor = true;
	_this.isUndefined = false;
	if(smooth != null) {
		s.smooth = smooth;
	}
	var logo = s;
	logo.posChanged = true;
	logo.x = Const.LWID * 0.5;
	logo.posChanged = true;
	logo.y = Const.LHEI * 0.25;
	var _tween = this.tw.create_(function() {
		return logo.alpha;
	},function(_setV) {
		logo.alpha = _setV;
	},0,1,null,500);
	var tf = new h2d_Text(Assets.font,this.root);
	tf.set_textColor(8556972);
	tf.set_text("A game by Sébastien Bénard");
	var v = Const.LWID * 0.5 - tf.get_textWidth() * tf.scaleX * 0.5;
	tf.posChanged = true;
	tf.x = v;
	tf.posChanged = true;
	tf.y = Const.LHEI * 0.35;
	var _tween = this.tw.create_(function() {
		return tf.alpha;
	},function(_setV) {
		tf.alpha = _setV;
	},0,1,null,1500);
	_tween.delayMs(500);
	var tf1 = tf;
	var tf1 = new h2d_Text(Assets.font,this.root);
	tf1.set_text("Thank you for playing!");
	var v = Const.LWID * 0.5 - tf1.get_textWidth() * tf1.scaleX * 0.5;
	tf1.posChanged = true;
	tf1.x = v;
	tf1.posChanged = true;
	tf1.y = Const.LHEI * 0.39;
	var _tween = this.tw.create_(function() {
		return tf1.alpha;
	},function(_setV) {
		tf1.alpha = _setV;
	},0,1,null,1500);
	_tween.delayMs(1200);
	var tf2 = tf1;
	var tf2 = new h2d_Text(Assets.font,this.root);
	tf2.set_textColor(16755712);
	tf2.set_text(["Sorry for the quite short game, hope you liked it anyway! I spent really too much time on the theme TWO BUTTON CONTROL before giving it up. This version is based on the theme GROWING.","Check DEEPNIGHT.NET for more games :)","Follow me on Twitter (@deepnightFR)"].join("\n\n"));
	tf2.set_maxWidth(200);
	var v = Const.LWID * 0.5 - tf2.maxWidth * tf2.scaleX * 0.5;
	tf2.posChanged = true;
	tf2.x = v;
	tf2.posChanged = true;
	tf2.y = Const.LHEI * 0.47;
	tf2.set_textAlign(h2d_Align.Center);
	var _tween = this.tw.create_(function() {
		return tf2.alpha;
	},function(_setV) {
		tf2.alpha = _setV;
	},0,1,null,1500);
	_tween.delayMs(2000);
	var _this = this.cd;
	var frames = this.secToFrames(4);
	var allowLower = true;
	var onComplete = null;
	if(allowLower == null) {
		allowLower = true;
	}
	var cur = _this._getCdObject(25165824);
	if(!(cur != null && frames < cur.frames && !allowLower)) {
		if(frames <= 0) {
			if(cur != null) {
				_this.fastCheck.remove(cur.k);
				var _this1 = _this.cds;
				var _g = 0;
				var _g1 = _this1.nalloc;
				while(_g < _g1) {
					var i = _g++;
					if(_this1.pool[i] == cur) {
						if(i >= 0 && i < _this1.nalloc) {
							if(_this1.nalloc > 1) {
								var tmp = _this1.pool[i];
								_this1.pool[i] = _this1.pool[_this1.nalloc - 1];
								_this1.pool[_this1.nalloc - 1] = tmp;
								_this1.nalloc--;
							} else {
								_this1.nalloc = 0;
							}
						}
						break;
					}
				}
			}
		} else {
			_this.fastCheck.h[25165824] = true;
			if(cur != null) {
				cur.frames = frames;
				cur.initial = frames;
			} else {
				var _this1 = _this.cds;
				if(_this1.nalloc >= _this1.size) {
					throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
				}
				var e = _this1.pool[_this1.nalloc++];
				e.recycle();
				var cd = e;
				cd.k = 25165824;
				cd.frames = frames;
				cd.initial = frames;
			}
		}
		if(onComplete != null) {
			if(frames <= 0) {
				onComplete();
			} else {
				var cd = _this._getCdObject(25165824);
				if(cd == null) {
					throw haxe_Exception.thrown("cannot bind onComplete(" + 25165824 + "): cooldown " + 25165824 + " isn't running");
				}
				cd.onCompleteOnce = onComplete;
			}
		}
	}
	var i = new h2d_Interactive(dn_Process.CUSTOM_STAGE_WIDTH > 0 ? dn_Process.CUSTOM_STAGE_WIDTH : hxd_Window.getInstance().get_width(),dn_Process.CUSTOM_STAGE_HEIGHT > 0 ? dn_Process.CUSTOM_STAGE_HEIGHT : hxd_Window.getInstance().get_height(),this.root);
	i.onClick = function(_) {
		var tmp;
		if(!_gthis.cd.fastCheck.h.hasOwnProperty(25165824)) {
			var _this = _gthis.cd;
			var tmp1;
			if(_this.fastCheck.h.hasOwnProperty(29360128)) {
				tmp1 = true;
			} else {
				var onComplete = null;
				var cur = _this._getCdObject(29360128);
				if(!(cur != null && 9999 < cur.frames && false)) {
					_this.fastCheck.h[29360128] = true;
					if(cur != null) {
						cur.frames = 9999;
						cur.initial = 9999;
					} else {
						var _this1 = _this.cds;
						if(_this1.nalloc >= _this1.size) {
							throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
						}
						var e = _this1.pool[_this1.nalloc++];
						e.recycle();
						var cd = e;
						cd.k = 29360128;
						cd.frames = 9999;
						cd.initial = 9999;
					}
					if(onComplete != null) {
						var cd = _this._getCdObject(29360128);
						if(cd == null) {
							throw haxe_Exception.thrown("cannot bind onComplete(" + 29360128 + "): cooldown " + 29360128 + " isn't running");
						}
						cd.onCompleteOnce = onComplete;
					}
				}
				tmp1 = false;
			}
			tmp = !tmp1;
		} else {
			tmp = false;
		}
		if(tmp) {
			Assets.SBANK.menu01(0.8);
			Main.ME.transition(_gthis,function() {
				new Game();
			});
		}
	};
};
$hxClasses["Outro"] = Outro;
Outro.__name__ = "Outro";
Outro.__super__ = dn_Process;
Outro.prototype = $extend(dn_Process.prototype,{
	onDispose: function() {
		dn_Process.prototype.onDispose.call(this);
	}
	,onResize: function() {
		dn_Process.prototype.onResize.call(this);
	}
	,update: function() {
		dn_Process.prototype.update.call(this);
	}
	,__class__: Outro
});
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
var Scenery = function(k,front,x,y) {
	this.creeped = false;
	this.destroyed = false;
	this.cd = new dn_Cooldown(Const.FPS);
	Scenery.ALL.push(this);
	this.exploded = false;
	this.partId = "plank";
	this.burnable = true;
	this.x = x;
	this.y = y;
	var _this = Assets.lib;
	var rndFunc = null;
	var p = null;
	if(!(k != null && Object.prototype.hasOwnProperty.call(_this.groups.h,k) && _this.groups.h[k].frames.length > 0)) {
		throw haxe_Exception.thrown("Unknown group " + k);
	}
	var frame = (rndFunc == null ? Std.random : rndFunc)((k == null ? _this.currentGroup : _this.groups.h[k]).frames.length);
	var smooth = null;
	if(frame == null) {
		frame = 0;
	}
	var s = new dn_heaps_slib_HSprite(_this,k,frame);
	if(p != null) {
		p.addChild(s);
	}
	var xRatio = 0.;
	var yRatio = 0.;
	if(yRatio == null) {
		yRatio = 0.5;
	}
	if(xRatio == null) {
		xRatio = 0.5;
	}
	var _this = s.pivot;
	_this.centerFactorX = xRatio;
	_this.centerFactorY = yRatio;
	_this.usingFactor = true;
	_this.isUndefined = false;
	if(smooth != null) {
		s.smooth = smooth;
	}
	this.spr = s;
	var xRatio = 0.5;
	var yRatio = 0.5;
	if(yRatio == null) {
		yRatio = 0.5;
	}
	if(xRatio == null) {
		xRatio = 0.5;
	}
	var _this = this.spr.pivot;
	_this.centerFactorX = xRatio;
	_this.centerFactorY = yRatio;
	_this.usingFactor = true;
	_this.isUndefined = false;
	Game.ME.scroller.add(this.spr,front ? Const.DP_BG_FRONTS : Const.DP_BG);
	var _this = this.spr;
	_this.posChanged = true;
	_this.x = x;
	_this.posChanged = true;
	_this.y = y;
};
$hxClasses["Scenery"] = Scenery;
Scenery.__name__ = "Scenery";
Scenery.prototype = {
	isTree: function() {
		if(this.spr.groupName != "tree") {
			return this.spr.groupName == "treeCreep";
		} else {
			return true;
		}
	}
	,explode: function() {
		if(this.solid) {
			this.shake();
			return;
		}
		if(this.exploded) {
			return;
		}
		this.exploded = true;
		if(!this.isTree()) {
			var s = Std.random(2) == 0 ? Assets.SBANK.explode01() : Assets.SBANK.explode02();
			var x = this.x;
			var y = this.y;
			var vol = 0.2;
			if(vol == null) {
				vol = 1.0;
			}
			s.play(null,vol);
		}
		if(!this.isTree()) {
			Game.ME.fx.explosion(this.x,this.y,3);
		}
		Game.ME.fx.gibs(this.x,this.y,this.partId,this.isTree() ? 15 : 30);
		this.burning = this.burnable && Std.random(100) < 30;
		var _g = 0;
		var _g1 = this.isTree() ? 10 : 30;
		while(_g < _g1) {
			var i = _g++;
			var a = Math.random() * 6.28;
			var d = Math.random() * 30;
			var _this = Game.ME.level;
			var x = this.x + Math.cos(a) * d;
			var y = this.y + Math.sin(a) * d;
			var k = this.partId;
			var a1 = 0.5 + Math.random() * 0.5;
			if(a1 == null) {
				a1 = 1.0;
			}
			var _this1 = Assets.lib;
			var rndFunc = null;
			if(!(k != null && Object.prototype.hasOwnProperty.call(_this1.groups.h,k) && _this1.groups.h[k].frames.length > 0)) {
				throw haxe_Exception.thrown("Unknown group " + k);
			}
			var frame = (rndFunc == null ? Std.random : rndFunc)((k == null ? _this1.currentGroup : _this1.groups.h[k]).frames.length);
			var px = 0.0;
			var py = 0.0;
			if(py == null) {
				py = 0.0;
			}
			if(px == null) {
				px = 0.0;
			}
			if(frame == null) {
				frame = 0;
			}
			var frame1 = frame;
			if(frame1 == null) {
				frame1 = 0;
			}
			var g = k == null ? _this1.currentGroup : _this1.groups.h[k];
			var fd = g == null ? null : g.frames[frame1];
			if(fd == null) {
				throw haxe_Exception.thrown("Unknown group " + k + "#" + frame + "!");
			}
			var t = _this1.pages[fd.page].clone();
			var frame2 = frame;
			var px1 = px;
			var py1 = py;
			if(py1 == null) {
				py1 = 0.0;
			}
			if(px1 == null) {
				px1 = 0.0;
			}
			if(frame2 == null) {
				frame2 = 0;
			}
			var frame3 = frame2;
			if(frame3 == null) {
				frame3 = 0;
			}
			var g1 = k == null ? _this1.currentGroup : _this1.groups.h[k];
			var fd1 = g1 == null ? null : g1.frames[frame3];
			if(fd1 == null) {
				throw haxe_Exception.thrown("Unknown group " + k + "#" + frame2 + "!");
			}
			t.setPosition(fd1.x,fd1.y);
			t.setSize(fd1.wid,fd1.hei);
			t.dx = -(fd1.realWid * px1 + fd1.realX | 0);
			t.dy = -(fd1.realHei * py1 + fd1.realY | 0);
			var t1 = t;
			var limit = 500;
			if(_this.dirtGroups[_this.curDirtGroup].count() >= limit) {
				_this.curDirtGroup++;
				if(_this.curDirtGroup >= _this.dirtGroups.length) {
					_this.curDirtGroup = 0;
				}
				if(_this.dirtGroups[_this.curDirtGroup].count() >= limit) {
					_this.dirtGroups[_this.curDirtGroup].clear();
				}
			}
			var tg = _this.dirtGroups[_this.curDirtGroup];
			tg.content.add(x - t1.width * 0.5 | 0,y - t1.height * 0.5 | 0,1,1,1,a1,t1);
			tg.invalidate();
		}
		var _this = this.spr.lib;
		var k = "d" + this.spr.groupName;
		var frame = this.spr.frame;
		if(frame == null) {
			frame = 0;
		}
		if(k != null && frame >= 0 && Object.prototype.hasOwnProperty.call(_this.groups.h,k) && _this.groups.h[k].frames.length > frame) {
			var _this = this.spr;
			var l = null;
			var g = "d" + this.spr.groupName;
			var frame = this.spr.frame;
			if(frame == null) {
				frame = 0;
			}
			if(l != null) {
				if(l.pages == null || l.pages.length == 0) {
					throw haxe_Exception.thrown("sprite sheet has no backing texture, please generate one");
				}
				if(g == null) {
					_this.groupName = null;
					_this.group = null;
					_this.frameData = null;
				}
				if(_this.allocated && _this.lib != null) {
					HxOverrides.remove(_this.lib.children,_this);
				}
				_this.lib = l;
				if(_this.allocated) {
					_this.lib.children.push(_this);
				}
				if(_this.pivot.isUndefined) {
					var xRatio = _this.lib.defaultCenterX;
					var yRatio = _this.lib.defaultCenterY;
					if(yRatio == null) {
						yRatio = 0.5;
					}
					if(xRatio == null) {
						xRatio = 0.5;
					}
					var _this1 = _this.pivot;
					_this1.centerFactorX = xRatio;
					_this1.centerFactorY = yRatio;
					_this1.usingFactor = true;
					_this1.isUndefined = false;
				}
			}
			if(g != null && g != _this.groupName) {
				_this.groupName = g;
			}
			if(!_this.destroyed && _this.lib != null && _this.groupName != null) {
				var _this1 = _this.lib;
				var k = _this.groupName;
				_this.group = k == null ? _this1.currentGroup : _this1.groups.h[k];
				var _this1 = _this.lib;
				var k = _this.groupName;
				var frame1 = frame;
				if(frame1 == null) {
					frame1 = 0;
				}
				var g = k == null ? _this1.currentGroup : _this1.groups.h[k];
				_this.frameData = g == null ? null : g.frames[frame1];
				if(_this.frameData == null) {
					throw haxe_Exception.thrown("Unknown frame: " + _this.groupName + "(" + frame + ")");
				}
				if(_this.rawTile == null) {
					_this.rawTile = _this.lib.pages[_this.frameData.page].clone();
				} else {
					_this.rawTile.setTexture(_this.lib.pages[_this.frameData.page].innerTex);
				}
				_this.lastPage = _this.frameData.page;
				_this.setFrame(frame);
			} else {
				_this.setEmptyTexture();
			}
		} else {
			this.destroy();
		}
	}
	,shake: function() {
		if(this.solid) {
			var _this = this.cd;
			var sign = null;
			if(sign == null) {
				sign = false;
			}
			var frames = sign ? (10 + Math.random() * 10) * (Std.random(2) * 2 - 1) : 10 + Math.random() * 10;
			var allowLower = true;
			var onComplete = null;
			if(allowLower == null) {
				allowLower = true;
			}
			var cur = _this._getCdObject(67108864);
			if(!(cur != null && frames < cur.frames && !allowLower)) {
				if(frames <= 0) {
					if(cur != null) {
						_this.fastCheck.remove(cur.k);
						var _this1 = _this.cds;
						var _g = 0;
						var _g1 = _this1.nalloc;
						while(_g < _g1) {
							var i = _g++;
							if(_this1.pool[i] == cur) {
								if(i >= 0 && i < _this1.nalloc) {
									if(_this1.nalloc > 1) {
										var tmp = _this1.pool[i];
										_this1.pool[i] = _this1.pool[_this1.nalloc - 1];
										_this1.pool[_this1.nalloc - 1] = tmp;
										_this1.nalloc--;
									} else {
										_this1.nalloc = 0;
									}
								}
								break;
							}
						}
					}
				} else {
					_this.fastCheck.h[67108864] = true;
					if(cur != null) {
						cur.frames = frames;
						cur.initial = frames;
					} else {
						var _this1 = _this.cds;
						if(_this1.nalloc >= _this1.size) {
							throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
						}
						var e = _this1.pool[_this1.nalloc++];
						e.recycle();
						var cd = e;
						cd.k = 67108864;
						cd.frames = frames;
						cd.initial = frames;
					}
				}
				if(onComplete != null) {
					if(frames <= 0) {
						onComplete();
					} else {
						var cd = _this._getCdObject(67108864);
						if(cd == null) {
							throw haxe_Exception.thrown("cannot bind onComplete(" + 67108864 + "): cooldown " + 67108864 + " isn't running");
						}
						cd.onCompleteOnce = onComplete;
					}
				}
			}
			Game.ME.fx.shakeGibs(this.x,this.y,this.partId);
		}
	}
	,destroy: function() {
		this.destroyed = true;
	}
	,dispose: function() {
		var _this = this.spr;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
		HxOverrides.remove(Scenery.ALL,this);
	}
	,update: function() {
		var _this = Game.ME;
		this.cd.update(_this.utmod * _this.getComputedTimeMultiplier());
		var _this = Game.ME;
		var x = this.x;
		var y = this.y;
		if(!(x >= -_this.scroller.x - 30 && x <= -_this.scroller.x + Const.LWID + 30 && y >= -_this.scroller.y - 30 && y <= -_this.scroller.y + Const.LHEI + 30)) {
			this.spr.set_visible(false);
			return;
		}
		this.spr.set_visible(true);
		var tmp;
		if(!this.creeped) {
			var _this = Game.ME.level;
			tmp = _this.creepMap.h[(this.x / Const.GRID | 0) + (this.y / Const.GRID | 0) * _this.wid] == true;
		} else {
			tmp = false;
		}
		if(tmp) {
			this.creeped = true;
			if(this.spr.groupName == "tree") {
				var _this = this.spr;
				var l = null;
				var _this1 = this.spr.lib;
				var rndFunc = null;
				if(!(Object.prototype.hasOwnProperty.call(_this1.groups.h,"treeCreep") && _this1.groups.h["treeCreep"].frames.length > 0)) {
					throw haxe_Exception.thrown("Unknown group " + "treeCreep");
				}
				var frame = (rndFunc == null ? Std.random : rndFunc)(_this1.groups.h["treeCreep"].frames.length);
				if(frame == null) {
					frame = 0;
				}
				if(l != null) {
					if(l.pages == null || l.pages.length == 0) {
						throw haxe_Exception.thrown("sprite sheet has no backing texture, please generate one");
					}
					if(_this.allocated && _this.lib != null) {
						HxOverrides.remove(_this.lib.children,_this);
					}
					_this.lib = l;
					if(_this.allocated) {
						_this.lib.children.push(_this);
					}
					if(_this.pivot.isUndefined) {
						var xRatio = _this.lib.defaultCenterX;
						var yRatio = _this.lib.defaultCenterY;
						if(yRatio == null) {
							yRatio = 0.5;
						}
						if(xRatio == null) {
							xRatio = 0.5;
						}
						var _this1 = _this.pivot;
						_this1.centerFactorX = xRatio;
						_this1.centerFactorY = yRatio;
						_this1.usingFactor = true;
						_this1.isUndefined = false;
					}
				}
				if("treeCreep" != _this.groupName) {
					_this.groupName = "treeCreep";
				}
				if(!_this.destroyed && _this.lib != null && _this.groupName != null) {
					var _this1 = _this.lib;
					var k = _this.groupName;
					_this.group = k == null ? _this1.currentGroup : _this1.groups.h[k];
					var _this1 = _this.lib;
					var k = _this.groupName;
					var frame1 = frame;
					if(frame1 == null) {
						frame1 = 0;
					}
					var g = k == null ? _this1.currentGroup : _this1.groups.h[k];
					_this.frameData = g == null ? null : g.frames[frame1];
					if(_this.frameData == null) {
						throw haxe_Exception.thrown("Unknown frame: " + _this.groupName + "(" + frame + ")");
					}
					if(_this.rawTile == null) {
						_this.rawTile = _this.lib.pages[_this.frameData.page].clone();
					} else {
						_this.rawTile.setTexture(_this.lib.pages[_this.frameData.page].innerTex);
					}
					_this.lastPage = _this.frameData.page;
					_this.setFrame(frame);
				} else {
					_this.setEmptyTexture();
				}
			}
			if(this.spr.groupName == "house2x2") {
				this.explode();
			}
		}
		if(this.burning) {
			var tmp = Game.ME.fx;
			var tmp1 = this.x;
			var sign = true;
			if(sign == null) {
				sign = false;
			}
			var tmp2 = sign ? Math.random() * 9 * (Std.random(2) * 2 - 1) : Math.random() * 9;
			var sign = true;
			if(sign == null) {
				sign = false;
			}
			tmp.burn(tmp1 + tmp2,this.y + (sign ? Math.random() * 9 * (Std.random(2) * 2 - 1) : Math.random() * 9));
		}
		if(this.cd.fastCheck.h.hasOwnProperty(67108864)) {
			var cd = this.cd._getCdObject(67108864);
			var r = cd == null ? 0 : cd.frames;
			var cd = this.cd._getCdObject(67108864);
			var r1 = r / (cd == null ? 0 : cd.initial);
			var _this = this.spr;
			var v = this.x + Math.cos(Game.ME.ftime) * r1 * 0.6;
			_this.posChanged = true;
			_this.x = v;
			var _this = this.spr;
			var v = this.y + Math.sin(Game.ME.ftime * 0.7) * r1 * 0.6;
			_this.posChanged = true;
			_this.y = v;
		} else {
			var _this = this.spr;
			_this.posChanged = true;
			_this.x = this.x;
			_this.posChanged = true;
			_this.y = this.y;
		}
	}
	,__class__: Scenery
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.createInstance = function(cl,args) {
	var ctor = Function.prototype.bind.apply(cl,[null].concat(args));
	return new (ctor);
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw haxe_Exception.thrown("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw haxe_Exception.thrown("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw haxe_Exception.thrown("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.createEnumIndex = function(e,index,params) {
	var c;
	var _g = e.__constructs__[index];
	if(_g == null) {
		c = null;
	} else {
		var ctor = _g;
		c = ctor._hx_name;
	}
	if(c == null) {
		throw haxe_Exception.thrown(index + " is not a valid enum constructor index");
	}
	return Type.createEnum(e,c,params);
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		var e = a.__enum__;
		if(e == null || e != b.__enum__) {
			return false;
		}
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var enm = $hxEnums[e];
		var params = enm.__constructs__[a._hx_index].__params__;
		var _g = 0;
		while(_g < params.length) {
			var f = params[_g];
			++_g;
			if(!Type.enumEq(a[f],b[f])) {
				return false;
			}
		}
	} catch( _g ) {
		return false;
	}
	return true;
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var params = enm.__constructs__[e._hx_index].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var XmlType = {};
XmlType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.attributeMap.h[att];
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		this.attributeMap.h[att] = value;
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return Object.prototype.hasOwnProperty.call(this.attributeMap.h,att);
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.attributeMap.h);
	}
	,iterator: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return new haxe_iterators_ArrayIterator(this.children);
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var dn_Cinematic = function(fps) {
	this.fps = fps;
	this.turbo = false;
	this.queues = [];
	this.persistSignals = new haxe_ds_StringMap();
};
$hxClasses["dn.Cinematic"] = dn_Cinematic;
dn_Cinematic.__name__ = "dn.Cinematic";
dn_Cinematic.prototype = {
	runEvent: function(e) {
		if(e.s != null) {
			var key = e.s;
			var _this = this.persistSignals;
			if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
				delete(_this.h[key]);
			}
		}
		e.f();
	}
	,update: function(dt) {
		var i = 0;
		while(i < this.queues.length) {
			var q = this.queues[i];
			if(q.length > 0) {
				q[0].t -= dt;
				while(q.length > 0 && q[0].t <= 0 && (this.turbo || q[0].s == null || this.persistSignals.h[q[0].s])) this.runEvent(q.splice(0,1)[0]);
			}
			if(q.length == 0) {
				this.queues.splice(i,1);
				if(this.queues.length == 0 && this.onAllComplete != null) {
					this.onAllComplete();
				}
			} else {
				++i;
			}
		}
		if(this.curQueue != null && this.curQueue.length == 0) {
			this.curQueue = null;
		}
	}
	,__class__: dn_Cinematic
};
var dn_Cooldown = function(fps,maxSize) {
	if(dn_Cooldown.INDEXES == null) {
		if(haxe_rtti_Meta.getType(dn_Cooldown).indexes != null) {
			var _g = [];
			var _g1 = 0;
			var _g2 = haxe_rtti_Meta.getType(dn_Cooldown).indexes;
			while(_g1 < _g2.length) {
				var str = _g2[_g1];
				++_g1;
				_g.push(Std.string(str));
			}
			dn_Cooldown.INDEXES = _g;
		}
	}
	this.baseFps = fps;
	this.changeMaxSizeAndReset(maxSize == null ? dn_Cooldown.DEFAULT_COUNT_LIMIT : maxSize);
};
$hxClasses["dn.Cooldown"] = dn_Cooldown;
dn_Cooldown.__name__ = "dn.Cooldown";
dn_Cooldown.prototype = {
	changeMaxSizeAndReset: function(newMaxSize) {
		this.cds = new dn_struct_RecyclablePool(newMaxSize,function() {
			return new dn__$Cooldown_CdInst();
		});
		this.cds.nalloc = 0;
		this.fastCheck = new haxe_ds_IntMap();
	}
	,dispose: function() {
		this.cds.dispose(null);
		this.cds = null;
		this.fastCheck = null;
	}
	,toString: function() {
		return "Cooldowns(" + this.cds.nalloc + "/" + this.cds.size + ")";
	}
	,_getCdObject: function(k) {
		var _g_rpool = this.cds;
		var _g_i = 0;
		while(_g_i < _g_rpool.nalloc) {
			var cd = _g_rpool.pool[_g_i++];
			if(cd.k == k) {
				return cd;
			}
		}
		return null;
	}
	,update: function(tmod) {
		var i = 0;
		var cd;
		var cb = null;
		while(i < this.cds.nalloc) {
			var _this = this.cds;
			cd = i < 0 || i >= _this.nalloc ? null : _this.pool[i];
			cd.frames -= tmod;
			if(cd.frames <= 0) {
				cb = cd.onCompleteOnce;
				var _this1 = this.cds;
				this.fastCheck.remove((i < 0 || i >= _this1.nalloc ? null : _this1.pool[i]).k);
				var _this2 = this.cds;
				if(i >= 0 && i < _this2.nalloc) {
					if(_this2.nalloc > 1) {
						var tmp = _this2.pool[i];
						_this2.pool[i] = _this2.pool[_this2.nalloc - 1];
						_this2.pool[_this2.nalloc - 1] = tmp;
						_this2.nalloc--;
					} else {
						_this2.nalloc = 0;
					}
				}
				if(cb != null) {
					cb();
				}
			} else {
				++i;
			}
		}
	}
	,__class__: dn_Cooldown
};
var dn__$Cooldown_CdInst = function() {
};
$hxClasses["dn._Cooldown.CdInst"] = dn__$Cooldown_CdInst;
dn__$Cooldown_CdInst.__name__ = "dn._Cooldown.CdInst";
dn__$Cooldown_CdInst.prototype = {
	recycle: function() {
		this.onCompleteOnce = null;
	}
	,toString: function() {
		var x = (this.initial == 0 ? 0 : 1 - (this.initial == 0 ? 0 : this.frames / this.initial)) * 100;
		return dn_Cooldown.INDEXES[this.k >>> 22] + "|" + (this.k & 4194303) + (": " + this.frames + "/" + this.initial + " (" + ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) + "%)");
	}
	,__class__: dn__$Cooldown_CdInst
};
var dn__$Delayer_Task = function(id,t,cb) {
	this.t = t;
	this.cb = cb;
	this.id = id;
};
$hxClasses["dn._Delayer.Task"] = dn__$Delayer_Task;
dn__$Delayer_Task.__name__ = "dn._Delayer.Task";
dn__$Delayer_Task.prototype = {
	__class__: dn__$Delayer_Task
};
var dn_Delayer = function(fps) {
	this.fps = fps;
	this.delays = [];
};
$hxClasses["dn.Delayer"] = dn_Delayer;
dn_Delayer.__name__ = "dn.Delayer";
dn_Delayer.prototype = {
	destroy: function() {
		this.delays = null;
	}
	,cmp: function(a,b) {
		if(a.t < b.t) {
			return -1;
		} else if(a.t > b.t) {
			return 1;
		} else {
			return 0;
		}
	}
	,addMs: function(id,cb,ms) {
		this.delays.push(new dn__$Delayer_Task(id,ms / 1000 * this.fps,cb));
		haxe_ds_ArraySort.sort(this.delays,$bind(this,this.cmp));
	}
	,addS: function(id,cb,sec) {
		this.delays.push(new dn__$Delayer_Task(id,sec * this.fps,cb));
		haxe_ds_ArraySort.sort(this.delays,$bind(this,this.cmp));
	}
	,addF: function(id,cb,frames) {
		this.delays.push(new dn__$Delayer_Task(id,frames,cb));
		haxe_ds_ArraySort.sort(this.delays,$bind(this,this.cmp));
	}
	,update: function(dt) {
		var i = 0;
		while(i < this.delays.length) {
			this.delays[i].t -= dt;
			if(this.delays[i].t <= 0) {
				this.delays[i].cb();
				if(this.delays == null || this.delays[i] == null) {
					break;
				}
				this.delays[i].cb = null;
				this.delays.shift();
			} else {
				++i;
			}
		}
	}
	,__class__: dn_Delayer
};
var dn_TType = $hxEnums["dn.TType"] = { __ename__:true,__constructs__:null
	,TLinear: {_hx_name:"TLinear",_hx_index:0,__enum__:"dn.TType",toString:$estr}
	,TLoop: {_hx_name:"TLoop",_hx_index:1,__enum__:"dn.TType",toString:$estr}
	,TLoopEaseIn: {_hx_name:"TLoopEaseIn",_hx_index:2,__enum__:"dn.TType",toString:$estr}
	,TLoopEaseOut: {_hx_name:"TLoopEaseOut",_hx_index:3,__enum__:"dn.TType",toString:$estr}
	,TEase: {_hx_name:"TEase",_hx_index:4,__enum__:"dn.TType",toString:$estr}
	,TEaseIn: {_hx_name:"TEaseIn",_hx_index:5,__enum__:"dn.TType",toString:$estr}
	,TEaseOut: {_hx_name:"TEaseOut",_hx_index:6,__enum__:"dn.TType",toString:$estr}
	,TBurn: {_hx_name:"TBurn",_hx_index:7,__enum__:"dn.TType",toString:$estr}
	,TBurnIn: {_hx_name:"TBurnIn",_hx_index:8,__enum__:"dn.TType",toString:$estr}
	,TBurnOut: {_hx_name:"TBurnOut",_hx_index:9,__enum__:"dn.TType",toString:$estr}
	,TZigZag: {_hx_name:"TZigZag",_hx_index:10,__enum__:"dn.TType",toString:$estr}
	,TRand: {_hx_name:"TRand",_hx_index:11,__enum__:"dn.TType",toString:$estr}
	,TShake: {_hx_name:"TShake",_hx_index:12,__enum__:"dn.TType",toString:$estr}
	,TShakeBoth: {_hx_name:"TShakeBoth",_hx_index:13,__enum__:"dn.TType",toString:$estr}
	,TJump: {_hx_name:"TJump",_hx_index:14,__enum__:"dn.TType",toString:$estr}
	,TElasticEnd: {_hx_name:"TElasticEnd",_hx_index:15,__enum__:"dn.TType",toString:$estr}
	,TBackOut: {_hx_name:"TBackOut",_hx_index:16,__enum__:"dn.TType",toString:$estr}
};
dn_TType.__constructs__ = [dn_TType.TLinear,dn_TType.TLoop,dn_TType.TLoopEaseIn,dn_TType.TLoopEaseOut,dn_TType.TEase,dn_TType.TEaseIn,dn_TType.TEaseOut,dn_TType.TBurn,dn_TType.TBurnIn,dn_TType.TBurnOut,dn_TType.TZigZag,dn_TType.TRand,dn_TType.TShake,dn_TType.TShakeBoth,dn_TType.TJump,dn_TType.TElasticEnd,dn_TType.TBackOut];
dn_TType.__empty_constructs__ = [dn_TType.TLinear,dn_TType.TLoop,dn_TType.TLoopEaseIn,dn_TType.TLoopEaseOut,dn_TType.TEase,dn_TType.TEaseIn,dn_TType.TEaseOut,dn_TType.TBurn,dn_TType.TBurnIn,dn_TType.TBurnOut,dn_TType.TZigZag,dn_TType.TRand,dn_TType.TShake,dn_TType.TShakeBoth,dn_TType.TJump,dn_TType.TElasticEnd,dn_TType.TBackOut];
var dn_Tween = function(tw) {
	this.tw = tw;
	this.paused = false;
	this.done = false;
	this.n = this.ln = 0;
	this.delay = 0;
	this.speed = 1;
	this.set_type(dn_TType.TEase);
	this.plays = 1;
	this.pixelSnap = false;
};
$hxClasses["dn.Tween"] = dn_Tween;
dn_Tween.__name__ = "dn.Tween";
dn_Tween.prototype = {
	set_type: function(t) {
		var _gthis = this;
		this.type = t;
		var tmp;
		switch(this.type._hx_index) {
		case 0:
			tmp = function(step) {
				return step;
			};
			break;
		case 1:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0 + 3 * step * (n1 * n1) * 1.33 + 3 * (step * step) * (1 - step) * 1.33 + step * step * step * 0;
			};
			break;
		case 2:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0 + 3 * step * (n1 * n1) * 0 + 3 * (step * step) * (1 - step) * 2.25 + step * step * step * 0;
			};
			break;
		case 3:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0 + 3 * step * (n1 * n1) * 2.25 + 3 * (step * step) * (1 - step) * 0 + step * step * step * 0;
			};
			break;
		case 4:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0 + 3 * step * (n1 * n1) * 0 + 3 * (step * step) * (1 - step) + step * step * step;
			};
			break;
		case 5:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0 + 3 * step * (n1 * n1) * 0 + 3 * (step * step) * (1 - step) * 0.5 + step * step * step;
			};
			break;
		case 6:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0 + 3 * step * (n1 * n1) * 0.5 + 3 * (step * step) * (1 - step) + step * step * step;
			};
			break;
		case 7:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0 + 3 * step * (n1 * n1) + 3 * (step * step) * (1 - step) * 0 + step * step * step;
			};
			break;
		case 8:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0 + 3 * step * (n1 * n1) + 3 * (step * step) * (1 - step) + step * step * step;
			};
			break;
		case 9:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0 + 3 * step * (n1 * n1) * 0 + 3 * (step * step) * (1 - step) * 0 + step * step * step;
			};
			break;
		case 10:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0 + 3 * step * (n1 * n1) * 2.5 + 3 * (step * step) * (1 - step) * -1.5 + step * step * step;
			};
			break;
		case 11:
			tmp = function(step) {
				return step;
			};
			break;
		case 12:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0.5 + 3 * step * (n1 * n1) * 1.22 + 3 * (step * step) * (1 - step) * 1.25 + step * step * step * 0;
			};
			break;
		case 13:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0.5 + 3 * step * (n1 * n1) * 1.22 + 3 * (step * step) * (1 - step) * 1.25 + step * step * step * 0;
			};
			break;
		case 14:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0 + 3 * step * (n1 * n1) * 2 + 3 * (step * step) * (1 - step) * 2.79 + step * step * step;
			};
			break;
		case 15:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0 + 3 * step * (n1 * n1) * 0.7 + 3 * (step * step) * (1 - step) * 1.5 + step * step * step;
			};
			break;
		case 16:
			tmp = function(step) {
				var s = 1.70158;
				step = step / 1 - 1;
				return step * step * ((s + 1) * step + s) + 1;
			};
			break;
		}
		this.interpolate = tmp;
		return this.type;
	}
	,onUpdate: function() {
	}
	,onUpdateT: function(t) {
	}
	,onEnd: function() {
	}
	,onStart: function() {
	}
	,end: function(cb) {
		this.onEnd = cb;
		return this;
	}
	,update: function(cb) {
		this.onUpdate = cb;
		return this;
	}
	,chainedEvent: function() {
	}
	,interpolate: function(v) {
		return v;
	}
	,delayMs: function(d) {
		var x = d * this.tw.baseFps / 1000;
		this.delay = (x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0;
	}
	,endWithoutCallbacks: function() {
		this.done = true;
	}
	,complete: function(fl_allowLoop) {
		if(fl_allowLoop == null) {
			fl_allowLoop = false;
		}
		var v = this.from + (this.to - this.from) * this.interpolate(1);
		if(this.pixelSnap) {
			v = (v > 0 ? v + .5 : v < 0 ? v - .5 : 0) | 0;
		}
		this.setter(v);
		this.onUpdate();
		this.onUpdateT(1);
		this.onEnd();
		this.chainedEvent();
		if(fl_allowLoop && (this.plays == -1 || this.plays > 1)) {
			if(this.plays != -1) {
				this.plays--;
			}
			this.n = this.ln = 0;
		} else {
			this.done = true;
		}
	}
	,internalUpdate: function(dt) {
		if(this.done) {
			return true;
		}
		if(this.paused) {
			return false;
		}
		if(this.delay > 0) {
			this.delay -= dt;
			return false;
		}
		if(this.onStart != null) {
			var cb = $bind(this,this.onStart);
			this.onStart = null;
			cb();
		}
		var dist = this.to - this.from;
		if(this.type == dn_TType.TRand) {
			this.ln += Std.random(100) < 33 ? this.speed * dt : 0;
		} else {
			this.ln += this.speed * dt;
		}
		this.n = this.interpolate(this.ln);
		if(this.ln < 1) {
			var val;
			if(this.type != dn_TType.TShake && this.type != dn_TType.TShakeBoth) {
				val = this.from + this.n * dist;
			} else if(this.type == dn_TType.TShake) {
				var val1 = this.from;
				var val2 = Math.random();
				var x = this.n * dist;
				val = val1 + val2 * (x < 0 ? -x : x) * (dist > 0 ? 1 : -1);
			} else {
				val = this.from + Math.random() * this.n * dist * (Std.random(2) * 2 - 1);
			}
			if(this.pixelSnap) {
				val = (val > 0 ? val + .5 : val < 0 ? val - .5 : 0) | 0;
			}
			this.setter(val);
			this.onUpdate();
			this.onUpdateT(this.ln);
		} else {
			this.complete(true);
		}
		return this.done;
	}
	,__class__: dn_Tween
};
var dn_Tweenie = function(fps) {
	this.baseFps = fps;
	this.allTweens = new dn_struct_FixedArray(null,512);
};
$hxClasses["dn.Tweenie"] = dn_Tweenie;
dn_Tweenie.__name__ = "dn.Tweenie";
dn_Tweenie.prototype = {
	terminate_: function(getter,setter,withCallbacks) {
		if(this.allTweens == null) {
			return;
		}
		var v = getter();
		var _g_arr = this.allTweens;
		var _g_i = 0;
		while(_g_i < _g_arr.nalloc) {
			var t = _g_arr.values[_g_i++];
			if(t.done) {
				continue;
			}
			var old = t.getter();
			t.setter(old + 1);
			if(getter() != v) {
				t.setter(old);
				if(withCallbacks) {
					t.ln = 1;
					t.complete(false);
				} else {
					t.endWithoutCallbacks();
				}
			} else {
				t.setter(old);
			}
		}
	}
	,create_: function(getter,setter,from,to,tp,duration_ms,allowDuplicates) {
		if(allowDuplicates == null) {
			allowDuplicates = false;
		}
		if(duration_ms == null) {
			duration_ms = dn_Tweenie.DEFAULT_DURATION;
		}
		if(!allowDuplicates) {
			this.terminate_(getter,setter,false);
		}
		var t = new dn_Tween(this);
		t.getter = getter;
		t.setter = setter;
		t.from = from == null ? getter() : from;
		t.speed = 1 / (duration_ms * this.baseFps / 1000);
		t.to = to;
		if(tp != null) {
			t.set_type(tp);
		}
		if(from != null) {
			setter(from);
		}
		var _this = this.allTweens;
		if(_this.nalloc >= _this.values.length) {
			throw haxe_Exception.thrown("FixedArray limit reached (" + _this.values.length + ")");
		}
		_this.values[_this.nalloc] = t;
		_this.nalloc++;
		return t;
	}
	,destroy: function() {
		this.allTweens = null;
	}
	,update: function(dt) {
		if(dt == null) {
			dt = 1.0;
		}
		var _g_arr = this.allTweens;
		var _g_i = 0;
		while(_g_i < _g_arr.nalloc) {
			var t = _g_arr.values[_g_i++];
			if(t.internalUpdate(dt)) {
				this.allTweens.remove(t);
			}
		}
	}
	,__class__: dn_Tweenie
};
var dn_heaps_GameFocusHelper = function(s,font,thumb) {
	this.showIntro = false;
	this.suspended = false;
	dn_Process.call(this);
	this.thumb = thumb;
	this.font = font;
	this.scene = s;
	this.createRoot(this.scene);
	this.root.set_visible(false);
	this.showIntro = true;
	this.suspendGame();
};
$hxClasses["dn.heaps.GameFocusHelper"] = dn_heaps_GameFocusHelper;
dn_heaps_GameFocusHelper.__name__ = "dn.heaps.GameFocusHelper";
dn_heaps_GameFocusHelper.__super__ = dn_Process;
dn_heaps_GameFocusHelper.prototype = $extend(dn_Process.prototype,{
	suspendGame: function() {
		var _gthis = this;
		if(this.suspended) {
			return;
		}
		this.suspended = true;
		dn_heaps_slib_SpriteLib.DISABLE_ANIM_UPDATES = true;
		var _g_arr = dn_Process.ROOTS;
		var _g_i = 0;
		while(_g_i < _g_arr.nalloc) {
			var p = _g_arr.values[_g_i++];
			if(p != this) {
				p.pause();
			}
		}
		this.root.set_visible(true);
		this.root.removeChildren();
		var isThumb = this.showIntro && this.thumb != null;
		var t = this.showIntro && this.thumb == null ? h2d_Tile.fromColor(2436675,1,1,1) : this.showIntro && this.thumb != null ? this.thumb : h2d_Tile.fromColor(0,1,1,0.6);
		var bg = new h2d_Bitmap(t,this.root);
		var i = new h2d_Interactive(1,1,this.root);
		var tf = new h2d_Text(this.font,this.root);
		if(this.showIntro) {
			tf.set_text("Click anywhere to start");
		} else {
			tf.set_text("PAUSED - click anywhere to resume");
		}
		this.createChildProcess(function(c) {
			var y = Math.floor((dn_Process.CUSTOM_STAGE_WIDTH > 0 ? dn_Process.CUSTOM_STAGE_WIDTH : hxd_Window.getInstance().get_width()) * 0.5 / tf.get_textWidth());
			var v = 1 > y ? 1 : y;
			tf.posChanged = true;
			tf.scaleX = v;
			tf.posChanged = true;
			tf.scaleY = v;
			var v = (dn_Process.CUSTOM_STAGE_WIDTH > 0 ? dn_Process.CUSTOM_STAGE_WIDTH : hxd_Window.getInstance().get_width()) * 0.5 - tf.get_textWidth() * tf.scaleX * 0.5 | 0;
			tf.posChanged = true;
			tf.x = v;
			var v = (dn_Process.CUSTOM_STAGE_HEIGHT > 0 ? dn_Process.CUSTOM_STAGE_HEIGHT : hxd_Window.getInstance().get_height()) * 0.5 - tf.get_textHeight() * tf.scaleY * 0.5 | 0;
			tf.posChanged = true;
			tf.y = v;
			var tmp = dn_Process.CUSTOM_STAGE_WIDTH > 0 ? dn_Process.CUSTOM_STAGE_WIDTH : hxd_Window.getInstance().get_width();
			i.width = tmp + 1;
			var tmp = dn_Process.CUSTOM_STAGE_HEIGHT > 0 ? dn_Process.CUSTOM_STAGE_HEIGHT : hxd_Window.getInstance().get_height();
			i.height = tmp + 1;
			if(isThumb) {
				var x = (dn_Process.CUSTOM_STAGE_WIDTH > 0 ? dn_Process.CUSTOM_STAGE_WIDTH : hxd_Window.getInstance().get_width()) / _gthis.thumb.width;
				var y = (dn_Process.CUSTOM_STAGE_HEIGHT > 0 ? dn_Process.CUSTOM_STAGE_HEIGHT : hxd_Window.getInstance().get_height()) / _gthis.thumb.height;
				var s = x > y ? x : y;
				bg.set_filter(new h2d_filter_Blur(32,1,3));
				bg.posChanged = true;
				bg.scaleX = s;
				bg.posChanged = true;
				bg.scaleY = s;
				var v = (dn_Process.CUSTOM_STAGE_WIDTH > 0 ? dn_Process.CUSTOM_STAGE_WIDTH : hxd_Window.getInstance().get_width()) * 0.5 - bg.tile.width * bg.scaleX * 0.5;
				bg.posChanged = true;
				bg.x = v;
				var v = (dn_Process.CUSTOM_STAGE_HEIGHT > 0 ? dn_Process.CUSTOM_STAGE_HEIGHT : hxd_Window.getInstance().get_height()) * 0.5 - bg.tile.height * bg.scaleY * 0.5;
				bg.posChanged = true;
				bg.y = v;
			} else {
				var v = dn_Process.CUSTOM_STAGE_WIDTH > 0 ? dn_Process.CUSTOM_STAGE_WIDTH : hxd_Window.getInstance().get_width();
				bg.posChanged = true;
				bg.scaleX = v + 1;
				var v = dn_Process.CUSTOM_STAGE_HEIGHT > 0 ? dn_Process.CUSTOM_STAGE_HEIGHT : hxd_Window.getInstance().get_height();
				bg.posChanged = true;
				bg.scaleY = v + 1;
			}
			if(!_gthis.suspended) {
				c.destroyed = true;
			}
		},null,true);
		var loadingMsg = this.showIntro;
		i.onPush = function(_) {
			if(loadingMsg) {
				tf.set_text("Loading, please wait...");
				var v = (dn_Process.CUSTOM_STAGE_WIDTH > 0 ? dn_Process.CUSTOM_STAGE_WIDTH : hxd_Window.getInstance().get_width()) * 0.5 - tf.get_textWidth() * tf.scaleX * 0.5 | 0;
				tf.posChanged = true;
				tf.x = v;
				var v = (dn_Process.CUSTOM_STAGE_HEIGHT > 0 ? dn_Process.CUSTOM_STAGE_HEIGHT : hxd_Window.getInstance().get_height()) * 0.5 - tf.get_textHeight() * tf.scaleY * 0.5 | 0;
				tf.posChanged = true;
				tf.y = v;
				_gthis.delayer.addS(null,$bind(_gthis,_gthis.resumeGame),1);
			} else {
				_gthis.resumeGame();
			}
			if(i != null && i.parent != null) {
				i.parent.removeChild(i);
			}
		};
		this.showIntro = false;
	}
	,resumeGame: function() {
		var _gthis = this;
		if(!this.suspended) {
			return;
		}
		dn_heaps_slib_SpriteLib.DISABLE_ANIM_UPDATES = false;
		this.delayer.addF(null,function() {
			_gthis.root.set_visible(false);
			_gthis.root.removeChildren();
		},1);
		this.suspended = false;
		var _g_arr = dn_Process.ROOTS;
		var _g_i = 0;
		while(_g_i < _g_arr.nalloc) {
			var p = _g_arr.values[_g_i++];
			if(p != this) {
				p.resume();
			}
		}
	}
	,update: function() {
		dn_Process.prototype.update.call(this);
		if(this.suspended) {
			this.scene.over(this.root);
		}
		var _this = this.cd;
		var frames = 0.2 * this.cd.baseFps;
		var tmp;
		if(_this.fastCheck.h.hasOwnProperty(159383552)) {
			tmp = true;
		} else {
			var onComplete = null;
			var cur = _this._getCdObject(159383552);
			if(!(cur != null && frames < cur.frames && false)) {
				if(frames <= 0) {
					if(cur != null) {
						_this.fastCheck.remove(cur.k);
						var _this1 = _this.cds;
						var _g = 0;
						var _g1 = _this1.nalloc;
						while(_g < _g1) {
							var i = _g++;
							if(_this1.pool[i] == cur) {
								if(i >= 0 && i < _this1.nalloc) {
									if(_this1.nalloc > 1) {
										var tmp1 = _this1.pool[i];
										_this1.pool[i] = _this1.pool[_this1.nalloc - 1];
										_this1.pool[_this1.nalloc - 1] = tmp1;
										_this1.nalloc--;
									} else {
										_this1.nalloc = 0;
									}
								}
								break;
							}
						}
					}
				} else {
					_this.fastCheck.h[159383552] = true;
					if(cur != null) {
						cur.frames = frames;
						cur.initial = frames;
					} else {
						var _this1 = _this.cds;
						if(_this1.nalloc >= _this1.size) {
							throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
						}
						var e = _this1.pool[_this1.nalloc++];
						e.recycle();
						var cd = e;
						cd.k = 159383552;
						cd.frames = frames;
						cd.initial = frames;
					}
				}
				if(onComplete != null) {
					if(frames <= 0) {
						onComplete();
					} else {
						var cd = _this._getCdObject(159383552);
						if(cd == null) {
							throw haxe_Exception.thrown("cannot bind onComplete(" + 159383552 + "): cooldown " + 159383552 + " isn't running");
						}
						cd.onCompleteOnce = onComplete;
					}
				}
			}
			tmp = false;
		}
		if(!tmp) {
			var w = hxd_Window.getInstance();
			if(!w.get_isFocused() && !this.suspended) {
				this.suspendGame();
			}
		}
	}
	,__class__: dn_heaps_GameFocusHelper
});
var dn_heaps_ParticlePool = function(tile,count,fps) {
	var this1 = new Array(count);
	this.all = this1;
	this.nalloc = 0;
	var _g = 0;
	var _g1 = count;
	while(_g < _g1) {
		var i = _g++;
		var p = new dn_heaps_HParticle(this,tile.clone(),fps);
		this.all[i] = p;
		if(!p.killed) {
			var any = false;
			if(p.onKillP != null) {
				var cb = p.onKillP;
				p.onKillP = null;
				cb(p);
				any = true;
			}
			if(p.onKill != null) {
				var cb1 = p.onKill;
				p.onKill = null;
				cb1();
				any = true;
			}
			p.a = 0;
			var x = p.fps * 0;
			p.rLifeF = p.maxLifeF = x > 0 ? x : 0;
			var d = 0 * p.fps;
			if(0 > d) {
				d = 0;
			}
			p.visible = !p.killed && d <= 0;
			p.delayF = d;
			p.killed = true;
			p.visible = false;
			var _this = p.pool;
			if(_this.all != null) {
				if(_this.nalloc > 1) {
					var idx = p.poolIdx;
					var tmp = _this.all[idx];
					_this.all[idx] = _this.all[_this.nalloc - 1];
					_this.all[idx].poolIdx = idx;
					_this.all[_this.nalloc - 1] = tmp;
					_this.nalloc--;
				} else {
					_this.nalloc = 0;
				}
			}
		}
	}
};
$hxClasses["dn.heaps.ParticlePool"] = dn_heaps_ParticlePool;
dn_heaps_ParticlePool.__name__ = "dn.heaps.ParticlePool";
dn_heaps_ParticlePool.prototype = {
	dispose: function() {
		var _g = 0;
		var _g1 = this.all;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.dispose();
		}
		this.all = null;
	}
	,__class__: dn_heaps_ParticlePool
};
var h2d_BatchElement = function(t) {
	this.visible = true;
	this.a = 1;
	this.b = 1;
	this.g = 1;
	this.r = 1;
	this.rotation = 0;
	this.scaleY = 1;
	this.scaleX = 1;
	this.y = 0;
	this.x = 0;
	this.t = t;
};
$hxClasses["h2d.BatchElement"] = h2d_BatchElement;
h2d_BatchElement.__name__ = "h2d.BatchElement";
h2d_BatchElement.prototype = {
	update: function(et) {
		return true;
	}
	,remove: function() {
		if(this.batch != null) {
			this.batch.delete(this);
		}
	}
	,__class__: h2d_BatchElement
};
var dn_heaps_HParticle = function(p,tile,fps,x,y) {
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	h2d_BatchElement.call(this,tile);
	this.fps = fps;
	this.pool = p;
	this.poolIdx = -1;
	var sb = null;
	var tile = null;
	var x1 = x;
	var y1 = y;
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	if(tile != null) {
		this.t.setPosition(tile.x,tile.y);
		this.t.setSize(tile.width,tile.height);
		this.t.dx = tile.dx;
		this.t.dy = tile.dy;
		this.t.setTexture(tile.innerTex);
	}
	if(this.batch != sb) {
		if(this.batch != null) {
			this.remove();
		}
		if(sb != null) {
			sb.add(this);
		}
	}
	this.x = x1;
	this.y = y1;
	this.scaleX = 1;
	this.scaleY = 1;
	this.rotation = 0;
	this.r = this.g = this.b = this.a = 1;
	this.a = 1;
	this.visible = true;
	this.data0 = this.data1 = this.data2 = this.data3 = this.data4 = this.data5 = this.data6 = this.data7 = NaN;
	this.customTmod = null;
	this.animId = null;
	this.animLib = null;
	this.scaleMul = 1;
	this.scaleXMul = this.scaleYMul = 1;
	this.dsFrict = 1;
	this.alphaFlicker = 0;
	this.fromColor = 0;
	this.dColor = this.rColor = NaN;
	this.stamp = HxOverrides.now() / 1000;
	var xr = 0.5;
	var yr = 0.5;
	var _this = this.t;
	var px = xr;
	var py = yr;
	if(py == null) {
		py = 0.5;
	}
	if(px == null) {
		px = 0.5;
	}
	_this.dx = -(px * _this.width);
	_this.dy = -(py * _this.height);
	this.animXr = xr;
	this.animYr = yr;
	this.killed = false;
	if(this.a > 1) {
		this.a = 1;
	}
	this.maxAlpha = 1;
	this.dx = this.dy = 0;
	this.da = 0;
	this.dr = 0;
	this.ds = this.dsX = this.dsY = 0;
	this.gx = this.gy = 0;
	this.frictX = this.frictY = 1;
	this.drFrict = 1;
	this.fadeOutSpeed = 0.1;
	this.bounceMul = 0.85;
	var d = 0 * this.fps;
	if(0 > d) {
		d = 0;
	}
	this.visible = !this.killed && d <= 0;
	this.delayF = d;
	var x = this.fps;
	this.rLifeF = this.maxLifeF = x > 0 ? x : 0;
	this.bounds = dn_heaps_HParticle.DEFAULT_BOUNDS;
	this.killOnLifeOut = false;
	this.groundY = null;
	this.groupId = null;
	this.autoRotateSpeed = 0;
	this.delayedCbTimeS = 0;
	this.onStart = null;
	this.onKillP = null;
	this.onKill = null;
	this.onBounce = null;
	this.onUpdate = null;
	this.onFadeOutStart = null;
	this.onTouchGround = null;
	this.onLeaveBounds = null;
	this.delayedCb = null;
};
$hxClasses["dn.heaps.HParticle"] = dn_heaps_HParticle;
dn_heaps_HParticle.__name__ = "dn.heaps.HParticle";
dn_heaps_HParticle.__super__ = h2d_BatchElement;
dn_heaps_HParticle.prototype = $extend(h2d_BatchElement.prototype,{
	toString: function() {
		return "HPart@" + this.x + "," + this.y + " (lifeS=" + this.rLifeF / this.fps + ")";
	}
	,dispose: function() {
		this.remove();
		this.bounds = null;
	}
	,__class__: dn_heaps_HParticle
});
var dn_heaps__$Sfx_GlobalGroup = function(id) {
	this.id = id;
	this.volume = 1;
	this.soundGroup = new hxd_snd_SoundGroup("global" + id);
};
$hxClasses["dn.heaps._Sfx.GlobalGroup"] = dn_heaps__$Sfx_GlobalGroup;
dn_heaps__$Sfx_GlobalGroup.__name__ = "dn.heaps._Sfx.GlobalGroup";
dn_heaps__$Sfx_GlobalGroup.prototype = {
	set_muted: function(v) {
		this.muted = v;
		if(v) {
			this.soundGroup.volume = 0;
		} else {
			this.soundGroup.volume = this.volume;
		}
		return v;
	}
	,__class__: dn_heaps__$Sfx_GlobalGroup
};
var dn_heaps_assets_Atlas = function() { };
$hxClasses["dn.heaps.assets.Atlas"] = dn_heaps_assets_Atlas;
dn_heaps_assets_Atlas.__name__ = "dn.heaps.assets.Atlas";
dn_heaps_assets_Atlas.ltick = function() {
	if(dn_heaps_assets_Atlas.LOADING_TICK_FUN != null) {
		dn_heaps_assets_Atlas.LOADING_TICK_FUN();
	}
};
dn_heaps_assets_Atlas.load = function(atlasPath,onReload,notZeroBaseds,properties) {
	var notZeroMap = new haxe_ds_StringMap();
	if(notZeroBaseds != null) {
		var _g = 0;
		while(_g < notZeroBaseds.length) {
			var id = notZeroBaseds[_g];
			++_g;
			notZeroMap.h[id] = true;
		}
	}
	var propertiesMap = new haxe_ds_StringMap();
	if(properties != null) {
		var _g = 0;
		var _g1 = properties.length;
		while(_g < _g1) {
			var i = _g++;
			propertiesMap.h[properties[i]] = properties.length - 1 - i;
		}
	}
	var res = hxd_Res.load(atlasPath);
	var basePath = atlasPath.indexOf("/") < 0 ? "" : HxOverrides.substr(atlasPath,0,atlasPath.lastIndexOf("/") + 1);
	var atlas = res.to(hxd_res_Atlas);
	var lib = dn_heaps_assets_Atlas.convertToSlib(atlas,notZeroMap,propertiesMap,atlasPath);
	res.watch(function() {
		dn_heaps_assets_Atlas.convertToSlib(atlas,notZeroMap,propertiesMap,atlasPath);
		if(onReload != null) {
			onReload();
		}
	});
	return lib;
};
dn_heaps_assets_Atlas.convertToSlib = function(atlas,notZeroBaseds,properties,atlasName) {
	dn_heaps_assets_Atlas.ltick();
	var contents = atlas.getContents();
	dn_heaps_assets_Atlas.ltick();
	var bestVariants_h = Object.create(null);
	var propertiesReg = new EReg("(.*)((\\.[a-z_\\-]+)+)$","gi");
	var h = contents.h;
	var rawName_h = h;
	var rawName_keys = Object.keys(h);
	var rawName_length = rawName_keys.length;
	var rawName_current = 0;
	while(rawName_current < rawName_length) {
		var rawName = rawName_keys[rawName_current++];
		var groupName = rawName;
		var groupProps = [];
		if(propertiesReg.match(rawName)) {
			var str = HxOverrides.substr(propertiesReg.matched(2),1,null);
			groupProps = str.split(".");
			groupName = propertiesReg.matched(1);
		}
		var score = 0;
		if(groupProps.length > 0) {
			var _g = 0;
			var _g1 = groupProps.length;
			while(_g < _g1) {
				var i = _g++;
				var prio = properties.h[groupProps[i]];
				if(prio != null) {
					score |= 1 << prio;
				}
			}
			if(score == 0) {
				continue;
			}
		}
		var e = bestVariants_h[groupName];
		if(e == null) {
			bestVariants_h[groupName] = { rawName : rawName, score : score};
		} else if(score > e.score) {
			e.rawName = rawName;
			e.score = score;
		}
	}
	var pageMap = new haxe_ds_ObjectMap();
	var pages = [];
	var h = contents.h;
	var group_h = h;
	var group_keys = Object.keys(h);
	var group_length = group_keys.length;
	var group_current = 0;
	while(group_current < group_length) {
		var group = group_h[group_keys[group_current++]];
		var _g = 0;
		while(_g < group.length) {
			var frame = group[_g];
			++_g;
			var tex = frame.t.innerTex;
			var page = pageMap.h[tex.__id__];
			if(page == null) {
				pageMap.set(tex,pages.length);
				dn_heaps_assets_Atlas.ltick();
				pages.push(h2d_Tile.fromTexture(tex));
				dn_heaps_assets_Atlas.ltick();
			}
		}
	}
	var nrmPages = [];
	var _g = 0;
	var _g1 = pages.length;
	while(_g < _g1) {
		var i = _g++;
		var name = pages[i].innerTex.name;
		var nrmName = HxOverrides.substr(name,0,name.length - 4) + "_n.png";
		dn_heaps_assets_Atlas.ltick();
		nrmPages[i] = hxd_res_Loader.currentInstance.exists(nrmName) ? h2d_Tile.fromTexture(hxd_Res.load(nrmName).toTexture()) : null;
		dn_heaps_assets_Atlas.ltick();
	}
	var lib = new dn_heaps_slib_SpriteLib(pages,nrmPages);
	var frameReg = new EReg("(.*?)(_?)([0-9]+)$","gi");
	var numReg = new EReg("^[0-9]+$","");
	var notZeroBasedWildcard = Object.prototype.hasOwnProperty.call(notZeroBaseds.h,"*");
	var h = bestVariants_h;
	var groupName_h = h;
	var groupName_keys = Object.keys(h);
	var groupName_length = groupName_keys.length;
	var groupName_current = 0;
	while(groupName_current < groupName_length) {
		var groupName = groupName_keys[groupName_current++];
		var rawName = bestVariants_h[groupName].rawName;
		var content = contents.h[rawName];
		if(content.length == 1) {
			var e = content[0];
			var page = pageMap.h[e.t.innerTex.__id__];
			var k = groupName;
			var f = 0;
			var regBoth = false;
			if(frameReg.match(k)) {
				k = frameReg.matched(1);
				f = Std.parseInt(frameReg.matched(3));
				if(notZeroBasedWildcard || Object.prototype.hasOwnProperty.call(notZeroBaseds.h,k)) {
					--f;
				}
				if(frameReg.matched(2).length == 0) {
					regBoth = true;
				}
			}
			var _this = e.t;
			var _this1 = e.t;
			var fd = lib.sliceCustom(k,page,f,Math.floor(e.t.x),Math.floor(e.t.y),Math.ceil(_this.width + _this.x) - Math.floor(_this.x),Math.ceil(_this1.height + _this1.y) - Math.floor(_this1.y),Math.floor(-e.t.dx),Math.floor(-e.t.dy),e.width,e.height);
			if(regBoth) {
				lib.resliceCustom(groupName,0,fd);
			}
			lib.resliceCustom(rawName,0,fd);
		} else {
			var k1 = groupName;
			if(k1.indexOf("/") >= 0) {
				k1 = HxOverrides.substr(k1,k1.lastIndexOf("/") + 1,null);
			}
			var _g = 0;
			var _g1 = content.length;
			while(_g < _g1) {
				var i = _g++;
				var e1 = content[i];
				var page1 = pageMap.h[e1.t.innerTex.__id__];
				var _this2 = e1.t;
				var _this3 = e1.t;
				lib.sliceCustom(k1,page1,i,Math.floor(e1.t.x),Math.floor(e1.t.y),Math.ceil(_this2.width + _this2.x) - Math.floor(_this2.x),Math.ceil(_this3.height + _this3.y) - Math.floor(_this3.y),Math.floor(-e1.t.dx),Math.floor(-e1.t.dy),e1.width,e1.height);
			}
		}
	}
	dn_heaps_assets_Atlas.ltick();
	var h = lib.groups.h;
	var id_h = h;
	var id_keys = Object.keys(h);
	var id_length = id_keys.length;
	var id_current = 0;
	while(id_current < id_length) {
		var id = id_keys[id_current++];
		if(!(id != null && Object.prototype.hasOwnProperty.call(lib.groups.h,id) && lib.groups.h[id].frames.length > 0)) {
			throw haxe_Exception.thrown("Unknown group " + id);
		}
		var nframes = (id == null ? lib.currentGroup : lib.groups.h[id]).frames.length;
		var a = dn_heaps_assets_Atlas.CACHE_ANIMS[nframes];
		if(a == null) {
			var _g = [];
			var _g1 = 0;
			var _g2 = nframes;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(i);
			}
			a = _g;
			if(nframes < 256) {
				dn_heaps_assets_Atlas.CACHE_ANIMS[nframes] = a;
			}
		}
		lib.__defineAnim(id,a);
		var p = id.lastIndexOf("/");
		if(p >= 0) {
			var id2 = HxOverrides.substr(id,p + 1,null);
			if(id2 != null && id2.length > 0 && !numReg.match(id2)) {
				if(Object.prototype.hasOwnProperty.call(lib.groups.h,id2)) {
					haxe_Log.trace("Warning, duplicate short name: " + id2 + " in " + atlasName + ":" + id,{ fileName : "dn/heaps/assets/Atlas.hx", lineNumber : 190, className : "dn.heaps.assets.Atlas", methodName : "convertToSlib"});
				}
				lib.groups.h[id2] = lib.groups.h[id];
			}
		}
	}
	dn_heaps_assets_Atlas.ltick();
	return lib;
};
var dn_heaps_slib__$AnimManager_AnimInstance = function(s,g) {
	this.reverse = false;
	this.speed = 1.0;
	this.stopOnLastFrame = false;
	this.killAfterPlay = false;
	this.isStateAnim = false;
	this.paused = false;
	this.playDuration = -1.;
	this.plays = 1;
	this.curFrameCpt = 0.0;
	this.animCursor = 0;
	this.frames = [];
	this.spr = s;
	this.group = g;
	var _this = this.spr.lib;
	var k = this.group;
	if(!(k != null && Object.prototype.hasOwnProperty.call(_this.groups.h,k) && _this.groups.h[k].frames.length > 0)) {
		throw haxe_Exception.thrown("unknown group " + this.group);
	}
	var _this = this.spr.lib;
	var k = this.group;
	this.frames = (k == null ? _this.currentGroup : _this.groups.h[k]).anim;
};
$hxClasses["dn.heaps.slib._AnimManager.AnimInstance"] = dn_heaps_slib__$AnimManager_AnimInstance;
dn_heaps_slib__$AnimManager_AnimInstance.__name__ = "dn.heaps.slib._AnimManager.AnimInstance";
dn_heaps_slib__$AnimManager_AnimInstance.prototype = {
	onEnd: function() {
	}
	,onEachLoop: function() {
	}
	,__class__: dn_heaps_slib__$AnimManager_AnimInstance
};
var dn_heaps_slib__$AnimManager_StateAnim = function(g,cb) {
	this.group = g;
	this.priority = 0;
	this.cond = cb;
	this.spd = 1.0;
};
$hxClasses["dn.heaps.slib._AnimManager.StateAnim"] = dn_heaps_slib__$AnimManager_StateAnim;
dn_heaps_slib__$AnimManager_StateAnim.__name__ = "dn.heaps.slib._AnimManager.StateAnim";
dn_heaps_slib__$AnimManager_StateAnim.prototype = {
	__class__: dn_heaps_slib__$AnimManager_StateAnim
};
var dn_heaps_slib__$AnimManager_Transition = function(f,t,a,cb) {
	this.from = f;
	this.to = t;
	this.anim = a;
	this.cond = cb;
	this.spd = 1.0;
	this.reverse = false;
};
$hxClasses["dn.heaps.slib._AnimManager.Transition"] = dn_heaps_slib__$AnimManager_Transition;
dn_heaps_slib__$AnimManager_Transition.__name__ = "dn.heaps.slib._AnimManager.Transition";
dn_heaps_slib__$AnimManager_Transition.prototype = {
	__class__: dn_heaps_slib__$AnimManager_Transition
};
var dn_heaps_slib_AnimManager = function(spr) {
	this.suspendF = 0.;
	this.destroyed = false;
	this.needUpdates = false;
	this.genSpeed = 1.0;
	this.stateAnimsActive = true;
	this.transitions = [];
	this.stateAnims = [];
	this.stack = [];
	this.spr = spr;
};
$hxClasses["dn.heaps.slib.AnimManager"] = dn_heaps_slib_AnimManager;
dn_heaps_slib_AnimManager.__name__ = "dn.heaps.slib.AnimManager";
dn_heaps_slib_AnimManager.prototype = {
	destroy: function() {
		this.destroyed = true;
		this.stopWithoutStateAnims();
		this.needUpdates = false;
		this.stateAnims = null;
		this.stack = null;
		this.spr = null;
	}
	,play: function(group,plays,queueAnim) {
		if(queueAnim == null) {
			queueAnim = false;
		}
		if(plays == null) {
			plays = 1;
		}
		var _this = this.spr.lib;
		var g = group == null ? _this.currentGroup : _this.groups.h[group];
		if(g == null) {
			return this;
		}
		if(g.anim == null || g.anim.length == 0) {
			return this;
		}
		if(!queueAnim && (!this.destroyed && this.stack.length > 0)) {
			this.stack = [];
		}
		var a = new dn_heaps_slib__$AnimManager_AnimInstance(this.spr,group);
		this.stack.push(a);
		a.plays = plays;
		this.needUpdates = true;
		if(!queueAnim) {
			var t = this.getTransition(this.spr.groupName,this.stack[0].group);
			if(t != null && t.anim != this.spr.groupName) {
				var _this = this.spr.lib;
				var k = t.anim;
				if(k != null && Object.prototype.hasOwnProperty.call(_this.groups.h,k) && _this.groups.h[k].frames.length > 0) {
					var a = new dn_heaps_slib__$AnimManager_AnimInstance(this.spr,t.anim);
					this.stack.splice(0,0,a);
					a.speed = t.spd;
					a.reverse = t.reverse;
				}
			}
			var _this = this.stack[0];
			var f = _this.frames[_this.reverse ? _this.frames.length - 1 - _this.animCursor : _this.animCursor];
			if(_this.spr.get_anim().onEnterFrame != null && _this.lastFrame != f) {
				_this.spr.get_anim().onEnterFrame(f);
			}
			if(_this.spr.groupName != _this.group) {
				_this.spr.set(null,_this.group,f);
			} else if(_this.spr.frame != f) {
				_this.spr.setFrame(f);
			}
			_this.lastFrame = f;
		}
		return this;
	}
	,loop: function() {
		if(!this.destroyed && this.stack.length > 0) {
			this.stack[this.stack.length - 1].plays = 999999;
		}
		return this;
	}
	,stopWithStateAnims: function() {
		this.stateAnimsActive = true;
		this.stack = [];
		this.applyStateAnims();
	}
	,stopWithoutStateAnims: function(k,frame) {
		this.stateAnimsActive = false;
		this.stack = [];
		if(k != null) {
			this.spr.set(null,k,frame != null ? frame : 0);
		} else if(frame != null) {
			this.spr.setFrame(frame);
		}
	}
	,unsuspend: function() {
		this.suspendF = 0;
	}
	,getTransition: function(from,to) {
		var _g = 0;
		var _g1 = this.transitions;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if((t.from == dn_heaps_slib_AnimManager.ANYTHING || t.from == from) && (t.to == dn_heaps_slib_AnimManager.ANYTHING || t.to == to) && t.cond()) {
				return t;
			}
		}
		return null;
	}
	,registerStateAnim: function(group,priority,spd,condition) {
		if(spd == null) {
			spd = 1.0;
		}
		if(condition == null) {
			condition = function() {
				return true;
			};
		}
		this.removeStateAnim(group,priority);
		var s = new dn_heaps_slib__$AnimManager_StateAnim(group,condition);
		s.priority = priority;
		s.spd = spd;
		this.stateAnims.push(s);
		this.stateAnims.sort(function(a,b) {
			return -Reflect.compare(a.priority,b.priority);
		});
		this.applyStateAnims();
	}
	,removeStateAnim: function(group,priority) {
		var i = 0;
		while(i < this.stateAnims.length) if(this.stateAnims[i].group == group && this.stateAnims[i].priority == priority) {
			this.stateAnims.splice(i,1);
		} else {
			++i;
		}
	}
	,applyStateAnims: function() {
		if(!this.stateAnimsActive) {
			return;
		}
		if(!this.destroyed && this.stack.length > 0 && !this.stack[0].isStateAnim) {
			return;
		}
		var _g = 0;
		var _g1 = this.stateAnims;
		while(_g < _g1.length) {
			var sa = _g1[_g];
			++_g;
			if(sa.cond()) {
				if(!this.destroyed && this.stack.length > 0 && this.stack[0].group == sa.group) {
					break;
				}
				var _this = this.play(sa.group).loop();
				if(!_this.destroyed && _this.stack.length > 0) {
					_this.stack[_this.stack.length - 1].speed = sa.spd;
				}
				if(!this.destroyed && this.stack.length > 0) {
					this.stack[this.stack.length - 1].isStateAnim = true;
				}
				break;
			}
		}
	}
	,_update: function(dt) {
		if(dn_heaps_slib_SpriteLib.DISABLE_ANIM_UPDATES) {
			return;
		}
		if(this.suspendF > 0) {
			this.suspendF -= dt;
			if(this.suspendF <= 0) {
				this.unsuspend();
			}
			return;
		}
		this.applyStateAnims();
		var a = this.stack[0];
		if(a != null && !a.paused) {
			a.curFrameCpt += dt * this.genSpeed * a.speed;
			if(a.playDuration > 0) {
				a.playDuration -= dt;
				if(a.playDuration <= 0) {
					a.plays = 0;
					a.animCursor = a.frames.length;
					a.curFrameCpt = 1;
				}
			}
			while(a.curFrameCpt > 1) {
				a.curFrameCpt--;
				a.animCursor++;
				if(a.animCursor < a.frames.length) {
					var f = a.frames[a.reverse ? a.frames.length - 1 - a.animCursor : a.animCursor];
					if(a.spr.get_anim().onEnterFrame != null && a.lastFrame != f) {
						a.spr.get_anim().onEnterFrame(f);
					}
					if(a.spr.groupName != a.group) {
						a.spr.set(null,a.group,f);
					} else if(a.spr.frame != f) {
						a.spr.setFrame(f);
					}
					a.lastFrame = f;
					continue;
				}
				a.animCursor = 0;
				a.plays--;
				if(a.plays > 0 || a.playDuration > 0) {
					a.onEachLoop();
					a = this.stack[0];
					var f1 = a.frames[a.reverse ? a.frames.length - 1 - a.animCursor : a.animCursor];
					if(a.spr.get_anim().onEnterFrame != null && a.lastFrame != f1) {
						a.spr.get_anim().onEnterFrame(f1);
					}
					if(a.spr.groupName != a.group) {
						a.spr.set(null,a.group,f1);
					} else if(a.spr.frame != f1) {
						a.spr.setFrame(f1);
					}
					a.lastFrame = f1;
					continue;
				}
				if(a.stopOnLastFrame) {
					this.stopWithoutStateAnims();
				}
				a.onEnd();
				if(a.killAfterPlay) {
					this.spr.remove();
					break;
				}
				if(!this.destroyed && this.stack.length > 0) {
					this.stack.shift();
					if(this.stack.length == 0) {
						this.stopWithStateAnims();
					} else {
						var t = this.getTransition(this.spr.groupName,this.stack[0].group);
						if(t != null && t.anim != this.spr.groupName) {
							var _this = this.spr.lib;
							var k = t.anim;
							if(k != null && Object.prototype.hasOwnProperty.call(_this.groups.h,k) && _this.groups.h[k].frames.length > 0) {
								var a1 = new dn_heaps_slib__$AnimManager_AnimInstance(this.spr,t.anim);
								this.stack.splice(0,0,a1);
								a1.speed = t.spd;
								a1.reverse = t.reverse;
							}
						}
						var _this1 = this.stack[0];
						var f2 = _this1.frames[_this1.reverse ? _this1.frames.length - 1 - _this1.animCursor : _this1.animCursor];
						if(_this1.spr.get_anim().onEnterFrame != null && _this1.lastFrame != f2) {
							_this1.spr.get_anim().onEnterFrame(f2);
						}
						if(_this1.spr.groupName != _this1.group) {
							_this1.spr.set(null,_this1.group,f2);
						} else if(_this1.spr.frame != f2) {
							_this1.spr.setFrame(f2);
						}
						_this1.lastFrame = f2;
					}
					a = this.stack[0];
				}
				if(!(!this.destroyed && this.stack.length > 0)) {
					break;
				}
			}
		}
		if(this.overlap != null && !this.spr.destroyed) {
			this.overlap.curFrameCpt += dt * this.genSpeed * this.overlap.speed;
			while(this.overlap.curFrameCpt > 1) {
				this.overlap.curFrameCpt--;
				this.overlap.animCursor++;
				var _this = this.overlap;
				if(_this.animCursor >= _this.frames.length) {
					this.overlap = null;
					if(this.stack[0] != null) {
						var _this1 = this.stack[0];
						var f = _this1.frames[_this1.reverse ? _this1.frames.length - 1 - _this1.animCursor : _this1.animCursor];
						if(_this1.spr.get_anim().onEnterFrame != null && _this1.lastFrame != f) {
							_this1.spr.get_anim().onEnterFrame(f);
						}
						if(_this1.spr.groupName != _this1.group) {
							_this1.spr.set(null,_this1.group,f);
						} else if(_this1.spr.frame != f) {
							_this1.spr.setFrame(f);
						}
						_this1.lastFrame = f;
					}
					break;
				}
			}
			if(this.overlap != null) {
				var _this = this.overlap;
				var f = _this.frames[_this.reverse ? _this.frames.length - 1 - _this.animCursor : _this.animCursor];
				if(_this.spr.get_anim().onEnterFrame != null && _this.lastFrame != f) {
					_this.spr.get_anim().onEnterFrame(f);
				}
				if(_this.spr.groupName != _this.group) {
					_this.spr.set(null,_this.group,f);
				} else if(_this.spr.frame != f) {
					_this.spr.setFrame(f);
				}
				_this.lastFrame = f;
			}
		}
		if(!this.destroyed && !(!this.destroyed && this.stack.length > 0) && this.overlap == null) {
			this.needUpdates = false;
		}
	}
	,__class__: dn_heaps_slib_AnimManager
};
var h2d_col_Point = function(x,y) {
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["h2d.col.Point"] = h2d_col_Point;
h2d_col_Point.__name__ = "h2d.col.Point";
h2d_col_Point.prototype = {
	__class__: h2d_col_Point
};
var h2d_Object = function(parent) {
	this.blendMode = h2d_BlendMode.Alpha;
	this.alpha = 1.;
	this.visible = true;
	this.rotation = 0;
	this.scaleY = 1;
	this.scaleX = 1;
	this.y = 0;
	this.x = 0;
	this.matA = 1;
	this.matB = 0;
	this.matC = 0;
	this.matD = 1;
	this.absX = 0;
	this.absY = 0;
	this.posChanged = parent != null;
	this.children = [];
	if(parent != null) {
		parent.addChild(this);
	}
};
$hxClasses["h2d.Object"] = h2d_Object;
h2d_Object.__name__ = "h2d.Object";
h2d_Object.prototype = {
	getBounds: function(relativeTo,out) {
		if(out == null) {
			out = new h2d_col_Bounds();
		} else {
			out.xMin = 1e20;
			out.yMin = 1e20;
			out.xMax = -1e20;
			out.yMax = -1e20;
		}
		if(relativeTo != null) {
			relativeTo.syncPos();
		}
		if(relativeTo != this) {
			this.syncPos();
		}
		this.getBoundsRec(relativeTo,out,false);
		if(out.xMax <= out.xMin || out.yMax <= out.yMin) {
			this.addBounds(relativeTo,out,-1,-1,2,2);
			out.xMax = out.xMin = (out.xMax + out.xMin) * 0.5;
			out.yMax = out.yMin = (out.yMax + out.yMin) * 0.5;
		}
		return out;
	}
	,set_filter: function(f) {
		if(this.filter != null && this.allocated) {
			this.filter.unbind(this);
		}
		this.filter = f;
		if(f != null && this.allocated) {
			f.bind(this);
		}
		return f;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		var n = this.children.length;
		if(n == 0) {
			out.xMin = 1e20;
			out.yMin = 1e20;
			out.xMax = -1e20;
			out.yMax = -1e20;
			return;
		}
		if(n == 1) {
			var c = this.children[0];
			if(c.visible) {
				c.getBoundsRec(relativeTo,out,forSize);
			} else {
				out.xMin = 1e20;
				out.yMin = 1e20;
				out.xMax = -1e20;
				out.yMax = -1e20;
			}
			return;
		}
		var xmin = Infinity;
		var ymin = Infinity;
		var xmax = -Infinity;
		var ymax = -Infinity;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(!c.visible) {
				continue;
			}
			c.getBoundsRec(relativeTo,out,forSize);
			if(out.xMin < xmin) {
				xmin = out.xMin;
			}
			if(out.yMin < ymin) {
				ymin = out.yMin;
			}
			if(out.xMax > xmax) {
				xmax = out.xMax;
			}
			if(out.yMax > ymax) {
				ymax = out.yMax;
			}
		}
		out.xMin = xmin;
		out.yMin = ymin;
		out.xMax = xmax;
		out.yMax = ymax;
	}
	,addBounds: function(relativeTo,out,dx,dy,width,height) {
		if(width <= 0 || height <= 0) {
			return;
		}
		if(relativeTo == null) {
			var x;
			var y;
			var x = dx * this.matA + dy * this.matC + this.absX;
			var y = dx * this.matB + dy * this.matD + this.absY;
			if(x < out.xMin) {
				out.xMin = x;
			}
			if(x > out.xMax) {
				out.xMax = x;
			}
			if(y < out.yMin) {
				out.yMin = y;
			}
			if(y > out.yMax) {
				out.yMax = y;
			}
			var x = (dx + width) * this.matA + dy * this.matC + this.absX;
			var y = (dx + width) * this.matB + dy * this.matD + this.absY;
			if(x < out.xMin) {
				out.xMin = x;
			}
			if(x > out.xMax) {
				out.xMax = x;
			}
			if(y < out.yMin) {
				out.yMin = y;
			}
			if(y > out.yMax) {
				out.yMax = y;
			}
			var x = dx * this.matA + (dy + height) * this.matC + this.absX;
			var y = dx * this.matB + (dy + height) * this.matD + this.absY;
			if(x < out.xMin) {
				out.xMin = x;
			}
			if(x > out.xMax) {
				out.xMax = x;
			}
			if(y < out.yMin) {
				out.yMin = y;
			}
			if(y > out.yMax) {
				out.yMax = y;
			}
			var x = (dx + width) * this.matA + (dy + height) * this.matC + this.absX;
			var y = (dx + width) * this.matB + (dy + height) * this.matD + this.absY;
			if(x < out.xMin) {
				out.xMin = x;
			}
			if(x > out.xMax) {
				out.xMax = x;
			}
			if(y < out.yMin) {
				out.yMin = y;
			}
			if(y > out.yMax) {
				out.yMax = y;
			}
			return;
		}
		if(relativeTo == this) {
			if(out.xMin > dx) {
				out.xMin = dx;
			}
			if(out.yMin > dy) {
				out.yMin = dy;
			}
			if(out.xMax < dx + width) {
				out.xMax = dx + width;
			}
			if(out.yMax < dy + height) {
				out.yMax = dy + height;
			}
			return;
		}
		var r = relativeTo.matA * relativeTo.matD - relativeTo.matB * relativeTo.matC;
		if(r == 0) {
			return;
		}
		var det = 1 / r;
		var rA = relativeTo.matD * det;
		var rB = -relativeTo.matB * det;
		var rC = -relativeTo.matC * det;
		var rD = relativeTo.matA * det;
		var rX = this.absX - relativeTo.absX;
		var rY = this.absY - relativeTo.absY;
		var x = dx * this.matA + dy * this.matC + rX;
		var y = dx * this.matB + dy * this.matD + rY;
		var x1 = x * rA + y * rC;
		var y1 = x * rB + y * rD;
		if(x1 < out.xMin) {
			out.xMin = x1;
		}
		if(x1 > out.xMax) {
			out.xMax = x1;
		}
		if(y1 < out.yMin) {
			out.yMin = y1;
		}
		if(y1 > out.yMax) {
			out.yMax = y1;
		}
		x = (dx + width) * this.matA + dy * this.matC + rX;
		y = (dx + width) * this.matB + dy * this.matD + rY;
		var x1 = x * rA + y * rC;
		var y1 = x * rB + y * rD;
		if(x1 < out.xMin) {
			out.xMin = x1;
		}
		if(x1 > out.xMax) {
			out.xMax = x1;
		}
		if(y1 < out.yMin) {
			out.yMin = y1;
		}
		if(y1 > out.yMax) {
			out.yMax = y1;
		}
		x = dx * this.matA + (dy + height) * this.matC + rX;
		y = dx * this.matB + (dy + height) * this.matD + rY;
		var x1 = x * rA + y * rC;
		var y1 = x * rB + y * rD;
		if(x1 < out.xMin) {
			out.xMin = x1;
		}
		if(x1 > out.xMax) {
			out.xMax = x1;
		}
		if(y1 < out.yMin) {
			out.yMin = y1;
		}
		if(y1 > out.yMax) {
			out.yMax = y1;
		}
		x = (dx + width) * this.matA + (dy + height) * this.matC + rX;
		y = (dx + width) * this.matB + (dy + height) * this.matD + rY;
		var x1 = x * rA + y * rC;
		var y1 = x * rB + y * rD;
		if(x1 < out.xMin) {
			out.xMin = x1;
		}
		if(x1 > out.xMax) {
			out.xMax = x1;
		}
		if(y1 < out.yMin) {
			out.yMin = y1;
		}
		if(y1 > out.yMax) {
			out.yMax = y1;
		}
	}
	,localToGlobal: function(pt) {
		this.syncPos();
		if(pt == null) {
			pt = new h2d_col_Point();
		}
		var px = pt.x * this.matA + pt.y * this.matC + this.absX;
		var py = pt.x * this.matB + pt.y * this.matD + this.absY;
		pt.x = px;
		pt.y = py;
		return pt;
	}
	,getScene: function() {
		var p = this;
		while(p.parent != null) p = p.parent;
		if(((p) instanceof h2d_Scene)) {
			return p;
		} else {
			return null;
		}
	}
	,set_visible: function(b) {
		if(this.visible == b) {
			return b;
		}
		this.visible = b;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return b;
	}
	,addChild: function(s) {
		this.addChildAt(s,this.children.length);
	}
	,addChildAt: function(s,pos) {
		if(pos < 0) {
			pos = 0;
		}
		if(pos > this.children.length) {
			pos = this.children.length;
		}
		var p = this;
		while(p != null) {
			if(p == s) {
				throw haxe_Exception.thrown("Recursive addChild");
			}
			p = p.parent;
		}
		if(s.parent != null) {
			var old = s.allocated;
			s.allocated = false;
			s.parent.removeChild(s);
			s.allocated = old;
		}
		this.children.splice(pos,0,s);
		if(!this.allocated && s.allocated) {
			s.onRemove();
		}
		s.parent = this;
		s.parentContainer = this.parentContainer;
		s.posChanged = true;
		if(this.allocated) {
			if(!s.allocated) {
				s.onAdd();
			} else {
				s.onHierarchyMoved(true);
			}
		}
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
	}
	,onHierarchyMoved: function(parentChanged) {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onHierarchyMoved(parentChanged);
		}
	}
	,onAdd: function() {
		this.allocated = true;
		if(this.filter != null) {
			this.filter.bind(this);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onAdd();
		}
	}
	,onRemove: function() {
		this.allocated = false;
		if(this.filter != null) {
			this.filter.unbind(this);
		}
		var i = this.children.length - 1;
		while(i >= 0) {
			var c = this.children[i--];
			if(c != null) {
				c.onRemove();
			}
		}
	}
	,removeChild: function(s) {
		if(HxOverrides.remove(this.children,s)) {
			if(s.allocated) {
				s.onRemove();
			}
			s.parent = null;
			if(s.parentContainer != null) {
				s.setParentContainer(null);
			}
			s.posChanged = true;
			if(this.parentContainer != null) {
				this.parentContainer.contentChanged(this);
			}
		}
	}
	,setParentContainer: function(c) {
		this.parentContainer = c;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			s.setParentContainer(c);
		}
	}
	,removeChildren: function() {
		while(this.children.length > 0) this.removeChild(this.getChildAt(0));
	}
	,remove: function() {
		if(this.parent != null) {
			this.parent.removeChild(this);
		}
	}
	,draw: function(ctx) {
	}
	,sync: function(ctx) {
		var changed = this.posChanged;
		if(changed) {
			this.calcAbsPos();
			this.posChanged = false;
		}
		this.lastFrame = ctx.frame;
		var p = 0;
		var len = this.children.length;
		while(p < len) {
			var c = this.children[p];
			if(c == null) {
				break;
			}
			if(c.lastFrame != ctx.frame) {
				if(changed) {
					c.posChanged = true;
				}
				c.sync(ctx);
			}
			if(this.children[p] != c) {
				p = 0;
				len = this.children.length;
			} else {
				++p;
			}
		}
	}
	,syncPos: function() {
		if(this.parent != null) {
			this.parent.syncPos();
		}
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
	}
	,calcAbsPos: function() {
		if(this.parent == null) {
			var cr;
			var sr;
			if(this.rotation == 0) {
				cr = 1.;
				sr = 0.;
				this.matA = this.scaleX;
				this.matB = 0;
				this.matC = 0;
				this.matD = this.scaleY;
			} else {
				cr = Math.cos(this.rotation);
				sr = Math.sin(this.rotation);
				this.matA = this.scaleX * cr;
				this.matB = this.scaleX * sr;
				this.matC = this.scaleY * -sr;
				this.matD = this.scaleY * cr;
			}
			this.absX = this.x;
			this.absY = this.y;
		} else {
			if(this.rotation == 0) {
				this.matA = this.scaleX * this.parent.matA;
				this.matB = this.scaleX * this.parent.matB;
				this.matC = this.scaleY * this.parent.matC;
				this.matD = this.scaleY * this.parent.matD;
			} else {
				var cr = Math.cos(this.rotation);
				var sr = Math.sin(this.rotation);
				var tmpA = this.scaleX * cr;
				var tmpB = this.scaleX * sr;
				var tmpC = this.scaleY * -sr;
				var tmpD = this.scaleY * cr;
				this.matA = tmpA * this.parent.matA + tmpB * this.parent.matC;
				this.matB = tmpA * this.parent.matB + tmpB * this.parent.matD;
				this.matC = tmpC * this.parent.matA + tmpD * this.parent.matC;
				this.matD = tmpC * this.parent.matB + tmpD * this.parent.matD;
			}
			this.absX = this.x * this.parent.matA + this.y * this.parent.matC + this.parent.absX;
			this.absY = this.x * this.parent.matB + this.y * this.parent.matD + this.parent.absY;
		}
	}
	,emitTile: function(ctx,tile) {
		if(h2d_Object.nullDrawable == null) {
			h2d_Object.nullDrawable = new h2d_Drawable(null);
		}
		h2d_Object.nullDrawable.absX = this.absX;
		h2d_Object.nullDrawable.absY = this.absY;
		h2d_Object.nullDrawable.matA = this.matA;
		h2d_Object.nullDrawable.matB = this.matB;
		h2d_Object.nullDrawable.matC = this.matC;
		h2d_Object.nullDrawable.matD = this.matD;
		ctx.drawTile(h2d_Object.nullDrawable,tile);
	}
	,clipBounds: function(ctx,bounds,scaleX,scaleY) {
		if(scaleY == null) {
			scaleY = 1.;
		}
		if(scaleX == null) {
			scaleX = 1.;
		}
		var view = ctx.tmpBounds;
		var matA;
		var matB;
		var matC;
		var matD;
		var absX;
		var absY;
		if(ctx.inFilter != null) {
			var f1 = ctx.baseShader.filterMatrixA__;
			var f2 = ctx.baseShader.filterMatrixB__;
			var tmpA = this.matA * f1.x + this.matB * f1.y;
			var tmpB = this.matA * f2.x + this.matB * f2.y;
			var tmpC = this.matC * f1.x + this.matD * f1.y;
			var tmpD = this.matC * f2.x + this.matD * f2.y;
			var tmpX = this.absX * f1.x + this.absY * f1.y + f1.z;
			var tmpY = this.absX * f2.x + this.absY * f2.y + f2.z;
			matA = (tmpA * ctx.viewA + tmpB * ctx.viewC) / scaleX;
			matB = (tmpA * ctx.viewB + tmpB * ctx.viewD) / scaleY;
			matC = (tmpC * ctx.viewA + tmpD * ctx.viewC) / scaleX;
			matD = (tmpC * ctx.viewB + tmpD * ctx.viewD) / scaleY;
			absX = tmpX * ctx.viewA + tmpY * ctx.viewC + ctx.viewX;
			absY = tmpX * ctx.viewB + tmpY * ctx.viewD + ctx.viewY;
		} else {
			matA = (this.matA * ctx.viewA + this.matB * ctx.viewC) / scaleX;
			matB = (this.matA * ctx.viewB + this.matB * ctx.viewD) / scaleY;
			matC = (this.matC * ctx.viewA + this.matD * ctx.viewC) / scaleX;
			matD = (this.matC * ctx.viewB + this.matD * ctx.viewD) / scaleY;
			absX = this.absX * ctx.viewA + this.absY * ctx.viewC + ctx.viewX;
			absY = this.absX * ctx.viewB + this.absY * ctx.viewD + ctx.viewY;
		}
		view.xMin = 1e20;
		view.yMin = 1e20;
		view.xMax = -1e20;
		view.yMax = -1e20;
		var x = bounds.xMin;
		var y = bounds.yMin;
		var x1 = x * matA + y * matC + absX;
		var y1 = x * matB + y * matD + absY;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x = bounds.xMax;
		var y = bounds.yMin;
		var x1 = x * matA + y * matC + absX;
		var y1 = x * matB + y * matD + absY;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x = bounds.xMin;
		var y = bounds.yMax;
		var x1 = x * matA + y * matC + absX;
		var y1 = x * matB + y * matD + absY;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x = bounds.xMax;
		var y = bounds.yMax;
		var x1 = x * matA + y * matC + absX;
		var y1 = x * matB + y * matD + absY;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		if(view.xMin < -1) {
			view.xMin = -1;
		}
		if(view.yMin < -1) {
			view.yMin = -1;
		}
		if(view.xMax > 1) {
			view.xMax = 1;
		}
		if(view.yMax > 1) {
			view.yMax = 1;
		}
		var invDet = 1 / (matA * matD - matB * matC);
		var sxMin = view.xMin;
		var syMin = view.yMin;
		var sxMax = view.xMax;
		var syMax = view.yMax;
		view.xMin = 1e20;
		view.yMin = 1e20;
		view.xMax = -1e20;
		view.yMax = -1e20;
		var x = sxMin;
		var y = syMin;
		x -= absX;
		y -= absY;
		var x1 = (x * matD - y * matC) * invDet;
		var y1 = (-x * matB + y * matA) * invDet;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x = sxMax;
		var y = syMin;
		x -= absX;
		y -= absY;
		var x1 = (x * matD - y * matC) * invDet;
		var y1 = (-x * matB + y * matA) * invDet;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x = sxMin;
		var y = syMax;
		x -= absX;
		y -= absY;
		var x1 = (x * matD - y * matC) * invDet;
		var y1 = (-x * matB + y * matA) * invDet;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x = sxMax;
		var y = syMax;
		x -= absX;
		y -= absY;
		var x1 = (x * matD - y * matC) * invDet;
		var y1 = (-x * matB + y * matA) * invDet;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var a = bounds.xMin;
		var b = view.xMin;
		bounds.xMin = a < b ? b : a;
		var a = bounds.yMin;
		var b = view.yMin;
		bounds.yMin = a < b ? b : a;
		var a = bounds.xMax;
		var b = view.xMax;
		bounds.xMax = a > b ? b : a;
		var a = bounds.yMax;
		var b = view.yMax;
		bounds.yMax = a > b ? b : a;
	}
	,drawFilters: function(ctx) {
		if(!ctx.pushFilter(this)) {
			return;
		}
		var bounds = ctx.tmpBounds;
		var total = new h2d_col_Bounds();
		this.filter.sync(ctx,this);
		var scaleX;
		var scaleY;
		if(this.filter.useScreenResolution) {
			var s = ctx.scene;
			scaleX = s.viewportScaleX * this.filter.resolutionScale;
			scaleY = s.viewportScaleY * this.filter.resolutionScale;
		} else {
			scaleX = this.filter.resolutionScale;
			scaleY = this.filter.resolutionScale;
		}
		if(this.filter.autoBounds) {
			var maxExtent = this.filter.boundsExtend;
			if(maxExtent >= 0) {
				this.getBounds(this,bounds);
				bounds.xMin = bounds.xMin * scaleX - maxExtent;
				bounds.yMin = bounds.yMin * scaleY - maxExtent;
				bounds.xMax = bounds.xMax * scaleX + maxExtent;
				bounds.yMax = bounds.yMax * scaleY + maxExtent;
				if(bounds.xMin < total.xMin) {
					total.xMin = bounds.xMin;
				}
				if(bounds.xMax > total.xMax) {
					total.xMax = bounds.xMax;
				}
				if(bounds.yMin < total.yMin) {
					total.yMin = bounds.yMin;
				}
				if(bounds.yMax > total.yMax) {
					total.yMax = bounds.yMax;
				}
			}
		} else {
			var scale = h2d_Object.tmpPoint;
			var x = scaleX;
			var y = scaleY;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			scale.x = x;
			scale.y = y;
			this.filter.getBounds(this,bounds,scale);
			if(bounds.xMin < total.xMin) {
				total.xMin = bounds.xMin;
			}
			if(bounds.xMax > total.xMax) {
				total.xMax = bounds.xMax;
			}
			if(bounds.yMin < total.yMin) {
				total.yMin = bounds.yMin;
			}
			if(bounds.yMax > total.yMax) {
				total.yMax = bounds.yMax;
			}
			scaleX = scale.x;
			scaleY = scale.y;
		}
		ctx.setFilterScale(scaleX,scaleY);
		this.clipBounds(ctx,total,scaleX,scaleY);
		var xMin = Math.floor(total.xMin + 1e-10);
		var yMin = Math.floor(total.yMin + 1e-10);
		var width = Math.ceil(total.xMax - xMin - 1e-10);
		var height = Math.ceil(total.yMax - yMin - 1e-10);
		if(width <= 0 || height <= 0 || total.xMax < total.xMin) {
			ctx.popFilter();
			return;
		}
		var t = ctx.textures.allocTarget("filterTemp",width,height,false);
		ctx.pushTarget(t,xMin,yMin,width,height);
		ctx.engine.clear(0);
		var oldAlpha = ctx.globalAlpha;
		var shader = ctx.baseShader;
		var _this = shader.filterMatrixA__;
		var x = _this.x;
		var y = _this.y;
		var z = _this.z;
		var w = _this.w;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var oldA_x = x;
		var oldA_y = y;
		var oldA_z = z;
		var oldA_w = w;
		var _this = shader.filterMatrixB__;
		var x = _this.x;
		var y = _this.y;
		var z = _this.z;
		var w = _this.w;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var oldB_x = x;
		var oldB_y = y;
		var oldB_z = z;
		var oldB_w = w;
		var invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
		var invA = this.matD * invDet * scaleX;
		var invB = -this.matB * invDet * scaleY;
		var invC = -this.matC * invDet * scaleX;
		var invD = this.matA * invDet * scaleY;
		var invX = -(this.absX * invA + this.absY * invC);
		var invY = -(this.absX * invB + this.absY * invD);
		var _this = shader.filterMatrixA__;
		var x = invA;
		var y = invC;
		var z = invX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		var _this = shader.filterMatrixB__;
		var x = invB;
		var y = invD;
		var z = invY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		ctx.globalAlpha = 1;
		this.drawContent(ctx);
		var finalTile = h2d_Tile.fromTexture(t);
		finalTile.dx = xMin / scaleX;
		finalTile.dy = yMin / scaleY;
		var prev = finalTile;
		finalTile = this.filter.draw(ctx,finalTile);
		if(finalTile != null) {
			if(finalTile != prev) {
				finalTile.dx = (finalTile.dx + xMin) / scaleX;
				finalTile.dy = (finalTile.dy + yMin) / scaleY;
			}
			finalTile.width /= scaleX;
			finalTile.height /= scaleY;
		}
		var _this = shader.filterMatrixA__;
		_this.x = oldA_x;
		_this.y = oldA_y;
		_this.z = oldA_z;
		_this.w = oldA_w;
		var _this = shader.filterMatrixB__;
		_this.x = oldB_x;
		_this.y = oldB_y;
		_this.z = oldB_z;
		_this.w = oldB_w;
		ctx.popTarget();
		ctx.popFilter();
		ctx.globalAlpha = oldAlpha;
		if(finalTile == null) {
			return;
		}
		this.drawFiltered(ctx,finalTile);
	}
	,drawFiltered: function(ctx,tile) {
		var oldAlpha = ctx.globalAlpha;
		ctx.currentBlend = null;
		ctx.inFilterBlend = this.blendMode;
		ctx.globalAlpha *= this.alpha;
		this.emitTile(ctx,tile);
		ctx.globalAlpha = oldAlpha;
		ctx.inFilterBlend = null;
		ctx.currentBlend = null;
	}
	,drawRec: function(ctx) {
		if(!this.visible) {
			return;
		}
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		if(this.filter != null && this.filter.get_enable()) {
			this.drawFilters(ctx);
		} else {
			var old = ctx.globalAlpha;
			ctx.globalAlpha *= this.alpha;
			this.drawContent(ctx);
			ctx.globalAlpha = old;
		}
	}
	,drawContent: function(ctx) {
		if(ctx.front2back) {
			var i = this.children.length;
			while(i-- > 0) this.children[i].drawRec(ctx);
			this.draw(ctx);
		} else {
			this.draw(ctx);
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.drawRec(ctx);
			}
		}
	}
	,getChildAt: function(n) {
		return this.children[n];
	}
	,contentChanged: function(s) {
	}
	,__class__: h2d_Object
};
var h2d_Drawable = function(parent) {
	h2d_Object.call(this,parent);
	this.color = new h3d_Vector(1,1,1,1);
};
$hxClasses["h2d.Drawable"] = h2d_Drawable;
h2d_Drawable.__name__ = "h2d.Drawable";
h2d_Drawable.__super__ = h2d_Object;
h2d_Drawable.prototype = $extend(h2d_Object.prototype,{
	drawFiltered: function(ctx,tile) {
		var old = this.shaders;
		this.shaders = null;
		h2d_Object.prototype.drawFiltered.call(this,ctx,tile);
		this.shaders = old;
	}
	,addShader: function(s) {
		if(s == null) {
			throw haxe_Exception.thrown("Can't add null shader");
		}
		this.shaders = hxsl_ShaderList.addSort(s,this.shaders);
		return s;
	}
	,removeShader: function(s) {
		var prev = null;
		var cur = this.shaders;
		while(cur != null) {
			if(cur.s == s) {
				if(prev == null) {
					this.shaders = cur.next;
				} else {
					prev.next = cur.next;
				}
				return true;
			}
			prev = cur;
			cur = cur.next;
		}
		return false;
	}
	,emitTile: function(ctx,tile) {
		if(tile == null) {
			tile = new h2d_Tile(null,0,0,5,5);
		}
		if(!ctx.drawTile(this,tile)) {
			return;
		}
	}
	,__class__: h2d_Drawable
});
var dn_heaps_slib_SpriteInterface = function() { };
$hxClasses["dn.heaps.slib.SpriteInterface"] = dn_heaps_slib_SpriteInterface;
dn_heaps_slib_SpriteInterface.__name__ = "dn.heaps.slib.SpriteInterface";
dn_heaps_slib_SpriteInterface.__isInterface__ = true;
dn_heaps_slib_SpriteInterface.prototype = {
	__class__: dn_heaps_slib_SpriteInterface
};
var dn_heaps_slib_HSprite = function(l,g,f,parent) {
	if(f == null) {
		f = 0;
	}
	h2d_Drawable.call(this,parent);
	this.destroyed = false;
	this.pivot = new dn_heaps_slib_SpritePivot();
	this.lastPage = -1;
	if(l != null) {
		var frame = f;
		if(frame == null) {
			frame = 0;
		}
		if(l != null) {
			if(l.pages == null || l.pages.length == 0) {
				throw haxe_Exception.thrown("sprite sheet has no backing texture, please generate one");
			}
			if(g == null) {
				this.groupName = null;
				this.group = null;
				this.frameData = null;
			}
			if(this.allocated && this.lib != null) {
				HxOverrides.remove(this.lib.children,this);
			}
			this.lib = l;
			if(this.allocated) {
				this.lib.children.push(this);
			}
			if(this.pivot.isUndefined) {
				var xRatio = this.lib.defaultCenterX;
				var yRatio = this.lib.defaultCenterY;
				if(yRatio == null) {
					yRatio = 0.5;
				}
				if(xRatio == null) {
					xRatio = 0.5;
				}
				var _this = this.pivot;
				_this.centerFactorX = xRatio;
				_this.centerFactorY = yRatio;
				_this.usingFactor = true;
				_this.isUndefined = false;
			}
		}
		if(g != null && g != this.groupName) {
			this.groupName = g;
		}
		if(!this.destroyed && this.lib != null && this.groupName != null) {
			var _this = this.lib;
			var k = this.groupName;
			this.group = k == null ? _this.currentGroup : _this.groups.h[k];
			var _this = this.lib;
			var k = this.groupName;
			var frame1 = frame;
			if(frame1 == null) {
				frame1 = 0;
			}
			var g = k == null ? _this.currentGroup : _this.groups.h[k];
			this.frameData = g == null ? null : g.frames[frame1];
			if(this.frameData == null) {
				throw haxe_Exception.thrown("Unknown frame: " + this.groupName + "(" + frame + ")");
			}
			if(this.rawTile == null) {
				this.rawTile = this.lib.pages[this.frameData.page].clone();
			} else {
				this.rawTile.setTexture(this.lib.pages[this.frameData.page].innerTex);
			}
			this.lastPage = this.frameData.page;
			this.setFrame(frame);
		} else {
			this.setEmptyTexture();
		}
	} else {
		this.setEmptyTexture();
	}
};
$hxClasses["dn.heaps.slib.HSprite"] = dn_heaps_slib_HSprite;
dn_heaps_slib_HSprite.__name__ = "dn.heaps.slib.HSprite";
dn_heaps_slib_HSprite.__interfaces__ = [dn_heaps_slib_SpriteInterface];
dn_heaps_slib_HSprite.__super__ = h2d_Drawable;
dn_heaps_slib_HSprite.prototype = $extend(h2d_Drawable.prototype,{
	toString: function() {
		return "HSprite_" + this.groupName + "[" + this.frame + "]";
	}
	,get_anim: function() {
		if(this._animManager == null) {
			this._animManager = new dn_heaps_slib_AnimManager(this);
			if(this.onAnimManAlloc != null) {
				this.onAnimManAlloc(this._animManager);
			}
		}
		return this._animManager;
	}
	,setEmptyTexture: function() {
		this.rawTile = h2d_Tile.fromColor(0,4,4,0);
	}
	,set: function(l,g,frame,stopAllAnims) {
		if(stopAllAnims == null) {
			stopAllAnims = false;
		}
		if(frame == null) {
			frame = 0;
		}
		if(l != null) {
			if(l.pages == null || l.pages.length == 0) {
				throw haxe_Exception.thrown("sprite sheet has no backing texture, please generate one");
			}
			if(g == null) {
				this.groupName = null;
				this.group = null;
				this.frameData = null;
			}
			if(this.allocated && this.lib != null) {
				HxOverrides.remove(this.lib.children,this);
			}
			this.lib = l;
			if(this.allocated) {
				this.lib.children.push(this);
			}
			if(this.pivot.isUndefined) {
				var xRatio = this.lib.defaultCenterX;
				var yRatio = this.lib.defaultCenterY;
				if(yRatio == null) {
					yRatio = 0.5;
				}
				if(xRatio == null) {
					xRatio = 0.5;
				}
				var _this = this.pivot;
				_this.centerFactorX = xRatio;
				_this.centerFactorY = yRatio;
				_this.usingFactor = true;
				_this.isUndefined = false;
			}
		}
		if(g != null && g != this.groupName) {
			this.groupName = g;
		}
		if(!this.destroyed && this.lib != null && this.groupName != null) {
			if(stopAllAnims && this._animManager != null) {
				if(this._animManager == null) {
					this._animManager = new dn_heaps_slib_AnimManager(this);
					if(this.onAnimManAlloc != null) {
						this.onAnimManAlloc(this._animManager);
					}
				}
				this._animManager.stopWithoutStateAnims();
			}
			var _this = this.lib;
			var k = this.groupName;
			this.group = k == null ? _this.currentGroup : _this.groups.h[k];
			var _this = this.lib;
			var k = this.groupName;
			var frame1 = frame;
			if(frame1 == null) {
				frame1 = 0;
			}
			var g = k == null ? _this.currentGroup : _this.groups.h[k];
			this.frameData = g == null ? null : g.frames[frame1];
			if(this.frameData == null) {
				throw haxe_Exception.thrown("Unknown frame: " + this.groupName + "(" + frame + ")");
			}
			if(this.rawTile == null) {
				this.rawTile = this.lib.pages[this.frameData.page].clone();
			} else {
				this.rawTile.setTexture(this.lib.pages[this.frameData.page].innerTex);
			}
			this.lastPage = this.frameData.page;
			this.setFrame(frame);
		} else {
			this.setEmptyTexture();
		}
	}
	,setFrame: function(f) {
		this.frame = f;
		if(!this.destroyed && this.lib != null && this.groupName != null) {
			var prev = this.frameData;
			var _this = this.lib;
			var k = this.groupName;
			var frame = this.frame;
			if(frame == null) {
				frame = 0;
			}
			var g = k == null ? _this.currentGroup : _this.groups.h[k];
			this.frameData = g == null ? null : g.frames[frame];
			if(this.frameData == null) {
				throw haxe_Exception.thrown("Unknown frame: " + this.groupName + "(" + this.frame + ")");
			}
			if(this.lastFrame != this.frameData.page) {
				this.rawTile.setTexture(this.lib.pages[this.frameData.page].innerTex);
				this.lastPage = this.frameData.page;
			}
			if(this.onFrameChange != null) {
				this.onFrameChange();
			}
		}
	}
	,fitToBox: function(w,h,useFrameDataRealSize) {
		if(useFrameDataRealSize == null) {
			useFrameDataRealSize = false;
		}
		if(useFrameDataRealSize) {
			var x = w / this.frameData.realWid;
			var y = (h == null ? w : h) / this.frameData.realHei;
			var v = x < y ? x : y;
			this.posChanged = true;
			this.scaleX = v;
			this.posChanged = true;
			this.scaleY = v;
		} else {
			var x;
			if(this.customTile != null) {
				var _this = this.pivot;
				if(!_this.isUndefined && !_this.usingFactor) {
					this.customTile.dx = -(this.pivot.coordX | 0);
					this.customTile.dy = -(this.pivot.coordY | 0);
				} else {
					var _this = this.pivot;
					if(!_this.isUndefined && _this.usingFactor) {
						this.customTile.dx = -(this.customTile.width * this.pivot.centerFactorX | 0);
						this.customTile.dy = -(this.customTile.height * this.pivot.centerFactorY | 0);
					}
				}
				x = this.customTile;
			} else if(!this.destroyed && this.lib != null && this.groupName != null) {
				var fd = this.frameData;
				this.rawTile.setPosition(fd.x,fd.y);
				this.rawTile.setSize(fd.wid,fd.hei);
				var _this = this.pivot;
				if(!_this.isUndefined && !_this.usingFactor) {
					this.rawTile.dx = -(this.pivot.coordX + fd.realX | 0);
					this.rawTile.dy = -(this.pivot.coordY + fd.realY | 0);
				} else {
					var _this = this.pivot;
					if(!_this.isUndefined && _this.usingFactor) {
						this.rawTile.dx = -(fd.realWid * this.pivot.centerFactorX + fd.realX | 0);
						this.rawTile.dy = -(fd.realHei * this.pivot.centerFactorY + fd.realY | 0);
					}
				}
				x = this.rawTile;
			} else {
				var _this = this.pivot;
				if(!_this.isUndefined && !_this.usingFactor) {
					this.rawTile.dx = -(this.pivot.coordX | 0);
					this.rawTile.dy = -(this.pivot.coordY | 0);
				} else {
					var _this = this.pivot;
					if(!_this.isUndefined && _this.usingFactor) {
						this.rawTile.dx = -(this.rawTile.width * this.pivot.centerFactorX | 0);
						this.rawTile.dy = -(this.rawTile.height * this.pivot.centerFactorY | 0);
					}
				}
				x = this.rawTile;
			}
			var x1 = w / x.width;
			var y;
			if(this.customTile != null) {
				var _this = this.pivot;
				if(!_this.isUndefined && !_this.usingFactor) {
					this.customTile.dx = -(this.pivot.coordX | 0);
					this.customTile.dy = -(this.pivot.coordY | 0);
				} else {
					var _this = this.pivot;
					if(!_this.isUndefined && _this.usingFactor) {
						this.customTile.dx = -(this.customTile.width * this.pivot.centerFactorX | 0);
						this.customTile.dy = -(this.customTile.height * this.pivot.centerFactorY | 0);
					}
				}
				y = this.customTile;
			} else if(!this.destroyed && this.lib != null && this.groupName != null) {
				var fd = this.frameData;
				this.rawTile.setPosition(fd.x,fd.y);
				this.rawTile.setSize(fd.wid,fd.hei);
				var _this = this.pivot;
				if(!_this.isUndefined && !_this.usingFactor) {
					this.rawTile.dx = -(this.pivot.coordX + fd.realX | 0);
					this.rawTile.dy = -(this.pivot.coordY + fd.realY | 0);
				} else {
					var _this = this.pivot;
					if(!_this.isUndefined && _this.usingFactor) {
						this.rawTile.dx = -(fd.realWid * this.pivot.centerFactorX + fd.realX | 0);
						this.rawTile.dy = -(fd.realHei * this.pivot.centerFactorY + fd.realY | 0);
					}
				}
				y = this.rawTile;
			} else {
				var _this = this.pivot;
				if(!_this.isUndefined && !_this.usingFactor) {
					this.rawTile.dx = -(this.pivot.coordX | 0);
					this.rawTile.dy = -(this.pivot.coordY | 0);
				} else {
					var _this = this.pivot;
					if(!_this.isUndefined && _this.usingFactor) {
						this.rawTile.dx = -(this.rawTile.width * this.pivot.centerFactorX | 0);
						this.rawTile.dy = -(this.rawTile.height * this.pivot.centerFactorY | 0);
					}
				}
				y = this.rawTile;
			}
			var y1 = (h == null ? w : h) / y.height;
			var v = x1 < y1 ? x1 : y1;
			this.posChanged = true;
			this.scaleX = v;
			this.posChanged = true;
			this.scaleY = v;
		}
	}
	,onAdd: function() {
		h2d_Drawable.prototype.onAdd.call(this);
		this.destroyed = false;
		if(this.lib != null) {
			this.lib.children.push(this);
		}
	}
	,onRemove: function() {
		h2d_Drawable.prototype.onRemove.call(this);
		this.destroyed = true;
		if(this.lib != null) {
			HxOverrides.remove(this.lib.children,this);
		}
		if(this._animManager != null) {
			this._animManager.destroy();
			this._animManager = null;
		}
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		var tmp;
		if(this.customTile != null) {
			var _this = this.pivot;
			if(!_this.isUndefined && !_this.usingFactor) {
				this.customTile.dx = -(this.pivot.coordX | 0);
				this.customTile.dy = -(this.pivot.coordY | 0);
			} else {
				var _this = this.pivot;
				if(!_this.isUndefined && _this.usingFactor) {
					this.customTile.dx = -(this.customTile.width * this.pivot.centerFactorX | 0);
					this.customTile.dy = -(this.customTile.height * this.pivot.centerFactorY | 0);
				}
			}
			tmp = this.customTile;
		} else if(!this.destroyed && this.lib != null && this.groupName != null) {
			var fd = this.frameData;
			this.rawTile.setPosition(fd.x,fd.y);
			this.rawTile.setSize(fd.wid,fd.hei);
			var _this = this.pivot;
			if(!_this.isUndefined && !_this.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX + fd.realX | 0);
				this.rawTile.dy = -(this.pivot.coordY + fd.realY | 0);
			} else {
				var _this = this.pivot;
				if(!_this.isUndefined && _this.usingFactor) {
					this.rawTile.dx = -(fd.realWid * this.pivot.centerFactorX + fd.realX | 0);
					this.rawTile.dy = -(fd.realHei * this.pivot.centerFactorY + fd.realY | 0);
				}
			}
			tmp = this.rawTile;
		} else {
			var _this = this.pivot;
			if(!_this.isUndefined && !_this.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX | 0);
				this.rawTile.dy = -(this.pivot.coordY | 0);
			} else {
				var _this = this.pivot;
				if(!_this.isUndefined && _this.usingFactor) {
					this.rawTile.dx = -(this.rawTile.width * this.pivot.centerFactorX | 0);
					this.rawTile.dy = -(this.rawTile.height * this.pivot.centerFactorY | 0);
				}
			}
			tmp = this.rawTile;
		}
		var tmp1 = tmp.dx;
		var tmp;
		if(this.customTile != null) {
			var _this = this.pivot;
			if(!_this.isUndefined && !_this.usingFactor) {
				this.customTile.dx = -(this.pivot.coordX | 0);
				this.customTile.dy = -(this.pivot.coordY | 0);
			} else {
				var _this = this.pivot;
				if(!_this.isUndefined && _this.usingFactor) {
					this.customTile.dx = -(this.customTile.width * this.pivot.centerFactorX | 0);
					this.customTile.dy = -(this.customTile.height * this.pivot.centerFactorY | 0);
				}
			}
			tmp = this.customTile;
		} else if(!this.destroyed && this.lib != null && this.groupName != null) {
			var fd = this.frameData;
			this.rawTile.setPosition(fd.x,fd.y);
			this.rawTile.setSize(fd.wid,fd.hei);
			var _this = this.pivot;
			if(!_this.isUndefined && !_this.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX + fd.realX | 0);
				this.rawTile.dy = -(this.pivot.coordY + fd.realY | 0);
			} else {
				var _this = this.pivot;
				if(!_this.isUndefined && _this.usingFactor) {
					this.rawTile.dx = -(fd.realWid * this.pivot.centerFactorX + fd.realX | 0);
					this.rawTile.dy = -(fd.realHei * this.pivot.centerFactorY + fd.realY | 0);
				}
			}
			tmp = this.rawTile;
		} else {
			var _this = this.pivot;
			if(!_this.isUndefined && !_this.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX | 0);
				this.rawTile.dy = -(this.pivot.coordY | 0);
			} else {
				var _this = this.pivot;
				if(!_this.isUndefined && _this.usingFactor) {
					this.rawTile.dx = -(this.rawTile.width * this.pivot.centerFactorX | 0);
					this.rawTile.dy = -(this.rawTile.height * this.pivot.centerFactorY | 0);
				}
			}
			tmp = this.rawTile;
		}
		var tmp2 = tmp.dy;
		var tmp;
		if(this.customTile != null) {
			var _this = this.pivot;
			if(!_this.isUndefined && !_this.usingFactor) {
				this.customTile.dx = -(this.pivot.coordX | 0);
				this.customTile.dy = -(this.pivot.coordY | 0);
			} else {
				var _this = this.pivot;
				if(!_this.isUndefined && _this.usingFactor) {
					this.customTile.dx = -(this.customTile.width * this.pivot.centerFactorX | 0);
					this.customTile.dy = -(this.customTile.height * this.pivot.centerFactorY | 0);
				}
			}
			tmp = this.customTile;
		} else if(!this.destroyed && this.lib != null && this.groupName != null) {
			var fd = this.frameData;
			this.rawTile.setPosition(fd.x,fd.y);
			this.rawTile.setSize(fd.wid,fd.hei);
			var _this = this.pivot;
			if(!_this.isUndefined && !_this.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX + fd.realX | 0);
				this.rawTile.dy = -(this.pivot.coordY + fd.realY | 0);
			} else {
				var _this = this.pivot;
				if(!_this.isUndefined && _this.usingFactor) {
					this.rawTile.dx = -(fd.realWid * this.pivot.centerFactorX + fd.realX | 0);
					this.rawTile.dy = -(fd.realHei * this.pivot.centerFactorY + fd.realY | 0);
				}
			}
			tmp = this.rawTile;
		} else {
			var _this = this.pivot;
			if(!_this.isUndefined && !_this.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX | 0);
				this.rawTile.dy = -(this.pivot.coordY | 0);
			} else {
				var _this = this.pivot;
				if(!_this.isUndefined && _this.usingFactor) {
					this.rawTile.dx = -(this.rawTile.width * this.pivot.centerFactorX | 0);
					this.rawTile.dy = -(this.rawTile.height * this.pivot.centerFactorY | 0);
				}
			}
			tmp = this.rawTile;
		}
		var tmp3 = tmp.width;
		var tmp;
		if(this.customTile != null) {
			var _this = this.pivot;
			if(!_this.isUndefined && !_this.usingFactor) {
				this.customTile.dx = -(this.pivot.coordX | 0);
				this.customTile.dy = -(this.pivot.coordY | 0);
			} else {
				var _this = this.pivot;
				if(!_this.isUndefined && _this.usingFactor) {
					this.customTile.dx = -(this.customTile.width * this.pivot.centerFactorX | 0);
					this.customTile.dy = -(this.customTile.height * this.pivot.centerFactorY | 0);
				}
			}
			tmp = this.customTile;
		} else if(!this.destroyed && this.lib != null && this.groupName != null) {
			var fd = this.frameData;
			this.rawTile.setPosition(fd.x,fd.y);
			this.rawTile.setSize(fd.wid,fd.hei);
			var _this = this.pivot;
			if(!_this.isUndefined && !_this.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX + fd.realX | 0);
				this.rawTile.dy = -(this.pivot.coordY + fd.realY | 0);
			} else {
				var _this = this.pivot;
				if(!_this.isUndefined && _this.usingFactor) {
					this.rawTile.dx = -(fd.realWid * this.pivot.centerFactorX + fd.realX | 0);
					this.rawTile.dy = -(fd.realHei * this.pivot.centerFactorY + fd.realY | 0);
				}
			}
			tmp = this.rawTile;
		} else {
			var _this = this.pivot;
			if(!_this.isUndefined && !_this.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX | 0);
				this.rawTile.dy = -(this.pivot.coordY | 0);
			} else {
				var _this = this.pivot;
				if(!_this.isUndefined && _this.usingFactor) {
					this.rawTile.dx = -(this.rawTile.width * this.pivot.centerFactorX | 0);
					this.rawTile.dy = -(this.rawTile.height * this.pivot.centerFactorY | 0);
				}
			}
			tmp = this.rawTile;
		}
		this.addBounds(relativeTo,out,tmp1,tmp2,tmp3,tmp.height);
	}
	,draw: function(ctx) {
		var tmp;
		if(this.customTile != null) {
			var _this = this.pivot;
			if(!_this.isUndefined && !_this.usingFactor) {
				this.customTile.dx = -(this.pivot.coordX | 0);
				this.customTile.dy = -(this.pivot.coordY | 0);
			} else {
				var _this = this.pivot;
				if(!_this.isUndefined && _this.usingFactor) {
					this.customTile.dx = -(this.customTile.width * this.pivot.centerFactorX | 0);
					this.customTile.dy = -(this.customTile.height * this.pivot.centerFactorY | 0);
				}
			}
			tmp = this.customTile;
		} else if(!this.destroyed && this.lib != null && this.groupName != null) {
			var fd = this.frameData;
			this.rawTile.setPosition(fd.x,fd.y);
			this.rawTile.setSize(fd.wid,fd.hei);
			var _this = this.pivot;
			if(!_this.isUndefined && !_this.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX + fd.realX | 0);
				this.rawTile.dy = -(this.pivot.coordY + fd.realY | 0);
			} else {
				var _this = this.pivot;
				if(!_this.isUndefined && _this.usingFactor) {
					this.rawTile.dx = -(fd.realWid * this.pivot.centerFactorX + fd.realX | 0);
					this.rawTile.dy = -(fd.realHei * this.pivot.centerFactorY + fd.realY | 0);
				}
			}
			tmp = this.rawTile;
		} else {
			var _this = this.pivot;
			if(!_this.isUndefined && !_this.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX | 0);
				this.rawTile.dy = -(this.pivot.coordY | 0);
			} else {
				var _this = this.pivot;
				if(!_this.isUndefined && _this.usingFactor) {
					this.rawTile.dx = -(this.rawTile.width * this.pivot.centerFactorX | 0);
					this.rawTile.dy = -(this.rawTile.height * this.pivot.centerFactorY | 0);
				}
			}
			tmp = this.rawTile;
		}
		this.emitTile(ctx,tmp);
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		if(this._animManager != null) {
			if(this._animManager == null) {
				this._animManager = new dn_heaps_slib_AnimManager(this);
				if(this.onAnimManAlloc != null) {
					this.onAnimManAlloc(this._animManager);
				}
			}
			var _this = this._animManager;
			if(_this.needUpdates) {
				_this._update(this.lib != null ? this.lib.tmod : 1);
			}
		}
	}
	,__class__: dn_heaps_slib_HSprite
});
var dn_heaps_slib_HSpriteBE = function(sb,l,g,f) {
	if(f == null) {
		f = 0;
	}
	if(l.pages.length > 1) {
		throw haxe_Exception.thrown("Cannot access tile when there is multiple pages");
	}
	h2d_BatchElement.call(this,l.pages[0].clone());
	this.destroyed = false;
	this.pivot = new dn_heaps_slib_SpritePivot();
	sb.add(this);
	var f1 = f;
	if(f1 == null) {
		f1 = 0;
	}
	var changed = false;
	if(l != null && this.lib != l) {
		changed = true;
		if(g == null) {
			this.groupName = null;
			this.group = null;
			this.frameData = null;
		}
		if(this.allocated && this.lib != null) {
			HxOverrides.remove(this.lib.children,this);
		}
		this.lib = l;
		if(this.allocated) {
			this.lib.children.push(this);
		}
		if(this.pivot.isUndefined) {
			var xRatio = this.lib.defaultCenterX;
			var yRatio = this.lib.defaultCenterY;
			if(yRatio == null) {
				yRatio = 0.5;
			}
			if(xRatio == null) {
				xRatio = 0.5;
			}
			var _this = this.pivot;
			_this.centerFactorX = xRatio;
			_this.centerFactorY = yRatio;
			_this.usingFactor = true;
			_this.isUndefined = false;
			this.updateTile();
		}
	}
	if(g != null && g != this.groupName) {
		changed = true;
		this.groupName = g;
	}
	if(f1 != null && f1 != this.frame) {
		changed = true;
		this.frame = f1;
	}
	if(!this.destroyed && this.groupName != null && changed) {
		var _this = this.lib;
		var k = this.groupName;
		this.group = k == null ? _this.currentGroup : _this.groups.h[k];
		var _this = this.lib;
		var k = this.groupName;
		var frame = f1;
		if(frame == null) {
			frame = 0;
		}
		var g = k == null ? _this.currentGroup : _this.groups.h[k];
		this.frameData = g == null ? null : g.frames[frame];
		if(this.frameData == null) {
			throw haxe_Exception.thrown("Unknown frame: " + this.groupName + "(" + f1 + ")");
		}
		this.updateTile();
		if(this.onFrameChange != null) {
			this.onFrameChange();
		}
	}
};
$hxClasses["dn.heaps.slib.HSpriteBE"] = dn_heaps_slib_HSpriteBE;
dn_heaps_slib_HSpriteBE.__name__ = "dn.heaps.slib.HSpriteBE";
dn_heaps_slib_HSpriteBE.__interfaces__ = [dn_heaps_slib_SpriteInterface];
dn_heaps_slib_HSpriteBE.__super__ = h2d_BatchElement;
dn_heaps_slib_HSpriteBE.prototype = $extend(h2d_BatchElement.prototype,{
	onAdd: function() {
		if(this.allocated) {
			return;
		}
		this.allocated = true;
		if(this.lib != null) {
			this.lib.children.push(this);
		}
	}
	,onRemove: function() {
		if(!this.allocated) {
			return;
		}
		this.allocated = false;
		if(this.lib != null) {
			HxOverrides.remove(this.lib.children,this);
		}
	}
	,get_anim: function() {
		if(this._animManager == null) {
			this._animManager = new dn_heaps_slib_AnimManager(this);
			if(this.batch != null) {
				this.batch.hasUpdate = true;
			}
			if(this.onAnimManAlloc != null) {
				this.onAnimManAlloc(this._animManager);
			}
		}
		return this._animManager;
	}
	,toString: function() {
		return "HSpriteBE_" + this.groupName + "[" + this.frame + "]";
	}
	,set: function(l,g,f,stopAllAnims) {
		if(stopAllAnims == null) {
			stopAllAnims = false;
		}
		if(f == null) {
			f = 0;
		}
		var changed = false;
		if(l != null && this.lib != l) {
			changed = true;
			if(g == null) {
				this.groupName = null;
				this.group = null;
				this.frameData = null;
			}
			if(this.allocated && this.lib != null) {
				HxOverrides.remove(this.lib.children,this);
			}
			this.lib = l;
			if(this.allocated) {
				this.lib.children.push(this);
			}
			if(this.pivot.isUndefined) {
				var xRatio = this.lib.defaultCenterX;
				var yRatio = this.lib.defaultCenterY;
				if(yRatio == null) {
					yRatio = 0.5;
				}
				if(xRatio == null) {
					xRatio = 0.5;
				}
				var _this = this.pivot;
				_this.centerFactorX = xRatio;
				_this.centerFactorY = yRatio;
				_this.usingFactor = true;
				_this.isUndefined = false;
				this.updateTile();
			}
		}
		if(g != null && g != this.groupName) {
			changed = true;
			this.groupName = g;
		}
		if(f != null && f != this.frame) {
			changed = true;
			this.frame = f;
		}
		if(!this.destroyed && this.groupName != null && changed) {
			if(stopAllAnims && this._animManager != null) {
				if(this._animManager == null) {
					this._animManager = new dn_heaps_slib_AnimManager(this);
					if(this.batch != null) {
						this.batch.hasUpdate = true;
					}
					if(this.onAnimManAlloc != null) {
						this.onAnimManAlloc(this._animManager);
					}
				}
				this._animManager.stopWithoutStateAnims();
			}
			var _this = this.lib;
			var k = this.groupName;
			this.group = k == null ? _this.currentGroup : _this.groups.h[k];
			var _this = this.lib;
			var k = this.groupName;
			var frame = f;
			if(frame == null) {
				frame = 0;
			}
			var g = k == null ? _this.currentGroup : _this.groups.h[k];
			this.frameData = g == null ? null : g.frames[frame];
			if(this.frameData == null) {
				throw haxe_Exception.thrown("Unknown frame: " + this.groupName + "(" + f + ")");
			}
			this.updateTile();
			if(this.onFrameChange != null) {
				this.onFrameChange();
			}
		}
	}
	,setFrame: function(f) {
		var changed = f != this.frame;
		this.frame = f;
		if(!this.destroyed && this.groupName != null && changed) {
			var _this = this.lib;
			var k = this.groupName;
			var frame = this.frame;
			if(frame == null) {
				frame = 0;
			}
			var g = k == null ? _this.currentGroup : _this.groups.h[k];
			this.frameData = g == null ? null : g.frames[frame];
			if(this.frameData == null) {
				throw haxe_Exception.thrown("Unknown frame: " + this.groupName + "(" + this.frame + ")");
			}
			if(this.onFrameChange != null) {
				this.onFrameChange();
			}
			this.updateTile();
		}
	}
	,updateTile: function() {
		if(!(!this.destroyed && this.groupName != null)) {
			return;
		}
		var fd = this.frameData;
		var _this = this.lib;
		var t = this.t;
		var g = this.groupName;
		var frame = this.frame;
		if(frame == null) {
			frame = 0;
		}
		var frame1 = frame;
		if(frame1 == null) {
			frame1 = 0;
		}
		var g1 = g == null ? _this.currentGroup : _this.groups.h[g];
		var fd1 = g1 == null ? null : g1.frames[frame1];
		if(fd1 == null) {
			throw haxe_Exception.thrown("Unknown group " + g + "#" + frame + "!");
		}
		t.setPosition(fd1.x,fd1.y);
		t.setSize(fd1.wid,fd1.hei);
		t.dx = -(fd1.realWid * 0.0 + fd1.realX | 0);
		t.dy = -(fd1.realHei * 0.0 + fd1.realY | 0);
		var _this = this.pivot;
		if(!_this.isUndefined && !_this.usingFactor) {
			var x = -this.pivot.coordX - fd.realX;
			this.t.dx = (x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0;
			var x = -this.pivot.coordY - fd.realY;
			this.t.dy = (x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0;
		}
		var _this = this.pivot;
		if(!_this.isUndefined && _this.usingFactor) {
			this.t.dx = -(fd.realWid * this.pivot.centerFactorX + fd.realX | 0);
			this.t.dy = -(fd.realHei * this.pivot.centerFactorY + fd.realY | 0);
		}
	}
	,remove: function() {
		h2d_BatchElement.prototype.remove.call(this);
		if(!this.destroyed) {
			this.destroyed = true;
			if(this._animManager != null) {
				this._animManager.destroy();
				this._animManager = null;
			}
		}
	}
	,update: function(et) {
		if(this._animManager != null) {
			if(this._animManager == null) {
				this._animManager = new dn_heaps_slib_AnimManager(this);
				if(this.batch != null) {
					this.batch.hasUpdate = true;
				}
				if(this.onAnimManAlloc != null) {
					this.onAnimManAlloc(this._animManager);
				}
			}
			var _this = this._animManager;
			if(_this.needUpdates) {
				_this._update(this.lib != null ? this.lib.tmod : 1);
			}
		}
		return h2d_BatchElement.prototype.update.call(this,et);
	}
	,__class__: dn_heaps_slib_HSpriteBE
});
var h2d_SpriteBatch = function(t,parent) {
	this.hasUpdate = false;
	this.hasRotationScale = false;
	h2d_Drawable.call(this,parent);
	this.tile = t;
	this.state = new h2d_impl_BatchDrawState();
};
$hxClasses["h2d.SpriteBatch"] = h2d_SpriteBatch;
h2d_SpriteBatch.__name__ = "h2d.SpriteBatch";
h2d_SpriteBatch.__super__ = h2d_Drawable;
h2d_SpriteBatch.prototype = $extend(h2d_Drawable.prototype,{
	add: function(e,before) {
		if(before == null) {
			before = false;
		}
		e.batch = this;
		if(this.first == null) {
			this.first = this.last = e;
			e.prev = e.next = null;
		} else if(before) {
			e.prev = null;
			e.next = this.first;
			this.first.prev = e;
			this.first = e;
		} else {
			this.last.next = e;
			e.prev = this.last;
			e.next = null;
			this.last = e;
		}
		return e;
	}
	,'delete': function(e) {
		if(e.prev == null) {
			if(this.first == e) {
				this.first = e.next;
			}
		} else {
			e.prev.next = e.next;
		}
		if(e.next == null) {
			if(this.last == e) {
				this.last = e.prev;
			}
		} else {
			e.next.prev = e.prev;
		}
		e.batch = null;
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		if(this.hasUpdate) {
			var e = this.first;
			while(e != null) {
				if(!e.update(ctx.elapsedTime)) {
					e.remove();
				}
				e = e.next;
			}
		}
		this.flush();
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		var e = this.first;
		while(e != null) {
			var t = e.t;
			if(this.hasRotationScale) {
				var ca = Math.cos(e.rotation);
				var sa = Math.sin(e.rotation);
				var hx = t.width;
				var hy = t.height;
				var px = t.dx * e.scaleX;
				var py = t.dy * e.scaleY;
				var x = px * ca - py * sa + e.x;
				var y = py * ca + px * sa + e.y;
				this.addBounds(relativeTo,out,x,y,1e-10,1e-10);
				var px1 = (t.dx + hx) * e.scaleX;
				var py1 = t.dy * e.scaleY;
				x = px1 * ca - py1 * sa + e.x;
				y = py1 * ca + px1 * sa + e.y;
				this.addBounds(relativeTo,out,x,y,1e-10,1e-10);
				var px2 = t.dx * e.scaleX;
				var py2 = (t.dy + hy) * e.scaleY;
				x = px2 * ca - py2 * sa + e.x;
				y = py2 * ca + px2 * sa + e.y;
				this.addBounds(relativeTo,out,x,y,1e-10,1e-10);
				var px3 = (t.dx + hx) * e.scaleX;
				var py3 = (t.dy + hy) * e.scaleY;
				x = px3 * ca - py3 * sa + e.x;
				y = py3 * ca + px3 * sa + e.y;
				this.addBounds(relativeTo,out,x,y,1e-10,1e-10);
			} else {
				this.addBounds(relativeTo,out,e.x + t.dx,e.y + t.dy,t.width,t.height);
			}
			e = e.next;
		}
	}
	,flush: function() {
		if(this.first == null) {
			return;
		}
		if(this.tmpBuf == null) {
			var this1 = hxd__$FloatBuffer_Float32Expand._new(0);
			this.tmpBuf = this1;
		}
		var pos = 0;
		var e = this.first;
		var tmp = this.tmpBuf;
		var bufferVertices = 0;
		this.state.clear();
		while(e != null) {
			if(!e.visible) {
				e = e.next;
				continue;
			}
			var t = e.t;
			if(t != null) {
				this.state.setTexture(t.innerTex);
			}
			var _this = this.state;
			_this.tail.count += 4;
			_this.totalCount += 4;
			var _g = tmp.pos;
			var _g1 = pos + 32;
			while(_g < _g1) {
				var i = _g++;
				if(tmp.pos == tmp.array.length) {
					var newSize = tmp.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					var newArray = new Float32Array(newSize);
					newArray.set(tmp.array);
					tmp.array = newArray;
				}
				tmp.array[tmp.pos++] = 0.;
			}
			if(this.hasRotationScale) {
				var ca = Math.cos(e.rotation);
				var sa = Math.sin(e.rotation);
				var hx = t.width;
				var hy = t.height;
				var px = t.dx * e.scaleX;
				var py = t.dy * e.scaleY;
				tmp.array[pos++] = px * ca - py * sa + e.x;
				tmp.array[pos++] = py * ca + px * sa + e.y;
				tmp.array[pos++] = t.u;
				tmp.array[pos++] = t.v;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
				var px1 = (t.dx + hx) * e.scaleX;
				var py1 = t.dy * e.scaleY;
				tmp.array[pos++] = px1 * ca - py1 * sa + e.x;
				tmp.array[pos++] = py1 * ca + px1 * sa + e.y;
				tmp.array[pos++] = t.u2;
				tmp.array[pos++] = t.v;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
				var px2 = t.dx * e.scaleX;
				var py2 = (t.dy + hy) * e.scaleY;
				tmp.array[pos++] = px2 * ca - py2 * sa + e.x;
				tmp.array[pos++] = py2 * ca + px2 * sa + e.y;
				tmp.array[pos++] = t.u;
				tmp.array[pos++] = t.v2;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
				var px3 = (t.dx + hx) * e.scaleX;
				var py3 = (t.dy + hy) * e.scaleY;
				tmp.array[pos++] = px3 * ca - py3 * sa + e.x;
				tmp.array[pos++] = py3 * ca + px3 * sa + e.y;
				tmp.array[pos++] = t.u2;
				tmp.array[pos++] = t.v2;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
			} else {
				var sx = e.x + t.dx;
				var sy = e.y + t.dy;
				tmp.array[pos++] = sx;
				tmp.array[pos++] = sy;
				tmp.array[pos++] = t.u;
				tmp.array[pos++] = t.v;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
				tmp.array[pos++] = sx + t.width + 0.1;
				tmp.array[pos++] = sy;
				tmp.array[pos++] = t.u2;
				tmp.array[pos++] = t.v;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
				tmp.array[pos++] = sx;
				tmp.array[pos++] = sy + t.height + 0.1;
				tmp.array[pos++] = t.u;
				tmp.array[pos++] = t.v2;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
				tmp.array[pos++] = sx + t.width + 0.1;
				tmp.array[pos++] = sy + t.height + 0.1;
				tmp.array[pos++] = t.u2;
				tmp.array[pos++] = t.v2;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
			}
			e = e.next;
		}
		bufferVertices = pos >> 3;
		var tmp;
		if(this.buffer != null) {
			var _this = this.buffer;
			tmp = !(_this.buffer == null || _this.buffer.vbuf == null);
		} else {
			tmp = false;
		}
		if(tmp) {
			if(this.buffer.vertices >= bufferVertices) {
				this.buffer.uploadVector(this.tmpBuf,0,bufferVertices);
				return;
			}
			this.buffer.dispose();
			this.buffer = null;
		}
		this.empty = bufferVertices == 0;
		if(bufferVertices > 0) {
			this.buffer = h3d_Buffer.ofSubFloats(this.tmpBuf,8,bufferVertices,[h3d_BufferFlag.Dynamic,h3d_BufferFlag.Quads,h3d_BufferFlag.RawFormat]);
		}
	}
	,draw: function(ctx) {
		this.drawWith(ctx,this);
	}
	,drawWith: function(ctx,obj) {
		var tmp;
		if(!(this.first == null || this.buffer == null)) {
			var _this = this.buffer;
			tmp = _this.buffer == null || _this.buffer.vbuf == null;
		} else {
			tmp = true;
		}
		if(tmp || this.empty) {
			return;
		}
		if(!ctx.beginDrawBatchState(obj)) {
			return;
		}
		var engine = ctx.engine;
		this.state.drawQuads(ctx,this.buffer);
	}
	,onRemove: function() {
		h2d_Drawable.prototype.onRemove.call(this);
		if(this.buffer != null) {
			this.buffer.dispose();
			this.buffer = null;
		}
		this.state.clear();
	}
	,__class__: h2d_SpriteBatch
});
var dn_heaps_slib_HSpriteBatch = function(t,parent) {
	h2d_SpriteBatch.call(this,t,parent);
};
$hxClasses["dn.heaps.slib.HSpriteBatch"] = dn_heaps_slib_HSpriteBatch;
dn_heaps_slib_HSpriteBatch.__name__ = "dn.heaps.slib.HSpriteBatch";
dn_heaps_slib_HSpriteBatch.__super__ = h2d_SpriteBatch;
dn_heaps_slib_HSpriteBatch.prototype = $extend(h2d_SpriteBatch.prototype,{
	onAdd: function() {
		h2d_SpriteBatch.prototype.onAdd.call(this);
		var c = this.first;
		while(c != null) {
			if(((c) instanceof dn_heaps_slib_HSpriteBE)) {
				c.onAdd();
			}
			c = c.next;
		}
	}
	,onRemove: function() {
		h2d_SpriteBatch.prototype.onRemove.call(this);
		var c = this.first;
		while(c != null) {
			if(((c) instanceof dn_heaps_slib_HSpriteBE)) {
				c.onRemove();
			}
			c = c.next;
		}
	}
	,add: function(e,before) {
		if(before == null) {
			before = false;
		}
		e = h2d_SpriteBatch.prototype.add.call(this,e,before);
		if(this.allocated && ((e) instanceof dn_heaps_slib_HSpriteBE)) {
			e.onAdd();
		}
		return e;
	}
	,'delete': function(e) {
		h2d_SpriteBatch.prototype.delete.call(this,e);
		if(this.allocated && ((e) instanceof dn_heaps_slib_HSpriteBE)) {
			e.onRemove();
		}
	}
	,__class__: dn_heaps_slib_HSpriteBatch
});
var dn_heaps_slib_FrameData = function(page,x,y,wid,hei,realX,realY,realWid,realHei,tile) {
	this.page = page;
	this.x = x;
	this.y = y;
	this.wid = wid;
	this.hei = hei;
	this.realX = realX;
	this.realY = realY;
	this.realWid = realWid;
	this.realHei = realHei;
	this.tile = tile;
};
$hxClasses["dn.heaps.slib.FrameData"] = dn_heaps_slib_FrameData;
dn_heaps_slib_FrameData.__name__ = "dn.heaps.slib.FrameData";
dn_heaps_slib_FrameData.prototype = {
	toString: function() {
		return "P." + this.page + " " + this.x + "," + this.y + " " + this.wid + " x " + this.hei + " (real: " + this.realX + "," + this.realY + " " + this.realWid + " x " + this.realHei + ")";
	}
	,__class__: dn_heaps_slib_FrameData
};
var dn_heaps_slib_LibGroup = function(id,maxWid,maxHei,frames,anim) {
	this.id = id;
	this.maxWid = maxWid;
	this.maxHei = maxHei;
	this.frames = frames;
	this.anim = anim;
};
$hxClasses["dn.heaps.slib.LibGroup"] = dn_heaps_slib_LibGroup;
dn_heaps_slib_LibGroup.__name__ = "dn.heaps.slib.LibGroup";
dn_heaps_slib_LibGroup.prototype = {
	__class__: dn_heaps_slib_LibGroup
};
var dn_heaps_slib_SLBError = $hxEnums["dn.heaps.slib.SLBError"] = { __ename__:true,__constructs__:null
	,NoGroupSelected: {_hx_name:"NoGroupSelected",_hx_index:0,__enum__:"dn.heaps.slib.SLBError",toString:$estr}
	,GroupAlreadyExists: ($_=function(g) { return {_hx_index:1,g:g,__enum__:"dn.heaps.slib.SLBError",toString:$estr}; },$_._hx_name="GroupAlreadyExists",$_.__params__ = ["g"],$_)
	,InvalidFrameDuration: ($_=function(s) { return {_hx_index:2,s:s,__enum__:"dn.heaps.slib.SLBError",toString:$estr}; },$_._hx_name="InvalidFrameDuration",$_.__params__ = ["s"],$_)
	,EndFrameLower: ($_=function(s) { return {_hx_index:3,s:s,__enum__:"dn.heaps.slib.SLBError",toString:$estr}; },$_._hx_name="EndFrameLower",$_.__params__ = ["s"],$_)
	,InvalidFrames: ($_=function(s) { return {_hx_index:4,s:s,__enum__:"dn.heaps.slib.SLBError",toString:$estr}; },$_._hx_name="InvalidFrames",$_.__params__ = ["s"],$_)
	,NoCurrentGroup: {_hx_name:"NoCurrentGroup",_hx_index:5,__enum__:"dn.heaps.slib.SLBError",toString:$estr}
	,AnimFrameExceeds: ($_=function(id,anim,frame) { return {_hx_index:6,id:id,anim:anim,frame:frame,__enum__:"dn.heaps.slib.SLBError",toString:$estr}; },$_._hx_name="AnimFrameExceeds",$_.__params__ = ["id","anim","frame"],$_)
	,AssetImportFailed: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"dn.heaps.slib.SLBError",toString:$estr}; },$_._hx_name="AssetImportFailed",$_.__params__ = ["e"],$_)
	,NotSameSLBFromBatch: {_hx_name:"NotSameSLBFromBatch",_hx_index:8,__enum__:"dn.heaps.slib.SLBError",toString:$estr}
};
dn_heaps_slib_SLBError.__constructs__ = [dn_heaps_slib_SLBError.NoGroupSelected,dn_heaps_slib_SLBError.GroupAlreadyExists,dn_heaps_slib_SLBError.InvalidFrameDuration,dn_heaps_slib_SLBError.EndFrameLower,dn_heaps_slib_SLBError.InvalidFrames,dn_heaps_slib_SLBError.NoCurrentGroup,dn_heaps_slib_SLBError.AnimFrameExceeds,dn_heaps_slib_SLBError.AssetImportFailed,dn_heaps_slib_SLBError.NotSameSLBFromBatch];
dn_heaps_slib_SLBError.__empty_constructs__ = [dn_heaps_slib_SLBError.NoGroupSelected,dn_heaps_slib_SLBError.NoCurrentGroup,dn_heaps_slib_SLBError.NotSameSLBFromBatch];
var dn_heaps_slib_SpriteLib = function(pages,normalPages) {
	this.tmod = 1.0;
	this.groups = new haxe_ds_StringMap();
	this.defaultCenterX = 0;
	this.defaultCenterY = 0;
	this.gridX = this.gridY = 16;
	this.children = [];
	this.pages = pages;
	this.normalPages = normalPages;
};
$hxClasses["dn.heaps.slib.SpriteLib"] = dn_heaps_slib_SpriteLib;
dn_heaps_slib_SpriteLib.__name__ = "dn.heaps.slib.SpriteLib";
dn_heaps_slib_SpriteLib.prototype = {
	createGroup: function(k) {
		if(Object.prototype.hasOwnProperty.call(this.groups.h,k)) {
			throw haxe_Exception.thrown(dn_heaps_slib_SLBError.GroupAlreadyExists(k));
		}
		var this1 = this.groups;
		var value = new dn_heaps_slib_LibGroup(k,0,0,[],[]);
		this1.h[k] = value;
		this.currentGroup = k == null ? this.currentGroup : this.groups.h[k];
		var k = null;
		if(k == null) {
			return this.currentGroup;
		} else {
			return this.groups.h[k];
		}
	}
	,sliceCustom: function(groupName,page,frame,x,y,wid,hei,realX,realY,realWid,realHei) {
		var g = groupName != null && Object.prototype.hasOwnProperty.call(this.groups.h,groupName) && this.groups.h[groupName].frames.length > 0 ? groupName == null ? this.currentGroup : this.groups.h[groupName] : this.createGroup(groupName);
		var x1 = g.maxWid;
		g.maxWid = x1 > wid ? x1 : wid;
		var x1 = g.maxHei;
		g.maxHei = x1 > hei ? x1 : hei;
		var fd = new dn_heaps_slib_FrameData(page,x,y,wid,hei,realX,realY,realWid,realHei,null);
		g.frames[frame] = fd;
		return fd;
	}
	,resliceCustom: function(groupName,frame,fd) {
		var g = groupName != null && Object.prototype.hasOwnProperty.call(this.groups.h,groupName) && this.groups.h[groupName].frames.length > 0 ? groupName == null ? this.currentGroup : this.groups.h[groupName] : this.createGroup(groupName);
		var x = g.maxWid;
		var y = fd.wid;
		g.maxWid = x > y ? x : y;
		var x = g.maxHei;
		var y = fd.hei;
		g.maxHei = x > y ? x : y;
		g.frames[frame] = fd;
		return fd;
	}
	,toString: function() {
		var l = [];
		var h = this.groups.h;
		var k_h = h;
		var k_keys = Object.keys(h);
		var k_length = k_keys.length;
		var k_current = 0;
		while(k_current < k_length) {
			var k = k_keys[k_current++];
			var g = k == null ? this.currentGroup : this.groups.h[k];
			l.push(k + " (" + g.maxWid + "x" + g.maxHei + ")" + (g.frames.length > 1 ? " " + g.frames.length + "f" : "") + (g.anim.length > 1 ? " animated(" + g.anim.length + "f)" : ""));
		}
		l.sort(function(a,b) {
			return Reflect.compare(a,b);
		});
		return "| " + l.join("\n| ");
	}
	,__defineAnim: function(group,anim) {
		if(this.currentGroup == null && group == null) {
			throw haxe_Exception.thrown(dn_heaps_slib_SLBError.NoCurrentGroup);
		}
		if(group != null) {
			this.currentGroup = group == null ? this.currentGroup : this.groups.h[group];
			var k = null;
			var tmp = k == null;
		}
		var _g = 0;
		while(_g < anim.length) {
			var f = anim[_g];
			++_g;
			if(f >= this.currentGroup.frames.length) {
				throw haxe_Exception.thrown(dn_heaps_slib_SLBError.AnimFrameExceeds(this.currentGroup.id,"[" + anim.join(",") + "] " + this.currentGroup.frames.length,f));
			}
		}
		this.currentGroup.anim = anim;
	}
	,__class__: dn_heaps_slib_SpriteLib
};
var dn_heaps_slib_SpritePivot = function() {
	this.isUndefined = true;
};
$hxClasses["dn.heaps.slib.SpritePivot"] = dn_heaps_slib_SpritePivot;
dn_heaps_slib_SpritePivot.__name__ = "dn.heaps.slib.SpritePivot";
dn_heaps_slib_SpritePivot.prototype = {
	__class__: dn_heaps_slib_SpritePivot
};
var dn_struct_RecyclablePool = function(size,valueConstructor) {
	this.nalloc = 0;
	this.size = size;
	var this1 = new Array(size);
	this.pool = this1;
	var _g = 0;
	var _g1 = this.pool.length;
	while(_g < _g1) {
		var i = _g++;
		this.pool[i] = valueConstructor();
	}
};
$hxClasses["dn.struct.RecyclablePool"] = dn_struct_RecyclablePool;
dn_struct_RecyclablePool.__name__ = "dn.struct.RecyclablePool";
dn_struct_RecyclablePool.prototype = {
	toString: function() {
		return "RecyclablePool(" + this.nalloc + "/" + this.size + ")";
	}
	,dispose: function(elementDisposer) {
		if(elementDisposer != null) {
			var _g = 0;
			var _g1 = this.pool;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				elementDisposer(e);
			}
		}
		this.nalloc = 0;
		this.pool = null;
	}
	,__class__: dn_struct_RecyclablePool
};
var dn_struct__$RecyclablePool_TestObject = function(id) {
	this.id = id;
};
$hxClasses["dn.struct._RecyclablePool.TestObject"] = dn_struct__$RecyclablePool_TestObject;
dn_struct__$RecyclablePool_TestObject.__name__ = "dn.struct._RecyclablePool.TestObject";
dn_struct__$RecyclablePool_TestObject.prototype = {
	toString: function() {
		return "#" + this.id + "=" + Std.string(this.value);
	}
	,recycle: function() {
		this.value = Std.random(999999);
	}
	,__class__: dn_struct__$RecyclablePool_TestObject
};
var en_Bullet = function(x,y) {
	Entity.call(this,x,y);
	this.maxRange = 190;
	this.maxTime = this.secToFrames(3);
	var _this = this.spr;
	var l = null;
	if(l != null) {
		if(l.pages == null || l.pages.length == 0) {
			throw haxe_Exception.thrown("sprite sheet has no backing texture, please generate one");
		}
		if(_this.allocated && _this.lib != null) {
			HxOverrides.remove(_this.lib.children,_this);
		}
		_this.lib = l;
		if(_this.allocated) {
			_this.lib.children.push(_this);
		}
		if(_this.pivot.isUndefined) {
			var xRatio = _this.lib.defaultCenterX;
			var yRatio = _this.lib.defaultCenterY;
			if(yRatio == null) {
				yRatio = 0.5;
			}
			if(xRatio == null) {
				xRatio = 0.5;
			}
			var _this1 = _this.pivot;
			_this1.centerFactorX = xRatio;
			_this1.centerFactorY = yRatio;
			_this1.usingFactor = true;
			_this1.isUndefined = false;
		}
	}
	if("bulletHero" != _this.groupName) {
		_this.groupName = "bulletHero";
	}
	if(!_this.destroyed && _this.lib != null && _this.groupName != null) {
		var _this1 = _this.lib;
		var k = _this.groupName;
		_this.group = k == null ? _this1.currentGroup : _this1.groups.h[k];
		var _this1 = _this.lib;
		var k = _this.groupName;
		var frame = 0;
		if(frame == null) {
			frame = 0;
		}
		var g = k == null ? _this1.currentGroup : _this1.groups.h[k];
		_this.frameData = g == null ? null : g.frames[frame];
		if(_this.frameData == null) {
			throw haxe_Exception.thrown("Unknown frame: " + _this.groupName + "(" + 0 + ")");
		}
		if(_this.rawTile == null) {
			_this.rawTile = _this.lib.pages[_this.frameData.page].clone();
		} else {
			_this.rawTile.setTexture(_this.lib.pages[_this.frameData.page].innerTex);
		}
		_this.lastPage = _this.frameData.page;
		_this.setFrame(0);
	} else {
		_this.setEmptyTexture();
	}
	this.spr.blendMode = h2d_BlendMode.Add;
	Game.ME.scroller.add(this.spr,Const.DP_BULLET);
	this.frict = 1;
	this.ox = x;
	this.oy = y;
};
$hxClasses["en.Bullet"] = en_Bullet;
en_Bullet.__name__ = "en.Bullet";
en_Bullet.__super__ = Entity;
en_Bullet.prototype = $extend(Entity.prototype,{
	onHit: function(e) {
	}
	,moveAng: function(a,s) {
		this.dx = Math.cos(a) * s;
		this.dy = Math.sin(a) * s;
	}
	,update: function() {
		Entity.prototype.update.call(this);
		var _g = 0;
		var _g1 = en_Mob.ALL;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(this.isColliding(e)) {
				this.onHit(e);
			}
		}
		var tmp;
		if(!(this.ftime >= this.maxTime)) {
			var ax = this.x;
			var ay = this.y;
			var bx = this.ox;
			var by = this.oy;
			tmp = (ax - bx) * (ax - bx) + (ay - by) * (ay - by) >= this.maxRange * this.maxRange;
		} else {
			tmp = true;
		}
		if(tmp) {
			var _this = Game.ME.level;
			var x = this.x;
			var y = this.y;
			var sign = null;
			if(sign == null) {
				sign = false;
			}
			var a = sign ? (0.2 + Math.random() * 0.39999999999999997) * (Std.random(2) * 2 - 1) : 0.2 + Math.random() * 0.39999999999999997;
			if(a == null) {
				a = 1.0;
			}
			var _this1 = Assets.lib;
			var rndFunc = null;
			if(!(Object.prototype.hasOwnProperty.call(_this1.groups.h,"bulletHole") && _this1.groups.h["bulletHole"].frames.length > 0)) {
				throw haxe_Exception.thrown("Unknown group " + "bulletHole");
			}
			var frame = (rndFunc == null ? Std.random : rndFunc)(_this1.groups.h["bulletHole"].frames.length);
			var px = 0.0;
			var py = 0.0;
			if(py == null) {
				py = 0.0;
			}
			if(px == null) {
				px = 0.0;
			}
			if(frame == null) {
				frame = 0;
			}
			var frame1 = frame;
			if(frame1 == null) {
				frame1 = 0;
			}
			var g = _this1.groups.h["bulletHole"];
			var fd = g == null ? null : g.frames[frame1];
			if(fd == null) {
				throw haxe_Exception.thrown("Unknown group " + "bulletHole" + "#" + frame + "!");
			}
			var t = _this1.pages[fd.page].clone();
			var frame1 = frame;
			var px1 = px;
			var py1 = py;
			if(py1 == null) {
				py1 = 0.0;
			}
			if(px1 == null) {
				px1 = 0.0;
			}
			if(frame1 == null) {
				frame1 = 0;
			}
			var frame = frame1;
			if(frame == null) {
				frame = 0;
			}
			var g = _this1.groups.h["bulletHole"];
			var fd = g == null ? null : g.frames[frame];
			if(fd == null) {
				throw haxe_Exception.thrown("Unknown group " + "bulletHole" + "#" + frame1 + "!");
			}
			t.setPosition(fd.x,fd.y);
			t.setSize(fd.wid,fd.hei);
			t.dx = -(fd.realWid * px1 + fd.realX | 0);
			t.dy = -(fd.realHei * py1 + fd.realY | 0);
			var t1 = t;
			var limit = 500;
			if(_this.dirtGroups[_this.curDirtGroup].count() >= limit) {
				_this.curDirtGroup++;
				if(_this.curDirtGroup >= _this.dirtGroups.length) {
					_this.curDirtGroup = 0;
				}
				if(_this.dirtGroups[_this.curDirtGroup].count() >= limit) {
					_this.dirtGroups[_this.curDirtGroup].clear();
				}
			}
			var tg = _this.dirtGroups[_this.curDirtGroup];
			tg.content.add(x - t1.width * 0.5 | 0,y - t1.height * 0.5 | 0,1,1,1,a,t1);
			tg.invalidate();
			Game.ME.fx.explosion(this.x,this.y,1);
			this.destroyed = true;
		}
	}
	,__class__: en_Bullet
});
var en_Human = function(x,y) {
	var _gthis = this;
	Entity.call(this,x,y);
	this.life = 1;
	this.collides = true;
	en_Human.ALL.push(this);
	this.originX = x;
	this.originY = y;
	var sign = null;
	if(sign == null) {
		sign = false;
	}
	this.spd = sign ? (0.06 + Math.random() * 0.020000000000000004) * (Std.random(2) * 2 - 1) : 0.06 + Math.random() * 0.020000000000000004;
	var sign = null;
	if(sign == null) {
		sign = false;
	}
	this.runSpd = this.spd * (sign ? (3 + Math.random()) * (Std.random(2) * 2 - 1) : 3 + Math.random());
	var sign = null;
	if(sign == null) {
		sign = false;
	}
	this.fearDist = sign ? (90 + Math.random() * 50) * (Std.random(2) * 2 - 1) : 90 + Math.random() * 50;
	var sign = true;
	if(sign == null) {
		sign = false;
	}
	this.tx = this.originX + (sign ? (20 + Math.random() * 50) * (Std.random(2) * 2 - 1) : 20 + Math.random() * 50);
	var sign = true;
	if(sign == null) {
		sign = false;
	}
	this.ty = this.originY + (sign ? (20 + Math.random() * 50) * (Std.random(2) * 2 - 1) : 20 + Math.random() * 50);
	var _this = this.spr;
	var l = null;
	if(l != null) {
		if(l.pages == null || l.pages.length == 0) {
			throw haxe_Exception.thrown("sprite sheet has no backing texture, please generate one");
		}
		if(_this.allocated && _this.lib != null) {
			HxOverrides.remove(_this.lib.children,_this);
		}
		_this.lib = l;
		if(_this.allocated) {
			_this.lib.children.push(_this);
		}
		if(_this.pivot.isUndefined) {
			var xRatio = _this.lib.defaultCenterX;
			var yRatio = _this.lib.defaultCenterY;
			if(yRatio == null) {
				yRatio = 0.5;
			}
			if(xRatio == null) {
				xRatio = 0.5;
			}
			var _this1 = _this.pivot;
			_this1.centerFactorX = xRatio;
			_this1.centerFactorY = yRatio;
			_this1.usingFactor = true;
			_this1.isUndefined = false;
		}
	}
	if("humanIdle" != _this.groupName) {
		_this.groupName = "humanIdle";
	}
	if(!_this.destroyed && _this.lib != null && _this.groupName != null) {
		var _this1 = _this.lib;
		var k = _this.groupName;
		_this.group = k == null ? _this1.currentGroup : _this1.groups.h[k];
		var _this1 = _this.lib;
		var k = _this.groupName;
		var frame = 0;
		if(frame == null) {
			frame = 0;
		}
		var g = k == null ? _this1.currentGroup : _this1.groups.h[k];
		_this.frameData = g == null ? null : g.frames[frame];
		if(_this.frameData == null) {
			throw haxe_Exception.thrown("Unknown frame: " + _this.groupName + "(" + 0 + ")");
		}
		if(_this.rawTile == null) {
			_this.rawTile = _this.lib.pages[_this.frameData.page].clone();
		} else {
			_this.rawTile.setTexture(_this.lib.pages[_this.frameData.page].innerTex);
		}
		_this.lastPage = _this.frameData.page;
		_this.setFrame(0);
	} else {
		_this.setEmptyTexture();
	}
	var _this = this.spr;
	if(_this._animManager == null) {
		_this._animManager = new dn_heaps_slib_AnimManager(_this);
		if(_this.onAnimManAlloc != null) {
			_this.onAnimManAlloc(_this._animManager);
		}
	}
	_this._animManager.registerStateAnim("humanRun",2,null,function() {
		var x = _gthis.dx;
		if(!((x < 0 ? -x : x) >= _gthis.runSpd * 0.9)) {
			var x = _gthis.dy;
			return (x < 0 ? -x : x) >= _gthis.runSpd * 0.9;
		} else {
			return true;
		}
	});
	var _this = this.spr;
	if(_this._animManager == null) {
		_this._animManager = new dn_heaps_slib_AnimManager(_this);
		if(_this.onAnimManAlloc != null) {
			_this.onAnimManAlloc(_this._animManager);
		}
	}
	_this._animManager.registerStateAnim("humanIdle",0);
	Game.ME.scroller.add(this.spr,Const.DP_HUMANS);
};
$hxClasses["en.Human"] = en_Human;
en_Human.__name__ = "en.Human";
en_Human.__super__ = Entity;
en_Human.prototype = $extend(Entity.prototype,{
	onDie: function() {
		Entity.prototype.onDie.call(this);
		var _this = Game.ME.level;
		var x = this.x;
		var y = this.y;
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		var a = sign ? (0.8 + Math.random() * 0.19999999999999996) * (Std.random(2) * 2 - 1) : 0.8 + Math.random() * 0.19999999999999996;
		if(a == null) {
			a = 1.0;
		}
		var _this1 = Assets.lib;
		var rndFunc = null;
		if(!(Object.prototype.hasOwnProperty.call(_this1.groups.h,"bloodSplash") && _this1.groups.h["bloodSplash"].frames.length > 0)) {
			throw haxe_Exception.thrown("Unknown group " + "bloodSplash");
		}
		var frame = (rndFunc == null ? Std.random : rndFunc)(_this1.groups.h["bloodSplash"].frames.length);
		var px = 0.0;
		var py = 0.0;
		if(py == null) {
			py = 0.0;
		}
		if(px == null) {
			px = 0.0;
		}
		if(frame == null) {
			frame = 0;
		}
		var frame1 = frame;
		if(frame1 == null) {
			frame1 = 0;
		}
		var g = _this1.groups.h["bloodSplash"];
		var fd = g == null ? null : g.frames[frame1];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "bloodSplash" + "#" + frame + "!");
		}
		var t = _this1.pages[fd.page].clone();
		var frame1 = frame;
		var px1 = px;
		var py1 = py;
		if(py1 == null) {
			py1 = 0.0;
		}
		if(px1 == null) {
			px1 = 0.0;
		}
		if(frame1 == null) {
			frame1 = 0;
		}
		var frame = frame1;
		if(frame == null) {
			frame = 0;
		}
		var g = _this1.groups.h["bloodSplash"];
		var fd = g == null ? null : g.frames[frame];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "bloodSplash" + "#" + frame1 + "!");
		}
		t.setPosition(fd.x,fd.y);
		t.setSize(fd.wid,fd.hei);
		t.dx = -(fd.realWid * px1 + fd.realX | 0);
		t.dy = -(fd.realHei * py1 + fd.realY | 0);
		var t1 = t;
		var limit = 500;
		if(_this.dirtGroups[_this.curDirtGroup].count() >= limit) {
			_this.curDirtGroup++;
			if(_this.curDirtGroup >= _this.dirtGroups.length) {
				_this.curDirtGroup = 0;
			}
			if(_this.dirtGroups[_this.curDirtGroup].count() >= limit) {
				_this.dirtGroups[_this.curDirtGroup].clear();
			}
		}
		var tg = _this.dirtGroups[_this.curDirtGroup];
		tg.content.add(x - t1.width * 0.5 | 0,y - t1.height * 0.5 | 0,1,1,1,a,t1);
		tg.invalidate();
		Game.ME.fx.blood(this.x,this.y);
	}
	,onDispose: function() {
		Entity.prototype.onDispose.call(this);
		HxOverrides.remove(en_Human.ALL,this);
	}
	,updateRender: function() {
		Entity.prototype.updateRender.call(this);
	}
	,update: function() {
		Entity.prototype.update.call(this);
		var _this = Game.ME;
		var x = this.x;
		var y = this.y;
		if(!(x >= -_this.scroller.x - 30 && x <= -_this.scroller.x + Const.LWID + 30 && y >= -_this.scroller.y - 30 && y <= -_this.scroller.y + Const.LHEI + 30)) {
			this.spr.set_visible(false);
			return;
		}
		this.spr.set_visible(true);
		var flee = null;
		var _g = 0;
		var _g1 = en_Quad.ALL;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			var ax = this.x;
			var ay = this.y;
			var bx = e.x;
			var by = e.y;
			if((ax - bx) * (ax - bx) + (ay - by) * (ay - by) < this.fearDist * this.fearDist) {
				flee = e;
				break;
			}
		}
		if(flee != null && !this.cd.fastCheck.h.hasOwnProperty(58720256)) {
			this.tx = this.x;
			this.ty = this.y;
		}
		if(!this.cd.fastCheck.h.hasOwnProperty(62914560)) {
			var ax = this.x;
			var ay = this.y;
			var bx = this.tx;
			var by = this.ty;
			if((ax - bx) * (ax - bx) + (ay - by) * (ay - by) <= 25) {
				if(flee != null) {
					var sign = true;
					if(sign == null) {
						sign = false;
					}
					var a = Math.atan2(this.y - flee.y,this.x - flee.x) + (sign ? Math.random() * 1.9 * (Std.random(2) * 2 - 1) : Math.random() * 1.9);
					var sign = null;
					if(sign == null) {
						sign = false;
					}
					var d = sign ? (15 + Math.random() * 10) * (Std.random(2) * 2 - 1) : 15 + Math.random() * 10;
					this.tx = this.x + Math.cos(a) * d;
					this.ty = this.y + Math.sin(a) * d;
					var _this = this.cd;
					var allowLower = true;
					var onComplete = null;
					if(allowLower == null) {
						allowLower = true;
					}
					var cur = _this._getCdObject(58720256);
					if(!(cur != null && 30 < cur.frames && !allowLower)) {
						_this.fastCheck.h[58720256] = true;
						if(cur != null) {
							cur.frames = 30;
							cur.initial = 30;
						} else {
							var _this1 = _this.cds;
							if(_this1.nalloc >= _this1.size) {
								throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
							}
							var e = _this1.pool[_this1.nalloc++];
							e.recycle();
							var cd = e;
							cd.k = 58720256;
							cd.frames = 30;
							cd.initial = 30;
						}
						if(onComplete != null) {
							var cd = _this._getCdObject(58720256);
							if(cd == null) {
								throw haxe_Exception.thrown("cannot bind onComplete(" + 58720256 + "): cooldown " + 58720256 + " isn't running");
							}
							cd.onCompleteOnce = onComplete;
						}
					}
				} else {
					var tries = 100;
					while(true) {
						var sign = true;
						if(sign == null) {
							sign = false;
						}
						this.tx = this.originX + (sign ? Math.random() * 70 * (Std.random(2) * 2 - 1) : Math.random() * 70);
						var sign1 = true;
						if(sign1 == null) {
							sign1 = false;
						}
						this.ty = this.originY + (sign1 ? Math.random() * 70 * (Std.random(2) * 2 - 1) : Math.random() * 70);
						if(!(!Game.ME.isPlayArea(this.tx,this.ty) && tries-- > 0)) {
							break;
						}
					}
					if(tries <= 0) {
						this.tx = this.originX;
						this.ty = this.originY;
					}
				}
				if(flee == null) {
					var _this = this.cd;
					var sign = null;
					if(sign == null) {
						sign = false;
					}
					var frames = sign ? (15 + Math.random() * 15) * (Std.random(2) * 2 - 1) : 15 + Math.random() * 15;
					var allowLower = true;
					var onComplete = null;
					if(allowLower == null) {
						allowLower = true;
					}
					var cur = _this._getCdObject(62914560);
					if(!(cur != null && frames < cur.frames && !allowLower)) {
						if(frames <= 0) {
							if(cur != null) {
								_this.fastCheck.remove(cur.k);
								var _this1 = _this.cds;
								var _g = 0;
								var _g1 = _this1.nalloc;
								while(_g < _g1) {
									var i = _g++;
									if(_this1.pool[i] == cur) {
										if(i >= 0 && i < _this1.nalloc) {
											if(_this1.nalloc > 1) {
												var tmp = _this1.pool[i];
												_this1.pool[i] = _this1.pool[_this1.nalloc - 1];
												_this1.pool[_this1.nalloc - 1] = tmp;
												_this1.nalloc--;
											} else {
												_this1.nalloc = 0;
											}
										}
										break;
									}
								}
							}
						} else {
							_this.fastCheck.h[62914560] = true;
							if(cur != null) {
								cur.frames = frames;
								cur.initial = frames;
							} else {
								var _this1 = _this.cds;
								if(_this1.nalloc >= _this1.size) {
									throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
								}
								var e = _this1.pool[_this1.nalloc++];
								e.recycle();
								var cd = e;
								cd.k = 62914560;
								cd.frames = frames;
								cd.initial = frames;
							}
						}
						if(onComplete != null) {
							if(frames <= 0) {
								onComplete();
							} else {
								var cd = _this._getCdObject(62914560);
								if(cd == null) {
									throw haxe_Exception.thrown("cannot bind onComplete(" + 62914560 + "): cooldown " + 62914560 + " isn't running");
								}
								cd.onCompleteOnce = onComplete;
							}
						}
					}
				}
			}
			var s = this.cd.fastCheck.h.hasOwnProperty(58720256) ? this.runSpd : this.spd;
			var ta = Math.atan2(this.ty - this.y,this.tx - this.x);
			this.dx += Math.cos(ta) * s;
			this.dy += Math.sin(ta) * s;
		}
	}
	,__class__: en_Human
});
var en_Leg = function(q) {
	Entity.call(this,0,0);
	en_Leg.ALL.push(this);
	this.quad = q;
	this.setPosition(this.quad.x,this.quad.y);
	var _this = this.spr;
	var l = null;
	var frame = this.quad.skin;
	if(frame == null) {
		frame = 0;
	}
	if(l != null) {
		if(l.pages == null || l.pages.length == 0) {
			throw haxe_Exception.thrown("sprite sheet has no backing texture, please generate one");
		}
		if(_this.allocated && _this.lib != null) {
			HxOverrides.remove(_this.lib.children,_this);
		}
		_this.lib = l;
		if(_this.allocated) {
			_this.lib.children.push(_this);
		}
		if(_this.pivot.isUndefined) {
			var xRatio = _this.lib.defaultCenterX;
			var yRatio = _this.lib.defaultCenterY;
			if(yRatio == null) {
				yRatio = 0.5;
			}
			if(xRatio == null) {
				xRatio = 0.5;
			}
			var _this1 = _this.pivot;
			_this1.centerFactorX = xRatio;
			_this1.centerFactorY = yRatio;
			_this1.usingFactor = true;
			_this1.isUndefined = false;
		}
	}
	if("foot" != _this.groupName) {
		_this.groupName = "foot";
	}
	if(!_this.destroyed && _this.lib != null && _this.groupName != null) {
		var _this1 = _this.lib;
		var k = _this.groupName;
		_this.group = k == null ? _this1.currentGroup : _this1.groups.h[k];
		var _this1 = _this.lib;
		var k = _this.groupName;
		var frame1 = frame;
		if(frame1 == null) {
			frame1 = 0;
		}
		var g = k == null ? _this1.currentGroup : _this1.groups.h[k];
		_this.frameData = g == null ? null : g.frames[frame1];
		if(_this.frameData == null) {
			throw haxe_Exception.thrown("Unknown frame: " + _this.groupName + "(" + frame + ")");
		}
		if(_this.rawTile == null) {
			_this.rawTile = _this.lib.pages[_this.frameData.page].clone();
		} else {
			_this.rawTile.setTexture(_this.lib.pages[_this.frameData.page].innerTex);
		}
		_this.lastPage = _this.frameData.page;
		_this.setFrame(frame);
	} else {
		_this.setEmptyTexture();
	}
	this.frict = 0.6;
	this.radius = 20;
	this.z = 0;
	var xr = 0.5;
	var yr = 0.5;
	var smooth = null;
	var p = null;
	if(yr == null) {
		yr = 0.;
	}
	if(xr == null) {
		xr = 0.;
	}
	var s = new dn_heaps_slib_HSprite(Assets.lib,"leg",0);
	if(p != null) {
		p.addChild(s);
	}
	var xRatio = xr;
	var yRatio = yr;
	if(yRatio == null) {
		yRatio = 0.5;
	}
	if(xRatio == null) {
		xRatio = 0.5;
	}
	var _this = s.pivot;
	_this.centerFactorX = xRatio;
	_this.centerFactorY = yRatio;
	_this.usingFactor = true;
	_this.isUndefined = false;
	if(smooth != null) {
		s.smooth = smooth;
	}
	this.arm = s;
	Game.ME.scroller.add(this.arm,Const.DP_ARMS);
	var xr = 0.5;
	var yr = 0.5;
	var smooth = null;
	var p = null;
	if(yr == null) {
		yr = 0.;
	}
	if(xr == null) {
		xr = 0.;
	}
	var s = new dn_heaps_slib_HSprite(Assets.lib,"joint",0);
	if(p != null) {
		p.addChild(s);
	}
	var xRatio = xr;
	var yRatio = yr;
	if(yRatio == null) {
		yRatio = 0.5;
	}
	if(xRatio == null) {
		xRatio = 0.5;
	}
	var _this = s.pivot;
	_this.centerFactorX = xRatio;
	_this.centerFactorY = yRatio;
	_this.usingFactor = true;
	_this.isUndefined = false;
	if(smooth != null) {
		s.smooth = smooth;
	}
	this.footBox = s;
	Game.ME.scroller.add(this.footBox,Const.DP_ARMS);
	var xr = 0.;
	var yr = 0.5;
	var smooth = null;
	var p = null;
	if(yr == null) {
		yr = 0.;
	}
	if(xr == null) {
		xr = 0.;
	}
	var s = new dn_heaps_slib_HSprite(Assets.lib,"legBox",0);
	if(p != null) {
		p.addChild(s);
	}
	var xRatio = xr;
	var yRatio = yr;
	if(yRatio == null) {
		yRatio = 0.5;
	}
	if(xRatio == null) {
		xRatio = 0.5;
	}
	var _this = s.pivot;
	_this.centerFactorX = xRatio;
	_this.centerFactorY = yRatio;
	_this.usingFactor = true;
	_this.isUndefined = false;
	if(smooth != null) {
		s.smooth = smooth;
	}
	this.bodyBox = s;
	Game.ME.scroller.add(this.bodyBox,Const.DP_ARMS);
	var xr = 0.5;
	var yr = 0.5;
	var smooth = null;
	var p = null;
	if(yr == null) {
		yr = 0.;
	}
	if(xr == null) {
		xr = 0.;
	}
	var s = new dn_heaps_slib_HSprite(Assets.lib,"legShadow",0);
	if(p != null) {
		p.addChild(s);
	}
	var xRatio = xr;
	var yRatio = yr;
	if(yRatio == null) {
		yRatio = 0.5;
	}
	if(xRatio == null) {
		xRatio = 0.5;
	}
	var _this = s.pivot;
	_this.centerFactorX = xRatio;
	_this.centerFactorY = yRatio;
	_this.usingFactor = true;
	_this.isUndefined = false;
	if(smooth != null) {
		s.smooth = smooth;
	}
	this.legShadow = s;
	Game.ME.scroller.add(this.legShadow,Const.DP_BG);
	this.legShadow.alpha = Const.SHADOW;
};
$hxClasses["en.Leg"] = en_Leg;
en_Leg.__name__ = "en.Leg";
en_Leg.__super__ = Entity;
en_Leg.prototype = $extend(Entity.prototype,{
	setPosition: function(x,y) {
		Entity.prototype.setPosition.call(this,x,y);
		this.tx = x;
		this.ty = y;
	}
	,setAngPos: function(a,d) {
		this.tx = this.quad.x + Math.cos(a) * d;
		this.ty = this.quad.y + Math.sin(a) * d;
	}
	,onDispose: function() {
		Entity.prototype.onDispose.call(this);
		this.quad = null;
		HxOverrides.remove(en_Leg.ALL,this);
		var _this = this.arm;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
		var _this = this.footBox;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
		var _this = this.bodyBox;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
	}
	,updateRender: function() {
		Entity.prototype.updateRender.call(this);
		if(this.arm != null) {
			var a = Math.atan2(this.y - this.quad.bodyY,this.x - this.quad.bodyX);
			var r = 10;
			var bx = this.quad.bodyX + Math.cos(a) * r;
			var by = this.quad.bodyY + Math.sin(a) * r;
			var _this = this.arm;
			_this.posChanged = true;
			_this.x = this.x + (bx - this.x) * 0.5;
			_this.posChanged = true;
			_this.y = this.y + (by - this.y) * 0.5;
			var _this = this.arm;
			var bx1 = this.x;
			var by1 = this.y;
			var v = Math.sqrt((bx - bx1) * (bx - bx1) + (by - by1) * (by - by1));
			var _this1 = this.arm;
			var v1;
			if(_this1.customTile != null) {
				var _this2 = _this1.pivot;
				if(!_this2.isUndefined && !_this2.usingFactor) {
					_this1.customTile.dx = -(_this1.pivot.coordX | 0);
					_this1.customTile.dy = -(_this1.pivot.coordY | 0);
				} else {
					var _this2 = _this1.pivot;
					if(!_this2.isUndefined && _this2.usingFactor) {
						_this1.customTile.dx = -(_this1.customTile.width * _this1.pivot.centerFactorX | 0);
						_this1.customTile.dy = -(_this1.customTile.height * _this1.pivot.centerFactorY | 0);
					}
				}
				v1 = _this1.customTile;
			} else if(!_this1.destroyed && _this1.lib != null && _this1.groupName != null) {
				var fd = _this1.frameData;
				_this1.rawTile.setPosition(fd.x,fd.y);
				_this1.rawTile.setSize(fd.wid,fd.hei);
				var _this2 = _this1.pivot;
				if(!_this2.isUndefined && !_this2.usingFactor) {
					_this1.rawTile.dx = -(_this1.pivot.coordX + fd.realX | 0);
					_this1.rawTile.dy = -(_this1.pivot.coordY + fd.realY | 0);
				} else {
					var _this2 = _this1.pivot;
					if(!_this2.isUndefined && _this2.usingFactor) {
						_this1.rawTile.dx = -(fd.realWid * _this1.pivot.centerFactorX + fd.realX | 0);
						_this1.rawTile.dy = -(fd.realHei * _this1.pivot.centerFactorY + fd.realY | 0);
					}
				}
				v1 = _this1.rawTile;
			} else {
				var _this2 = _this1.pivot;
				if(!_this2.isUndefined && !_this2.usingFactor) {
					_this1.rawTile.dx = -(_this1.pivot.coordX | 0);
					_this1.rawTile.dy = -(_this1.pivot.coordY | 0);
				} else {
					var _this2 = _this1.pivot;
					if(!_this2.isUndefined && _this2.usingFactor) {
						_this1.rawTile.dx = -(_this1.rawTile.width * _this1.pivot.centerFactorX | 0);
						_this1.rawTile.dy = -(_this1.rawTile.height * _this1.pivot.centerFactorY | 0);
					}
				}
				v1 = _this1.rawTile;
			}
			_this.posChanged = true;
			_this.scaleX = v / v1.width;
			var _this = this.arm;
			_this.posChanged = true;
			_this.rotation = a;
			var _this = this.footBox;
			var x = this.x - Math.cos(a) * 5;
			var y = this.y - Math.sin(a) * 5;
			_this.posChanged = true;
			_this.x = x;
			_this.posChanged = true;
			_this.y = y;
			var _this = this.footBox;
			_this.posChanged = true;
			_this.rotation = a + 3.141592653589793;
			var _this = this.footBox;
			var v = 1 + this.z * 0.7;
			_this.posChanged = true;
			_this.scaleX = v;
			_this.posChanged = true;
			_this.scaleY = v;
			var _this = this.bodyBox;
			_this.posChanged = true;
			_this.x = bx;
			_this.posChanged = true;
			_this.y = by;
			var _this = this.bodyBox;
			_this.posChanged = true;
			_this.rotation = a;
			var _this = this.bodyBox;
			var bx1 = this.x;
			var by1 = this.y;
			var v = Math.sqrt((bx - bx1) * (bx - bx1) + (by - by1) * (by - by1)) * 0.4;
			var _this1 = this.bodyBox;
			var v1;
			if(_this1.customTile != null) {
				var _this2 = _this1.pivot;
				if(!_this2.isUndefined && !_this2.usingFactor) {
					_this1.customTile.dx = -(_this1.pivot.coordX | 0);
					_this1.customTile.dy = -(_this1.pivot.coordY | 0);
				} else {
					var _this2 = _this1.pivot;
					if(!_this2.isUndefined && _this2.usingFactor) {
						_this1.customTile.dx = -(_this1.customTile.width * _this1.pivot.centerFactorX | 0);
						_this1.customTile.dy = -(_this1.customTile.height * _this1.pivot.centerFactorY | 0);
					}
				}
				v1 = _this1.customTile;
			} else if(!_this1.destroyed && _this1.lib != null && _this1.groupName != null) {
				var fd = _this1.frameData;
				_this1.rawTile.setPosition(fd.x,fd.y);
				_this1.rawTile.setSize(fd.wid,fd.hei);
				var _this2 = _this1.pivot;
				if(!_this2.isUndefined && !_this2.usingFactor) {
					_this1.rawTile.dx = -(_this1.pivot.coordX + fd.realX | 0);
					_this1.rawTile.dy = -(_this1.pivot.coordY + fd.realY | 0);
				} else {
					var _this2 = _this1.pivot;
					if(!_this2.isUndefined && _this2.usingFactor) {
						_this1.rawTile.dx = -(fd.realWid * _this1.pivot.centerFactorX + fd.realX | 0);
						_this1.rawTile.dy = -(fd.realHei * _this1.pivot.centerFactorY + fd.realY | 0);
					}
				}
				v1 = _this1.rawTile;
			} else {
				var _this2 = _this1.pivot;
				if(!_this2.isUndefined && !_this2.usingFactor) {
					_this1.rawTile.dx = -(_this1.pivot.coordX | 0);
					_this1.rawTile.dy = -(_this1.pivot.coordY | 0);
				} else {
					var _this2 = _this1.pivot;
					if(!_this2.isUndefined && _this2.usingFactor) {
						_this1.rawTile.dx = -(_this1.rawTile.width * _this1.pivot.centerFactorX | 0);
						_this1.rawTile.dy = -(_this1.rawTile.height * _this1.pivot.centerFactorY | 0);
					}
				}
				v1 = _this1.rawTile;
			}
			_this.posChanged = true;
			_this.scaleX = v / v1.width;
			var _this = this.spr;
			var v = 1 + this.z * 0.4;
			_this.posChanged = true;
			_this.scaleX = v;
			_this.posChanged = true;
			_this.scaleY = v;
			var fh = this.spr;
			fh.posChanged = true;
			fh.y += 5;
			var _this = this.legShadow;
			_this.posChanged = true;
			_this.x = this.arm.x;
			_this.posChanged = true;
			_this.y = this.arm.y + 5;
			var _this = this.legShadow;
			_this.posChanged = true;
			_this.rotation = this.arm.rotation;
			var _this = this.legShadow;
			_this.posChanged = true;
			_this.scaleX = this.arm.scaleX;
		}
	}
	,inBadPosition: function() {
		var ax = this.x;
		var ay = this.y;
		var bx = this.quad.x;
		var by = this.quad.y;
		var d = (ax - bx) * (ax - bx) + (ay - by) * (ay - by);
		if(!(d <= 1600)) {
			return d >= 2025;
		} else {
			return true;
		}
	}
	,update: function() {
		Entity.prototype.update.call(this);
		var tmp;
		var x = this.x - this.tx;
		if((x < 0 ? -x : x) <= 5) {
			var x = this.y - this.ty;
			tmp = (x < 0 ? -x : x) <= 5;
		} else {
			tmp = false;
		}
		if(tmp) {
			if(this.dx != 0 || this.dy != 0) {
				var xr = 0.5;
				var yr = 0.5;
				var smooth = null;
				var p = null;
				if(yr == null) {
					yr = 0.;
				}
				if(xr == null) {
					xr = 0.;
				}
				var s = new dn_heaps_slib_HSprite(Assets.lib,"smokeCircle",0);
				if(p != null) {
					p.addChild(s);
				}
				var xRatio = xr;
				var yRatio = yr;
				if(yRatio == null) {
					yRatio = 0.5;
				}
				if(xRatio == null) {
					xRatio = 0.5;
				}
				var _this = s.pivot;
				_this.centerFactorX = xRatio;
				_this.centerFactorY = yRatio;
				_this.usingFactor = true;
				_this.isUndefined = false;
				if(smooth != null) {
					s.smooth = smooth;
				}
				var s1 = s;
				Game.ME.scroller.add(s1,Const.DP_BG);
				s1.posChanged = true;
				s1.x = this.x;
				s1.posChanged = true;
				s1.y = this.y;
				var _this = Game.ME.level;
				var x = this.x;
				var y = this.y;
				var sign = null;
				if(sign == null) {
					sign = false;
				}
				var a = sign ? (0.05 + Math.random() * 0.15000000000000002) * (Std.random(2) * 2 - 1) : 0.05 + Math.random() * 0.15000000000000002;
				if(a == null) {
					a = 1.0;
				}
				var _this1 = Assets.lib;
				var rndFunc = null;
				if(!(Object.prototype.hasOwnProperty.call(_this1.groups.h,"hole") && _this1.groups.h["hole"].frames.length > 0)) {
					throw haxe_Exception.thrown("Unknown group " + "hole");
				}
				var frame = (rndFunc == null ? Std.random : rndFunc)(_this1.groups.h["hole"].frames.length);
				var px = 0.0;
				var py = 0.0;
				if(py == null) {
					py = 0.0;
				}
				if(px == null) {
					px = 0.0;
				}
				if(frame == null) {
					frame = 0;
				}
				var frame1 = frame;
				if(frame1 == null) {
					frame1 = 0;
				}
				var g = _this1.groups.h["hole"];
				var fd = g == null ? null : g.frames[frame1];
				if(fd == null) {
					throw haxe_Exception.thrown("Unknown group " + "hole" + "#" + frame + "!");
				}
				var t = _this1.pages[fd.page].clone();
				var frame1 = frame;
				var px1 = px;
				var py1 = py;
				if(py1 == null) {
					py1 = 0.0;
				}
				if(px1 == null) {
					px1 = 0.0;
				}
				if(frame1 == null) {
					frame1 = 0;
				}
				var frame = frame1;
				if(frame == null) {
					frame = 0;
				}
				var g = _this1.groups.h["hole"];
				var fd = g == null ? null : g.frames[frame];
				if(fd == null) {
					throw haxe_Exception.thrown("Unknown group " + "hole" + "#" + frame1 + "!");
				}
				t.setPosition(fd.x,fd.y);
				t.setSize(fd.wid,fd.hei);
				t.dx = -(fd.realWid * px1 + fd.realX | 0);
				t.dy = -(fd.realHei * py1 + fd.realY | 0);
				var t1 = t;
				var limit = 500;
				if(_this.dirtGroups[_this.curDirtGroup].count() >= limit) {
					_this.curDirtGroup++;
					if(_this.curDirtGroup >= _this.dirtGroups.length) {
						_this.curDirtGroup = 0;
					}
					if(_this.dirtGroups[_this.curDirtGroup].count() >= limit) {
						_this.dirtGroups[_this.curDirtGroup].clear();
					}
				}
				var tg = _this.dirtGroups[_this.curDirtGroup];
				tg.content.add(x - t1.width * 0.5 | 0,y - t1.height * 0.5 | 0,1,1,1,a,t1);
				tg.invalidate();
				this.createChildProcess(function(p) {
					s1.alpha *= 0.7;
					var v = s1.scaleX * 1.04;
					s1.posChanged = true;
					s1.scaleX = v;
					var v = s1.scaleY * 1.04;
					s1.posChanged = true;
					s1.scaleY = v;
				});
				var _g = 0;
				var _g1 = en_Mob.ALL;
				while(_g < _g1.length) {
					var e = _g1[_g];
					++_g;
					if(e.is(en_m_Zergling) && this.isColliding(e) && !Game.ME.ended) {
						e.hit(10);
					}
				}
				if(!Game.kidMode) {
					var _g = 0;
					var _g1 = en_Human.ALL;
					while(_g < _g1.length) {
						var e = _g1[_g];
						++_g;
						if(this.isColliding(e)) {
							e.hit(1);
						}
					}
				}
			}
			this.tx = this.x;
			this.ty = this.y;
			this.dx = this.dy = 0;
			this.z *= 0.7;
			Game.ME.scroller.add(this.spr,Const.DP_BG);
		} else {
			if(this.z >= 1) {
				Game.ME.scroller.add(this.spr,Const.DP_FEET);
			} else {
				Game.ME.scroller.add(this.spr,Const.DP_BG);
			}
			var spd = 8.2;
			var a = Math.atan2(this.ty - this.y,this.tx - this.x);
			this.dx += Math.cos(a) * spd * (this.utmod * this.getComputedTimeMultiplier());
			this.dy += Math.sin(a) * spd * (this.utmod * this.getComputedTimeMultiplier());
			var _this = this.quad.cd;
			var allowLower = true;
			var onComplete = null;
			if(allowLower == null) {
				allowLower = true;
			}
			var cur = _this._getCdObject(100663296);
			if(!(cur != null && 4 < cur.frames && !allowLower)) {
				_this.fastCheck.h[100663296] = true;
				if(cur != null) {
					cur.frames = 4;
					cur.initial = 4;
				} else {
					var _this1 = _this.cds;
					if(_this1.nalloc >= _this1.size) {
						throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
					}
					var e = _this1.pool[_this1.nalloc++];
					e.recycle();
					var cd = e;
					cd.k = 100663296;
					cd.frames = 4;
					cd.initial = 4;
				}
				if(onComplete != null) {
					var cd = _this._getCdObject(100663296);
					if(cd == null) {
						throw haxe_Exception.thrown("cannot bind onComplete(" + 100663296 + "): cooldown " + 100663296 + " isn't running");
					}
					cd.onCompleteOnce = onComplete;
				}
			}
			this.quad.z += 0.1 * (this.utmod * this.getComputedTimeMultiplier());
			if(this.z <= 1) {
				this.z += 0.2 * (this.utmod * this.getComputedTimeMultiplier());
			}
		}
		if((this.ftime | 0) % 15 == 0) {
			var _g = 0;
			var _g1 = Scenery.ALL;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				var tmp;
				if(!e.exploded) {
					var ax = e.x | 0;
					var ay = e.y | 0;
					var bx = this.x;
					var by = this.y;
					tmp = (ax - bx) * (ax - bx) + (ay - by) * (ay - by) <= 900;
				} else {
					tmp = false;
				}
				if(tmp) {
					e.explode();
				}
			}
		}
	}
	,__class__: en_Leg
});
var en_Mob = function(x,y) {
	this.bhei = 1;
	this.bwid = 25;
	Entity.call(this,x,y);
	this.prio = 0;
	this.life = 30;
	en_Mob.ALL.push(this);
	var _this = this.spr;
	var l = null;
	if(l != null) {
		if(l.pages == null || l.pages.length == 0) {
			throw haxe_Exception.thrown("sprite sheet has no backing texture, please generate one");
		}
		if(_this.allocated && _this.lib != null) {
			HxOverrides.remove(_this.lib.children,_this);
		}
		_this.lib = l;
		if(_this.allocated) {
			_this.lib.children.push(_this);
		}
		if(_this.pivot.isUndefined) {
			var xRatio = _this.lib.defaultCenterX;
			var yRatio = _this.lib.defaultCenterY;
			if(yRatio == null) {
				yRatio = 0.5;
			}
			if(xRatio == null) {
				xRatio = 0.5;
			}
			var _this1 = _this.pivot;
			_this1.centerFactorX = xRatio;
			_this1.centerFactorY = yRatio;
			_this1.usingFactor = true;
			_this1.isUndefined = false;
		}
	}
	if("enemy" != _this.groupName) {
		_this.groupName = "enemy";
	}
	if(!_this.destroyed && _this.lib != null && _this.groupName != null) {
		var _this1 = _this.lib;
		var k = _this.groupName;
		_this.group = k == null ? _this1.currentGroup : _this1.groups.h[k];
		var _this1 = _this.lib;
		var k = _this.groupName;
		var frame = 0;
		if(frame == null) {
			frame = 0;
		}
		var g = k == null ? _this1.currentGroup : _this1.groups.h[k];
		_this.frameData = g == null ? null : g.frames[frame];
		if(_this.frameData == null) {
			throw haxe_Exception.thrown("Unknown frame: " + _this.groupName + "(" + 0 + ")");
		}
		if(_this.rawTile == null) {
			_this.rawTile = _this.lib.pages[_this.frameData.page].clone();
		} else {
			_this.rawTile.setTexture(_this.lib.pages[_this.frameData.page].innerTex);
		}
		_this.lastPage = _this.frameData.page;
		_this.setFrame(0);
	} else {
		_this.setEmptyTexture();
	}
};
$hxClasses["en.Mob"] = en_Mob;
en_Mob.__name__ = "en.Mob";
en_Mob.__super__ = Entity;
en_Mob.prototype = $extend(Entity.prototype,{
	enableBar: function() {
		this.barBg = new h2d_Bitmap(h2d_Tile.fromColor(0,this.bwid + 2,this.bhei + 2));
		Game.ME.scroller.add(this.barBg,Const.DP_UI);
		this.bar = new h2d_Bitmap(h2d_Tile.fromColor(16777215,this.bwid,this.bhei));
		Game.ME.scroller.add(this.bar,Const.DP_UI);
	}
	,onDie: function() {
		Entity.prototype.onDie.call(this);
		Game.ME.fx.hit(this.x,this.y);
	}
	,onDispose: function() {
		Entity.prototype.onDispose.call(this);
		HxOverrides.remove(en_Mob.ALL,this);
		if(this.bar != null) {
			var _this = this.bar;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
			var _this = this.barBg;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
		}
	}
	,updateRender: function() {
		Entity.prototype.updateRender.call(this);
		if(this.bar != null) {
			var r = this.life / this.maxLife;
			var _this = this.bar;
			_this.posChanged = true;
			_this.scaleX = r;
			var _this = this.bar;
			_this.posChanged = true;
			_this.x = this.x - this.bwid * 0.5;
			_this.posChanged = true;
			_this.y = this.y - this.bhei - 19;
			var _this = this.barBg;
			_this.posChanged = true;
			_this.x = this.bar.x - 1;
			_this.posChanged = true;
			_this.y = this.bar.y - 1;
			var _this = this.bar.color;
			var c = (255. | 0) << 24 | (r >= 0.8 ? 14610432 : r >= 0.5 ? 16773632 : r >= 0.25 ? 16745984 : 16711680);
			_this.x = (c >> 16 & 255) / 255;
			_this.y = (c >> 8 & 255) / 255;
			_this.z = (c & 255) / 255;
			_this.w = (c >>> 24) / 255;
		}
	}
	,update: function() {
		Entity.prototype.update.call(this);
	}
	,__class__: en_Mob
});
var en_Quad = function(id,x,y,sk) {
	Entity.call(this,x,y);
	en_Quad.ALL.push(this);
	this.id = id;
	this.skin = 1 < sk ? 1 : sk;
	this.frict = 0.6;
	this.bodyAng = 0;
	this.tx = this.ty = null;
	this.moveA = true;
	this.z = 0;
	this.recoil = 0;
	this.missiles = 0;
	var xr = 0.5;
	var yr = 0.5;
	var smooth = null;
	var p = null;
	if(yr == null) {
		yr = 0.;
	}
	if(xr == null) {
		xr = 0.;
	}
	var s = new dn_heaps_slib_HSprite(Assets.lib,"bodyShadow",0);
	if(p != null) {
		p.addChild(s);
	}
	var xRatio = xr;
	var yRatio = yr;
	if(yRatio == null) {
		yRatio = 0.5;
	}
	if(xRatio == null) {
		xRatio = 0.5;
	}
	var _this = s.pivot;
	_this.centerFactorX = xRatio;
	_this.centerFactorY = yRatio;
	_this.usingFactor = true;
	_this.isUndefined = false;
	if(smooth != null) {
		s.smooth = smooth;
	}
	this.bodyShadow = s;
	Game.ME.scroller.add(this.bodyShadow,Const.DP_BODY);
	this.bodyShadow.alpha = Const.SHADOW;
	var _this = this.spr;
	var l = null;
	var frame = this.skin;
	if(frame == null) {
		frame = 0;
	}
	if(l != null) {
		if(l.pages == null || l.pages.length == 0) {
			throw haxe_Exception.thrown("sprite sheet has no backing texture, please generate one");
		}
		if(_this.allocated && _this.lib != null) {
			HxOverrides.remove(_this.lib.children,_this);
		}
		_this.lib = l;
		if(_this.allocated) {
			_this.lib.children.push(_this);
		}
		if(_this.pivot.isUndefined) {
			var xRatio = _this.lib.defaultCenterX;
			var yRatio = _this.lib.defaultCenterY;
			if(yRatio == null) {
				yRatio = 0.5;
			}
			if(xRatio == null) {
				xRatio = 0.5;
			}
			var _this1 = _this.pivot;
			_this1.centerFactorX = xRatio;
			_this1.centerFactorY = yRatio;
			_this1.usingFactor = true;
			_this1.isUndefined = false;
		}
	}
	if("body" != _this.groupName) {
		_this.groupName = "body";
	}
	if(!_this.destroyed && _this.lib != null && _this.groupName != null) {
		var _this1 = _this.lib;
		var k = _this.groupName;
		_this.group = k == null ? _this1.currentGroup : _this1.groups.h[k];
		var _this1 = _this.lib;
		var k = _this.groupName;
		var frame1 = frame;
		if(frame1 == null) {
			frame1 = 0;
		}
		var g = k == null ? _this1.currentGroup : _this1.groups.h[k];
		_this.frameData = g == null ? null : g.frames[frame1];
		if(_this.frameData == null) {
			throw haxe_Exception.thrown("Unknown frame: " + _this.groupName + "(" + frame + ")");
		}
		if(_this.rawTile == null) {
			_this.rawTile = _this.lib.pages[_this.frameData.page].clone();
		} else {
			_this.rawTile.setTexture(_this.lib.pages[_this.frameData.page].innerTex);
		}
		_this.lastPage = _this.frameData.page;
		_this.setFrame(frame);
	} else {
		_this.setEmptyTexture();
	}
	Game.ME.scroller.add(this.spr,Const.DP_BODY);
	var frame = this.skin;
	var xr = 0.5;
	var yr = 0.5;
	var smooth = null;
	var p = null;
	if(yr == null) {
		yr = 0.;
	}
	if(xr == null) {
		xr = 0.;
	}
	if(frame == null) {
		frame = 0;
	}
	var s = new dn_heaps_slib_HSprite(Assets.lib,"head",frame);
	if(p != null) {
		p.addChild(s);
	}
	var xRatio = xr;
	var yRatio = yr;
	if(yRatio == null) {
		yRatio = 0.5;
	}
	if(xRatio == null) {
		xRatio = 0.5;
	}
	var _this = s.pivot;
	_this.centerFactorX = xRatio;
	_this.centerFactorY = yRatio;
	_this.usingFactor = true;
	_this.isUndefined = false;
	if(smooth != null) {
		s.smooth = smooth;
	}
	this.head = s;
	Game.ME.scroller.add(this.head,Const.DP_BODY);
	this.legsA = [new en_Leg(this),new en_Leg(this)];
	this.legsB = [new en_Leg(this),new en_Leg(this)];
};
$hxClasses["en.Quad"] = en_Quad;
en_Quad.__name__ = "en.Quad";
en_Quad.__super__ = Entity;
en_Quad.prototype = $extend(Entity.prototype,{
	setPosition: function(x,y) {
		Entity.prototype.setPosition.call(this,x,y);
		this.bodyX = x;
		this.bodyY = y;
	}
	,onDispose: function() {
		Entity.prototype.onDispose.call(this);
		HxOverrides.remove(en_Quad.ALL,this);
		var _g = 0;
		var _g1 = this.legsA;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			e.destroyed = true;
		}
		var _g = 0;
		var _g1 = this.legsB;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			e.destroyed = true;
		}
		var _this = this.bodyShadow;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
		var _this = this.head;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
		this.target = null;
	}
	,updateRender: function() {
		Entity.prototype.updateRender.call(this);
		var _this = this.spr;
		_this.posChanged = true;
		_this.x = this.bodyX;
		var _this = this.spr;
		_this.posChanged = true;
		_this.y = this.bodyY - 5;
		var _this = this.spr;
		_this.posChanged = true;
		_this.rotation = this.bodyAng;
		var _this = this.spr;
		var v = 1 + this.z * 0.1;
		_this.posChanged = true;
		_this.scaleX = v;
		_this.posChanged = true;
		_this.scaleY = v;
		if(this.head != null) {
			var _this = this.head;
			_this.posChanged = true;
			_this.x = this.spr.x;
			var _this = this.head;
			_this.posChanged = true;
			_this.y = this.spr.y - 3;
			var _this = this.head;
			var v = 1 + this.z * 0.25;
			_this.posChanged = true;
			_this.scaleX = v;
			_this.posChanged = true;
			_this.scaleY = v;
			if(this.recoil == 1) {
				var _this = this.head;
				var l = null;
				var frame = this.skin;
				if(frame == null) {
					frame = 0;
				}
				if(l != null) {
					if(l.pages == null || l.pages.length == 0) {
						throw haxe_Exception.thrown("sprite sheet has no backing texture, please generate one");
					}
					if(_this.allocated && _this.lib != null) {
						HxOverrides.remove(_this.lib.children,_this);
					}
					_this.lib = l;
					if(_this.allocated) {
						_this.lib.children.push(_this);
					}
					if(_this.pivot.isUndefined) {
						var xRatio = _this.lib.defaultCenterX;
						var yRatio = _this.lib.defaultCenterY;
						if(yRatio == null) {
							yRatio = 0.5;
						}
						if(xRatio == null) {
							xRatio = 0.5;
						}
						var _this1 = _this.pivot;
						_this1.centerFactorX = xRatio;
						_this1.centerFactorY = yRatio;
						_this1.usingFactor = true;
						_this1.isUndefined = false;
					}
				}
				if("headGlow" != _this.groupName) {
					_this.groupName = "headGlow";
				}
				if(!_this.destroyed && _this.lib != null && _this.groupName != null) {
					var _this1 = _this.lib;
					var k = _this.groupName;
					_this.group = k == null ? _this1.currentGroup : _this1.groups.h[k];
					var _this1 = _this.lib;
					var k = _this.groupName;
					var frame1 = frame;
					if(frame1 == null) {
						frame1 = 0;
					}
					var g = k == null ? _this1.currentGroup : _this1.groups.h[k];
					_this.frameData = g == null ? null : g.frames[frame1];
					if(_this.frameData == null) {
						throw haxe_Exception.thrown("Unknown frame: " + _this.groupName + "(" + frame + ")");
					}
					if(_this.rawTile == null) {
						_this.rawTile = _this.lib.pages[_this.frameData.page].clone();
					} else {
						_this.rawTile.setTexture(_this.lib.pages[_this.frameData.page].innerTex);
					}
					_this.lastPage = _this.frameData.page;
					_this.setFrame(frame);
				} else {
					_this.setEmptyTexture();
				}
			} else {
				var _this = this.head;
				var l = null;
				var frame = this.skin;
				if(frame == null) {
					frame = 0;
				}
				if(l != null) {
					if(l.pages == null || l.pages.length == 0) {
						throw haxe_Exception.thrown("sprite sheet has no backing texture, please generate one");
					}
					if(_this.allocated && _this.lib != null) {
						HxOverrides.remove(_this.lib.children,_this);
					}
					_this.lib = l;
					if(_this.allocated) {
						_this.lib.children.push(_this);
					}
					if(_this.pivot.isUndefined) {
						var xRatio = _this.lib.defaultCenterX;
						var yRatio = _this.lib.defaultCenterY;
						if(yRatio == null) {
							yRatio = 0.5;
						}
						if(xRatio == null) {
							xRatio = 0.5;
						}
						var _this1 = _this.pivot;
						_this1.centerFactorX = xRatio;
						_this1.centerFactorY = yRatio;
						_this1.usingFactor = true;
						_this1.isUndefined = false;
					}
				}
				if("head" != _this.groupName) {
					_this.groupName = "head";
				}
				if(!_this.destroyed && _this.lib != null && _this.groupName != null) {
					var _this1 = _this.lib;
					var k = _this.groupName;
					_this.group = k == null ? _this1.currentGroup : _this1.groups.h[k];
					var _this1 = _this.lib;
					var k = _this.groupName;
					var frame1 = frame;
					if(frame1 == null) {
						frame1 = 0;
					}
					var g = k == null ? _this1.currentGroup : _this1.groups.h[k];
					_this.frameData = g == null ? null : g.frames[frame1];
					if(_this.frameData == null) {
						throw haxe_Exception.thrown("Unknown frame: " + _this.groupName + "(" + frame + ")");
					}
					if(_this.rawTile == null) {
						_this.rawTile = _this.lib.pages[_this.frameData.page].clone();
					} else {
						_this.rawTile.setTexture(_this.lib.pages[_this.frameData.page].innerTex);
					}
					_this.lastPage = _this.frameData.page;
					_this.setFrame(frame);
				} else {
					_this.setEmptyTexture();
				}
			}
			if(this.target == null) {
				var fh = this.head;
				var fh1 = fh.rotation;
				var a = this.spr.rotation;
				var b = this.head.rotation;
				var a1 = a;
				while(a1 < -3.1415926535897931) a1 += 6.283185307179586;
				while(a1 > 3.141592653589793) a1 -= 6.283185307179586;
				a = a1;
				var a1 = b;
				while(a1 < -3.1415926535897931) a1 += 6.283185307179586;
				while(a1 > 3.141592653589793) a1 -= 6.283185307179586;
				b = a1;
				var a1 = a - b;
				while(a1 < -3.1415926535897931) a1 += 6.283185307179586;
				while(a1 > 3.141592653589793) a1 -= 6.283185307179586;
				fh.posChanged = true;
				fh.rotation = fh1 + a1 * 0.1;
			}
			var fh = this.head;
			var v = fh.x - Math.cos(this.head.rotation) * this.recoil * 4;
			fh.posChanged = true;
			fh.x = v;
			var fh = this.head;
			var v = fh.y - Math.sin(this.head.rotation) * this.recoil * 4;
			fh.posChanged = true;
			fh.y = v;
			var fh = this.spr;
			var v = fh.x - Math.cos(this.head.rotation) * this.recoil * 2;
			fh.posChanged = true;
			fh.x = v;
			var fh = this.spr;
			var v = fh.y - Math.sin(this.head.rotation) * this.recoil * 2;
			fh.posChanged = true;
			fh.y = v;
			this.recoil *= 0.7;
			var _this = this.bodyShadow;
			_this.posChanged = true;
			_this.x = this.spr.x;
			_this.posChanged = true;
			_this.y = this.spr.y + 10;
			var _this = this.bodyShadow;
			_this.posChanged = true;
			_this.rotation = this.spr.rotation;
		}
	}
	,getAttackTarget: function() {
		var _gthis = this;
		if(Game.ME.ended) {
			return null;
		}
		var target = null;
		var minDist = 2500;
		var maxDist = Const.SHOOT_RANGE * Const.SHOOT_RANGE;
		var all = [];
		var _g = 0;
		var _g1 = en_Mob.ALL;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			var ax = this.x;
			var ay = this.y;
			var bx = e.x;
			var by = e.y;
			var d = (ax - bx) * (ax - bx) + (ay - by) * (ay - by);
			if(!e.destroyed && d >= minDist && d <= maxDist) {
				switch(this.id) {
				case 0:
					all.push(e);
					break;
				case 1:
					if(Game.kidMode || !((e) instanceof en_m_Zergling)) {
						all.push(e);
					}
					break;
				}
			}
		}
		if(all.length == 0) {
			return null;
		}
		all.sort(function(a,b) {
			if(a.prio == b.prio) {
				var ax = _gthis.x;
				var ay = _gthis.y;
				var bx = a.x;
				var by = a.y;
				var ax1 = _gthis.x;
				var ay1 = _gthis.y;
				var bx1 = b.x;
				var by1 = b.y;
				return Reflect.compare((ax - bx) * (ax - bx) + (ay - by) * (ay - by),(ax1 - bx1) * (ax1 - bx1) + (ay1 - by1) * (ay1 - by1));
			} else {
				return (_gthis.id == 0 ? -1 : 1) * Reflect.compare(a.prio,b.prio);
			}
		});
		return all[0];
	}
	,update: function() {
		Entity.prototype.update.call(this);
		var spd = 1.1;
		if(this == Game.ME.current) {
			var pad = 1;
			if(hxd_Key.isDown(37) && (this.x / Const.GRID | 0) >= pad) {
				this.dx -= spd * (this.utmod * this.getComputedTimeMultiplier());
			}
			if(hxd_Key.isDown(39) && (this.x / Const.GRID | 0) < Game.ME.level.wid - pad) {
				this.dx += spd * (this.utmod * this.getComputedTimeMultiplier());
			}
			if(hxd_Key.isDown(38) && this.y >= pad) {
				this.dy -= spd * (this.utmod * this.getComputedTimeMultiplier());
			}
			if(hxd_Key.isDown(40) && (this.y / Const.GRID | 0) < Game.ME.level.hei - pad) {
				this.dy += spd * (this.utmod * this.getComputedTimeMultiplier());
			}
			if(hxd_Key.isPressed(32)) {
				Game.ME.switchCurrent();
			}
		}
		if(!(this.tx == null || this.ty == null)) {
			var a = Math.atan2(this.ty - this.y,this.tx - this.x);
			this.dx += Math.cos(a) * spd * (this.utmod * this.getComputedTimeMultiplier());
			this.dy += Math.sin(a) * spd * (this.utmod * this.getComputedTimeMultiplier());
			var ax = this.x;
			var ay = this.y;
			var bx = this.tx;
			var by = this.ty;
			if((ax - bx) * (ax - bx) + (ay - by) * (ay - by) <= 100) {
				this.tx = this.ty = null;
				var _this = this.cd;
				var sign = null;
				if(sign == null) {
					sign = false;
				}
				var frames = sign ? (60 + Math.random() * 30) * (Std.random(2) * 2 - 1) : 60 + Math.random() * 30;
				var allowLower = true;
				var onComplete = null;
				if(allowLower == null) {
					allowLower = true;
				}
				var cur = _this._getCdObject(62914560);
				if(!(cur != null && frames < cur.frames && !allowLower)) {
					if(frames <= 0) {
						if(cur != null) {
							_this.fastCheck.remove(cur.k);
							var _this1 = _this.cds;
							var _g = 0;
							var _g1 = _this1.nalloc;
							while(_g < _g1) {
								var i = _g++;
								if(_this1.pool[i] == cur) {
									if(i >= 0 && i < _this1.nalloc) {
										if(_this1.nalloc > 1) {
											var tmp = _this1.pool[i];
											_this1.pool[i] = _this1.pool[_this1.nalloc - 1];
											_this1.pool[_this1.nalloc - 1] = tmp;
											_this1.nalloc--;
										} else {
											_this1.nalloc = 0;
										}
									}
									break;
								}
							}
						}
					} else {
						_this.fastCheck.h[62914560] = true;
						if(cur != null) {
							cur.frames = frames;
							cur.initial = frames;
						} else {
							var _this1 = _this.cds;
							if(_this1.nalloc >= _this1.size) {
								throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
							}
							var e = _this1.pool[_this1.nalloc++];
							e.recycle();
							var cd = e;
							cd.k = 62914560;
							cd.frames = frames;
							cd.initial = frames;
						}
					}
					if(onComplete != null) {
						if(frames <= 0) {
							onComplete();
						} else {
							var cd = _this._getCdObject(62914560);
							if(cd == null) {
								throw haxe_Exception.thrown("cannot bind onComplete(" + 62914560 + "): cooldown " + 62914560 + " isn't running");
							}
							cd.onCompleteOnce = onComplete;
						}
					}
				}
			}
		}
		var _g = 0;
		var _g1 = en_Quad.ALL;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(e != this && !e.destroyed) {
				var a = Math.atan2(e.y - this.y,e.x - this.x);
				var ax = this.x;
				var ay = this.y;
				var bx = e.x;
				var by = e.y;
				var d = Math.sqrt((ax - bx) * (ax - bx) + (ay - by) * (ay - by));
				if(d <= 60) {
					var r = 0.3;
					this.dx += -Math.cos(a) * r * (this.utmod * this.getComputedTimeMultiplier());
					this.dy += -Math.sin(a) * r * (this.utmod * this.getComputedTimeMultiplier());
					e.dx += Math.cos(a) * r * (this.utmod * this.getComputedTimeMultiplier());
					e.dy += Math.sin(a) * r * (this.utmod * this.getComputedTimeMultiplier());
				}
			}
		}
		var m = 40;
		if(this.x < m) {
			this.dx += spd * 1.5 * (this.utmod * this.getComputedTimeMultiplier());
		}
		this.target = this.getAttackTarget();
		if(this.target != null) {
			var a = Math.atan2(this.target.y - this.head.y,this.target.x - this.head.x);
			var a1 = a;
			var b = this.head.rotation;
			var a2 = a1;
			while(a2 < -3.1415926535897931) a2 += 6.283185307179586;
			while(a2 > 3.141592653589793) a2 -= 6.283185307179586;
			a1 = a2;
			var a2 = b;
			while(a2 < -3.1415926535897931) a2 += 6.283185307179586;
			while(a2 > 3.141592653589793) a2 -= 6.283185307179586;
			b = a2;
			var a2 = a1 - b;
			while(a2 < -3.1415926535897931) a2 += 6.283185307179586;
			while(a2 > 3.141592653589793) a2 -= 6.283185307179586;
			var d = a2;
			var fh = this.head;
			fh.posChanged = true;
			fh.rotation += this.id == 0 ? d * 0.30 : d * 0.08;
			if((d < 0 ? -d : d) <= 0.15) {
				var _this = this.head;
				_this.posChanged = true;
				_this.rotation = a;
				switch(this.id) {
				case 0:
					var _this = this.cd;
					var sign = null;
					if(sign == null) {
						sign = false;
					}
					var frames = sign ? (2 + Math.random() * 3) * (Std.random(2) * 2 - 1) : 2 + Math.random() * 3;
					var tmp;
					if(_this.fastCheck.h.hasOwnProperty(109051904)) {
						tmp = true;
					} else {
						var onComplete = null;
						var cur = _this._getCdObject(109051904);
						if(!(cur != null && frames < cur.frames && false)) {
							if(frames <= 0) {
								if(cur != null) {
									_this.fastCheck.remove(cur.k);
									var _this1 = _this.cds;
									var _g = 0;
									var _g1 = _this1.nalloc;
									while(_g < _g1) {
										var i = _g++;
										if(_this1.pool[i] == cur) {
											if(i >= 0 && i < _this1.nalloc) {
												if(_this1.nalloc > 1) {
													var tmp1 = _this1.pool[i];
													_this1.pool[i] = _this1.pool[_this1.nalloc - 1];
													_this1.pool[_this1.nalloc - 1] = tmp1;
													_this1.nalloc--;
												} else {
													_this1.nalloc = 0;
												}
											}
											break;
										}
									}
								}
							} else {
								_this.fastCheck.h[109051904] = true;
								if(cur != null) {
									cur.frames = frames;
									cur.initial = frames;
								} else {
									var _this1 = _this.cds;
									if(_this1.nalloc >= _this1.size) {
										throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
									}
									var e = _this1.pool[_this1.nalloc++];
									e.recycle();
									var cd = e;
									cd.k = 109051904;
									cd.frames = frames;
									cd.initial = frames;
								}
							}
							if(onComplete != null) {
								if(frames <= 0) {
									onComplete();
								} else {
									var cd = _this._getCdObject(109051904);
									if(cd == null) {
										throw haxe_Exception.thrown("cannot bind onComplete(" + 109051904 + "): cooldown " + 109051904 + " isn't running");
									}
									cd.onCompleteOnce = onComplete;
								}
							}
						}
						tmp = false;
					}
					if(!tmp && !this.target.cd.fastCheck.h.hasOwnProperty(96468992)) {
						var _this = this.cd;
						var frames = 0.1 * this.cd.baseFps;
						var tmp;
						if(_this.fastCheck.h.hasOwnProperty(113246208)) {
							tmp = true;
						} else {
							var onComplete = null;
							var cur = _this._getCdObject(113246208);
							if(!(cur != null && frames < cur.frames && false)) {
								if(frames <= 0) {
									if(cur != null) {
										_this.fastCheck.remove(cur.k);
										var _this1 = _this.cds;
										var _g = 0;
										var _g1 = _this1.nalloc;
										while(_g < _g1) {
											var i = _g++;
											if(_this1.pool[i] == cur) {
												if(i >= 0 && i < _this1.nalloc) {
													if(_this1.nalloc > 1) {
														var tmp1 = _this1.pool[i];
														_this1.pool[i] = _this1.pool[_this1.nalloc - 1];
														_this1.pool[_this1.nalloc - 1] = tmp1;
														_this1.nalloc--;
													} else {
														_this1.nalloc = 0;
													}
												}
												break;
											}
										}
									}
								} else {
									_this.fastCheck.h[113246208] = true;
									if(cur != null) {
										cur.frames = frames;
										cur.initial = frames;
									} else {
										var _this1 = _this.cds;
										if(_this1.nalloc >= _this1.size) {
											throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
										}
										var e = _this1.pool[_this1.nalloc++];
										e.recycle();
										var cd = e;
										cd.k = 113246208;
										cd.frames = frames;
										cd.initial = frames;
									}
								}
								if(onComplete != null) {
									if(frames <= 0) {
										onComplete();
									} else {
										var cd = _this._getCdObject(113246208);
										if(cd == null) {
											throw haxe_Exception.thrown("cannot bind onComplete(" + 113246208 + "): cooldown " + 113246208 + " isn't running");
										}
										cd.onCompleteOnce = onComplete;
									}
								}
							}
							tmp = false;
						}
						if(!tmp) {
							var s = Assets.SBANK.shoot01();
							var x = this.x;
							var y = this.y;
							var vol = 0.2;
							if(vol == null) {
								vol = 1.0;
							}
							s.play(null,vol);
						}
						var e = this.head.x + Math.cos(a) * 20;
						var sign = true;
						if(sign == null) {
							sign = false;
						}
						var e1 = sign ? Math.random() * 5 * (Std.random(2) * 2 - 1) : Math.random() * 5;
						var sign = true;
						if(sign == null) {
							sign = false;
						}
						var e2 = new en_b_MachineGun(e + e1,this.head.y + Math.sin(a) * 20 + (sign ? Math.random() * 5 * (Std.random(2) * 2 - 1) : Math.random() * 5),a,this.target);
						Game.ME.fx.shoot(e2.x,e2.y,a);
						this.recoil = 1;
					}
					break;
				case 1:
					var _this = this.cd;
					var sign = null;
					if(sign == null) {
						sign = false;
					}
					var frames = sign ? (1 + Std.random(2)) * (Std.random(2) * 2 - 1) : 1 + Std.random(2);
					var tmp;
					if(_this.fastCheck.h.hasOwnProperty(109051904)) {
						tmp = true;
					} else {
						var onComplete = null;
						var cur = _this._getCdObject(109051904);
						if(!(cur != null && frames < cur.frames && false)) {
							if(frames <= 0) {
								if(cur != null) {
									_this.fastCheck.remove(cur.k);
									var _this1 = _this.cds;
									var _g = 0;
									var _g1 = _this1.nalloc;
									while(_g < _g1) {
										var i = _g++;
										if(_this1.pool[i] == cur) {
											if(i >= 0 && i < _this1.nalloc) {
												if(_this1.nalloc > 1) {
													var tmp1 = _this1.pool[i];
													_this1.pool[i] = _this1.pool[_this1.nalloc - 1];
													_this1.pool[_this1.nalloc - 1] = tmp1;
													_this1.nalloc--;
												} else {
													_this1.nalloc = 0;
												}
											}
											break;
										}
									}
								}
							} else {
								_this.fastCheck.h[109051904] = true;
								if(cur != null) {
									cur.frames = frames;
									cur.initial = frames;
								} else {
									var _this1 = _this.cds;
									if(_this1.nalloc >= _this1.size) {
										throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
									}
									var e = _this1.pool[_this1.nalloc++];
									e.recycle();
									var cd = e;
									cd.k = 109051904;
									cd.frames = frames;
									cd.initial = frames;
								}
							}
							if(onComplete != null) {
								if(frames <= 0) {
									onComplete();
								} else {
									var cd = _this._getCdObject(109051904);
									if(cd == null) {
										throw haxe_Exception.thrown("cannot bind onComplete(" + 109051904 + "): cooldown " + 109051904 + " isn't running");
									}
									cd.onCompleteOnce = onComplete;
								}
							}
						}
						tmp = false;
					}
					if(!tmp && this.missiles > 0) {
						var _this = this.cd;
						var frames = 0.1 * this.cd.baseFps;
						var tmp;
						if(_this.fastCheck.h.hasOwnProperty(117440512)) {
							tmp = true;
						} else {
							var onComplete = null;
							var cur = _this._getCdObject(117440512);
							if(!(cur != null && frames < cur.frames && false)) {
								if(frames <= 0) {
									if(cur != null) {
										_this.fastCheck.remove(cur.k);
										var _this1 = _this.cds;
										var _g = 0;
										var _g1 = _this1.nalloc;
										while(_g < _g1) {
											var i = _g++;
											if(_this1.pool[i] == cur) {
												if(i >= 0 && i < _this1.nalloc) {
													if(_this1.nalloc > 1) {
														var tmp1 = _this1.pool[i];
														_this1.pool[i] = _this1.pool[_this1.nalloc - 1];
														_this1.pool[_this1.nalloc - 1] = tmp1;
														_this1.nalloc--;
													} else {
														_this1.nalloc = 0;
													}
												}
												break;
											}
										}
									}
								} else {
									_this.fastCheck.h[117440512] = true;
									if(cur != null) {
										cur.frames = frames;
										cur.initial = frames;
									} else {
										var _this1 = _this.cds;
										if(_this1.nalloc >= _this1.size) {
											throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
										}
										var e = _this1.pool[_this1.nalloc++];
										e.recycle();
										var cd = e;
										cd.k = 117440512;
										cd.frames = frames;
										cd.initial = frames;
									}
								}
								if(onComplete != null) {
									if(frames <= 0) {
										onComplete();
									} else {
										var cd = _this._getCdObject(117440512);
										if(cd == null) {
											throw haxe_Exception.thrown("cannot bind onComplete(" + 117440512 + "): cooldown " + 117440512 + " isn't running");
										}
										cd.onCompleteOnce = onComplete;
									}
								}
							}
							tmp = false;
						}
						if(!tmp) {
							var arr = [Assets.SBANK.missile01,Assets.SBANK.missile02];
							var s = arr[Std.random(arr.length)](1.0);
							var x = this.x;
							var y = this.y;
							var vol = 0.2;
							if(vol == null) {
								vol = 1.0;
							}
							s.play(null,vol);
						}
						this.missiles--;
						var _this = this.cd;
						var frames = this.secToFrames(1);
						var allowLower = true;
						var onComplete = null;
						if(allowLower == null) {
							allowLower = true;
						}
						var cur = _this._getCdObject(121634816);
						if(!(cur != null && frames < cur.frames && !allowLower)) {
							if(frames <= 0) {
								if(cur != null) {
									_this.fastCheck.remove(cur.k);
									var _this1 = _this.cds;
									var _g = 0;
									var _g1 = _this1.nalloc;
									while(_g < _g1) {
										var i = _g++;
										if(_this1.pool[i] == cur) {
											if(i >= 0 && i < _this1.nalloc) {
												if(_this1.nalloc > 1) {
													var tmp = _this1.pool[i];
													_this1.pool[i] = _this1.pool[_this1.nalloc - 1];
													_this1.pool[_this1.nalloc - 1] = tmp;
													_this1.nalloc--;
												} else {
													_this1.nalloc = 0;
												}
											}
											break;
										}
									}
								}
							} else {
								_this.fastCheck.h[121634816] = true;
								if(cur != null) {
									cur.frames = frames;
									cur.initial = frames;
								} else {
									var _this1 = _this.cds;
									if(_this1.nalloc >= _this1.size) {
										throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
									}
									var e = _this1.pool[_this1.nalloc++];
									e.recycle();
									var cd = e;
									cd.k = 121634816;
									cd.frames = frames;
									cd.initial = frames;
								}
							}
							if(onComplete != null) {
								if(frames <= 0) {
									onComplete();
								} else {
									var cd = _this._getCdObject(121634816);
									if(cd == null) {
										throw haxe_Exception.thrown("cannot bind onComplete(" + 121634816 + "): cooldown " + 121634816 + " isn't running");
									}
									cd.onCompleteOnce = onComplete;
								}
							}
						}
						var ma = a + Math.PI * 0.5 * (Std.random(2) * 2 - 1);
						var e = new en_b_Missile(this.head.x + Math.cos(a) * 10 + Math.cos(ma) * 15,this.head.y + Math.sin(a) * 10 + Math.sin(ma) * 15,this,this.target);
						Game.ME.fx.shoot(e.x,e.y,a);
						this.recoil = 1;
					}
					break;
				}
			}
		}
		if(this.missiles <= 0 && !this.cd.fastCheck.h.hasOwnProperty(121634816)) {
			this.missiles = 16;
		}
		var a = Math.atan2(this.dy,this.dx);
		var offX = Math.cos(a) * 10;
		var offY = Math.sin(a) * 10;
		var x = this.dx;
		if((x < 0 ? -x : x) <= 0.01 * (this.utmod * this.getComputedTimeMultiplier())) {
			this.dx = 0;
		}
		var x = this.dy;
		if((x < 0 ? -x : x) <= 0.01 * (this.utmod * this.getComputedTimeMultiplier())) {
			this.dy = 0;
		}
		if(this.dx == 0 && this.dy == 0) {
			offY = 0;
			offX = offY;
		}
		if(!this.cd.fastCheck.h.hasOwnProperty(100663296)) {
			var d = 50;
			if(this.moveA && (this.legsA[0].inBadPosition() || this.legsA[1].inBadPosition())) {
				this.legsA[0].setAngPos(this.bodyAng - 2.3561944901923448,d);
				this.legsA[1].setAngPos(this.bodyAng + 0.78539816339744828,d);
				this.moveA = !this.moveA;
			} else if(!this.moveA && (this.legsB[0].inBadPosition() || this.legsB[1].inBadPosition())) {
				this.legsB[0].setAngPos(this.bodyAng - 0.78539816339744828,d);
				this.legsB[1].setAngPos(this.bodyAng + 2.3561944901923448,d);
				this.moveA = !this.moveA;
			}
		}
		this.z *= 0.8;
		this.bodyX = this.x + ((this.legsA[0].x + this.legsA[1].x + this.legsB[0].x + this.legsB[1].x) / 4 - this.x) * 0.5;
		this.bodyY = this.y + ((this.legsA[0].y + this.legsA[1].y + this.legsB[0].y + this.legsB[1].y) / 4 - this.y) * 0.5 - this.recoil;
		var tmp;
		var x = this.dx;
		if(!((x < 0 ? -x : x) >= 0.1)) {
			var x = this.dy;
			tmp = (x < 0 ? -x : x) >= 0.1;
		} else {
			tmp = true;
		}
		if(tmp) {
			var tmp = this;
			var tmp1 = tmp.bodyAng;
			var a = Math.atan2(this.dy,this.dx);
			var b = this.bodyAng;
			var a1 = a;
			while(a1 < -3.1415926535897931) a1 += 6.283185307179586;
			while(a1 > 3.141592653589793) a1 -= 6.283185307179586;
			a = a1;
			var a1 = b;
			while(a1 < -3.1415926535897931) a1 += 6.283185307179586;
			while(a1 > 3.141592653589793) a1 -= 6.283185307179586;
			b = a1;
			var a1 = a - b;
			while(a1 < -3.1415926535897931) a1 += 6.283185307179586;
			while(a1 > 3.141592653589793) a1 -= 6.283185307179586;
			tmp.bodyAng = tmp1 + a1 * 0.03 * (this.utmod * this.getComputedTimeMultiplier());
		}
	}
	,__class__: en_Quad
});
var en_b_MachineGun = function(x,y,a,t) {
	en_Bullet.call(this,x,y);
	this.target = t;
	this.maxRange = Const.SHOOT_RANGE * 1.5;
	this.spd = 20;
	this.moveAng(a,this.spd);
	this.radius = this.spd;
	this.maxTime = this.secToFrames(2);
	var _this = this.spr;
	var l = null;
	if(l != null) {
		if(l.pages == null || l.pages.length == 0) {
			throw haxe_Exception.thrown("sprite sheet has no backing texture, please generate one");
		}
		if(_this.allocated && _this.lib != null) {
			HxOverrides.remove(_this.lib.children,_this);
		}
		_this.lib = l;
		if(_this.allocated) {
			_this.lib.children.push(_this);
		}
		if(_this.pivot.isUndefined) {
			var xRatio = _this.lib.defaultCenterX;
			var yRatio = _this.lib.defaultCenterY;
			if(yRatio == null) {
				yRatio = 0.5;
			}
			if(xRatio == null) {
				xRatio = 0.5;
			}
			var _this1 = _this.pivot;
			_this1.centerFactorX = xRatio;
			_this1.centerFactorY = yRatio;
			_this1.usingFactor = true;
			_this1.isUndefined = false;
		}
	}
	if("bulletHero" != _this.groupName) {
		_this.groupName = "bulletHero";
	}
	if(!_this.destroyed && _this.lib != null && _this.groupName != null) {
		var _this1 = _this.lib;
		var k = _this.groupName;
		_this.group = k == null ? _this1.currentGroup : _this1.groups.h[k];
		var _this1 = _this.lib;
		var k = _this.groupName;
		var frame = 0;
		if(frame == null) {
			frame = 0;
		}
		var g = k == null ? _this1.currentGroup : _this1.groups.h[k];
		_this.frameData = g == null ? null : g.frames[frame];
		if(_this.frameData == null) {
			throw haxe_Exception.thrown("Unknown frame: " + _this.groupName + "(" + 0 + ")");
		}
		if(_this.rawTile == null) {
			_this.rawTile = _this.lib.pages[_this.frameData.page].clone();
		} else {
			_this.rawTile.setTexture(_this.lib.pages[_this.frameData.page].innerTex);
		}
		_this.lastPage = _this.frameData.page;
		_this.setFrame(0);
	} else {
		_this.setEmptyTexture();
	}
	this.spr.blendMode = h2d_BlendMode.Add;
	this.frict = 1;
};
$hxClasses["en.b.MachineGun"] = en_b_MachineGun;
en_b_MachineGun.__name__ = "en.b.MachineGun";
en_b_MachineGun.__super__ = en_Bullet;
en_b_MachineGun.prototype = $extend(en_Bullet.prototype,{
	onHit: function(e) {
		if(e != this.target) {
			return;
		}
		en_Bullet.prototype.onHit.call(this,e);
		this.destroyed = true;
		var tmp = Game.ME.fx;
		var e1 = e.x;
		var sign = true;
		if(sign == null) {
			sign = false;
		}
		var tmp1 = sign ? Math.random() * 4 * (Std.random(2) * 2 - 1) : Math.random() * 4;
		var sign = true;
		if(sign == null) {
			sign = false;
		}
		tmp.hit(e1 + tmp1,e.y + (sign ? Math.random() * 4 * (Std.random(2) * 2 - 1) : Math.random() * 4));
		if(e.is(en_m_Creeper)) {
			if(Std.random(3) == 0) {
				e.hit(Game.kidMode ? 15 : 3);
			} else {
				e.hit(Game.kidMode ? 10 : 0);
			}
		} else {
			e.hit(1);
		}
		var _this = this.cd;
		var tmp;
		if(_this.fastCheck.h.hasOwnProperty(138412032)) {
			tmp = true;
		} else {
			var onComplete = null;
			var cur = _this._getCdObject(138412032);
			if(!(cur != null && 4 < cur.frames && false)) {
				_this.fastCheck.h[138412032] = true;
				if(cur != null) {
					cur.frames = 4;
					cur.initial = 4;
				} else {
					var _this1 = _this.cds;
					if(_this1.nalloc >= _this1.size) {
						throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
					}
					var e = _this1.pool[_this1.nalloc++];
					e.recycle();
					var cd = e;
					cd.k = 138412032;
					cd.frames = 4;
					cd.initial = 4;
				}
				if(onComplete != null) {
					var cd = _this._getCdObject(138412032);
					if(cd == null) {
						throw haxe_Exception.thrown("cannot bind onComplete(" + 138412032 + "): cooldown " + 138412032 + " isn't running");
					}
					cd.onCompleteOnce = onComplete;
				}
			}
			tmp = false;
		}
		if(!tmp) {
			var _this = Game.ME.level;
			var x = this.x;
			var y = this.y;
			var sign = null;
			if(sign == null) {
				sign = false;
			}
			var a = sign ? (0.2 + Math.random() * 0.39999999999999997) * (Std.random(2) * 2 - 1) : 0.2 + Math.random() * 0.39999999999999997;
			if(a == null) {
				a = 1.0;
			}
			var _this1 = Assets.lib;
			var rndFunc = null;
			if(!(Object.prototype.hasOwnProperty.call(_this1.groups.h,"bulletHole") && _this1.groups.h["bulletHole"].frames.length > 0)) {
				throw haxe_Exception.thrown("Unknown group " + "bulletHole");
			}
			var frame = (rndFunc == null ? Std.random : rndFunc)(_this1.groups.h["bulletHole"].frames.length);
			var px = 0.0;
			var py = 0.0;
			if(py == null) {
				py = 0.0;
			}
			if(px == null) {
				px = 0.0;
			}
			if(frame == null) {
				frame = 0;
			}
			var frame1 = frame;
			if(frame1 == null) {
				frame1 = 0;
			}
			var g = _this1.groups.h["bulletHole"];
			var fd = g == null ? null : g.frames[frame1];
			if(fd == null) {
				throw haxe_Exception.thrown("Unknown group " + "bulletHole" + "#" + frame + "!");
			}
			var t = _this1.pages[fd.page].clone();
			var frame1 = frame;
			var px1 = px;
			var py1 = py;
			if(py1 == null) {
				py1 = 0.0;
			}
			if(px1 == null) {
				px1 = 0.0;
			}
			if(frame1 == null) {
				frame1 = 0;
			}
			var frame = frame1;
			if(frame == null) {
				frame = 0;
			}
			var g = _this1.groups.h["bulletHole"];
			var fd = g == null ? null : g.frames[frame];
			if(fd == null) {
				throw haxe_Exception.thrown("Unknown group " + "bulletHole" + "#" + frame1 + "!");
			}
			t.setPosition(fd.x,fd.y);
			t.setSize(fd.wid,fd.hei);
			t.dx = -(fd.realWid * px1 + fd.realX | 0);
			t.dy = -(fd.realHei * py1 + fd.realY | 0);
			var t1 = t;
			var limit = 500;
			if(_this.dirtGroups[_this.curDirtGroup].count() >= limit) {
				_this.curDirtGroup++;
				if(_this.curDirtGroup >= _this.dirtGroups.length) {
					_this.curDirtGroup = 0;
				}
				if(_this.dirtGroups[_this.curDirtGroup].count() >= limit) {
					_this.dirtGroups[_this.curDirtGroup].clear();
				}
			}
			var tg = _this.dirtGroups[_this.curDirtGroup];
			tg.content.add(x - t1.width * 0.5 | 0,y - t1.height * 0.5 | 0,1,1,1,a,t1);
			tg.invalidate();
		}
	}
	,update: function() {
		en_Bullet.prototype.update.call(this);
	}
	,__class__: en_b_MachineGun
});
var en_b_Missile = function(x,y,q,t) {
	en_Bullet.call(this,x,y);
	this.quad = q;
	this.maxRange = 300;
	this.target = t;
	this.active = false;
	this.ang = Math.atan2(this.target.y - y,this.target.x - x);
	this.precision = 0;
	this.spd = 1.5;
	this.radius = 10;
	var sign = null;
	if(sign == null) {
		sign = false;
	}
	var d = sign ? (3 + Math.random() * 5) * (Std.random(2) * 2 - 1) : 3 + Math.random() * 5;
	var sign = true;
	if(sign == null) {
		sign = false;
	}
	var a = this.ang + (sign ? (1.5707963267948966 + Math.random() * 0.94247779607693793) * (Std.random(2) * 2 - 1) : 1.5707963267948966 + Math.random() * 0.94247779607693793);
	this.dx = Math.cos(a) * d;
	this.dy = Math.sin(a) * d;
	this.frict = 0.9;
	var _this = this.cd;
	var sign = null;
	if(sign == null) {
		sign = false;
	}
	var frames = sign ? (7 + Math.random() * 3) * (Std.random(2) * 2 - 1) : 7 + Math.random() * 3;
	var allowLower = true;
	var onComplete = null;
	if(allowLower == null) {
		allowLower = true;
	}
	var cur = _this._getCdObject(125829120);
	if(!(cur != null && frames < cur.frames && !allowLower)) {
		if(frames <= 0) {
			if(cur != null) {
				_this.fastCheck.remove(cur.k);
				var _this1 = _this.cds;
				var _g = 0;
				var _g1 = _this1.nalloc;
				while(_g < _g1) {
					var i = _g++;
					if(_this1.pool[i] == cur) {
						if(i >= 0 && i < _this1.nalloc) {
							if(_this1.nalloc > 1) {
								var tmp = _this1.pool[i];
								_this1.pool[i] = _this1.pool[_this1.nalloc - 1];
								_this1.pool[_this1.nalloc - 1] = tmp;
								_this1.nalloc--;
							} else {
								_this1.nalloc = 0;
							}
						}
						break;
					}
				}
			}
		} else {
			_this.fastCheck.h[125829120] = true;
			if(cur != null) {
				cur.frames = frames;
				cur.initial = frames;
			} else {
				var _this1 = _this.cds;
				if(_this1.nalloc >= _this1.size) {
					throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
				}
				var e = _this1.pool[_this1.nalloc++];
				e.recycle();
				var cd = e;
				cd.k = 125829120;
				cd.frames = frames;
				cd.initial = frames;
			}
		}
		if(onComplete != null) {
			if(frames <= 0) {
				onComplete();
			} else {
				var cd = _this._getCdObject(125829120);
				if(cd == null) {
					throw haxe_Exception.thrown("cannot bind onComplete(" + 125829120 + "): cooldown " + 125829120 + " isn't running");
				}
				cd.onCompleteOnce = onComplete;
			}
		}
	}
	var _this = this.spr;
	var l = null;
	if(l != null) {
		if(l.pages == null || l.pages.length == 0) {
			throw haxe_Exception.thrown("sprite sheet has no backing texture, please generate one");
		}
		if(_this.allocated && _this.lib != null) {
			HxOverrides.remove(_this.lib.children,_this);
		}
		_this.lib = l;
		if(_this.allocated) {
			_this.lib.children.push(_this);
		}
		if(_this.pivot.isUndefined) {
			var xRatio = _this.lib.defaultCenterX;
			var yRatio = _this.lib.defaultCenterY;
			if(yRatio == null) {
				yRatio = 0.5;
			}
			if(xRatio == null) {
				xRatio = 0.5;
			}
			var _this1 = _this.pivot;
			_this1.centerFactorX = xRatio;
			_this1.centerFactorY = yRatio;
			_this1.usingFactor = true;
			_this1.isUndefined = false;
		}
	}
	if("missile" != _this.groupName) {
		_this.groupName = "missile";
	}
	if(!_this.destroyed && _this.lib != null && _this.groupName != null) {
		var _this1 = _this.lib;
		var k = _this.groupName;
		_this.group = k == null ? _this1.currentGroup : _this1.groups.h[k];
		var _this1 = _this.lib;
		var k = _this.groupName;
		var frame = 0;
		if(frame == null) {
			frame = 0;
		}
		var g = k == null ? _this1.currentGroup : _this1.groups.h[k];
		_this.frameData = g == null ? null : g.frames[frame];
		if(_this.frameData == null) {
			throw haxe_Exception.thrown("Unknown frame: " + _this.groupName + "(" + 0 + ")");
		}
		if(_this.rawTile == null) {
			_this.rawTile = _this.lib.pages[_this.frameData.page].clone();
		} else {
			_this.rawTile.setTexture(_this.lib.pages[_this.frameData.page].innerTex);
		}
		_this.lastPage = _this.frameData.page;
		_this.setFrame(0);
	} else {
		_this.setEmptyTexture();
	}
	this.spr.blendMode = h2d_BlendMode.Alpha;
};
$hxClasses["en.b.Missile"] = en_b_Missile;
en_b_Missile.__name__ = "en.b.Missile";
en_b_Missile.__super__ = en_Bullet;
en_b_Missile.prototype = $extend(en_Bullet.prototype,{
	setPosition: function(x,y) {
		en_Bullet.prototype.setPosition.call(this,x,y);
		this.lastX = x;
		this.lastY = y;
	}
	,onHit: function(e) {
		en_Bullet.prototype.onHit.call(this,e);
		if(!Game.kidMode && ((e) instanceof en_m_Zergling)) {
			return;
		}
		this.destroyed = true;
		e.hit(9);
		var tmp = Game.ME.fx;
		var e1 = e.x;
		var sign = true;
		if(sign == null) {
			sign = false;
		}
		var tmp1 = sign ? Math.random() * 7 * (Std.random(2) * 2 - 1) : Math.random() * 7;
		var sign = true;
		if(sign == null) {
			sign = false;
		}
		tmp.explosion(e1 + tmp1,e.y + (sign ? Math.random() * 7 * (Std.random(2) * 2 - 1) : Math.random() * 7),1);
		var arr = [Assets.SBANK.explode03];
		var s = arr[Std.random(arr.length)](1.0);
		var x = this.x;
		var y = this.y;
		var vol = 0.2;
		if(vol == null) {
			vol = 1.0;
		}
		s.play(null,vol);
	}
	,updateRender: function() {
		en_Bullet.prototype.updateRender.call(this);
		var _this = this.spr;
		_this.posChanged = true;
		_this.rotation = this.ang;
	}
	,onDispose: function() {
		en_Bullet.prototype.onDispose.call(this);
		this.quad = null;
	}
	,update: function() {
		var _gthis = this;
		this.lastX = this.x;
		this.lastY = this.y;
		en_Bullet.prototype.update.call(this);
		if(!this.active && !this.cd.fastCheck.h.hasOwnProperty(125829120) && !this.cd.fastCheck.h.hasOwnProperty(130023424)) {
			var _this = this.cd;
			var allowLower = true;
			var onComplete = null;
			if(allowLower == null) {
				allowLower = true;
			}
			var cur = _this._getCdObject(130023424);
			if(!(cur != null && 5 < cur.frames && !allowLower)) {
				_this.fastCheck.h[130023424] = true;
				if(cur != null) {
					cur.frames = 5;
					cur.initial = 5;
				} else {
					var _this1 = _this.cds;
					if(_this1.nalloc >= _this1.size) {
						throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
					}
					var e = _this1.pool[_this1.nalloc++];
					e.recycle();
					var cd = e;
					cd.k = 130023424;
					cd.frames = 5;
					cd.initial = 5;
				}
				if(onComplete != null) {
					var cd = _this._getCdObject(130023424);
					if(cd == null) {
						throw haxe_Exception.thrown("cannot bind onComplete(" + 130023424 + "): cooldown " + 130023424 + " isn't running");
					}
					cd.onCompleteOnce = onComplete;
				}
			}
			var cd = this.cd._getCdObject(130023424);
			if(cd == null) {
				throw haxe_Exception.thrown("cannot bind onComplete(" + 130023424 + "): cooldown " + 130023424 + " isn't running");
			}
			cd.onCompleteOnce = function() {
				Game.ME.fx.ignite(_gthis.x,_gthis.y,_gthis.ang);
				_gthis.active = true;
			};
		}
		if(!this.active && this.cd.fastCheck.h.hasOwnProperty(130023424)) {
			this.dx *= 0.7;
			this.dy *= 0.7;
		}
		if(this.active) {
			Game.ME.fx.missileTail(this.lastX,this.lastY,this.x,this.y);
			if(this.target.destroyed) {
				var t = this.quad.getAttackTarget();
				if(t != null) {
					this.precision = 1;
					this.target = t;
					this.dx *= 0.2;
					this.dy *= 0.2;
				}
			} else if(!this.cd.fastCheck.h.hasOwnProperty(134217728)) {
				var ta = Math.atan2(this.target.y - this.y,this.target.x - this.x);
				var y = this.precision;
				this.precision = 1 < y ? 1 : y;
				var tmp = this;
				var tmp1 = tmp.ang;
				var a = ta;
				var b = this.ang;
				var a1 = a;
				while(a1 < -3.1415926535897931) a1 += 6.283185307179586;
				while(a1 > 3.141592653589793) a1 -= 6.283185307179586;
				a = a1;
				var a1 = b;
				while(a1 < -3.1415926535897931) a1 += 6.283185307179586;
				while(a1 > 3.141592653589793) a1 -= 6.283185307179586;
				b = a1;
				var a1 = a - b;
				while(a1 < -3.1415926535897931) a1 += 6.283185307179586;
				while(a1 > 3.141592653589793) a1 -= 6.283185307179586;
				tmp.ang = tmp1 + a1 * (0.3 + 0.7 * this.precision);
				this.precision += 0.04;
			}
			this.dx += Math.cos(this.ang) * this.spd;
			this.dy += Math.sin(this.ang) * this.spd;
			var ax = this.target.x;
			var ay = this.target.y;
			var bx = this.x;
			var by = this.y;
			if((ax - bx) * (ax - bx) + (ay - by) * (ay - by) <= 625) {
				var _this = this.cd;
				var sign = null;
				if(sign == null) {
					sign = false;
				}
				var frames = sign ? (5 + Math.random() * 3) * (Std.random(2) * 2 - 1) : 5 + Math.random() * 3;
				var allowLower = true;
				var onComplete = null;
				if(allowLower == null) {
					allowLower = true;
				}
				var cur = _this._getCdObject(134217728);
				if(!(cur != null && frames < cur.frames && !allowLower)) {
					if(frames <= 0) {
						if(cur != null) {
							_this.fastCheck.remove(cur.k);
							var _this1 = _this.cds;
							var _g = 0;
							var _g1 = _this1.nalloc;
							while(_g < _g1) {
								var i = _g++;
								if(_this1.pool[i] == cur) {
									if(i >= 0 && i < _this1.nalloc) {
										if(_this1.nalloc > 1) {
											var tmp = _this1.pool[i];
											_this1.pool[i] = _this1.pool[_this1.nalloc - 1];
											_this1.pool[_this1.nalloc - 1] = tmp;
											_this1.nalloc--;
										} else {
											_this1.nalloc = 0;
										}
									}
									break;
								}
							}
						}
					} else {
						_this.fastCheck.h[134217728] = true;
						if(cur != null) {
							cur.frames = frames;
							cur.initial = frames;
						} else {
							var _this1 = _this.cds;
							if(_this1.nalloc >= _this1.size) {
								throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
							}
							var e = _this1.pool[_this1.nalloc++];
							e.recycle();
							var cd = e;
							cd.k = 134217728;
							cd.frames = frames;
							cd.initial = frames;
						}
					}
					if(onComplete != null) {
						if(frames <= 0) {
							onComplete();
						} else {
							var cd = _this._getCdObject(134217728);
							if(cd == null) {
								throw haxe_Exception.thrown("cannot bind onComplete(" + 134217728 + "): cooldown " + 134217728 + " isn't running");
							}
							cd.onCompleteOnce = onComplete;
						}
					}
				}
				this.dx *= 0.9;
				this.dy *= 0.9;
				this.precision = 0.5;
			}
		}
		if(this.spr.scaleX < 1) {
			var _this = this.spr;
			var _this1 = this.spr;
			_this1.posChanged = true;
			_this.posChanged = true;
			_this.scaleX = _this1.scaleY = this.spr.scaleX + 0.1;
		}
	}
	,__class__: en_b_Missile
});
var en_m_Creeper = function(x,y) {
	en_Mob.call(this,x,y);
	en_m_Creeper.ALL.push(this);
	this.babies = [];
	this.initLife(280);
	var _this = this.spr;
	var l = null;
	if(l != null) {
		if(l.pages == null || l.pages.length == 0) {
			throw haxe_Exception.thrown("sprite sheet has no backing texture, please generate one");
		}
		if(_this.allocated && _this.lib != null) {
			HxOverrides.remove(_this.lib.children,_this);
		}
		_this.lib = l;
		if(_this.allocated) {
			_this.lib.children.push(_this);
		}
		if(_this.pivot.isUndefined) {
			var xRatio = _this.lib.defaultCenterX;
			var yRatio = _this.lib.defaultCenterY;
			if(yRatio == null) {
				yRatio = 0.5;
			}
			if(xRatio == null) {
				xRatio = 0.5;
			}
			var _this1 = _this.pivot;
			_this1.centerFactorX = xRatio;
			_this1.centerFactorY = yRatio;
			_this1.usingFactor = true;
			_this1.isUndefined = false;
		}
	}
	if("creeper" != _this.groupName) {
		_this.groupName = "creeper";
	}
	if(!_this.destroyed && _this.lib != null && _this.groupName != null) {
		var _this1 = _this.lib;
		var k = _this.groupName;
		_this.group = k == null ? _this1.currentGroup : _this1.groups.h[k];
		var _this1 = _this.lib;
		var k = _this.groupName;
		var frame = 0;
		if(frame == null) {
			frame = 0;
		}
		var g = k == null ? _this1.currentGroup : _this1.groups.h[k];
		_this.frameData = g == null ? null : g.frames[frame];
		if(_this.frameData == null) {
			throw haxe_Exception.thrown("Unknown frame: " + _this.groupName + "(" + 0 + ")");
		}
		if(_this.rawTile == null) {
			_this.rawTile = _this.lib.pages[_this.frameData.page].clone();
		} else {
			_this.rawTile.setTexture(_this.lib.pages[_this.frameData.page].innerTex);
		}
		_this.lastPage = _this.frameData.page;
		_this.setFrame(0);
	} else {
		_this.setEmptyTexture();
	}
	var xRatio = 0.5;
	var yRatio = 0.8;
	if(yRatio == null) {
		yRatio = 0.5;
	}
	if(xRatio == null) {
		xRatio = 0.5;
	}
	var _this = this.spr.pivot;
	_this.centerFactorX = xRatio;
	_this.centerFactorY = yRatio;
	_this.usingFactor = true;
	_this.isUndefined = false;
	var xr = 0.5;
	var yr = 0.5;
	var smooth = null;
	var p = null;
	if(yr == null) {
		yr = 0.;
	}
	if(xr == null) {
		xr = 0.;
	}
	var s = new dn_heaps_slib_HSprite(Assets.lib,"eye",0);
	if(p != null) {
		p.addChild(s);
	}
	var xRatio = xr;
	var yRatio = yr;
	if(yRatio == null) {
		yRatio = 0.5;
	}
	if(xRatio == null) {
		xRatio = 0.5;
	}
	var _this = s.pivot;
	_this.centerFactorX = xRatio;
	_this.centerFactorY = yRatio;
	_this.usingFactor = true;
	_this.isUndefined = false;
	if(smooth != null) {
		s.smooth = smooth;
	}
	this.eye = s;
	Game.ME.scroller.add(this.eye,Const.DP_ENTITY);
	var d = 5 * Const.GRID;
	var _g = 0;
	var _g1 = Scenery.ALL;
	while(_g < _g1.length) {
		var e = _g1[_g];
		++_g;
		var tmp;
		if(e.isTree()) {
			var bx = e.x;
			var by = e.y;
			tmp = (x - bx) * (x - bx) + (y - by) * (y - by) <= d * d;
		} else {
			tmp = false;
		}
		if(tmp) {
			e.solid = false;
			e.explode();
		}
	}
	Game.ME.level.addCreepArea(this.x / Const.GRID | 0,this.y / Const.GRID | 0,5);
	this.enableBar();
	var _this = this.cd;
	var frames = this.secToFrames(4);
	var allowLower = true;
	var onComplete = null;
	if(allowLower == null) {
		allowLower = true;
	}
	var cur = _this._getCdObject(71303168);
	if(!(cur != null && frames < cur.frames && !allowLower)) {
		if(frames <= 0) {
			if(cur != null) {
				_this.fastCheck.remove(cur.k);
				var _this1 = _this.cds;
				var _g = 0;
				var _g1 = _this1.nalloc;
				while(_g < _g1) {
					var i = _g++;
					if(_this1.pool[i] == cur) {
						if(i >= 0 && i < _this1.nalloc) {
							if(_this1.nalloc > 1) {
								var tmp = _this1.pool[i];
								_this1.pool[i] = _this1.pool[_this1.nalloc - 1];
								_this1.pool[_this1.nalloc - 1] = tmp;
								_this1.nalloc--;
							} else {
								_this1.nalloc = 0;
							}
						}
						break;
					}
				}
			}
		} else {
			_this.fastCheck.h[71303168] = true;
			if(cur != null) {
				cur.frames = frames;
				cur.initial = frames;
			} else {
				var _this1 = _this.cds;
				if(_this1.nalloc >= _this1.size) {
					throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
				}
				var e = _this1.pool[_this1.nalloc++];
				e.recycle();
				var cd = e;
				cd.k = 71303168;
				cd.frames = frames;
				cd.initial = frames;
			}
		}
		if(onComplete != null) {
			if(frames <= 0) {
				onComplete();
			} else {
				var cd = _this._getCdObject(71303168);
				if(cd == null) {
					throw haxe_Exception.thrown("cannot bind onComplete(" + 71303168 + "): cooldown " + 71303168 + " isn't running");
				}
				cd.onCompleteOnce = onComplete;
			}
		}
	}
};
$hxClasses["en.m.Creeper"] = en_m_Creeper;
en_m_Creeper.__name__ = "en.m.Creeper";
en_m_Creeper.__super__ = en_Mob;
en_m_Creeper.prototype = $extend(en_Mob.prototype,{
	onDie: function() {
		en_Mob.prototype.onDie.call(this);
		var _this = Game.ME.level;
		var x = this.x;
		var y = this.y;
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		var a = sign ? (0.8 + Math.random() * 0.099999999999999978) * (Std.random(2) * 2 - 1) : 0.8 + Math.random() * 0.099999999999999978;
		if(a == null) {
			a = 1.0;
		}
		var _this1 = Assets.lib;
		var rndFunc = null;
		if(!(Object.prototype.hasOwnProperty.call(_this1.groups.h,"hole") && _this1.groups.h["hole"].frames.length > 0)) {
			throw haxe_Exception.thrown("Unknown group " + "hole");
		}
		var frame = (rndFunc == null ? Std.random : rndFunc)(_this1.groups.h["hole"].frames.length);
		var px = 0.0;
		var py = 0.0;
		if(py == null) {
			py = 0.0;
		}
		if(px == null) {
			px = 0.0;
		}
		if(frame == null) {
			frame = 0;
		}
		var frame1 = frame;
		if(frame1 == null) {
			frame1 = 0;
		}
		var g = _this1.groups.h["hole"];
		var fd = g == null ? null : g.frames[frame1];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "hole" + "#" + frame + "!");
		}
		var t = _this1.pages[fd.page].clone();
		var frame1 = frame;
		var px1 = px;
		var py1 = py;
		if(py1 == null) {
			py1 = 0.0;
		}
		if(px1 == null) {
			px1 = 0.0;
		}
		if(frame1 == null) {
			frame1 = 0;
		}
		var frame = frame1;
		if(frame == null) {
			frame = 0;
		}
		var g = _this1.groups.h["hole"];
		var fd = g == null ? null : g.frames[frame];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "hole" + "#" + frame1 + "!");
		}
		t.setPosition(fd.x,fd.y);
		t.setSize(fd.wid,fd.hei);
		t.dx = -(fd.realWid * px1 + fd.realX | 0);
		t.dy = -(fd.realHei * py1 + fd.realY | 0);
		var t1 = t;
		var limit = 500;
		if(_this.dirtGroups[_this.curDirtGroup].count() >= limit) {
			_this.curDirtGroup++;
			if(_this.curDirtGroup >= _this.dirtGroups.length) {
				_this.curDirtGroup = 0;
			}
			if(_this.dirtGroups[_this.curDirtGroup].count() >= limit) {
				_this.dirtGroups[_this.curDirtGroup].clear();
			}
		}
		var tg = _this.dirtGroups[_this.curDirtGroup];
		tg.content.add(x - t1.width * 0.5 | 0,y - t1.height * 0.5 | 0,1,1,1,a,t1);
		tg.invalidate();
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		var a = sign ? Math.random() * 6.28 * (Std.random(2) * 2 - 1) : Math.random() * 6.28;
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		var d = sign ? Math.random() * 20 * (Std.random(2) * 2 - 1) : Math.random() * 20;
		var _this = Game.ME.level;
		var x = this.x + Math.cos(a) * d;
		var y = this.y + Math.sin(a) * d;
		var a = 1;
		if(a == null) {
			a = 1.0;
		}
		var _this1 = Assets.lib;
		var rndFunc = null;
		if(!(Object.prototype.hasOwnProperty.call(_this1.groups.h,"creepSplatter") && _this1.groups.h["creepSplatter"].frames.length > 0)) {
			throw haxe_Exception.thrown("Unknown group " + "creepSplatter");
		}
		var frame = (rndFunc == null ? Std.random : rndFunc)(_this1.groups.h["creepSplatter"].frames.length);
		var px = 0.0;
		var py = 0.0;
		if(py == null) {
			py = 0.0;
		}
		if(px == null) {
			px = 0.0;
		}
		if(frame == null) {
			frame = 0;
		}
		var frame1 = frame;
		if(frame1 == null) {
			frame1 = 0;
		}
		var g = _this1.groups.h["creepSplatter"];
		var fd = g == null ? null : g.frames[frame1];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "creepSplatter" + "#" + frame + "!");
		}
		var t = _this1.pages[fd.page].clone();
		var frame1 = frame;
		var px1 = px;
		var py1 = py;
		if(py1 == null) {
			py1 = 0.0;
		}
		if(px1 == null) {
			px1 = 0.0;
		}
		if(frame1 == null) {
			frame1 = 0;
		}
		var frame = frame1;
		if(frame == null) {
			frame = 0;
		}
		var g = _this1.groups.h["creepSplatter"];
		var fd = g == null ? null : g.frames[frame];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "creepSplatter" + "#" + frame1 + "!");
		}
		t.setPosition(fd.x,fd.y);
		t.setSize(fd.wid,fd.hei);
		t.dx = -(fd.realWid * px1 + fd.realX | 0);
		t.dy = -(fd.realHei * py1 + fd.realY | 0);
		var t1 = t;
		var limit = 500;
		if(_this.dirtGroups[_this.curDirtGroup].count() >= limit) {
			_this.curDirtGroup++;
			if(_this.curDirtGroup >= _this.dirtGroups.length) {
				_this.curDirtGroup = 0;
			}
			if(_this.dirtGroups[_this.curDirtGroup].count() >= limit) {
				_this.dirtGroups[_this.curDirtGroup].clear();
			}
		}
		var tg = _this.dirtGroups[_this.curDirtGroup];
		tg.content.add(x - t1.width * 0.5 | 0,y - t1.height * 0.5 | 0,1,1,1,a,t1);
		tg.invalidate();
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		var a = sign ? Math.random() * 6.28 * (Std.random(2) * 2 - 1) : Math.random() * 6.28;
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		var d = sign ? Math.random() * 20 * (Std.random(2) * 2 - 1) : Math.random() * 20;
		var _this = Game.ME.level;
		var x = this.x + Math.cos(a) * d;
		var y = this.y + Math.sin(a) * d;
		var a = 1;
		if(a == null) {
			a = 1.0;
		}
		var _this1 = Assets.lib;
		var rndFunc = null;
		if(!(Object.prototype.hasOwnProperty.call(_this1.groups.h,"creepSplatter") && _this1.groups.h["creepSplatter"].frames.length > 0)) {
			throw haxe_Exception.thrown("Unknown group " + "creepSplatter");
		}
		var frame = (rndFunc == null ? Std.random : rndFunc)(_this1.groups.h["creepSplatter"].frames.length);
		var px = 0.0;
		var py = 0.0;
		if(py == null) {
			py = 0.0;
		}
		if(px == null) {
			px = 0.0;
		}
		if(frame == null) {
			frame = 0;
		}
		var frame1 = frame;
		if(frame1 == null) {
			frame1 = 0;
		}
		var g = _this1.groups.h["creepSplatter"];
		var fd = g == null ? null : g.frames[frame1];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "creepSplatter" + "#" + frame + "!");
		}
		var t = _this1.pages[fd.page].clone();
		var frame1 = frame;
		var px1 = px;
		var py1 = py;
		if(py1 == null) {
			py1 = 0.0;
		}
		if(px1 == null) {
			px1 = 0.0;
		}
		if(frame1 == null) {
			frame1 = 0;
		}
		var frame = frame1;
		if(frame == null) {
			frame = 0;
		}
		var g = _this1.groups.h["creepSplatter"];
		var fd = g == null ? null : g.frames[frame];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "creepSplatter" + "#" + frame1 + "!");
		}
		t.setPosition(fd.x,fd.y);
		t.setSize(fd.wid,fd.hei);
		t.dx = -(fd.realWid * px1 + fd.realX | 0);
		t.dy = -(fd.realHei * py1 + fd.realY | 0);
		var t1 = t;
		var limit = 500;
		if(_this.dirtGroups[_this.curDirtGroup].count() >= limit) {
			_this.curDirtGroup++;
			if(_this.curDirtGroup >= _this.dirtGroups.length) {
				_this.curDirtGroup = 0;
			}
			if(_this.dirtGroups[_this.curDirtGroup].count() >= limit) {
				_this.dirtGroups[_this.curDirtGroup].clear();
			}
		}
		var tg = _this.dirtGroups[_this.curDirtGroup];
		tg.content.add(x - t1.width * 0.5 | 0,y - t1.height * 0.5 | 0,1,1,1,a,t1);
		tg.invalidate();
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		var a = sign ? Math.random() * 6.28 * (Std.random(2) * 2 - 1) : Math.random() * 6.28;
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		var d = sign ? Math.random() * 20 * (Std.random(2) * 2 - 1) : Math.random() * 20;
		var _this = Game.ME.level;
		var x = this.x + Math.cos(a) * d;
		var y = this.y + Math.sin(a) * d;
		var a = 1;
		if(a == null) {
			a = 1.0;
		}
		var _this1 = Assets.lib;
		var rndFunc = null;
		if(!(Object.prototype.hasOwnProperty.call(_this1.groups.h,"creepSplatter") && _this1.groups.h["creepSplatter"].frames.length > 0)) {
			throw haxe_Exception.thrown("Unknown group " + "creepSplatter");
		}
		var frame = (rndFunc == null ? Std.random : rndFunc)(_this1.groups.h["creepSplatter"].frames.length);
		var px = 0.0;
		var py = 0.0;
		if(py == null) {
			py = 0.0;
		}
		if(px == null) {
			px = 0.0;
		}
		if(frame == null) {
			frame = 0;
		}
		var frame1 = frame;
		if(frame1 == null) {
			frame1 = 0;
		}
		var g = _this1.groups.h["creepSplatter"];
		var fd = g == null ? null : g.frames[frame1];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "creepSplatter" + "#" + frame + "!");
		}
		var t = _this1.pages[fd.page].clone();
		var frame1 = frame;
		var px1 = px;
		var py1 = py;
		if(py1 == null) {
			py1 = 0.0;
		}
		if(px1 == null) {
			px1 = 0.0;
		}
		if(frame1 == null) {
			frame1 = 0;
		}
		var frame = frame1;
		if(frame == null) {
			frame = 0;
		}
		var g = _this1.groups.h["creepSplatter"];
		var fd = g == null ? null : g.frames[frame];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "creepSplatter" + "#" + frame1 + "!");
		}
		t.setPosition(fd.x,fd.y);
		t.setSize(fd.wid,fd.hei);
		t.dx = -(fd.realWid * px1 + fd.realX | 0);
		t.dy = -(fd.realHei * py1 + fd.realY | 0);
		var t1 = t;
		var limit = 500;
		if(_this.dirtGroups[_this.curDirtGroup].count() >= limit) {
			_this.curDirtGroup++;
			if(_this.curDirtGroup >= _this.dirtGroups.length) {
				_this.curDirtGroup = 0;
			}
			if(_this.dirtGroups[_this.curDirtGroup].count() >= limit) {
				_this.dirtGroups[_this.curDirtGroup].clear();
			}
		}
		var tg = _this.dirtGroups[_this.curDirtGroup];
		tg.content.add(x - t1.width * 0.5 | 0,y - t1.height * 0.5 | 0,1,1,1,a,t1);
		tg.invalidate();
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		var a = sign ? Math.random() * 6.28 * (Std.random(2) * 2 - 1) : Math.random() * 6.28;
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		var d = sign ? Math.random() * 20 * (Std.random(2) * 2 - 1) : Math.random() * 20;
		var _this = Game.ME.level;
		var x = this.x + Math.cos(a) * d;
		var y = this.y + Math.sin(a) * d;
		var a = 1;
		if(a == null) {
			a = 1.0;
		}
		var _this1 = Assets.lib;
		var rndFunc = null;
		if(!(Object.prototype.hasOwnProperty.call(_this1.groups.h,"creepSplatter") && _this1.groups.h["creepSplatter"].frames.length > 0)) {
			throw haxe_Exception.thrown("Unknown group " + "creepSplatter");
		}
		var frame = (rndFunc == null ? Std.random : rndFunc)(_this1.groups.h["creepSplatter"].frames.length);
		var px = 0.0;
		var py = 0.0;
		if(py == null) {
			py = 0.0;
		}
		if(px == null) {
			px = 0.0;
		}
		if(frame == null) {
			frame = 0;
		}
		var frame1 = frame;
		if(frame1 == null) {
			frame1 = 0;
		}
		var g = _this1.groups.h["creepSplatter"];
		var fd = g == null ? null : g.frames[frame1];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "creepSplatter" + "#" + frame + "!");
		}
		var t = _this1.pages[fd.page].clone();
		var frame1 = frame;
		var px1 = px;
		var py1 = py;
		if(py1 == null) {
			py1 = 0.0;
		}
		if(px1 == null) {
			px1 = 0.0;
		}
		if(frame1 == null) {
			frame1 = 0;
		}
		var frame = frame1;
		if(frame == null) {
			frame = 0;
		}
		var g = _this1.groups.h["creepSplatter"];
		var fd = g == null ? null : g.frames[frame];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "creepSplatter" + "#" + frame1 + "!");
		}
		t.setPosition(fd.x,fd.y);
		t.setSize(fd.wid,fd.hei);
		t.dx = -(fd.realWid * px1 + fd.realX | 0);
		t.dy = -(fd.realHei * py1 + fd.realY | 0);
		var t1 = t;
		var limit = 500;
		if(_this.dirtGroups[_this.curDirtGroup].count() >= limit) {
			_this.curDirtGroup++;
			if(_this.curDirtGroup >= _this.dirtGroups.length) {
				_this.curDirtGroup = 0;
			}
			if(_this.dirtGroups[_this.curDirtGroup].count() >= limit) {
				_this.dirtGroups[_this.curDirtGroup].clear();
			}
		}
		var tg = _this.dirtGroups[_this.curDirtGroup];
		tg.content.add(x - t1.width * 0.5 | 0,y - t1.height * 0.5 | 0,1,1,1,a,t1);
		tg.invalidate();
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		var a = sign ? Math.random() * 6.28 * (Std.random(2) * 2 - 1) : Math.random() * 6.28;
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		var d = sign ? Math.random() * 20 * (Std.random(2) * 2 - 1) : Math.random() * 20;
		var _this = Game.ME.level;
		var x = this.x + Math.cos(a) * d;
		var y = this.y + Math.sin(a) * d;
		var a = 1;
		if(a == null) {
			a = 1.0;
		}
		var _this1 = Assets.lib;
		var rndFunc = null;
		if(!(Object.prototype.hasOwnProperty.call(_this1.groups.h,"creepSplatter") && _this1.groups.h["creepSplatter"].frames.length > 0)) {
			throw haxe_Exception.thrown("Unknown group " + "creepSplatter");
		}
		var frame = (rndFunc == null ? Std.random : rndFunc)(_this1.groups.h["creepSplatter"].frames.length);
		var px = 0.0;
		var py = 0.0;
		if(py == null) {
			py = 0.0;
		}
		if(px == null) {
			px = 0.0;
		}
		if(frame == null) {
			frame = 0;
		}
		var frame1 = frame;
		if(frame1 == null) {
			frame1 = 0;
		}
		var g = _this1.groups.h["creepSplatter"];
		var fd = g == null ? null : g.frames[frame1];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "creepSplatter" + "#" + frame + "!");
		}
		var t = _this1.pages[fd.page].clone();
		var frame1 = frame;
		var px1 = px;
		var py1 = py;
		if(py1 == null) {
			py1 = 0.0;
		}
		if(px1 == null) {
			px1 = 0.0;
		}
		if(frame1 == null) {
			frame1 = 0;
		}
		var frame = frame1;
		if(frame == null) {
			frame = 0;
		}
		var g = _this1.groups.h["creepSplatter"];
		var fd = g == null ? null : g.frames[frame];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "creepSplatter" + "#" + frame1 + "!");
		}
		t.setPosition(fd.x,fd.y);
		t.setSize(fd.wid,fd.hei);
		t.dx = -(fd.realWid * px1 + fd.realX | 0);
		t.dy = -(fd.realHei * py1 + fd.realY | 0);
		var t1 = t;
		var limit = 500;
		if(_this.dirtGroups[_this.curDirtGroup].count() >= limit) {
			_this.curDirtGroup++;
			if(_this.curDirtGroup >= _this.dirtGroups.length) {
				_this.curDirtGroup = 0;
			}
			if(_this.dirtGroups[_this.curDirtGroup].count() >= limit) {
				_this.dirtGroups[_this.curDirtGroup].clear();
			}
		}
		var tg = _this.dirtGroups[_this.curDirtGroup];
		tg.content.add(x - t1.width * 0.5 | 0,y - t1.height * 0.5 | 0,1,1,1,a,t1);
		tg.invalidate();
		var _this = Game.ME.level;
		var x = this.x;
		var y = this.y;
		var a = 0.5;
		if(a == null) {
			a = 1.0;
		}
		var _this1 = Assets.lib;
		var rndFunc = null;
		if(!(Object.prototype.hasOwnProperty.call(_this1.groups.h,"explosionDirt") && _this1.groups.h["explosionDirt"].frames.length > 0)) {
			throw haxe_Exception.thrown("Unknown group " + "explosionDirt");
		}
		var frame = (rndFunc == null ? Std.random : rndFunc)(_this1.groups.h["explosionDirt"].frames.length);
		var px = 0.0;
		var py = 0.0;
		if(py == null) {
			py = 0.0;
		}
		if(px == null) {
			px = 0.0;
		}
		if(frame == null) {
			frame = 0;
		}
		var frame1 = frame;
		if(frame1 == null) {
			frame1 = 0;
		}
		var g = _this1.groups.h["explosionDirt"];
		var fd = g == null ? null : g.frames[frame1];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "explosionDirt" + "#" + frame + "!");
		}
		var t = _this1.pages[fd.page].clone();
		var frame1 = frame;
		var px1 = px;
		var py1 = py;
		if(py1 == null) {
			py1 = 0.0;
		}
		if(px1 == null) {
			px1 = 0.0;
		}
		if(frame1 == null) {
			frame1 = 0;
		}
		var frame = frame1;
		if(frame == null) {
			frame = 0;
		}
		var g = _this1.groups.h["explosionDirt"];
		var fd = g == null ? null : g.frames[frame];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "explosionDirt" + "#" + frame1 + "!");
		}
		t.setPosition(fd.x,fd.y);
		t.setSize(fd.wid,fd.hei);
		t.dx = -(fd.realWid * px1 + fd.realX | 0);
		t.dy = -(fd.realHei * py1 + fd.realY | 0);
		var t1 = t;
		var limit = 500;
		if(_this.dirtGroups[_this.curDirtGroup].count() >= limit) {
			_this.curDirtGroup++;
			if(_this.curDirtGroup >= _this.dirtGroups.length) {
				_this.curDirtGroup = 0;
			}
			if(_this.dirtGroups[_this.curDirtGroup].count() >= limit) {
				_this.dirtGroups[_this.curDirtGroup].clear();
			}
		}
		var tg = _this.dirtGroups[_this.curDirtGroup];
		tg.content.add(x - t1.width * 0.5 | 0,y - t1.height * 0.5 | 0,1,1,1,a,t1);
		tg.invalidate();
		Game.ME.fx.explosion(this.x,this.y,30);
		var s = Assets.SBANK.explode04();
		var x = this.x;
		var y = this.y;
		var vol = 1;
		if(vol == null) {
			vol = 1.0;
		}
		s.play(null,vol);
		var s = Assets.SBANK.hive01();
		var x = this.x;
		var y = this.y;
		var vol = 0.7;
		if(vol == null) {
			vol = 1.0;
		}
		s.play(null,vol);
		var _g = 0;
		var _g1 = this.babies;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			e.stun();
		}
	}
	,onDispose: function() {
		en_Mob.prototype.onDispose.call(this);
		var _this = this.eye;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
		HxOverrides.remove(en_m_Creeper.ALL,this);
		this.babies = null;
	}
	,updateRender: function() {
		en_Mob.prototype.updateRender.call(this);
		var fh = this.spr;
		fh.posChanged = true;
		fh.y += 8;
		if(this.eye != null) {
			var _this = this.cd;
			var sign = null;
			if(sign == null) {
				sign = false;
			}
			var frames = sign ? (2 + Math.random() * 18) * (Std.random(2) * 2 - 1) : 2 + Math.random() * 18;
			var tmp;
			if(_this.fastCheck.h.hasOwnProperty(75497472)) {
				tmp = true;
			} else {
				var onComplete = null;
				var cur = _this._getCdObject(75497472);
				if(!(cur != null && frames < cur.frames && false)) {
					if(frames <= 0) {
						if(cur != null) {
							_this.fastCheck.remove(cur.k);
							var _this1 = _this.cds;
							var _g = 0;
							var _g1 = _this1.nalloc;
							while(_g < _g1) {
								var i = _g++;
								if(_this1.pool[i] == cur) {
									if(i >= 0 && i < _this1.nalloc) {
										if(_this1.nalloc > 1) {
											var tmp1 = _this1.pool[i];
											_this1.pool[i] = _this1.pool[_this1.nalloc - 1];
											_this1.pool[_this1.nalloc - 1] = tmp1;
											_this1.nalloc--;
										} else {
											_this1.nalloc = 0;
										}
									}
									break;
								}
							}
						}
					} else {
						_this.fastCheck.h[75497472] = true;
						if(cur != null) {
							cur.frames = frames;
							cur.initial = frames;
						} else {
							var _this1 = _this.cds;
							if(_this1.nalloc >= _this1.size) {
								throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
							}
							var e = _this1.pool[_this1.nalloc++];
							e.recycle();
							var cd = e;
							cd.k = 75497472;
							cd.frames = frames;
							cd.initial = frames;
						}
					}
					if(onComplete != null) {
						if(frames <= 0) {
							onComplete();
						} else {
							var cd = _this._getCdObject(75497472);
							if(cd == null) {
								throw haxe_Exception.thrown("cannot bind onComplete(" + 75497472 + "): cooldown " + 75497472 + " isn't running");
							}
							cd.onCompleteOnce = onComplete;
						}
					}
				}
				tmp = false;
			}
			if(!tmp) {
				var _this = this.eye;
				var x = this.x - 8;
				var sign = true;
				if(sign == null) {
					sign = false;
				}
				var x1 = sign ? Std.random(3) * (Std.random(2) * 2 - 1) : Std.random(3);
				var y = this.y - 7;
				var sign = true;
				if(sign == null) {
					sign = false;
				}
				var y1 = sign ? Std.random(2) * (Std.random(2) * 2 - 1) : Std.random(2);
				_this.posChanged = true;
				_this.x = x + x1;
				_this.posChanged = true;
				_this.y = y + y1;
			}
		}
	}
	,update: function() {
		en_Mob.prototype.update.call(this);
		var _this = this.spr;
		var v = 1 + Math.cos(this.ftime * 0.9 + this.uniqId) * 0.01;
		_this.posChanged = true;
		_this.scaleX = v;
		var _this = this.spr;
		var v = 1 + Math.cos(this.ftime * 0.1 + this.uniqId) * 0.04;
		_this.posChanged = true;
		_this.scaleY = v;
		var _this = this.cd;
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		var frames = this.secToFrames(sign ? (1.5 + Math.random() * 1.5) * (Std.random(2) * 2 - 1) : 1.5 + Math.random() * 1.5);
		var tmp;
		if(_this.fastCheck.h.hasOwnProperty(71303168)) {
			tmp = true;
		} else {
			var onComplete = null;
			var cur = _this._getCdObject(71303168);
			if(!(cur != null && frames < cur.frames && false)) {
				if(frames <= 0) {
					if(cur != null) {
						_this.fastCheck.remove(cur.k);
						var _this1 = _this.cds;
						var _g = 0;
						var _g1 = _this1.nalloc;
						while(_g < _g1) {
							var i = _g++;
							if(_this1.pool[i] == cur) {
								if(i >= 0 && i < _this1.nalloc) {
									if(_this1.nalloc > 1) {
										var tmp1 = _this1.pool[i];
										_this1.pool[i] = _this1.pool[_this1.nalloc - 1];
										_this1.pool[_this1.nalloc - 1] = tmp1;
										_this1.nalloc--;
									} else {
										_this1.nalloc = 0;
									}
								}
								break;
							}
						}
					}
				} else {
					_this.fastCheck.h[71303168] = true;
					if(cur != null) {
						cur.frames = frames;
						cur.initial = frames;
					} else {
						var _this1 = _this.cds;
						if(_this1.nalloc >= _this1.size) {
							throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
						}
						var e = _this1.pool[_this1.nalloc++];
						e.recycle();
						var cd = e;
						cd.k = 71303168;
						cd.frames = frames;
						cd.initial = frames;
					}
				}
				if(onComplete != null) {
					if(frames <= 0) {
						onComplete();
					} else {
						var cd = _this._getCdObject(71303168);
						if(cd == null) {
							throw haxe_Exception.thrown("cannot bind onComplete(" + 71303168 + "): cooldown " + 71303168 + " isn't running");
						}
						cd.onCompleteOnce = onComplete;
					}
				}
			}
			tmp = false;
		}
		if(!tmp && this.babies.length < 5) {
			var e = this.x;
			var sign = true;
			if(sign == null) {
				sign = false;
			}
			var e1 = sign ? (3 + Math.random() * 17) * (Std.random(2) * 2 - 1) : 3 + Math.random() * 17;
			var sign = true;
			if(sign == null) {
				sign = false;
			}
			var e2 = new en_m_Zergling(e + e1,this.y + (sign ? (3 + Math.random() * 17) * (Std.random(2) * 2 - 1) : 3 + Math.random() * 17),this);
			this.babies.push(e2);
			Game.ME.fx.spawn(e2.x,e2.y);
		}
		var i = 0;
		while(i < this.babies.length) if(this.babies[i].destroyed) {
			this.babies.splice(i,1);
		} else {
			++i;
		}
	}
	,__class__: en_m_Creeper
});
var en_m_Zergling = function(x,y,e) {
	this.dir = 1;
	var _gthis = this;
	en_Mob.call(this,x,y);
	var tmp;
	if(e == null) {
		var sign = true;
		if(sign == null) {
			sign = false;
		}
		tmp = x + (sign ? (3 + Math.random() * 2) * (Std.random(2) * 2 - 1) : 3 + Math.random() * 2);
	} else {
		tmp = e.x;
	}
	this.originX = tmp;
	var tmp;
	if(e == null) {
		var sign = true;
		if(sign == null) {
			sign = false;
		}
		tmp = y + (sign ? (3 + Math.random() * 2) * (Std.random(2) * 2 - 1) : 3 + Math.random() * 2);
	} else {
		tmp = e.y;
	}
	this.originY = tmp;
	this.tx = x;
	this.ty = y;
	this.ang = 0;
	this.precision = 0;
	this.initLife(2);
	this.prio = 1;
	var sign = null;
	if(sign == null) {
		sign = false;
	}
	this.spd = sign ? (0.2 + Math.random() * 0.2) * (Std.random(2) * 2 - 1) : 0.2 + Math.random() * 0.2;
	var xr = 0.5;
	var yr = 0.5;
	var smooth = null;
	var p = null;
	if(yr == null) {
		yr = 0.;
	}
	if(xr == null) {
		xr = 0.;
	}
	var s = new dn_heaps_slib_HSprite(Assets.lib,"dropShadow",0);
	if(p != null) {
		p.addChild(s);
	}
	var xRatio = xr;
	var yRatio = yr;
	if(yRatio == null) {
		yRatio = 0.5;
	}
	if(xRatio == null) {
		xRatio = 0.5;
	}
	var _this = s.pivot;
	_this.centerFactorX = xRatio;
	_this.centerFactorY = yRatio;
	_this.usingFactor = true;
	_this.isUndefined = false;
	if(smooth != null) {
		s.smooth = smooth;
	}
	this.shadow = s;
	Game.ME.scroller.add(this.shadow,Const.DP_MOB_SHADOWS);
	this.shadow.alpha = Const.SHADOW;
	Game.ME.scroller.add(this.spr,Const.DP_FLYERS);
	var _this = this.spr;
	if(_this._animManager == null) {
		_this._animManager = new dn_heaps_slib_AnimManager(_this);
		if(_this.onAnimManAlloc != null) {
			_this.onAnimManAlloc(_this._animManager);
		}
	}
	var _this1 = _this._animManager;
	_this1.genSpeed = 0.2;
	var _this = this.spr;
	if(_this._animManager == null) {
		_this._animManager = new dn_heaps_slib_AnimManager(_this);
		if(_this.onAnimManAlloc != null) {
			_this.onAnimManAlloc(_this._animManager);
		}
	}
	_this._animManager.registerStateAnim("zerglingStun",1,null,function() {
		return _gthis.isStunned();
	});
	var _this = this.spr;
	if(_this._animManager == null) {
		_this._animManager = new dn_heaps_slib_AnimManager(_this);
		if(_this.onAnimManAlloc != null) {
			_this.onAnimManAlloc(_this._animManager);
		}
	}
	_this._animManager.registerStateAnim("zergling",0);
};
$hxClasses["en.m.Zergling"] = en_m_Zergling;
en_m_Zergling.__name__ = "en.m.Zergling";
en_m_Zergling.__super__ = en_Mob;
en_m_Zergling.prototype = $extend(en_Mob.prototype,{
	stun: function() {
		var _this = this.cd;
		var frames = this.secToFrames(20);
		var allowLower = true;
		var onComplete = null;
		if(allowLower == null) {
			allowLower = true;
		}
		var cur = _this._getCdObject(33554432);
		if(!(cur != null && frames < cur.frames && !allowLower)) {
			if(frames <= 0) {
				if(cur != null) {
					_this.fastCheck.remove(cur.k);
					var _this1 = _this.cds;
					var _g = 0;
					var _g1 = _this1.nalloc;
					while(_g < _g1) {
						var i = _g++;
						if(_this1.pool[i] == cur) {
							if(i >= 0 && i < _this1.nalloc) {
								if(_this1.nalloc > 1) {
									var tmp = _this1.pool[i];
									_this1.pool[i] = _this1.pool[_this1.nalloc - 1];
									_this1.pool[_this1.nalloc - 1] = tmp;
									_this1.nalloc--;
								} else {
									_this1.nalloc = 0;
								}
							}
							break;
						}
					}
				}
			} else {
				_this.fastCheck.h[33554432] = true;
				if(cur != null) {
					cur.frames = frames;
					cur.initial = frames;
				} else {
					var _this1 = _this.cds;
					if(_this1.nalloc >= _this1.size) {
						throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
					}
					var e = _this1.pool[_this1.nalloc++];
					e.recycle();
					var cd = e;
					cd.k = 33554432;
					cd.frames = frames;
					cd.initial = frames;
				}
			}
			if(onComplete != null) {
				if(frames <= 0) {
					onComplete();
				} else {
					var cd = _this._getCdObject(33554432);
					if(cd == null) {
						throw haxe_Exception.thrown("cannot bind onComplete(" + 33554432 + "): cooldown " + 33554432 + " isn't running");
					}
					cd.onCompleteOnce = onComplete;
				}
			}
		}
		Game.ME.fx.stun(this.x,this.y);
	}
	,isStunned: function() {
		if(this.cd != null) {
			return this.cd.fastCheck.h.hasOwnProperty(33554432);
		} else {
			return false;
		}
	}
	,onDie: function() {
		en_Mob.prototype.onDie.call(this);
		var _this = Game.ME.level;
		var x = this.x;
		var y = this.y;
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		var a = sign ? (0.8 + Math.random() * 0.099999999999999978) * (Std.random(2) * 2 - 1) : 0.8 + Math.random() * 0.099999999999999978;
		if(a == null) {
			a = 1.0;
		}
		var _this1 = Assets.lib;
		var rndFunc = null;
		if(!(Object.prototype.hasOwnProperty.call(_this1.groups.h,"hole") && _this1.groups.h["hole"].frames.length > 0)) {
			throw haxe_Exception.thrown("Unknown group " + "hole");
		}
		var frame = (rndFunc == null ? Std.random : rndFunc)(_this1.groups.h["hole"].frames.length);
		var px = 0.0;
		var py = 0.0;
		if(py == null) {
			py = 0.0;
		}
		if(px == null) {
			px = 0.0;
		}
		if(frame == null) {
			frame = 0;
		}
		var frame1 = frame;
		if(frame1 == null) {
			frame1 = 0;
		}
		var g = _this1.groups.h["hole"];
		var fd = g == null ? null : g.frames[frame1];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "hole" + "#" + frame + "!");
		}
		var t = _this1.pages[fd.page].clone();
		var frame1 = frame;
		var px1 = px;
		var py1 = py;
		if(py1 == null) {
			py1 = 0.0;
		}
		if(px1 == null) {
			px1 = 0.0;
		}
		if(frame1 == null) {
			frame1 = 0;
		}
		var frame = frame1;
		if(frame == null) {
			frame = 0;
		}
		var g = _this1.groups.h["hole"];
		var fd = g == null ? null : g.frames[frame];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "hole" + "#" + frame1 + "!");
		}
		t.setPosition(fd.x,fd.y);
		t.setSize(fd.wid,fd.hei);
		t.dx = -(fd.realWid * px1 + fd.realX | 0);
		t.dy = -(fd.realHei * py1 + fd.realY | 0);
		var t1 = t;
		var limit = 500;
		if(_this.dirtGroups[_this.curDirtGroup].count() >= limit) {
			_this.curDirtGroup++;
			if(_this.curDirtGroup >= _this.dirtGroups.length) {
				_this.curDirtGroup = 0;
			}
			if(_this.dirtGroups[_this.curDirtGroup].count() >= limit) {
				_this.dirtGroups[_this.curDirtGroup].clear();
			}
		}
		var tg = _this.dirtGroups[_this.curDirtGroup];
		tg.content.add(x - t1.width * 0.5 | 0,y - t1.height * 0.5 | 0,1,1,1,a,t1);
		tg.invalidate();
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		var a = sign ? Math.random() * 6.28 * (Std.random(2) * 2 - 1) : Math.random() * 6.28;
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		var d = sign ? Math.random() * 20 * (Std.random(2) * 2 - 1) : Math.random() * 20;
		var _this = Game.ME.level;
		var x = this.x + Math.cos(a) * d;
		var y = this.y + Math.sin(a) * d;
		var a = 1;
		if(a == null) {
			a = 1.0;
		}
		var _this1 = Assets.lib;
		var rndFunc = null;
		if(!(Object.prototype.hasOwnProperty.call(_this1.groups.h,"creepSplatter") && _this1.groups.h["creepSplatter"].frames.length > 0)) {
			throw haxe_Exception.thrown("Unknown group " + "creepSplatter");
		}
		var frame = (rndFunc == null ? Std.random : rndFunc)(_this1.groups.h["creepSplatter"].frames.length);
		var px = 0.0;
		var py = 0.0;
		if(py == null) {
			py = 0.0;
		}
		if(px == null) {
			px = 0.0;
		}
		if(frame == null) {
			frame = 0;
		}
		var frame1 = frame;
		if(frame1 == null) {
			frame1 = 0;
		}
		var g = _this1.groups.h["creepSplatter"];
		var fd = g == null ? null : g.frames[frame1];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "creepSplatter" + "#" + frame + "!");
		}
		var t = _this1.pages[fd.page].clone();
		var frame1 = frame;
		var px1 = px;
		var py1 = py;
		if(py1 == null) {
			py1 = 0.0;
		}
		if(px1 == null) {
			px1 = 0.0;
		}
		if(frame1 == null) {
			frame1 = 0;
		}
		var frame = frame1;
		if(frame == null) {
			frame = 0;
		}
		var g = _this1.groups.h["creepSplatter"];
		var fd = g == null ? null : g.frames[frame];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "creepSplatter" + "#" + frame1 + "!");
		}
		t.setPosition(fd.x,fd.y);
		t.setSize(fd.wid,fd.hei);
		t.dx = -(fd.realWid * px1 + fd.realX | 0);
		t.dy = -(fd.realHei * py1 + fd.realY | 0);
		var t1 = t;
		var limit = 500;
		if(_this.dirtGroups[_this.curDirtGroup].count() >= limit) {
			_this.curDirtGroup++;
			if(_this.curDirtGroup >= _this.dirtGroups.length) {
				_this.curDirtGroup = 0;
			}
			if(_this.dirtGroups[_this.curDirtGroup].count() >= limit) {
				_this.dirtGroups[_this.curDirtGroup].clear();
			}
		}
		var tg = _this.dirtGroups[_this.curDirtGroup];
		tg.content.add(x - t1.width * 0.5 | 0,y - t1.height * 0.5 | 0,1,1,1,a,t1);
		tg.invalidate();
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		var a = sign ? Math.random() * 6.28 * (Std.random(2) * 2 - 1) : Math.random() * 6.28;
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		var d = sign ? Math.random() * 20 * (Std.random(2) * 2 - 1) : Math.random() * 20;
		var _this = Game.ME.level;
		var x = this.x + Math.cos(a) * d;
		var y = this.y + Math.sin(a) * d;
		var a = 1;
		if(a == null) {
			a = 1.0;
		}
		var _this1 = Assets.lib;
		var rndFunc = null;
		if(!(Object.prototype.hasOwnProperty.call(_this1.groups.h,"creepSplatter") && _this1.groups.h["creepSplatter"].frames.length > 0)) {
			throw haxe_Exception.thrown("Unknown group " + "creepSplatter");
		}
		var frame = (rndFunc == null ? Std.random : rndFunc)(_this1.groups.h["creepSplatter"].frames.length);
		var px = 0.0;
		var py = 0.0;
		if(py == null) {
			py = 0.0;
		}
		if(px == null) {
			px = 0.0;
		}
		if(frame == null) {
			frame = 0;
		}
		var frame1 = frame;
		if(frame1 == null) {
			frame1 = 0;
		}
		var g = _this1.groups.h["creepSplatter"];
		var fd = g == null ? null : g.frames[frame1];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "creepSplatter" + "#" + frame + "!");
		}
		var t = _this1.pages[fd.page].clone();
		var frame1 = frame;
		var px1 = px;
		var py1 = py;
		if(py1 == null) {
			py1 = 0.0;
		}
		if(px1 == null) {
			px1 = 0.0;
		}
		if(frame1 == null) {
			frame1 = 0;
		}
		var frame = frame1;
		if(frame == null) {
			frame = 0;
		}
		var g = _this1.groups.h["creepSplatter"];
		var fd = g == null ? null : g.frames[frame];
		if(fd == null) {
			throw haxe_Exception.thrown("Unknown group " + "creepSplatter" + "#" + frame1 + "!");
		}
		t.setPosition(fd.x,fd.y);
		t.setSize(fd.wid,fd.hei);
		t.dx = -(fd.realWid * px1 + fd.realX | 0);
		t.dy = -(fd.realHei * py1 + fd.realY | 0);
		var t1 = t;
		var limit = 500;
		if(_this.dirtGroups[_this.curDirtGroup].count() >= limit) {
			_this.curDirtGroup++;
			if(_this.curDirtGroup >= _this.dirtGroups.length) {
				_this.curDirtGroup = 0;
			}
			if(_this.dirtGroups[_this.curDirtGroup].count() >= limit) {
				_this.dirtGroups[_this.curDirtGroup].clear();
			}
		}
		var tg = _this.dirtGroups[_this.curDirtGroup];
		tg.content.add(x - t1.width * 0.5 | 0,y - t1.height * 0.5 | 0,1,1,1,a,t1);
		tg.invalidate();
		Game.ME.fx.explosion(this.x,this.y,7);
		var arr = [Assets.SBANK.death01,Assets.SBANK.death02,Assets.SBANK.death03];
		var s = arr[Std.random(arr.length)](1.0);
		var x = this.x;
		var y = this.y;
		var vol = 0.7;
		if(vol == null) {
			vol = 1.0;
		}
		s.play(null,vol);
	}
	,onDispose: function() {
		en_Mob.prototype.onDispose.call(this);
		var _this = this.shadow;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
	}
	,creep: function(canMutate) {
		if(canMutate && !this.isStunned()) {
			var found = false;
			var d = 200;
			var _g = 0;
			var _g1 = en_m_Creeper.ALL;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				var ax = this.x;
				var ay = this.y;
				var bx = e.x;
				var by = e.y;
				if((ax - bx) * (ax - bx) + (ay - by) * (ay - by) <= d * d) {
					found = true;
					break;
				}
			}
			if(!found) {
				new en_m_Creeper(this.x,this.y);
			}
		}
		var tmp = Game.ME.level;
		var tmp1 = this.x / Const.GRID | 0;
		var tmp2 = this.y / Const.GRID | 0;
		var tmp3;
		if(canMutate) {
			var sign = null;
			if(sign == null) {
				sign = false;
			}
			tmp3 = sign ? (2 + Std.random(2)) * (Std.random(2) * 2 - 1) : 2 + Std.random(2);
		} else {
			tmp3 = 1;
		}
		tmp.addCreepArea(tmp1,tmp2,tmp3);
		Game.ME.fx.gibs(this.x,this.y,"creepGib");
		this.destroyed = true;
	}
	,updateRender: function() {
		en_Mob.prototype.updateRender.call(this);
		var _this = this.spr;
		_this.posChanged = true;
		_this.scaleX = this.dir;
		if(this.shadow != null) {
			var _this = this.shadow;
			_this.posChanged = true;
			_this.x = this.spr.x;
			_this.posChanged = true;
			_this.y = this.spr.y + 12;
		}
		var fh = this.spr;
		var v = fh.x + Math.cos(this.ftime * 0.05);
		fh.posChanged = true;
		fh.x = v;
		var fh = this.spr;
		var v = fh.y + Math.cos(this.ftime * 0.1) * 2;
		fh.posChanged = true;
		fh.y = v;
	}
	,update: function() {
		en_Mob.prototype.update.call(this);
		var ax = this.tx;
		var ay = this.ty;
		var bx = this.x;
		var by = this.y;
		if((ax - bx) * (ax - bx) + (ay - by) * (ay - by) <= 25) {
			var tries = 100;
			while(true) {
				if(this.cd.fastCheck.h.hasOwnProperty(37748736)) {
					var sign = true;
					if(sign == null) {
						sign = false;
					}
					this.tx = this.originX + (sign ? Math.random() * 70 * (Std.random(2) * 2 - 1) : Math.random() * 70);
					var sign1 = true;
					if(sign1 == null) {
						sign1 = false;
					}
					this.ty = this.originY + (sign1 ? Math.random() * 70 * (Std.random(2) * 2 - 1) : Math.random() * 70);
				} else {
					var sign2 = true;
					if(sign2 == null) {
						sign2 = false;
					}
					this.tx = this.x + (sign2 ? (30 + Math.random() * 70) * (Std.random(2) * 2 - 1) : 30 + Math.random() * 70);
					var sign3 = true;
					if(sign3 == null) {
						sign3 = false;
					}
					this.ty = this.y + (sign3 ? (30 + Math.random() * 70) * (Std.random(2) * 2 - 1) : 30 + Math.random() * 70);
				}
				if(!(!Game.ME.isPlayArea(this.tx,this.ty) && tries-- > 0)) {
					break;
				}
			}
			if(tries <= 0) {
				this.tx = this.originX;
				this.ty = this.originY;
			}
			this.precision = 0;
			var _this = this.cd;
			var sign = null;
			if(sign == null) {
				sign = false;
			}
			var frames = sign ? (15 + Math.random() * 15) * (Std.random(2) * 2 - 1) : 15 + Math.random() * 15;
			var allowLower = true;
			var onComplete = null;
			if(allowLower == null) {
				allowLower = true;
			}
			var cur = _this._getCdObject(62914560);
			if(!(cur != null && frames < cur.frames && !allowLower)) {
				if(frames <= 0) {
					if(cur != null) {
						_this.fastCheck.remove(cur.k);
						var _this1 = _this.cds;
						var _g = 0;
						var _g1 = _this1.nalloc;
						while(_g < _g1) {
							var i = _g++;
							if(_this1.pool[i] == cur) {
								if(i >= 0 && i < _this1.nalloc) {
									if(_this1.nalloc > 1) {
										var tmp = _this1.pool[i];
										_this1.pool[i] = _this1.pool[_this1.nalloc - 1];
										_this1.pool[_this1.nalloc - 1] = tmp;
										_this1.nalloc--;
									} else {
										_this1.nalloc = 0;
									}
								}
								break;
							}
						}
					}
				} else {
					_this.fastCheck.h[62914560] = true;
					if(cur != null) {
						cur.frames = frames;
						cur.initial = frames;
					} else {
						var _this1 = _this.cds;
						if(_this1.nalloc >= _this1.size) {
							throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
						}
						var e = _this1.pool[_this1.nalloc++];
						e.recycle();
						var cd = e;
						cd.k = 62914560;
						cd.frames = frames;
						cd.initial = frames;
					}
				}
				if(onComplete != null) {
					if(frames <= 0) {
						onComplete();
					} else {
						var cd = _this._getCdObject(62914560);
						if(cd == null) {
							throw haxe_Exception.thrown("cannot bind onComplete(" + 62914560 + "): cooldown " + 62914560 + " isn't running");
						}
						cd.onCompleteOnce = onComplete;
					}
				}
			}
		}
		if(!this.cd.fastCheck.h.hasOwnProperty(62914560) && !this.isStunned()) {
			var ta = Math.atan2(this.ty - this.y,this.tx - this.x);
			var tmp = this;
			var tmp1 = tmp.ang;
			var a = ta;
			var b = this.ang;
			var a1 = a;
			while(a1 < -3.1415926535897931) a1 += 6.283185307179586;
			while(a1 > 3.141592653589793) a1 -= 6.283185307179586;
			a = a1;
			var a1 = b;
			while(a1 < -3.1415926535897931) a1 += 6.283185307179586;
			while(a1 > 3.141592653589793) a1 -= 6.283185307179586;
			b = a1;
			var a1 = a - b;
			while(a1 < -3.1415926535897931) a1 += 6.283185307179586;
			while(a1 > 3.141592653589793) a1 -= 6.283185307179586;
			tmp.ang = tmp1 + a1 * (0.1 + this.precision * 0.9);
			var y = this.precision + 0.05;
			this.precision = 1 < y ? 1 : y;
			this.dx += Math.cos(this.ang) * this.spd;
			this.dy += Math.sin(this.ang) * this.spd;
		}
		if(!this.isStunned()) {
			if(this.dx < -0.1) {
				this.dir = -1;
			}
			if(this.dx > -0.1) {
				this.dir = 1;
			}
			var _this = this.cd;
			var tmp;
			if(_this.fastCheck.h.hasOwnProperty(67108864)) {
				tmp = true;
			} else {
				var onComplete = null;
				var cur = _this._getCdObject(67108864);
				if(!(cur != null && 9 < cur.frames && false)) {
					_this.fastCheck.h[67108864] = true;
					if(cur != null) {
						cur.frames = 9;
						cur.initial = 9;
					} else {
						var _this1 = _this.cds;
						if(_this1.nalloc >= _this1.size) {
							throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
						}
						var e = _this1.pool[_this1.nalloc++];
						e.recycle();
						var cd = e;
						cd.k = 67108864;
						cd.frames = 9;
						cd.initial = 9;
					}
					if(onComplete != null) {
						var cd = _this._getCdObject(67108864);
						if(cd == null) {
							throw haxe_Exception.thrown("cannot bind onComplete(" + 67108864 + "): cooldown " + 67108864 + " isn't running");
						}
						cd.onCompleteOnce = onComplete;
					}
				}
				tmp = false;
			}
			if(!tmp) {
				var _g = 0;
				var _g1 = Scenery.ALL;
				while(_g < _g1.length) {
					var e = _g1[_g];
					++_g;
					var tmp;
					if(!e.exploded) {
						var ax = e.x | 0;
						var ay = e.y | 0;
						var bx = this.x;
						var by = this.y;
						tmp = (ax - bx) * (ax - bx) + (ay - by) * (ay - by) <= 900;
					} else {
						tmp = false;
					}
					if(tmp) {
						e.shake();
					}
				}
			}
			var _this = this.cd;
			var tmp;
			if(_this.fastCheck.h.hasOwnProperty(79691776)) {
				tmp = true;
			} else {
				var onComplete = null;
				var cur = _this._getCdObject(79691776);
				if(!(cur != null && 30 < cur.frames && false)) {
					_this.fastCheck.h[79691776] = true;
					if(cur != null) {
						cur.frames = 30;
						cur.initial = 30;
					} else {
						var _this1 = _this.cds;
						if(_this1.nalloc >= _this1.size) {
							throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this1.size + ")");
						}
						var e = _this1.pool[_this1.nalloc++];
						e.recycle();
						var cd = e;
						cd.k = 79691776;
						cd.frames = 30;
						cd.initial = 30;
					}
					if(onComplete != null) {
						var cd = _this._getCdObject(79691776);
						if(cd == null) {
							throw haxe_Exception.thrown("cannot bind onComplete(" + 79691776 + "): cooldown " + 79691776 + " isn't running");
						}
						cd.onCompleteOnce = onComplete;
					}
				}
				tmp = false;
			}
			if(!tmp) {
				var level = Game.ME.level;
				if(level.creepMap.h[(this.x / Const.GRID | 0) - 1 + (this.y / Const.GRID | 0) * level.wid] != true && level.creepMap.h[(this.x / Const.GRID | 0) + 1 + (this.y / Const.GRID | 0) * level.wid] != true && level.creepMap.h[(this.x / Const.GRID | 0) + ((this.y / Const.GRID | 0) - 1) * level.wid] != true && level.creepMap.h[(this.x / Const.GRID | 0) + ((this.y / Const.GRID | 0) + 1) * level.wid] != true) {
					if(!this.cd.fastCheck.h.hasOwnProperty(37748736)) {
						this.creep(true);
					}
				}
			}
		}
	}
	,__class__: en_m_Zergling
});
var format_gif_Block = $hxEnums["format.gif.Block"] = { __ename__:true,__constructs__:null
	,BFrame: ($_=function(frame) { return {_hx_index:0,frame:frame,__enum__:"format.gif.Block",toString:$estr}; },$_._hx_name="BFrame",$_.__params__ = ["frame"],$_)
	,BExtension: ($_=function(extension) { return {_hx_index:1,extension:extension,__enum__:"format.gif.Block",toString:$estr}; },$_._hx_name="BExtension",$_.__params__ = ["extension"],$_)
	,BEOF: {_hx_name:"BEOF",_hx_index:2,__enum__:"format.gif.Block",toString:$estr}
};
format_gif_Block.__constructs__ = [format_gif_Block.BFrame,format_gif_Block.BExtension,format_gif_Block.BEOF];
format_gif_Block.__empty_constructs__ = [format_gif_Block.BEOF];
var format_gif_Extension = $hxEnums["format.gif.Extension"] = { __ename__:true,__constructs__:null
	,EGraphicControl: ($_=function(gce) { return {_hx_index:0,gce:gce,__enum__:"format.gif.Extension",toString:$estr}; },$_._hx_name="EGraphicControl",$_.__params__ = ["gce"],$_)
	,EComment: ($_=function(text) { return {_hx_index:1,text:text,__enum__:"format.gif.Extension",toString:$estr}; },$_._hx_name="EComment",$_.__params__ = ["text"],$_)
	,EText: ($_=function(pte) { return {_hx_index:2,pte:pte,__enum__:"format.gif.Extension",toString:$estr}; },$_._hx_name="EText",$_.__params__ = ["pte"],$_)
	,EApplicationExtension: ($_=function(ext) { return {_hx_index:3,ext:ext,__enum__:"format.gif.Extension",toString:$estr}; },$_._hx_name="EApplicationExtension",$_.__params__ = ["ext"],$_)
	,EUnknown: ($_=function(id,data) { return {_hx_index:4,id:id,data:data,__enum__:"format.gif.Extension",toString:$estr}; },$_._hx_name="EUnknown",$_.__params__ = ["id","data"],$_)
};
format_gif_Extension.__constructs__ = [format_gif_Extension.EGraphicControl,format_gif_Extension.EComment,format_gif_Extension.EText,format_gif_Extension.EApplicationExtension,format_gif_Extension.EUnknown];
format_gif_Extension.__empty_constructs__ = [];
var format_gif_ApplicationExtension = $hxEnums["format.gif.ApplicationExtension"] = { __ename__:true,__constructs__:null
	,AENetscapeLooping: ($_=function(loops) { return {_hx_index:0,loops:loops,__enum__:"format.gif.ApplicationExtension",toString:$estr}; },$_._hx_name="AENetscapeLooping",$_.__params__ = ["loops"],$_)
	,AEUnknown: ($_=function(name,version,data) { return {_hx_index:1,name:name,version:version,data:data,__enum__:"format.gif.ApplicationExtension",toString:$estr}; },$_._hx_name="AEUnknown",$_.__params__ = ["name","version","data"],$_)
};
format_gif_ApplicationExtension.__constructs__ = [format_gif_ApplicationExtension.AENetscapeLooping,format_gif_ApplicationExtension.AEUnknown];
format_gif_ApplicationExtension.__empty_constructs__ = [];
var format_gif_Version = $hxEnums["format.gif.Version"] = { __ename__:true,__constructs__:null
	,GIF87a: {_hx_name:"GIF87a",_hx_index:0,__enum__:"format.gif.Version",toString:$estr}
	,GIF89a: {_hx_name:"GIF89a",_hx_index:1,__enum__:"format.gif.Version",toString:$estr}
	,Unknown: ($_=function(version) { return {_hx_index:2,version:version,__enum__:"format.gif.Version",toString:$estr}; },$_._hx_name="Unknown",$_.__params__ = ["version"],$_)
};
format_gif_Version.__constructs__ = [format_gif_Version.GIF87a,format_gif_Version.GIF89a,format_gif_Version.Unknown];
format_gif_Version.__empty_constructs__ = [format_gif_Version.GIF87a,format_gif_Version.GIF89a];
var format_gif_DisposalMethod = $hxEnums["format.gif.DisposalMethod"] = { __ename__:true,__constructs__:null
	,UNSPECIFIED: {_hx_name:"UNSPECIFIED",_hx_index:0,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,NO_ACTION: {_hx_name:"NO_ACTION",_hx_index:1,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,FILL_BACKGROUND: {_hx_name:"FILL_BACKGROUND",_hx_index:2,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,RENDER_PREVIOUS: {_hx_name:"RENDER_PREVIOUS",_hx_index:3,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,UNDEFINED: ($_=function(index) { return {_hx_index:4,index:index,__enum__:"format.gif.DisposalMethod",toString:$estr}; },$_._hx_name="UNDEFINED",$_.__params__ = ["index"],$_)
};
format_gif_DisposalMethod.__constructs__ = [format_gif_DisposalMethod.UNSPECIFIED,format_gif_DisposalMethod.NO_ACTION,format_gif_DisposalMethod.FILL_BACKGROUND,format_gif_DisposalMethod.RENDER_PREVIOUS,format_gif_DisposalMethod.UNDEFINED];
format_gif_DisposalMethod.__empty_constructs__ = [format_gif_DisposalMethod.UNSPECIFIED,format_gif_DisposalMethod.NO_ACTION,format_gif_DisposalMethod.FILL_BACKGROUND,format_gif_DisposalMethod.RENDER_PREVIOUS];
var format_gif_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(false);
};
$hxClasses["format.gif.Reader"] = format_gif_Reader;
format_gif_Reader.__name__ = "format.gif.Reader";
format_gif_Reader.prototype = {
	read: function() {
		var b = 71;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 73;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 70;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var gifVer = this.i.readString(3);
		var version = format_gif_Version.GIF89a;
		switch(gifVer) {
		case "87a":
			version = format_gif_Version.GIF87a;
			break;
		case "89a":
			version = format_gif_Version.GIF89a;
			break;
		default:
			version = format_gif_Version.Unknown(gifVer);
		}
		var width = this.i.readUInt16();
		var height = this.i.readUInt16();
		var packedField = this.i.readByte();
		var bgIndex = this.i.readByte();
		var pixelAspectRatio = this.i.readByte();
		if(pixelAspectRatio != 0) {
			pixelAspectRatio = (pixelAspectRatio + 15) / 64;
		} else {
			pixelAspectRatio = 1;
		}
		var lsd = { width : width, height : height, hasGlobalColorTable : (packedField & 128) == 128, colorResolution : (packedField & 112) >>> 4, sorted : (packedField & 8) == 8, globalColorTableSize : 2 << (packedField & 7), backgroundColorIndex : bgIndex, pixelAspectRatio : pixelAspectRatio};
		var gct = null;
		if(lsd.hasGlobalColorTable) {
			gct = this.readColorTable(lsd.globalColorTableSize);
		}
		var blocks = new haxe_ds_List();
		while(true) {
			var b = this.readBlock();
			blocks.add(b);
			if(b == format_gif_Block.BEOF) {
				break;
			}
		}
		return { version : version, logicalScreenDescriptor : lsd, globalColorTable : gct, blocks : blocks};
	}
	,readBlock: function() {
		var blockID = this.i.readByte();
		switch(blockID) {
		case 33:
			return this.readExtension();
		case 44:
			return this.readImage();
		case 59:
			return format_gif_Block.BEOF;
		}
		return format_gif_Block.BEOF;
	}
	,readImage: function() {
		var x = this.i.readUInt16();
		var y = this.i.readUInt16();
		var width = this.i.readUInt16();
		var height = this.i.readUInt16();
		var packed = this.i.readByte();
		var localColorTable = (packed & 128) == 128;
		var interlaced = (packed & 64) == 64;
		var sorted = (packed & 32) == 32;
		var localColorTableSize = 2 << (packed & 7);
		var lct = null;
		if(localColorTable) {
			lct = this.readColorTable(localColorTableSize);
		}
		return format_gif_Block.BFrame({ x : x, y : y, width : width, height : height, localColorTable : localColorTable, interlaced : interlaced, sorted : sorted, localColorTableSize : localColorTableSize, pixels : this.readPixels(width,height,interlaced), colorTable : lct});
	}
	,readPixels: function(width,height,interlaced) {
		var input = this.i;
		var pixelsCount = width * height;
		var pixels = new haxe_io_Bytes(new ArrayBuffer(pixelsCount));
		var minCodeSize = input.readByte();
		var blockSize = input.readByte() - 1;
		var bits = input.readByte();
		var bitsCount = 8;
		var clearCode = 1 << minCodeSize;
		var eoiCode = clearCode + 1;
		var codeSize = minCodeSize + 1;
		var codeSizeLimit = 1 << codeSize;
		var codeMask = codeSizeLimit - 1;
		var baseDict = [];
		var _g = 0;
		var _g1 = clearCode;
		while(_g < _g1) {
			var i = _g++;
			baseDict[i] = [i];
		}
		var dict = [];
		var dictLen = clearCode + 2;
		var newRecord;
		var i = 0;
		var code = 0;
		var last;
		while(i < pixelsCount) {
			last = code;
			while(bitsCount < codeSize) {
				if(blockSize == 0) {
					break;
				}
				bits |= input.readByte() << bitsCount;
				bitsCount += 8;
				--blockSize;
				if(blockSize == 0) {
					blockSize = input.readByte();
				}
			}
			code = bits & codeMask;
			bits >>= codeSize;
			bitsCount -= codeSize;
			if(code == clearCode) {
				dict = baseDict.slice();
				dictLen = clearCode + 2;
				codeSize = minCodeSize + 1;
				codeSizeLimit = 1 << codeSize;
				codeMask = codeSizeLimit - 1;
				continue;
			}
			if(code == eoiCode) {
				break;
			}
			if(code < dictLen) {
				if(last != clearCode) {
					newRecord = dict[last].slice();
					newRecord.push(dict[code][0]);
					dict[dictLen++] = newRecord;
				}
			} else {
				if(code != dictLen) {
					throw haxe_Exception.thrown("Invalid LZW code. Excepted: " + dictLen + ", got: " + code);
				}
				newRecord = dict[last].slice();
				newRecord.push(newRecord[0]);
				dict[dictLen++] = newRecord;
			}
			newRecord = dict[code];
			var _g = 0;
			while(_g < newRecord.length) {
				var item = newRecord[_g];
				++_g;
				pixels.b[i++] = item;
			}
			if(dictLen == codeSizeLimit && codeSize < 12) {
				++codeSize;
				codeSizeLimit = 1 << codeSize;
				codeMask = codeSizeLimit - 1;
			}
		}
		while(blockSize > 0) {
			input.readByte();
			--blockSize;
			if(blockSize == 0) {
				blockSize = input.readByte();
			}
		}
		while(i < pixelsCount) pixels.b[i++] = 0;
		if(interlaced) {
			var buffer = new haxe_io_Bytes(new ArrayBuffer(pixelsCount));
			var offset = this.deinterlace(pixels,buffer,8,0,0,width,height);
			offset = this.deinterlace(pixels,buffer,8,4,offset,width,height);
			offset = this.deinterlace(pixels,buffer,4,2,offset,width,height);
			this.deinterlace(pixels,buffer,2,1,offset,width,height);
			pixels = buffer;
		}
		return pixels;
	}
	,deinterlace: function(input,output,step,y,offset,width,height) {
		while(y < height) {
			output.blit(y * width,input,offset,width);
			offset += width;
			y += step;
		}
		return offset;
	}
	,readExtension: function() {
		var subId = this.i.readByte();
		switch(subId) {
		case 1:
			if(this.i.readByte() != 12) {
				throw haxe_Exception.thrown("Incorrect size of Plain Text Extension introducer block.");
			}
			var tmp = this.i.readUInt16();
			var tmp1 = this.i.readUInt16();
			var tmp2 = this.i.readUInt16();
			var tmp3 = this.i.readUInt16();
			var tmp4 = this.i.readByte();
			var tmp5 = this.i.readByte();
			var tmp6 = this.i.readByte();
			var tmp7 = this.i.readByte();
			var buffer = new haxe_io_BytesOutput();
			var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
			var len = this.i.readByte();
			while(len != 0) {
				this.i.readBytes(bytes,0,len);
				buffer.writeBytes(bytes,0,len);
				len = this.i.readByte();
			}
			buffer.flush();
			bytes = buffer.getBytes();
			buffer.close();
			return format_gif_Block.BExtension(format_gif_Extension.EText({ textGridX : tmp, textGridY : tmp1, textGridWidth : tmp2, textGridHeight : tmp3, charCellWidth : tmp4, charCellHeight : tmp5, textForegroundColorIndex : tmp6, textBackgroundColorIndex : tmp7, text : bytes.toString()}));
		case 249:
			if(this.i.readByte() != 4) {
				throw haxe_Exception.thrown("Incorrect Graphic Control Extension block size!");
			}
			var packed = this.i.readByte();
			var disposalMethod;
			switch((packed & 28) >> 2) {
			case 0:
				disposalMethod = format_gif_DisposalMethod.UNSPECIFIED;
				break;
			case 1:
				disposalMethod = format_gif_DisposalMethod.NO_ACTION;
				break;
			case 2:
				disposalMethod = format_gif_DisposalMethod.FILL_BACKGROUND;
				break;
			case 3:
				disposalMethod = format_gif_DisposalMethod.RENDER_PREVIOUS;
				break;
			default:
				disposalMethod = format_gif_DisposalMethod.UNDEFINED((packed & 28) >> 2);
			}
			var b = format_gif_Block.BExtension(format_gif_Extension.EGraphicControl({ disposalMethod : disposalMethod, userInput : (packed & 2) == 2, hasTransparentColor : (packed & 1) == 1, delay : this.i.readUInt16(), transparentIndex : this.i.readByte()}));
			this.i.readByte();
			return b;
		case 254:
			var buffer = new haxe_io_BytesOutput();
			var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
			var len = this.i.readByte();
			while(len != 0) {
				this.i.readBytes(bytes,0,len);
				buffer.writeBytes(bytes,0,len);
				len = this.i.readByte();
			}
			buffer.flush();
			bytes = buffer.getBytes();
			buffer.close();
			return format_gif_Block.BExtension(format_gif_Extension.EComment(bytes.toString()));
		case 255:
			return this.readApplicationExtension();
		default:
			var buffer = new haxe_io_BytesOutput();
			var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
			var len = this.i.readByte();
			while(len != 0) {
				this.i.readBytes(bytes,0,len);
				buffer.writeBytes(bytes,0,len);
				len = this.i.readByte();
			}
			buffer.flush();
			bytes = buffer.getBytes();
			buffer.close();
			return format_gif_Block.BExtension(format_gif_Extension.EUnknown(subId,bytes));
		}
	}
	,readApplicationExtension: function() {
		if(this.i.readByte() != 11) {
			throw haxe_Exception.thrown("Incorrect size of Application Extension introducer block.");
		}
		var name = this.i.readString(8);
		var version = this.i.readString(3);
		var buffer = new haxe_io_BytesOutput();
		var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
		var len = this.i.readByte();
		while(len != 0) {
			this.i.readBytes(bytes,0,len);
			buffer.writeBytes(bytes,0,len);
			len = this.i.readByte();
		}
		buffer.flush();
		bytes = buffer.getBytes();
		buffer.close();
		var data = bytes;
		if(name == "NETSCAPE" && version == "2.0" && data.b[0] == 1) {
			return format_gif_Block.BExtension(format_gif_Extension.EApplicationExtension(format_gif_ApplicationExtension.AENetscapeLooping(data.b[1] | data.b[2] << 8)));
		}
		return format_gif_Block.BExtension(format_gif_Extension.EApplicationExtension(format_gif_ApplicationExtension.AEUnknown(name,version,data)));
	}
	,readColorTable: function(size) {
		size *= 3;
		var output = new haxe_io_Bytes(new ArrayBuffer(size));
		var c = 0;
		while(c < size) {
			var v = this.i.readByte();
			output.b[c] = v;
			var v1 = this.i.readByte();
			output.b[c + 1] = v1;
			var v2 = this.i.readByte();
			output.b[c + 2] = v2;
			c += 3;
		}
		return output;
	}
	,__class__: format_gif_Reader
};
var format_gif_Tools = function() { };
$hxClasses["format.gif.Tools"] = format_gif_Tools;
format_gif_Tools.__name__ = "format.gif.Tools";
format_gif_Tools.extractFullBGRA = function(data,frameIndex) {
	var gce = null;
	var frameCaret = 0;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(data.logicalScreenDescriptor.width * data.logicalScreenDescriptor.height * 4));
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		switch(block._hx_index) {
		case 0:
			var frame = block.frame;
			var ct = frame.localColorTable ? frame.colorTable : data.globalColorTable;
			if(ct == null) {
				throw haxe_Exception.thrown("Frame does not have a color table!");
			}
			var transparentIndex = gce != null && gce.hasTransparentColor ? gce.transparentIndex * 3 : -1;
			var pixels = frame.pixels;
			var x = 0;
			var writeCaret = (frame.y * data.logicalScreenDescriptor.width + frame.x) * 4;
			var lineSkip = (data.logicalScreenDescriptor.width - frame.width) * 4 + 4;
			var disposalMethod = frameCaret != frameIndex && gce != null ? gce.disposalMethod : format_gif_DisposalMethod.NO_ACTION;
			switch(disposalMethod._hx_index) {
			case 2:
				var _g = 0;
				var _g1 = pixels.length;
				while(_g < _g1) {
					var i = _g++;
					bytes.b[writeCaret] = 0;
					bytes.b[writeCaret + 1] = 0;
					bytes.b[writeCaret + 2] = 0;
					bytes.b[writeCaret + 3] = 0;
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
				break;
			case 3:
				break;
			default:
				var _g2 = 0;
				var _g3 = pixels.length;
				while(_g2 < _g3) {
					var i1 = _g2++;
					var index = pixels.b[i1] * 3;
					if(transparentIndex != index) {
						bytes.b[writeCaret] = ct.b[index + 2];
						bytes.b[writeCaret + 1] = ct.b[index + 1];
						bytes.b[writeCaret + 2] = ct.b[index];
						bytes.b[writeCaret + 3] = 255;
					}
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
			}
			if(frameCaret == frameIndex) {
				return bytes;
			}
			++frameCaret;
			gce = null;
			break;
		case 1:
			var ext = block.extension;
			if(ext._hx_index == 0) {
				var g = ext.gce;
				gce = g;
			}
			break;
		default:
		}
	}
	return bytes;
};
format_gif_Tools.extractFullRGBA = function(data,frameIndex) {
	var gce = null;
	var frameCaret = 0;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(data.logicalScreenDescriptor.width * data.logicalScreenDescriptor.height * 4));
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		switch(block._hx_index) {
		case 0:
			var frame = block.frame;
			var ct = frame.localColorTable ? frame.colorTable : data.globalColorTable;
			if(ct == null) {
				throw haxe_Exception.thrown("Frame does not have a color table!");
			}
			var transparentIndex = gce != null && gce.hasTransparentColor ? gce.transparentIndex * 3 : -1;
			var pixels = frame.pixels;
			var x = 0;
			var writeCaret = (frame.y * data.logicalScreenDescriptor.width + frame.x) * 4;
			var lineSkip = (data.logicalScreenDescriptor.width - frame.width) * 4 + 4;
			var disposalMethod = frameCaret != frameIndex && gce != null ? gce.disposalMethod : format_gif_DisposalMethod.NO_ACTION;
			switch(disposalMethod._hx_index) {
			case 2:
				var _g = 0;
				var _g1 = pixels.length;
				while(_g < _g1) {
					var i = _g++;
					bytes.b[writeCaret] = 0;
					bytes.b[writeCaret + 1] = 0;
					bytes.b[writeCaret + 2] = 0;
					bytes.b[writeCaret + 3] = 0;
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
				break;
			case 3:
				break;
			default:
				var _g2 = 0;
				var _g3 = pixels.length;
				while(_g2 < _g3) {
					var i1 = _g2++;
					var index = pixels.b[i1] * 3;
					if(transparentIndex != index) {
						bytes.b[writeCaret] = ct.b[index];
						bytes.b[writeCaret + 1] = ct.b[index + 1];
						bytes.b[writeCaret + 2] = ct.b[index + 2];
						bytes.b[writeCaret + 3] = 255;
					}
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
			}
			if(frameCaret == frameIndex) {
				return bytes;
			}
			++frameCaret;
			gce = null;
			break;
		case 1:
			var ext = block.extension;
			if(ext._hx_index == 0) {
				var g = ext.gce;
				gce = g;
			}
			break;
		default:
		}
	}
	return bytes;
};
var format_mp3_SamplingRate = $hxEnums["format.mp3.SamplingRate"] = { __ename__:true,__constructs__:null
	,SR_8000: {_hx_name:"SR_8000",_hx_index:0,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_11025: {_hx_name:"SR_11025",_hx_index:1,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_12000: {_hx_name:"SR_12000",_hx_index:2,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_22050: {_hx_name:"SR_22050",_hx_index:3,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_24000: {_hx_name:"SR_24000",_hx_index:4,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_32000: {_hx_name:"SR_32000",_hx_index:5,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_44100: {_hx_name:"SR_44100",_hx_index:6,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_48000: {_hx_name:"SR_48000",_hx_index:7,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_Bad: {_hx_name:"SR_Bad",_hx_index:8,__enum__:"format.mp3.SamplingRate",toString:$estr}
};
format_mp3_SamplingRate.__constructs__ = [format_mp3_SamplingRate.SR_8000,format_mp3_SamplingRate.SR_11025,format_mp3_SamplingRate.SR_12000,format_mp3_SamplingRate.SR_22050,format_mp3_SamplingRate.SR_24000,format_mp3_SamplingRate.SR_32000,format_mp3_SamplingRate.SR_44100,format_mp3_SamplingRate.SR_48000,format_mp3_SamplingRate.SR_Bad];
format_mp3_SamplingRate.__empty_constructs__ = [format_mp3_SamplingRate.SR_8000,format_mp3_SamplingRate.SR_11025,format_mp3_SamplingRate.SR_12000,format_mp3_SamplingRate.SR_22050,format_mp3_SamplingRate.SR_24000,format_mp3_SamplingRate.SR_32000,format_mp3_SamplingRate.SR_44100,format_mp3_SamplingRate.SR_48000,format_mp3_SamplingRate.SR_Bad];
var format_mp3_Bitrate = $hxEnums["format.mp3.Bitrate"] = { __ename__:true,__constructs__:null
	,BR_8: {_hx_name:"BR_8",_hx_index:0,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_16: {_hx_name:"BR_16",_hx_index:1,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_24: {_hx_name:"BR_24",_hx_index:2,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_32: {_hx_name:"BR_32",_hx_index:3,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_40: {_hx_name:"BR_40",_hx_index:4,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_48: {_hx_name:"BR_48",_hx_index:5,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_56: {_hx_name:"BR_56",_hx_index:6,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_64: {_hx_name:"BR_64",_hx_index:7,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_80: {_hx_name:"BR_80",_hx_index:8,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_96: {_hx_name:"BR_96",_hx_index:9,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_112: {_hx_name:"BR_112",_hx_index:10,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_128: {_hx_name:"BR_128",_hx_index:11,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_144: {_hx_name:"BR_144",_hx_index:12,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_160: {_hx_name:"BR_160",_hx_index:13,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_176: {_hx_name:"BR_176",_hx_index:14,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_192: {_hx_name:"BR_192",_hx_index:15,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_224: {_hx_name:"BR_224",_hx_index:16,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_256: {_hx_name:"BR_256",_hx_index:17,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_288: {_hx_name:"BR_288",_hx_index:18,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_320: {_hx_name:"BR_320",_hx_index:19,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_352: {_hx_name:"BR_352",_hx_index:20,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_384: {_hx_name:"BR_384",_hx_index:21,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_416: {_hx_name:"BR_416",_hx_index:22,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_448: {_hx_name:"BR_448",_hx_index:23,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_Free: {_hx_name:"BR_Free",_hx_index:24,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_Bad: {_hx_name:"BR_Bad",_hx_index:25,__enum__:"format.mp3.Bitrate",toString:$estr}
};
format_mp3_Bitrate.__constructs__ = [format_mp3_Bitrate.BR_8,format_mp3_Bitrate.BR_16,format_mp3_Bitrate.BR_24,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_40,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_144,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_176,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_288,format_mp3_Bitrate.BR_320,format_mp3_Bitrate.BR_352,format_mp3_Bitrate.BR_384,format_mp3_Bitrate.BR_416,format_mp3_Bitrate.BR_448,format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_Bad];
format_mp3_Bitrate.__empty_constructs__ = [format_mp3_Bitrate.BR_8,format_mp3_Bitrate.BR_16,format_mp3_Bitrate.BR_24,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_40,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_144,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_176,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_288,format_mp3_Bitrate.BR_320,format_mp3_Bitrate.BR_352,format_mp3_Bitrate.BR_384,format_mp3_Bitrate.BR_416,format_mp3_Bitrate.BR_448,format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_Bad];
var format_mp3_MPEG = function() { };
$hxClasses["format.mp3.MPEG"] = format_mp3_MPEG;
format_mp3_MPEG.__name__ = "format.mp3.MPEG";
format_mp3_MPEG.enum2Num = function(m) {
	switch(m._hx_index) {
	case 0:
		return 3;
	case 1:
		return 2;
	case 2:
		return 0;
	case 3:
		return format_mp3_MPEG.Reserved;
	}
};
format_mp3_MPEG.num2Enum = function(m) {
	switch(m) {
	case 0:
		return format_mp3_MPEGVersion.MPEG_V25;
	case 2:
		return format_mp3_MPEGVersion.MPEG_V2;
	case 3:
		return format_mp3_MPEGVersion.MPEG_V1;
	default:
		return format_mp3_MPEGVersion.MPEG_Reserved;
	}
};
format_mp3_MPEG.srEnum2Num = function(sr) {
	switch(sr._hx_index) {
	case 0:
		return 8000;
	case 1:
		return 11025;
	case 2:
		return 12000;
	case 3:
		return 22050;
	case 4:
		return 24000;
	case 5:
		return 32000;
	case 6:
		return 44100;
	case 7:
		return 48000;
	case 8:
		return -1;
	}
};
format_mp3_MPEG.bitrateEnum2Num = function(br) {
	switch(br._hx_index) {
	case 0:
		return 8;
	case 1:
		return 16;
	case 2:
		return 24;
	case 3:
		return 32;
	case 4:
		return 40;
	case 5:
		return 48;
	case 6:
		return 56;
	case 7:
		return 64;
	case 8:
		return 80;
	case 9:
		return 96;
	case 10:
		return 112;
	case 11:
		return 128;
	case 12:
		return 144;
	case 13:
		return 160;
	case 14:
		return 176;
	case 15:
		return 192;
	case 16:
		return 224;
	case 17:
		return 256;
	case 18:
		return 288;
	case 19:
		return 320;
	case 20:
		return 352;
	case 21:
		return 384;
	case 22:
		return 416;
	case 23:
		return 448;
	case 24:
		return 0;
	case 25:
		return -1;
	}
};
var format_mp3_CLayer = function() { };
$hxClasses["format.mp3.CLayer"] = format_mp3_CLayer;
format_mp3_CLayer.__name__ = "format.mp3.CLayer";
format_mp3_CLayer.num2Enum = function(l) {
	switch(l) {
	case 1:
		return format_mp3_Layer.Layer3;
	case 2:
		return format_mp3_Layer.Layer2;
	case 3:
		return format_mp3_Layer.Layer1;
	default:
		return format_mp3_Layer.LayerReserved;
	}
};
var format_mp3_CChannelMode = function() { };
$hxClasses["format.mp3.CChannelMode"] = format_mp3_CChannelMode;
format_mp3_CChannelMode.__name__ = "format.mp3.CChannelMode";
format_mp3_CChannelMode.num2Enum = function(c) {
	switch(c) {
	case 0:
		return format_mp3_ChannelMode.Stereo;
	case 1:
		return format_mp3_ChannelMode.JointStereo;
	case 2:
		return format_mp3_ChannelMode.DualChannel;
	case 3:
		return format_mp3_ChannelMode.Mono;
	default:
		throw haxe_Exception.thrown("assert");
	}
};
var format_mp3_CEmphasis = function() { };
$hxClasses["format.mp3.CEmphasis"] = format_mp3_CEmphasis;
format_mp3_CEmphasis.__name__ = "format.mp3.CEmphasis";
format_mp3_CEmphasis.num2Enum = function(c) {
	switch(c) {
	case 0:
		return format_mp3_Emphasis.NoEmphasis;
	case 1:
		return format_mp3_Emphasis.Ms50_15;
	case 2:
		return format_mp3_Emphasis.InvalidEmphasis;
	case 3:
		return format_mp3_Emphasis.CCIT_J17;
	default:
		throw haxe_Exception.thrown("assert");
	}
};
var format_mp3_MPEGVersion = $hxEnums["format.mp3.MPEGVersion"] = { __ename__:true,__constructs__:null
	,MPEG_V1: {_hx_name:"MPEG_V1",_hx_index:0,__enum__:"format.mp3.MPEGVersion",toString:$estr}
	,MPEG_V2: {_hx_name:"MPEG_V2",_hx_index:1,__enum__:"format.mp3.MPEGVersion",toString:$estr}
	,MPEG_V25: {_hx_name:"MPEG_V25",_hx_index:2,__enum__:"format.mp3.MPEGVersion",toString:$estr}
	,MPEG_Reserved: {_hx_name:"MPEG_Reserved",_hx_index:3,__enum__:"format.mp3.MPEGVersion",toString:$estr}
};
format_mp3_MPEGVersion.__constructs__ = [format_mp3_MPEGVersion.MPEG_V1,format_mp3_MPEGVersion.MPEG_V2,format_mp3_MPEGVersion.MPEG_V25,format_mp3_MPEGVersion.MPEG_Reserved];
format_mp3_MPEGVersion.__empty_constructs__ = [format_mp3_MPEGVersion.MPEG_V1,format_mp3_MPEGVersion.MPEG_V2,format_mp3_MPEGVersion.MPEG_V25,format_mp3_MPEGVersion.MPEG_Reserved];
var format_mp3_Layer = $hxEnums["format.mp3.Layer"] = { __ename__:true,__constructs__:null
	,LayerReserved: {_hx_name:"LayerReserved",_hx_index:0,__enum__:"format.mp3.Layer",toString:$estr}
	,Layer3: {_hx_name:"Layer3",_hx_index:1,__enum__:"format.mp3.Layer",toString:$estr}
	,Layer2: {_hx_name:"Layer2",_hx_index:2,__enum__:"format.mp3.Layer",toString:$estr}
	,Layer1: {_hx_name:"Layer1",_hx_index:3,__enum__:"format.mp3.Layer",toString:$estr}
};
format_mp3_Layer.__constructs__ = [format_mp3_Layer.LayerReserved,format_mp3_Layer.Layer3,format_mp3_Layer.Layer2,format_mp3_Layer.Layer1];
format_mp3_Layer.__empty_constructs__ = [format_mp3_Layer.LayerReserved,format_mp3_Layer.Layer3,format_mp3_Layer.Layer2,format_mp3_Layer.Layer1];
var format_mp3_ChannelMode = $hxEnums["format.mp3.ChannelMode"] = { __ename__:true,__constructs__:null
	,Stereo: {_hx_name:"Stereo",_hx_index:0,__enum__:"format.mp3.ChannelMode",toString:$estr}
	,JointStereo: {_hx_name:"JointStereo",_hx_index:1,__enum__:"format.mp3.ChannelMode",toString:$estr}
	,DualChannel: {_hx_name:"DualChannel",_hx_index:2,__enum__:"format.mp3.ChannelMode",toString:$estr}
	,Mono: {_hx_name:"Mono",_hx_index:3,__enum__:"format.mp3.ChannelMode",toString:$estr}
};
format_mp3_ChannelMode.__constructs__ = [format_mp3_ChannelMode.Stereo,format_mp3_ChannelMode.JointStereo,format_mp3_ChannelMode.DualChannel,format_mp3_ChannelMode.Mono];
format_mp3_ChannelMode.__empty_constructs__ = [format_mp3_ChannelMode.Stereo,format_mp3_ChannelMode.JointStereo,format_mp3_ChannelMode.DualChannel,format_mp3_ChannelMode.Mono];
var format_mp3_Emphasis = $hxEnums["format.mp3.Emphasis"] = { __ename__:true,__constructs__:null
	,NoEmphasis: {_hx_name:"NoEmphasis",_hx_index:0,__enum__:"format.mp3.Emphasis",toString:$estr}
	,Ms50_15: {_hx_name:"Ms50_15",_hx_index:1,__enum__:"format.mp3.Emphasis",toString:$estr}
	,CCIT_J17: {_hx_name:"CCIT_J17",_hx_index:2,__enum__:"format.mp3.Emphasis",toString:$estr}
	,InvalidEmphasis: {_hx_name:"InvalidEmphasis",_hx_index:3,__enum__:"format.mp3.Emphasis",toString:$estr}
};
format_mp3_Emphasis.__constructs__ = [format_mp3_Emphasis.NoEmphasis,format_mp3_Emphasis.Ms50_15,format_mp3_Emphasis.CCIT_J17,format_mp3_Emphasis.InvalidEmphasis];
format_mp3_Emphasis.__empty_constructs__ = [format_mp3_Emphasis.NoEmphasis,format_mp3_Emphasis.Ms50_15,format_mp3_Emphasis.CCIT_J17,format_mp3_Emphasis.InvalidEmphasis];
var format_mp3_FrameType = $hxEnums["format.mp3.FrameType"] = { __ename__:true,__constructs__:null
	,FT_MP3: {_hx_name:"FT_MP3",_hx_index:0,__enum__:"format.mp3.FrameType",toString:$estr}
	,FT_NONE: {_hx_name:"FT_NONE",_hx_index:1,__enum__:"format.mp3.FrameType",toString:$estr}
};
format_mp3_FrameType.__constructs__ = [format_mp3_FrameType.FT_MP3,format_mp3_FrameType.FT_NONE];
format_mp3_FrameType.__empty_constructs__ = [format_mp3_FrameType.FT_MP3,format_mp3_FrameType.FT_NONE];
var format_mp3_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(true);
	this.bits = new format_tools_BitsInput(i);
	this.samples = 0;
	this.sampleSize = 0;
	this.any_read = false;
};
$hxClasses["format.mp3.Reader"] = format_mp3_Reader;
format_mp3_Reader.__name__ = "format.mp3.Reader";
format_mp3_Reader.prototype = {
	skipID3v2: function() {
		this.id3v2_version = this.i.readUInt16();
		this.id3v2_flags = this.i.readByte();
		var size = this.i.readByte() & 127;
		size = size << 7 | this.i.readByte() & 127;
		size = size << 7 | this.i.readByte() & 127;
		size = size << 7 | this.i.readByte() & 127;
		this.id3v2_data = this.i.read(size);
	}
	,seekFrame: function() {
		var found = false;
		try {
			var b;
			while(true) {
				b = this.i.readByte();
				if(!this.any_read) {
					this.any_read = true;
					if(b == 73) {
						b = this.i.readByte();
						if(b == 68) {
							b = this.i.readByte();
							if(b == 51) {
								this.skipID3v2();
							}
						}
					}
				}
				if(b == 255) {
					this.bits.nbits = 0;
					b = this.bits.readBits(3);
					if(b == 7) {
						return format_mp3_FrameType.FT_MP3;
					}
				}
			}
		} catch( _g ) {
			if(((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				return format_mp3_FrameType.FT_NONE;
			} else {
				throw _g;
			}
		}
	}
	,readFrames: function() {
		var frames = [];
		var ft;
		while(true) {
			ft = this.seekFrame();
			if(!(ft != format_mp3_FrameType.FT_NONE)) {
				break;
			}
			switch(ft._hx_index) {
			case 0:
				var f = this.readFrame();
				if(f != null) {
					frames.push(f);
				}
				break;
			case 1:
				break;
			}
		}
		return frames;
	}
	,readFrameHeader: function() {
		var version = this.bits.readBits(2);
		var layer = this.bits.readBits(2);
		var hasCrc = !this.bits.readBit();
		if(version == format_mp3_MPEG.Reserved || layer == format_mp3_CLayer.LReserved) {
			return null;
		}
		var bitrateIdx = this.bits.readBits(4);
		var bitrate = format_mp3_Tools.getBitrate(version,layer,bitrateIdx);
		var samplingRateIdx = this.bits.readBits(2);
		var samplingRate = format_mp3_Tools.getSamplingRate(version,samplingRateIdx);
		var isPadded = this.bits.readBit();
		var privateBit = this.bits.readBit();
		if(bitrate == format_mp3_Bitrate.BR_Bad || bitrate == format_mp3_Bitrate.BR_Free || samplingRate == format_mp3_SamplingRate.SR_Bad) {
			return null;
		}
		var channelMode = this.bits.readBits(2);
		var isIntensityStereo = this.bits.readBit();
		var isMSStereo = this.bits.readBit();
		var isCopyrighted = this.bits.readBit();
		var isOriginal = this.bits.readBit();
		var emphasis = this.bits.readBits(2);
		var crc16 = 0;
		if(hasCrc) {
			crc16 = this.i.readUInt16();
		}
		return { version : format_mp3_MPEG.num2Enum(version), layer : format_mp3_CLayer.num2Enum(layer), hasCrc : hasCrc, crc16 : crc16, bitrate : bitrate, samplingRate : samplingRate, isPadded : isPadded, privateBit : privateBit, channelMode : format_mp3_CChannelMode.num2Enum(channelMode), isIntensityStereo : isIntensityStereo, isMSStereo : isMSStereo, isCopyrighted : isCopyrighted, isOriginal : isOriginal, emphasis : format_mp3_CEmphasis.num2Enum(emphasis)};
	}
	,readFrame: function() {
		var header = this.readFrameHeader();
		if(header == null || format_mp3_Tools.isInvalidFrameHeader(header)) {
			return null;
		}
		try {
			var data = this.i.read(format_mp3_Tools.getSampleDataSizeHdr(header));
			this.samples += format_mp3_Tools.getSampleCountHdr(header);
			this.sampleSize += data.length;
			return { header : header, data : data};
		} catch( _g ) {
			if(((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				return null;
			} else {
				throw _g;
			}
		}
	}
	,read: function() {
		var fs = this.readFrames();
		return { frames : fs, sampleCount : this.samples, sampleSize : this.sampleSize, id3v2 : this.id3v2_data == null ? null : { versionBytes : this.id3v2_version, flagByte : this.id3v2_flags, data : this.id3v2_data}};
	}
	,__class__: format_mp3_Reader
};
var format_mp3_Tools = function() { };
$hxClasses["format.mp3.Tools"] = format_mp3_Tools;
format_mp3_Tools.__name__ = "format.mp3.Tools";
format_mp3_Tools.getBitrate = function(mpegVersion,layerIdx,bitrateIdx) {
	if(mpegVersion == format_mp3_MPEG.Reserved || layerIdx == format_mp3_CLayer.LReserved) {
		return format_mp3_Bitrate.BR_Bad;
	}
	return (mpegVersion == 3 ? format_mp3_MPEG.V1_Bitrates : format_mp3_MPEG.V2_Bitrates)[layerIdx][bitrateIdx];
};
format_mp3_Tools.getSamplingRate = function(mpegVersion,samplingRateIdx) {
	return format_mp3_MPEG.SamplingRates[mpegVersion][samplingRateIdx];
};
format_mp3_Tools.isInvalidFrameHeader = function(hdr) {
	if(!(hdr.version == format_mp3_MPEGVersion.MPEG_Reserved || hdr.layer == format_mp3_Layer.LayerReserved || hdr.bitrate == format_mp3_Bitrate.BR_Bad || hdr.bitrate == format_mp3_Bitrate.BR_Free)) {
		return hdr.samplingRate == format_mp3_SamplingRate.SR_Bad;
	} else {
		return true;
	}
};
format_mp3_Tools.getSampleDataSize = function(mpegVersion,bitrate,samplingRate,isPadded,hasCrc) {
	return ((mpegVersion == 3 ? 144 : 72) * bitrate * 1000 / samplingRate | 0) + (isPadded ? 1 : 0) - (hasCrc ? 2 : 0) - 4;
};
format_mp3_Tools.getSampleDataSizeHdr = function(hdr) {
	return format_mp3_Tools.getSampleDataSize(format_mp3_MPEG.enum2Num(hdr.version),format_mp3_MPEG.bitrateEnum2Num(hdr.bitrate),format_mp3_MPEG.srEnum2Num(hdr.samplingRate),hdr.isPadded,hdr.hasCrc);
};
format_mp3_Tools.getSampleCount = function(mpegVersion) {
	if(mpegVersion == 3) {
		return 1152;
	} else {
		return 576;
	}
};
format_mp3_Tools.getSampleCountHdr = function(hdr) {
	return format_mp3_Tools.getSampleCount(format_mp3_MPEG.enum2Num(hdr.version));
};
var format_png_Color = $hxEnums["format.png.Color"] = { __ename__:true,__constructs__:null
	,ColGrey: ($_=function(alpha) { return {_hx_index:0,alpha:alpha,__enum__:"format.png.Color",toString:$estr}; },$_._hx_name="ColGrey",$_.__params__ = ["alpha"],$_)
	,ColTrue: ($_=function(alpha) { return {_hx_index:1,alpha:alpha,__enum__:"format.png.Color",toString:$estr}; },$_._hx_name="ColTrue",$_.__params__ = ["alpha"],$_)
	,ColIndexed: {_hx_name:"ColIndexed",_hx_index:2,__enum__:"format.png.Color",toString:$estr}
};
format_png_Color.__constructs__ = [format_png_Color.ColGrey,format_png_Color.ColTrue,format_png_Color.ColIndexed];
format_png_Color.__empty_constructs__ = [format_png_Color.ColIndexed];
var format_png_Chunk = $hxEnums["format.png.Chunk"] = { __ename__:true,__constructs__:null
	,CEnd: {_hx_name:"CEnd",_hx_index:0,__enum__:"format.png.Chunk",toString:$estr}
	,CHeader: ($_=function(h) { return {_hx_index:1,h:h,__enum__:"format.png.Chunk",toString:$estr}; },$_._hx_name="CHeader",$_.__params__ = ["h"],$_)
	,CData: ($_=function(b) { return {_hx_index:2,b:b,__enum__:"format.png.Chunk",toString:$estr}; },$_._hx_name="CData",$_.__params__ = ["b"],$_)
	,CPalette: ($_=function(b) { return {_hx_index:3,b:b,__enum__:"format.png.Chunk",toString:$estr}; },$_._hx_name="CPalette",$_.__params__ = ["b"],$_)
	,CUnknown: ($_=function(id,data) { return {_hx_index:4,id:id,data:data,__enum__:"format.png.Chunk",toString:$estr}; },$_._hx_name="CUnknown",$_.__params__ = ["id","data"],$_)
};
format_png_Chunk.__constructs__ = [format_png_Chunk.CEnd,format_png_Chunk.CHeader,format_png_Chunk.CData,format_png_Chunk.CPalette,format_png_Chunk.CUnknown];
format_png_Chunk.__empty_constructs__ = [format_png_Chunk.CEnd];
var format_png_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(true);
	this.checkCRC = true;
};
$hxClasses["format.png.Reader"] = format_png_Reader;
format_png_Reader.__name__ = "format.png.Reader";
format_png_Reader.prototype = {
	read: function() {
		var b = 137;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 80;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 78;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 71;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 13;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 10;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 26;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 10;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var l = new haxe_ds_List();
		while(true) {
			var c = this.readChunk();
			l.add(c);
			if(c == format_png_Chunk.CEnd) {
				break;
			}
		}
		return l;
	}
	,readHeader: function(i) {
		i.set_bigEndian(true);
		var width = i.readInt32();
		var height = i.readInt32();
		var colbits = i.readByte();
		var color = i.readByte();
		var color1;
		switch(color) {
		case 0:
			color1 = format_png_Color.ColGrey(false);
			break;
		case 2:
			color1 = format_png_Color.ColTrue(false);
			break;
		case 3:
			color1 = format_png_Color.ColIndexed;
			break;
		case 4:
			color1 = format_png_Color.ColGrey(true);
			break;
		case 6:
			color1 = format_png_Color.ColTrue(true);
			break;
		default:
			throw haxe_Exception.thrown("Unknown color model " + color + ":" + colbits);
		}
		var compress = i.readByte();
		var filter = i.readByte();
		if(compress != 0 || filter != 0) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var interlace = i.readByte();
		if(interlace != 0 && interlace != 1) {
			throw haxe_Exception.thrown("Invalid header");
		}
		return { width : width, height : height, colbits : colbits, color : color1, interlaced : interlace == 1};
	}
	,readChunk: function() {
		var dataLen = this.i.readInt32();
		var id = this.i.readString(4);
		var data = this.i.read(dataLen);
		var crc = this.i.readInt32();
		if(this.checkCRC) {
			var c_crc = -1;
			var tmp = (c_crc ^ HxOverrides.cca(id,0)) & 255;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp;
			var tmp = (c_crc ^ HxOverrides.cca(id,1)) & 255;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp;
			var tmp = (c_crc ^ HxOverrides.cca(id,2)) & 255;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp;
			var tmp = (c_crc ^ HxOverrides.cca(id,3)) & 255;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp;
			var b = data.b.bufferValue;
			var _g = 0;
			var _g1 = data.length;
			while(_g < _g1) {
				var i = _g++;
				var tmp = (c_crc ^ b.bytes[i]) & 255;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				c_crc = c_crc >>> 8 ^ tmp;
			}
			if((c_crc ^ -1) != crc) {
				throw haxe_Exception.thrown("CRC check failure");
			}
		}
		switch(id) {
		case "IDAT":
			return format_png_Chunk.CData(data);
		case "IEND":
			return format_png_Chunk.CEnd;
		case "IHDR":
			return format_png_Chunk.CHeader(this.readHeader(new haxe_io_BytesInput(data)));
		case "PLTE":
			return format_png_Chunk.CPalette(data);
		default:
			return format_png_Chunk.CUnknown(id,data);
		}
	}
	,__class__: format_png_Reader
};
var format_png_Tools = function() { };
$hxClasses["format.png.Tools"] = format_png_Tools;
format_png_Tools.__name__ = "format.png.Tools";
format_png_Tools.getHeader = function(d) {
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c._hx_index == 1) {
			var h = c.h;
			return h;
		}
	}
	throw haxe_Exception.thrown("Header not found");
};
format_png_Tools.getPalette = function(d) {
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c._hx_index == 3) {
			var b = c.b;
			return b;
		}
	}
	return null;
};
format_png_Tools.extract32 = function(d,bytes,flipY) {
	var h = format_png_Tools.getHeader(d);
	var bgra = bytes == null ? new haxe_io_Bytes(new ArrayBuffer(h.width * h.height * 4)) : bytes;
	var data = null;
	var fullData = null;
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c._hx_index == 2) {
			var b = c.b;
			if(fullData != null) {
				fullData.add(b);
			} else if(data == null) {
				data = b;
			} else {
				fullData = new haxe_io_BytesBuffer();
				fullData.add(data);
				fullData.add(b);
				data = null;
			}
		}
	}
	if(fullData != null) {
		data = fullData.getBytes();
	}
	if(data == null) {
		throw haxe_Exception.thrown("Data not found");
	}
	data = format_tools_Inflate.run(data);
	var r = 0;
	var w = 0;
	var lineDelta = 0;
	if(flipY) {
		lineDelta = -h.width * 8;
		w = (h.height - 1) * (h.width * 4);
	}
	var flipY1 = flipY ? -1 : 1;
	var _g = h.color;
	switch(_g._hx_index) {
	case 0:
		var alpha = _g.alpha;
		if(h.colbits != 8) {
			throw haxe_Exception.thrown("Unsupported color mode");
		}
		var width = h.width;
		var stride = (alpha ? 2 : 1) * width + 1;
		if(data.length < h.height * stride) {
			throw haxe_Exception.thrown("Not enough data");
		}
		var alphvaIdx = -1;
		if(!alpha) {
			var _g1_head = d.h;
			while(_g1_head != null) {
				var val = _g1_head.item;
				_g1_head = _g1_head.next;
				var t = val;
				if(t._hx_index == 4) {
					if(t.id == "tRNS") {
						var data1 = t.data;
						if(data1.length >= 2) {
							alphvaIdx = data1.b[1];
						}
						break;
					}
				}
			}
		}
		var _g1 = 0;
		var _g2 = h.height;
		while(_g1 < _g2) {
			var y = _g1++;
			var f = data.b[r++];
			switch(f) {
			case 0:
				if(alpha) {
					var _g3 = 0;
					var _g4 = width;
					while(_g3 < _g4) {
						var x = _g3++;
						var v = data.b[r++];
						bgra.b[w++] = v;
						bgra.b[w++] = v;
						bgra.b[w++] = v;
						bgra.b[w++] = data.b[r++];
					}
				} else {
					var _g5 = 0;
					var _g6 = width;
					while(_g5 < _g6) {
						var x1 = _g5++;
						var v1 = data.b[r++];
						bgra.b[w++] = v1;
						bgra.b[w++] = v1;
						bgra.b[w++] = v1;
						bgra.b[w++] = v1 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 1:
				var cv = 0;
				var ca = 0;
				if(alpha) {
					var _g7 = 0;
					var _g8 = width;
					while(_g7 < _g8) {
						var x2 = _g7++;
						cv += data.b[r++];
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						ca += data.b[r++];
						bgra.b[w++] = ca;
					}
				} else {
					var _g9 = 0;
					var _g10 = width;
					while(_g9 < _g10) {
						var x3 = _g9++;
						cv += data.b[r++];
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						bgra.b[w++] = cv == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 2:
				var stride = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g11 = 0;
					var _g12 = width;
					while(_g11 < _g12) {
						var x4 = _g11++;
						var v2 = data.b[r++] + bgra.b[w - stride];
						bgra.b[w++] = v2;
						bgra.b[w++] = v2;
						bgra.b[w++] = v2;
						bgra.b[w++] = data.b[r++] + bgra.b[w - stride];
					}
				} else {
					var _g13 = 0;
					var _g14 = width;
					while(_g13 < _g14) {
						var x5 = _g13++;
						var v3 = data.b[r++] + bgra.b[w - stride];
						bgra.b[w++] = v3;
						bgra.b[w++] = v3;
						bgra.b[w++] = v3;
						bgra.b[w++] = v3 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 3:
				var cv1 = 0;
				var ca1 = 0;
				var stride1 = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g15 = 0;
					var _g16 = width;
					while(_g15 < _g16) {
						var x6 = _g15++;
						cv1 = data.b[r++] + (cv1 + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						ca1 = data.b[r++] + (ca1 + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = ca1;
					}
				} else {
					var _g17 = 0;
					var _g18 = width;
					while(_g17 < _g18) {
						var x7 = _g17++;
						cv1 = data.b[r++] + (cv1 + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 4:
				var stride2 = width * 4 * flipY1;
				var cv2 = 0;
				var ca2 = 0;
				if(alpha) {
					var _g19 = 0;
					var _g20 = width;
					while(_g19 < _g20) {
						var x8 = _g19++;
						var b = y == 0 ? 0 : bgra.b[w - stride2];
						var c = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k = cv2 + b - c;
						var pa = k - cv2;
						if(pa < 0) {
							pa = -pa;
						}
						var pb = k - b;
						if(pb < 0) {
							pb = -pb;
						}
						var pc = k - c;
						if(pc < 0) {
							pc = -pc;
						}
						var pos = r++;
						cv2 = (pa <= pb && pa <= pc ? cv2 : pb <= pc ? b : c) + data.b[pos] & 255;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						var b1 = y == 0 ? 0 : bgra.b[w - stride2];
						var c1 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k1 = ca2 + b1 - c1;
						var pa1 = k1 - ca2;
						if(pa1 < 0) {
							pa1 = -pa1;
						}
						var pb1 = k1 - b1;
						if(pb1 < 0) {
							pb1 = -pb1;
						}
						var pc1 = k1 - c1;
						if(pc1 < 0) {
							pc1 = -pc1;
						}
						var pos1 = r++;
						ca2 = (pa1 <= pb1 && pa1 <= pc1 ? ca2 : pb1 <= pc1 ? b1 : c1) + data.b[pos1] & 255;
						bgra.b[w++] = ca2;
					}
				} else {
					var _g21 = 0;
					var _g22 = width;
					while(_g21 < _g22) {
						var x9 = _g21++;
						var b2 = y == 0 ? 0 : bgra.b[w - stride2];
						var c2 = x9 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k2 = cv2 + b2 - c2;
						var pa2 = k2 - cv2;
						if(pa2 < 0) {
							pa2 = -pa2;
						}
						var pb2 = k2 - b2;
						if(pb2 < 0) {
							pb2 = -pb2;
						}
						var pc2 = k2 - c2;
						if(pc2 < 0) {
							pc2 = -pc2;
						}
						var pos2 = r++;
						cv2 = (pa2 <= pb2 && pa2 <= pc2 ? cv2 : pb2 <= pc2 ? b2 : c2) + data.b[pos2] & 255;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid filter " + f);
			}
			w += lineDelta;
		}
		break;
	case 1:
		var alpha = _g.alpha;
		if(h.colbits != 8) {
			throw haxe_Exception.thrown("Unsupported color mode");
		}
		var width = h.width;
		var stride = (alpha ? 4 : 3) * width + 1;
		if(data.length < h.height * stride) {
			throw haxe_Exception.thrown("Not enough data");
		}
		var alphaRed = -1;
		var alphaGreen = -1;
		var alphaBlue = -1;
		if(!alpha) {
			var _g1_head = d.h;
			while(_g1_head != null) {
				var val = _g1_head.item;
				_g1_head = _g1_head.next;
				var t = val;
				if(t._hx_index == 4) {
					if(t.id == "tRNS") {
						var data1 = t.data;
						if(data1.length >= 6) {
							alphaRed = data1.b[1];
							alphaGreen = data1.b[3];
							alphaBlue = data1.b[5];
						}
						break;
					}
				}
			}
		}
		var cr = 0;
		var cg = 0;
		var cb = 0;
		var ca = 0;
		var _g = 0;
		var _g1 = h.height;
		while(_g < _g1) {
			var y = _g++;
			var f = data.b[r++];
			switch(f) {
			case 0:
				if(alpha) {
					var _g2 = 0;
					var _g3 = width;
					while(_g2 < _g3) {
						var x = _g2++;
						bgra.b[w++] = data.b[r + 2];
						bgra.b[w++] = data.b[r + 1];
						bgra.b[w++] = data.b[r];
						bgra.b[w++] = data.b[r + 3];
						r += 4;
					}
				} else {
					var _g4 = 0;
					var _g5 = width;
					while(_g4 < _g5) {
						var x1 = _g4++;
						cb = data.b[r + 2];
						bgra.b[w++] = cb;
						cg = data.b[r + 1];
						bgra.b[w++] = cg;
						cr = data.b[r];
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 1:
				ca = 0;
				cb = ca;
				cg = cb;
				cr = cg;
				if(alpha) {
					var _g6 = 0;
					var _g7 = width;
					while(_g6 < _g7) {
						var x2 = _g6++;
						cb += data.b[r + 2];
						bgra.b[w++] = cb;
						cg += data.b[r + 1];
						bgra.b[w++] = cg;
						cr += data.b[r];
						bgra.b[w++] = cr;
						ca += data.b[r + 3];
						bgra.b[w++] = ca;
						r += 4;
					}
				} else {
					var _g8 = 0;
					var _g9 = width;
					while(_g8 < _g9) {
						var x3 = _g8++;
						cb += data.b[r + 2];
						bgra.b[w++] = cb;
						cg += data.b[r + 1];
						bgra.b[w++] = cg;
						cr += data.b[r];
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 2:
				var stride = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g10 = 0;
					var _g11 = width;
					while(_g10 < _g11) {
						var x4 = _g10++;
						bgra.b[w] = data.b[r + 2] + bgra.b[w - stride];
						++w;
						bgra.b[w] = data.b[r + 1] + bgra.b[w - stride];
						++w;
						bgra.b[w] = data.b[r] + bgra.b[w - stride];
						++w;
						bgra.b[w] = data.b[r + 3] + bgra.b[w - stride];
						++w;
						r += 4;
					}
				} else {
					var _g12 = 0;
					var _g13 = width;
					while(_g12 < _g13) {
						var x5 = _g12++;
						cb = data.b[r + 2] + bgra.b[w - stride];
						bgra.b[w] = cb;
						++w;
						cg = data.b[r + 1] + bgra.b[w - stride];
						bgra.b[w] = cg;
						++w;
						cr = data.b[r] + bgra.b[w - stride];
						bgra.b[w] = cr;
						++w;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 3:
				ca = 0;
				cb = ca;
				cg = cb;
				cr = cg;
				var stride1 = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g14 = 0;
					var _g15 = width;
					while(_g14 < _g15) {
						var x6 = _g14++;
						cb = data.b[r + 2] + (cb + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cb;
						cg = data.b[r + 1] + (cg + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cg;
						cr = data.b[r] + (cr + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cr;
						ca = data.b[r + 3] + (ca + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = ca;
						r += 4;
					}
				} else {
					var _g16 = 0;
					var _g17 = width;
					while(_g16 < _g17) {
						var x7 = _g16++;
						cb = data.b[r + 2] + (cb + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cb;
						cg = data.b[r + 1] + (cg + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cg;
						cr = data.b[r] + (cr + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 4:
				var stride2 = width * 4 * flipY1;
				ca = 0;
				cb = ca;
				cg = cb;
				cr = cg;
				if(alpha) {
					var _g18 = 0;
					var _g19 = width;
					while(_g18 < _g19) {
						var x8 = _g18++;
						var b = y == 0 ? 0 : bgra.b[w - stride2];
						var c = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k = cb + b - c;
						var pa = k - cb;
						if(pa < 0) {
							pa = -pa;
						}
						var pb = k - b;
						if(pb < 0) {
							pb = -pb;
						}
						var pc = k - c;
						if(pc < 0) {
							pc = -pc;
						}
						cb = (pa <= pb && pa <= pc ? cb : pb <= pc ? b : c) + data.b[r + 2] & 255;
						bgra.b[w++] = cb;
						var b1 = y == 0 ? 0 : bgra.b[w - stride2];
						var c1 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k1 = cg + b1 - c1;
						var pa1 = k1 - cg;
						if(pa1 < 0) {
							pa1 = -pa1;
						}
						var pb1 = k1 - b1;
						if(pb1 < 0) {
							pb1 = -pb1;
						}
						var pc1 = k1 - c1;
						if(pc1 < 0) {
							pc1 = -pc1;
						}
						cg = (pa1 <= pb1 && pa1 <= pc1 ? cg : pb1 <= pc1 ? b1 : c1) + data.b[r + 1] & 255;
						bgra.b[w++] = cg;
						var b2 = y == 0 ? 0 : bgra.b[w - stride2];
						var c2 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k2 = cr + b2 - c2;
						var pa2 = k2 - cr;
						if(pa2 < 0) {
							pa2 = -pa2;
						}
						var pb2 = k2 - b2;
						if(pb2 < 0) {
							pb2 = -pb2;
						}
						var pc2 = k2 - c2;
						if(pc2 < 0) {
							pc2 = -pc2;
						}
						cr = (pa2 <= pb2 && pa2 <= pc2 ? cr : pb2 <= pc2 ? b2 : c2) + data.b[r] & 255;
						bgra.b[w++] = cr;
						var b3 = y == 0 ? 0 : bgra.b[w - stride2];
						var c3 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k3 = ca + b3 - c3;
						var pa3 = k3 - ca;
						if(pa3 < 0) {
							pa3 = -pa3;
						}
						var pb3 = k3 - b3;
						if(pb3 < 0) {
							pb3 = -pb3;
						}
						var pc3 = k3 - c3;
						if(pc3 < 0) {
							pc3 = -pc3;
						}
						ca = (pa3 <= pb3 && pa3 <= pc3 ? ca : pb3 <= pc3 ? b3 : c3) + data.b[r + 3] & 255;
						bgra.b[w++] = ca;
						r += 4;
					}
				} else {
					var _g20 = 0;
					var _g21 = width;
					while(_g20 < _g21) {
						var x9 = _g20++;
						var b4 = y == 0 ? 0 : bgra.b[w - stride2];
						var c4 = x9 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k4 = cb + b4 - c4;
						var pa4 = k4 - cb;
						if(pa4 < 0) {
							pa4 = -pa4;
						}
						var pb4 = k4 - b4;
						if(pb4 < 0) {
							pb4 = -pb4;
						}
						var pc4 = k4 - c4;
						if(pc4 < 0) {
							pc4 = -pc4;
						}
						cb = (pa4 <= pb4 && pa4 <= pc4 ? cb : pb4 <= pc4 ? b4 : c4) + data.b[r + 2] & 255;
						bgra.b[w++] = cb;
						var b5 = y == 0 ? 0 : bgra.b[w - stride2];
						var c5 = x9 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k5 = cg + b5 - c5;
						var pa5 = k5 - cg;
						if(pa5 < 0) {
							pa5 = -pa5;
						}
						var pb5 = k5 - b5;
						if(pb5 < 0) {
							pb5 = -pb5;
						}
						var pc5 = k5 - c5;
						if(pc5 < 0) {
							pc5 = -pc5;
						}
						cg = (pa5 <= pb5 && pa5 <= pc5 ? cg : pb5 <= pc5 ? b5 : c5) + data.b[r + 1] & 255;
						bgra.b[w++] = cg;
						var b6 = y == 0 ? 0 : bgra.b[w - stride2];
						var c6 = x9 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k6 = cr + b6 - c6;
						var pa6 = k6 - cr;
						if(pa6 < 0) {
							pa6 = -pa6;
						}
						var pb6 = k6 - b6;
						if(pb6 < 0) {
							pb6 = -pb6;
						}
						var pc6 = k6 - c6;
						if(pc6 < 0) {
							pc6 = -pc6;
						}
						cr = (pa6 <= pb6 && pa6 <= pc6 ? cr : pb6 <= pc6 ? b6 : c6) + data.b[r] & 255;
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid filter " + f);
			}
			w += lineDelta;
		}
		break;
	case 2:
		var pal = format_png_Tools.getPalette(d);
		if(pal == null) {
			throw haxe_Exception.thrown("PNG Palette is missing");
		}
		var alpha = null;
		var _g1_head = d.h;
		while(_g1_head != null) {
			var val = _g1_head.item;
			_g1_head = _g1_head.next;
			var t = val;
			if(t._hx_index == 4) {
				if(t.id == "tRNS") {
					var data1 = t.data;
					alpha = data1;
					break;
				}
			}
		}
		if(alpha != null && alpha.length < 1 << h.colbits) {
			var alpha2 = new haxe_io_Bytes(new ArrayBuffer(1 << h.colbits));
			alpha2.blit(0,alpha,0,alpha.length);
			alpha2.fill(alpha.length,alpha2.length - alpha.length,255);
			alpha = alpha2;
		}
		var width = h.width;
		var stride = Math.ceil(width * h.colbits / 8) + 1;
		if(data.length < h.height * stride) {
			throw haxe_Exception.thrown("Not enough data");
		}
		var tmp = h.width * h.colbits;
		var rline = tmp >> 3;
		var _g = 0;
		var _g1 = h.height;
		while(_g < _g1) {
			var y = _g++;
			var f = data.b[r++];
			if(f == 0) {
				r += rline;
				continue;
			}
			switch(f) {
			case 1:
				var c = 0;
				var _g2 = 0;
				var _g3 = width;
				while(_g2 < _g3) {
					var x = _g2++;
					var v = data.b[r];
					c += v;
					data.b[r++] = c & 255;
				}
				break;
			case 2:
				var stride = y == 0 ? 0 : rline + 1;
				var _g4 = 0;
				var _g5 = width;
				while(_g4 < _g5) {
					var x1 = _g4++;
					var v1 = data.b[r];
					data.b[r] = v1 + data.b[r - stride];
					++r;
				}
				break;
			case 3:
				var c1 = 0;
				var stride1 = y == 0 ? 0 : rline + 1;
				var _g6 = 0;
				var _g7 = width;
				while(_g6 < _g7) {
					var x2 = _g6++;
					var v2 = data.b[r];
					c1 = v2 + (c1 + data.b[r - stride1] >> 1) & 255;
					data.b[r++] = c1;
				}
				break;
			case 4:
				var stride2 = rline + 1;
				var c2 = 0;
				var _g8 = 0;
				var _g9 = width;
				while(_g8 < _g9) {
					var x3 = _g8++;
					var v3 = data.b[r];
					var numChannels = 1;
					if(numChannels == null) {
						numChannels = 4;
					}
					var b = y == 0 ? 0 : data.b[r - stride2];
					var c3 = x3 == 0 || y == 0 ? 0 : data.b[r - stride2 - numChannels];
					var k = c2 + b - c3;
					var pa = k - c2;
					if(pa < 0) {
						pa = -pa;
					}
					var pb = k - b;
					if(pb < 0) {
						pb = -pb;
					}
					var pc = k - c3;
					if(pc < 0) {
						pc = -pc;
					}
					c2 = (pa <= pb && pa <= pc ? c2 : pb <= pc ? b : c3) + v3 & 255;
					data.b[r++] = c2;
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid filter " + f);
			}
		}
		var r = 0;
		if(h.colbits == 8) {
			var _g = 0;
			var _g1 = h.height;
			while(_g < _g1) {
				var y = _g++;
				++r;
				var _g2 = 0;
				var _g3 = h.width;
				while(_g2 < _g3) {
					var x = _g2++;
					var c = data.b[r++];
					bgra.b[w++] = pal.b[c * 3 + 2];
					bgra.b[w++] = pal.b[c * 3 + 1];
					bgra.b[w++] = pal.b[c * 3];
					bgra.b[w++] = alpha != null ? alpha.b[c] : 255;
				}
				w += lineDelta;
			}
		} else if(h.colbits < 8) {
			var req = h.colbits;
			var mask = (1 << req) - 1;
			var _g = 0;
			var _g1 = h.height;
			while(_g < _g1) {
				var y = _g++;
				++r;
				var bits = 0;
				var nbits = 0;
				var _g2 = 0;
				var _g3 = h.width;
				while(_g2 < _g3) {
					var x = _g2++;
					if(nbits < req) {
						bits = bits << 8 | data.b[r++];
						nbits += 8;
					}
					var c = bits >>> nbits - req & mask;
					nbits -= req;
					bgra.b[w++] = pal.b[c * 3 + 2];
					bgra.b[w++] = pal.b[c * 3 + 1];
					bgra.b[w++] = pal.b[c * 3];
					bgra.b[w++] = alpha != null ? alpha.b[c] : 255;
				}
				w += lineDelta;
			}
		} else {
			throw haxe_Exception.thrown(h.colbits + " indexed bits per pixel not supported");
		}
		break;
	}
	return bgra;
};
var format_tga_ImageOrigin = $hxEnums["format.tga.ImageOrigin"] = { __ename__:true,__constructs__:null
	,BottomLeft: {_hx_name:"BottomLeft",_hx_index:0,__enum__:"format.tga.ImageOrigin",toString:$estr}
	,BottomRight: {_hx_name:"BottomRight",_hx_index:1,__enum__:"format.tga.ImageOrigin",toString:$estr}
	,TopLeft: {_hx_name:"TopLeft",_hx_index:2,__enum__:"format.tga.ImageOrigin",toString:$estr}
	,TopRight: {_hx_name:"TopRight",_hx_index:3,__enum__:"format.tga.ImageOrigin",toString:$estr}
};
format_tga_ImageOrigin.__constructs__ = [format_tga_ImageOrigin.BottomLeft,format_tga_ImageOrigin.BottomRight,format_tga_ImageOrigin.TopLeft,format_tga_ImageOrigin.TopRight];
format_tga_ImageOrigin.__empty_constructs__ = [format_tga_ImageOrigin.BottomLeft,format_tga_ImageOrigin.BottomRight,format_tga_ImageOrigin.TopLeft,format_tga_ImageOrigin.TopRight];
var format_tga_ImageType = $hxEnums["format.tga.ImageType"] = { __ename__:true,__constructs__:null
	,NoImage: {_hx_name:"NoImage",_hx_index:0,__enum__:"format.tga.ImageType",toString:$estr}
	,UncompressedColorMapped: {_hx_name:"UncompressedColorMapped",_hx_index:1,__enum__:"format.tga.ImageType",toString:$estr}
	,UncompressedTrueColor: {_hx_name:"UncompressedTrueColor",_hx_index:2,__enum__:"format.tga.ImageType",toString:$estr}
	,UncompressedBlackAndWhite: {_hx_name:"UncompressedBlackAndWhite",_hx_index:3,__enum__:"format.tga.ImageType",toString:$estr}
	,RunLengthColorMapped: {_hx_name:"RunLengthColorMapped",_hx_index:4,__enum__:"format.tga.ImageType",toString:$estr}
	,RunLengthTrueColor: {_hx_name:"RunLengthTrueColor",_hx_index:5,__enum__:"format.tga.ImageType",toString:$estr}
	,RunLengthBlackAndWhite: {_hx_name:"RunLengthBlackAndWhite",_hx_index:6,__enum__:"format.tga.ImageType",toString:$estr}
	,Unknown: ($_=function(type) { return {_hx_index:7,type:type,__enum__:"format.tga.ImageType",toString:$estr}; },$_._hx_name="Unknown",$_.__params__ = ["type"],$_)
};
format_tga_ImageType.__constructs__ = [format_tga_ImageType.NoImage,format_tga_ImageType.UncompressedColorMapped,format_tga_ImageType.UncompressedTrueColor,format_tga_ImageType.UncompressedBlackAndWhite,format_tga_ImageType.RunLengthColorMapped,format_tga_ImageType.RunLengthTrueColor,format_tga_ImageType.RunLengthBlackAndWhite,format_tga_ImageType.Unknown];
format_tga_ImageType.__empty_constructs__ = [format_tga_ImageType.NoImage,format_tga_ImageType.UncompressedColorMapped,format_tga_ImageType.UncompressedTrueColor,format_tga_ImageType.UncompressedBlackAndWhite,format_tga_ImageType.RunLengthColorMapped,format_tga_ImageType.RunLengthTrueColor,format_tga_ImageType.RunLengthBlackAndWhite];
var format_tga_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(false);
};
$hxClasses["format.tga.Reader"] = format_tga_Reader;
format_tga_Reader.__name__ = "format.tga.Reader";
format_tga_Reader.prototype = {
	read: function() {
		var idLength = this.i.readByte();
		var header = this.readHeader();
		var id = idLength == 0 ? "" : this.i.readString(idLength);
		var colorMap = this.readColorMapData(header);
		return { header : header, imageId : id, colorMapData : colorMap, imageData : this.readImageData(header,colorMap), developerData : null};
	}
	,readHeader: function() {
		var colorMapType = this.i.readByte();
		var dataType;
		var dataId = this.i.readByte();
		switch(dataId) {
		case 0:
			dataType = format_tga_ImageType.NoImage;
			break;
		case 1:
			dataType = format_tga_ImageType.UncompressedColorMapped;
			break;
		case 2:
			dataType = format_tga_ImageType.UncompressedTrueColor;
			break;
		case 3:
			dataType = format_tga_ImageType.UncompressedBlackAndWhite;
			break;
		case 9:
			dataType = format_tga_ImageType.RunLengthColorMapped;
			break;
		case 10:
			dataType = format_tga_ImageType.RunLengthTrueColor;
			break;
		case 11:
			dataType = format_tga_ImageType.RunLengthBlackAndWhite;
			break;
		default:
			dataType = format_tga_ImageType.Unknown(dataId);
		}
		var colorMapOrigin = this.i.readInt16();
		var colorMapLength = this.i.readInt16();
		var colorMapDepth = this.i.readByte();
		var xOrigin = this.i.readInt16();
		var yOrigin = this.i.readInt16();
		var width = this.i.readInt16();
		var height = this.i.readInt16();
		var depth = this.i.readByte();
		var descriptor = this.i.readByte();
		var origin;
		switch(descriptor & 48) {
		case 16:
			origin = format_tga_ImageOrigin.BottomRight;
			break;
		case 32:
			origin = format_tga_ImageOrigin.TopLeft;
			break;
		case 48:
			origin = format_tga_ImageOrigin.TopRight;
			break;
		default:
			origin = format_tga_ImageOrigin.BottomLeft;
		}
		return { colorMapType : colorMapType, imageType : dataType, colorMapFirstIndex : colorMapOrigin, colorMapLength : colorMapLength, colorMapEntrySize : colorMapDepth, xOrigin : xOrigin, yOrigin : yOrigin, width : width, height : height, bitsPerPixel : depth, alphaChannelBits : descriptor & 15, imageOrigin : origin};
	}
	,readColorMapData: function(header) {
		if(header.colorMapType == 0) {
			return null;
		}
		return this.readPixels(header.colorMapEntrySize,header.colorMapLength,header.alphaChannelBits,false);
	}
	,readImageData: function(header,colorMap) {
		switch(header.imageType._hx_index) {
		case 0:
			return null;
		case 1:
			return this.readIndexes(header.bitsPerPixel,header.width * header.height,colorMap,header.colorMapFirstIndex,false);
		case 2:
			return this.readPixels(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,false);
		case 3:
			return this.readMono(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,false);
		case 4:
			return this.readIndexes(header.bitsPerPixel,header.width * header.height,colorMap,header.colorMapFirstIndex,true);
		case 5:
			return this.readPixels(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,true);
		case 6:
			return this.readMono(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,true);
		default:
			throw haxe_Exception.thrown("Unsupported image data type!");
		}
	}
	,readPixels: function(bitsPerPixel,amount,alphaChannelBits,rle) {
		var this1 = new Array(amount);
		var list = this1;
		var alpha = alphaChannelBits != 0;
		var bitFieldSize = bitsPerPixel / 3 | 0;
		if(bitFieldSize > 8) {
			bitFieldSize = 8;
		}
		var parsePixel;
		var readEntry;
		switch(bitsPerPixel) {
		case 8:
			readEntry = ($_=this.i,$bind($_,$_.readByte));
			parsePixel = $bind(this,this.parsePixel1);
			break;
		case 16:
			readEntry = ($_=this.i,$bind($_,$_.readUInt16));
			parsePixel = $bind(this,this.parsePixel2);
			break;
		case 24:
			readEntry = ($_=this.i,$bind($_,$_.readUInt24));
			parsePixel = $bind(this,this.parsePixel3);
			break;
		case 32:
			readEntry = ($_=this.i,$bind($_,$_.readInt32));
			parsePixel = $bind(this,this.parsePixel4);
			break;
		default:
			throw haxe_Exception.thrown("Unsupported bits per pixels amount!");
		}
		if(rle) {
			var rleChunk;
			var i = 0;
			while(i < amount) {
				rleChunk = this.i.readByte();
				if((rleChunk & 128) != 0) {
					rleChunk &= 127;
					var pixel = parsePixel(readEntry(),alpha);
					while(rleChunk >= 0) {
						list[i++] = pixel;
						--rleChunk;
					}
				} else {
					rleChunk &= 127;
					while(rleChunk >= 0) {
						list[i++] = parsePixel(readEntry(),alpha);
						--rleChunk;
					}
				}
			}
		} else {
			var _g = 0;
			var _g1 = amount;
			while(_g < _g1) {
				var i = _g++;
				list[i] = parsePixel(readEntry(),alpha);
			}
		}
		return list;
	}
	,readMono: function(bitsPerPixel,amount,alphaChannelBits,rle) {
		var this1 = new Array(amount);
		var list = this1;
		var alpha = alphaChannelBits != 0;
		var parsePixel;
		var readEntry;
		switch(bitsPerPixel) {
		case 8:
			readEntry = ($_=this.i,$bind($_,$_.readByte));
			parsePixel = $bind(this,this.parsePixel1);
			break;
		case 16:
			readEntry = ($_=this.i,$bind($_,$_.readUInt16));
			parsePixel = $bind(this,this.parsePixelGreyAlpha);
			break;
		default:
			throw haxe_Exception.thrown("Unsupported bits per pixels amount!");
		}
		if(rle) {
			var rleChunk;
			var i = 0;
			while(i < amount) {
				rleChunk = this.i.readByte();
				if((rleChunk & 128) != 0) {
					rleChunk &= 127;
					var pixel = parsePixel(readEntry(),alpha);
					while(rleChunk >= 0) {
						list[i++] = pixel;
						--rleChunk;
					}
				} else {
					rleChunk &= 127;
					while(rleChunk >= 0) {
						list[i++] = parsePixel(readEntry(),alpha);
						--rleChunk;
					}
				}
			}
		} else {
			var _g = 0;
			var _g1 = amount;
			while(_g < _g1) {
				var i = _g++;
				list[i] = parsePixel(readEntry(),alpha);
			}
		}
		return list;
	}
	,readIndexes: function(bitsPerPixel,amount,colorMap,offset,rle) {
		var this1 = new Array(amount);
		var list = this1;
		var readEntry;
		switch(bitsPerPixel) {
		case 8:
			readEntry = ($_=this.i,$bind($_,$_.readByte));
			break;
		case 16:
			readEntry = ($_=this.i,$bind($_,$_.readUInt16));
			break;
		case 24:
			readEntry = ($_=this.i,$bind($_,$_.readUInt24));
			break;
		case 32:
			readEntry = ($_=this.i,$bind($_,$_.readInt32));
			break;
		default:
			throw haxe_Exception.thrown("Unsupported bits per pixels amount!");
		}
		if(rle) {
			var i = 0;
			var rleChunk;
			while(i < amount) {
				rleChunk = this.i.readByte();
				if((rleChunk & 128) != 0) {
					rleChunk &= 127;
					var pixel = colorMap[offset + readEntry()];
					while(rleChunk >= 0) {
						list[i++] = pixel;
						--rleChunk;
					}
				} else {
					rleChunk &= 127;
					while(rleChunk >= 0) {
						list[i++] = colorMap[offset + readEntry()];
						--rleChunk;
					}
				}
			}
		} else {
			var _g = 0;
			var _g1 = amount;
			while(_g < _g1) {
				var i = _g++;
				list[i] = colorMap[offset + readEntry()];
			}
		}
		return list;
	}
	,parsePixel1: function(value,alpha) {
		return value << 16 | value << 8 | value;
	}
	,parsePixelGreyAlpha: function(value,alpha) {
		return (alpha ? (value & 65280) << 16 : 0) | this.parsePixel1(value & 255,false);
	}
	,parsePixel2: function(value,alpha) {
		return (alpha ? (value & 32768) == 1 ? -16777216 : 0 : 0) | (((value & 31744) >> 10) / 31 * 255 | 0) << 16 | (((value & 992) >> 5) / 31 * 255 | 0) << 8 | ((value & 31) / 31 * 255 | 0);
	}
	,parsePixel3: function(value,alpha) {
		return value;
	}
	,parsePixel4: function(value,alpha) {
		return value;
	}
	,__class__: format_tga_Reader
};
var format_tools_BitsInput = function(i) {
	this.i = i;
	this.nbits = 0;
	this.bits = 0;
};
$hxClasses["format.tools.BitsInput"] = format_tools_BitsInput;
format_tools_BitsInput.__name__ = "format.tools.BitsInput";
format_tools_BitsInput.prototype = {
	readBits: function(n) {
		if(this.nbits >= n) {
			var c = this.nbits - n;
			var k = this.bits >>> c & (1 << n) - 1;
			this.nbits = c;
			return k;
		}
		var k = this.i.readByte();
		if(this.nbits >= 24) {
			if(n > 31) {
				throw haxe_Exception.thrown("Bits error");
			}
			var c = 8 + this.nbits - n;
			var d = this.bits & (1 << this.nbits) - 1;
			d = d << 8 - c | k << c;
			this.bits = k;
			this.nbits = c;
			return d;
		}
		this.bits = this.bits << 8 | k;
		this.nbits += 8;
		return this.readBits(n);
	}
	,readBit: function() {
		if(this.nbits == 0) {
			this.bits = this.i.readByte();
			this.nbits = 8;
		}
		this.nbits--;
		return (this.bits >>> this.nbits & 1) == 1;
	}
	,__class__: format_tools_BitsInput
};
var format_tools_Inflate = function() { };
$hxClasses["format.tools.Inflate"] = format_tools_Inflate;
format_tools_Inflate.__name__ = "format.tools.Inflate";
format_tools_Inflate.run = function(bytes) {
	return haxe_zip_Uncompress.run(bytes);
};
var format_wav_WAVEFormat = $hxEnums["format.wav.WAVEFormat"] = { __ename__:true,__constructs__:null
	,WF_PCM: {_hx_name:"WF_PCM",_hx_index:0,__enum__:"format.wav.WAVEFormat",toString:$estr}
};
format_wav_WAVEFormat.__constructs__ = [format_wav_WAVEFormat.WF_PCM];
format_wav_WAVEFormat.__empty_constructs__ = [format_wav_WAVEFormat.WF_PCM];
var format_wav_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(false);
};
$hxClasses["format.wav.Reader"] = format_wav_Reader;
format_wav_Reader.__name__ = "format.wav.Reader";
format_wav_Reader.prototype = {
	read: function() {
		if(this.i.readString(4) != "RIFF") {
			throw haxe_Exception.thrown("RIFF header expected");
		}
		var len = this.i.readInt32();
		if(this.i.readString(4) != "WAVE") {
			throw haxe_Exception.thrown("WAVE signature not found");
		}
		var fmt = this.i.readString(4);
		_hx_loop1: while(fmt != "fmt ") switch(fmt) {
		case "JUNK":
			var junkLen = this.i.readInt32();
			this.i.read(junkLen);
			fmt = this.i.readString(4);
			break;
		case "bext":
			var bextLen = this.i.readInt32();
			this.i.read(bextLen);
			fmt = this.i.readString(4);
			break;
		default:
			break _hx_loop1;
		}
		if(fmt != "fmt ") {
			throw haxe_Exception.thrown("unsupported wave chunk " + fmt);
		}
		var fmtlen = this.i.readInt32();
		var format;
		switch(this.i.readUInt16()) {
		case 1:case 3:
			format = format_wav_WAVEFormat.WF_PCM;
			break;
		default:
			throw haxe_Exception.thrown("only PCM (uncompressed) WAV files are supported");
		}
		var channels = this.i.readUInt16();
		var samplingRate = this.i.readInt32();
		var byteRate = this.i.readInt32();
		var blockAlign = this.i.readUInt16();
		var bitsPerSample = this.i.readUInt16();
		if(fmtlen > 16) {
			this.i.read(fmtlen - 16);
		}
		var nextChunk = this.i.readString(4);
		while(nextChunk != "data") {
			this.i.read(this.i.readInt32());
			nextChunk = this.i.readString(4);
		}
		if(nextChunk != "data") {
			throw haxe_Exception.thrown("expected data subchunk");
		}
		var datalen = this.i.readInt32();
		var data;
		try {
			data = this.i.read(datalen);
		} catch( _g ) {
			if(((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw haxe_Exception.thrown("Invalid chunk data length");
			} else {
				throw _g;
			}
		}
		var cuePoints = [];
		try {
			while(true) {
				var nextChunk = this.i.readString(4);
				if(nextChunk == "cue ") {
					this.i.readInt32();
					var nbCuePoints = this.i.readInt32();
					var _g = 0;
					var _g1 = nbCuePoints;
					while(_g < _g1) {
						var _ = _g++;
						var cueId = this.i.readInt32();
						this.i.readInt32();
						this.i.readString(4);
						this.i.readInt32();
						this.i.readInt32();
						var cueSampleOffset = this.i.readInt32();
						cuePoints.push({ id : cueId, sampleOffset : cueSampleOffset});
					}
				} else {
					this.i.read(this.i.readInt32());
				}
			}
		} catch( _g ) {
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return { header : { format : format, channels : channels, samplingRate : samplingRate, byteRate : byteRate, blockAlign : blockAlign, bitsPerSample : bitsPerSample}, data : data, cuePoints : cuePoints};
	}
	,__class__: format_wav_Reader
};
var h2d_Bitmap = function(tile,parent) {
	h2d_Drawable.call(this,parent);
	this.set_tile(tile);
};
$hxClasses["h2d.Bitmap"] = h2d_Bitmap;
h2d_Bitmap.__name__ = "h2d.Bitmap";
h2d_Bitmap.__super__ = h2d_Drawable;
h2d_Bitmap.prototype = $extend(h2d_Drawable.prototype,{
	getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.tile != null) {
			if(this.width == null && this.height == null) {
				this.addBounds(relativeTo,out,this.tile.dx,this.tile.dy,this.tile.width,this.tile.height);
			} else {
				this.addBounds(relativeTo,out,this.tile.dx,this.tile.dy,this.width != null ? this.width : this.tile.width * this.height / this.tile.height,this.height != null ? this.height : this.tile.height * this.width / this.tile.width);
			}
		}
	}
	,set_tile: function(t) {
		if(this.tile == t) {
			return t;
		}
		this.tile = t;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return t;
	}
	,draw: function(ctx) {
		if(this.width == null && this.height == null) {
			this.emitTile(ctx,this.tile);
			return;
		}
		if(this.tile == null) {
			this.set_tile(h2d_Tile.fromColor(16711935));
		}
		var ow = this.tile.width;
		var oh = this.tile.height;
		this.tile.width = this.width != null ? this.width : ow * this.height / oh;
		this.tile.height = this.height != null ? this.height : oh * this.width / ow;
		this.emitTile(ctx,this.tile);
		this.tile.width = ow;
		this.tile.height = oh;
	}
	,__class__: h2d_Bitmap
});
var h2d_BlendMode = $hxEnums["h2d.BlendMode"] = { __ename__:true,__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"h2d.BlendMode",toString:$estr}
	,Alpha: {_hx_name:"Alpha",_hx_index:1,__enum__:"h2d.BlendMode",toString:$estr}
	,Add: {_hx_name:"Add",_hx_index:2,__enum__:"h2d.BlendMode",toString:$estr}
	,AlphaAdd: {_hx_name:"AlphaAdd",_hx_index:3,__enum__:"h2d.BlendMode",toString:$estr}
	,SoftAdd: {_hx_name:"SoftAdd",_hx_index:4,__enum__:"h2d.BlendMode",toString:$estr}
	,Multiply: {_hx_name:"Multiply",_hx_index:5,__enum__:"h2d.BlendMode",toString:$estr}
	,AlphaMultiply: {_hx_name:"AlphaMultiply",_hx_index:6,__enum__:"h2d.BlendMode",toString:$estr}
	,Erase: {_hx_name:"Erase",_hx_index:7,__enum__:"h2d.BlendMode",toString:$estr}
	,Screen: {_hx_name:"Screen",_hx_index:8,__enum__:"h2d.BlendMode",toString:$estr}
	,Sub: {_hx_name:"Sub",_hx_index:9,__enum__:"h2d.BlendMode",toString:$estr}
	,Max: {_hx_name:"Max",_hx_index:10,__enum__:"h2d.BlendMode",toString:$estr}
	,Min: {_hx_name:"Min",_hx_index:11,__enum__:"h2d.BlendMode",toString:$estr}
};
h2d_BlendMode.__constructs__ = [h2d_BlendMode.None,h2d_BlendMode.Alpha,h2d_BlendMode.Add,h2d_BlendMode.AlphaAdd,h2d_BlendMode.SoftAdd,h2d_BlendMode.Multiply,h2d_BlendMode.AlphaMultiply,h2d_BlendMode.Erase,h2d_BlendMode.Screen,h2d_BlendMode.Sub,h2d_BlendMode.Max,h2d_BlendMode.Min];
h2d_BlendMode.__empty_constructs__ = [h2d_BlendMode.None,h2d_BlendMode.Alpha,h2d_BlendMode.Add,h2d_BlendMode.AlphaAdd,h2d_BlendMode.SoftAdd,h2d_BlendMode.Multiply,h2d_BlendMode.AlphaMultiply,h2d_BlendMode.Erase,h2d_BlendMode.Screen,h2d_BlendMode.Sub,h2d_BlendMode.Max,h2d_BlendMode.Min];
var h2d_Camera = function(scene) {
	this.followRotation = false;
	this.posChanged = true;
	this.x = 0;
	this.posChanged = true;
	this.y = 0;
	this.posChanged = true;
	this.scaleX = 1;
	this.posChanged = true;
	this.scaleY = 1;
	this.posChanged = true;
	this.rotation = 0;
	this.posChanged = true;
	this.anchorX = 0;
	this.posChanged = true;
	this.anchorY = 0;
	this.viewX = 0;
	this.viewY = 0;
	this.viewW = 1;
	this.viewH = 1;
	this.visible = true;
	if(scene != null) {
		scene.addCamera(this);
	}
};
$hxClasses["h2d.Camera"] = h2d_Camera;
h2d_Camera.__name__ = "h2d.Camera";
h2d_Camera.prototype = {
	layerVisible: function(layer) {
		return true;
	}
	,enter: function(ctx) {
		ctx.pushCamera(this);
		if(this.clipViewport) {
			var old = ctx.inFilter;
			ctx.inFilter = null;
			ctx.pushRenderZone(this.viewX * this.scene.width,this.viewY * this.scene.height,this.viewW * this.scene.width,this.viewH * this.scene.height);
			ctx.inFilter = old;
		}
	}
	,exit: function(ctx) {
		if(this.clipViewport) {
			var old = ctx.inFilter;
			ctx.inFilter = null;
			ctx.popRenderZone();
			ctx.inFilter = old;
		}
		ctx.popCamera();
	}
	,sync: function(ctx,force) {
		if(force == null) {
			force = false;
		}
		if(this.scene == null) {
			return;
		}
		if(this.follow != null) {
			this.posChanged = true;
			this.x = this.follow.absX;
			this.posChanged = true;
			this.y = this.follow.absY;
			if(this.followRotation) {
				this.posChanged = true;
				this.rotation = -this.follow.rotation;
			}
		}
		if(this.posChanged || force) {
			if(this.rotation == 0) {
				this.matA = this.scaleX;
				this.matB = 0;
				this.matC = 0;
				this.matD = this.scaleY;
			} else {
				var cr = Math.cos(this.rotation);
				var sr = Math.sin(this.rotation);
				this.matA = this.scaleX * cr;
				this.matB = this.scaleX * sr;
				this.matC = this.scaleY * -sr;
				this.matD = this.scaleY * cr;
			}
			this.absX = Math.round(-(this.x * this.matA + this.y * this.matC) + this.scene.width * this.anchorX * this.viewW + this.scene.width * this.viewX);
			this.absY = Math.round(-(this.x * this.matB + this.y * this.matD) + this.scene.height * this.anchorY * this.viewH + this.scene.height * this.viewY);
			this.invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
			this.posChanged = false;
		}
	}
	,eventToCamera: function(e) {
		var x = (e.relX - this.scene.offsetX) / this.scene.viewportScaleX - this.absX;
		var y = (e.relY - this.scene.offsetY) / this.scene.viewportScaleY - this.absY;
		e.relX = (x * this.matD - y * this.matC) * this.invDet;
		e.relY = (-x * this.matB + y * this.matA) * this.invDet;
	}
	,__class__: h2d_Camera
};
var h2d_Kerning = function(c,o) {
	this.prevChar = c;
	this.offset = o;
};
$hxClasses["h2d.Kerning"] = h2d_Kerning;
h2d_Kerning.__name__ = "h2d.Kerning";
h2d_Kerning.prototype = {
	__class__: h2d_Kerning
};
var h2d_FontChar = function(t,w) {
	this.t = t;
	this.width = w;
};
$hxClasses["h2d.FontChar"] = h2d_FontChar;
h2d_FontChar.__name__ = "h2d.FontChar";
h2d_FontChar.prototype = {
	addKerning: function(prevChar,offset) {
		var k = new h2d_Kerning(prevChar,offset);
		k.next = this.kerning;
		this.kerning = k;
	}
	,getKerningOffset: function(prevChar) {
		var k = this.kerning;
		while(k != null) {
			if(k.prevChar == prevChar) {
				return k.offset;
			}
			k = k.next;
		}
		return 0;
	}
	,__class__: h2d_FontChar
};
var h2d_FontType = $hxEnums["h2d.FontType"] = { __ename__:true,__constructs__:null
	,BitmapFont: {_hx_name:"BitmapFont",_hx_index:0,__enum__:"h2d.FontType",toString:$estr}
	,SignedDistanceField: ($_=function(channel,alphaCutoff,smoothing) { return {_hx_index:1,channel:channel,alphaCutoff:alphaCutoff,smoothing:smoothing,__enum__:"h2d.FontType",toString:$estr}; },$_._hx_name="SignedDistanceField",$_.__params__ = ["channel","alphaCutoff","smoothing"],$_)
};
h2d_FontType.__constructs__ = [h2d_FontType.BitmapFont,h2d_FontType.SignedDistanceField];
h2d_FontType.__empty_constructs__ = [h2d_FontType.BitmapFont];
var h2d_Font = function(name,size,type) {
	this.name = name;
	this.size = size;
	this.initSize = size;
	this.glyphs = new haxe_ds_IntMap();
	this.defaultChar = this.nullChar = new h2d_FontChar(new h2d_Tile(null,0,0,0,0),0);
	this.charset = hxd_Charset.getDefault();
	if(name != null) {
		this.tilePath = haxe_io_Path.withExtension(name,"png");
	}
	if(type == null) {
		this.type = h2d_FontType.BitmapFont;
	} else {
		this.type = type;
	}
};
$hxClasses["h2d.Font"] = h2d_Font;
h2d_Font.__name__ = "h2d.Font";
h2d_Font.prototype = {
	__class__: h2d_Font
};
var h3d_prim_Primitive = function() {
	this.refCount = 0;
};
$hxClasses["h3d.prim.Primitive"] = h3d_prim_Primitive;
h3d_prim_Primitive.__name__ = "h3d.prim.Primitive";
h3d_prim_Primitive.prototype = {
	getBounds: function() {
		throw haxe_Exception.thrown("not implemented for " + Std.string(this));
	}
	,incref: function() {
		this.refCount++;
	}
	,decref: function() {
		this.refCount--;
		if(this.refCount <= 0) {
			this.refCount = 0;
			this.dispose();
		}
	}
	,alloc: function(engine) {
		throw haxe_Exception.thrown("not implemented");
	}
	,render: function(engine) {
		var tmp;
		if(this.buffer != null) {
			var _this = this.buffer;
			tmp = _this.buffer == null || _this.buffer.vbuf == null;
		} else {
			tmp = true;
		}
		if(tmp) {
			this.alloc(engine);
		}
		if(this.indexes == null) {
			if((this.buffer.flags & 1 << h3d_BufferFlag.Quads._hx_index) != 0) {
				engine.renderBuffer(this.buffer,engine.mem.quadIndexes,2,0,-1);
			} else {
				engine.renderBuffer(this.buffer,engine.mem.triIndexes,3,0,-1);
			}
		} else {
			engine.renderIndexed(this.buffer,this.indexes);
		}
	}
	,dispose: function() {
		if(this.buffer != null) {
			this.buffer.dispose();
			this.buffer = null;
		}
		if(this.indexes != null) {
			this.indexes.dispose();
			this.indexes = null;
		}
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__.split(".").pop();
	}
	,__class__: h3d_prim_Primitive
};
var h2d_Text = function(font,parent) {
	this.realMaxWidth = -1;
	this.constraintWidth = -1;
	this.lineBreak = true;
	this.lineSpacing = 0;
	this.letterSpacing = 0;
	h2d_Drawable.call(this,parent);
	this.set_font(font);
	this.set_textAlign(h2d_Align.Left);
	this.set_text("");
	this.currentText = "";
	this.set_textColor(16777215);
};
$hxClasses["h2d.Text"] = h2d_Text;
h2d_Text.__name__ = "h2d.Text";
h2d_Text.__super__ = h2d_Drawable;
h2d_Text.prototype = $extend(h2d_Drawable.prototype,{
	set_font: function(font) {
		if(this.font == font) {
			return font;
		}
		this.font = font;
		if(font != null) {
			var _g = font.type;
			switch(_g._hx_index) {
			case 0:
				if(this.sdfShader != null) {
					this.removeShader(this.sdfShader);
					this.sdfShader = null;
				}
				break;
			case 1:
				var channel = _g.channel;
				var alphaCutoff = _g.alphaCutoff;
				var smoothing = _g.smoothing;
				if(this.sdfShader == null) {
					this.sdfShader = new h3d_shader_SignedDistanceField();
					this.addShader(this.sdfShader);
				}
				if(this.smooth == null) {
					this.smooth = true;
				}
				this.sdfShader.alphaCutoff__ = alphaCutoff;
				this.sdfShader.smoothing__ = smoothing;
				var _this = this.sdfShader;
				_this.constModified = true;
				_this.channel__ = channel;
				var _this = this.sdfShader;
				_this.constModified = true;
				_this.autoSmoothing__ = smoothing == -1;
				break;
			}
		}
		if(this.glyphs != null) {
			var _this = this.glyphs;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
		}
		this.glyphs = new h2d_TileGroup(font == null ? null : font.tile,this);
		this.glyphs.set_visible(false);
		this.rebuild();
		return font;
	}
	,set_textAlign: function(a) {
		if(this.textAlign == a) {
			return a;
		}
		this.textAlign = a;
		this.rebuild();
		return a;
	}
	,onAdd: function() {
		h2d_Drawable.prototype.onAdd.call(this);
		this.rebuild();
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
		if(this.needsRebuild) {
			this.initGlyphs(this.currentText);
		}
	}
	,draw: function(ctx) {
		if(this.glyphs == null) {
			this.emitTile(ctx,h2d_Tile.fromColor(16711935,16,16));
			return;
		}
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
		if(this.needsRebuild) {
			this.initGlyphs(this.currentText);
		}
		if(this.dropShadow != null) {
			var oldX = this.absX;
			var oldY = this.absY;
			this.absX += this.dropShadow.dx * this.matA + this.dropShadow.dy * this.matC;
			this.absY += this.dropShadow.dx * this.matB + this.dropShadow.dy * this.matD;
			var oldR = this.color.x;
			var oldG = this.color.y;
			var oldB = this.color.z;
			var oldA = this.color.w;
			var _this = this.color;
			var c = this.dropShadow.color;
			_this.x = (c >> 16 & 255) / 255;
			_this.y = (c >> 8 & 255) / 255;
			_this.z = (c & 255) / 255;
			_this.w = (c >>> 24) / 255;
			this.color.w = this.dropShadow.alpha * oldA;
			this.glyphs.drawWith(ctx,this);
			this.absX = oldX;
			this.absY = oldY;
			var _this = this.color;
			var x = oldR;
			var y = oldG;
			var z = oldB;
			var w = oldA;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		}
		this.glyphs.drawWith(ctx,this);
	}
	,set_text: function(t) {
		var t1 = t == null ? "null" : t;
		if(t1 == this.text) {
			return t1;
		}
		this.text = t1;
		this.textChanged = true;
		this.validateText();
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return t1;
	}
	,validateText: function() {
	}
	,rebuild: function() {
		this.calcDone = false;
		this.needsRebuild = true;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
	}
	,splitRawText: function(text,leftMargin,afterData,font,sizes,prevChar) {
		if(prevChar == null) {
			prevChar = -1;
		}
		if(afterData == null) {
			afterData = 0.;
		}
		if(leftMargin == null) {
			leftMargin = 0.;
		}
		var maxWidth = this.realMaxWidth;
		if(maxWidth < 0) {
			if(sizes == null) {
				return text;
			} else {
				maxWidth = Infinity;
			}
		}
		if(font == null) {
			font = this.font;
		}
		var lines = [];
		var restPos = 0;
		var x = leftMargin;
		var _g = 0;
		var _g1 = text.length;
		while(_g < _g1) {
			var i = _g++;
			var cc = HxOverrides.cca(text,i);
			var c = font.glyphs.h[cc];
			if(c == null) {
				c = font.charset.resolveChar(cc,font.glyphs);
				if(c == null) {
					c = cc == 13 || cc == 10 ? font.nullChar : font.defaultChar;
				}
			}
			var e = c;
			var newline = cc == 10;
			var esize = e.width + e.getKerningOffset(prevChar);
			var nc = HxOverrides.cca(text,i + 1);
			if(font.charset.isBreakChar(cc) && (nc == null || !font.charset.isComplementChar(nc))) {
				if(lines.length == 0 && leftMargin > 0 && x > maxWidth) {
					lines.push("");
					if(sizes != null) {
						sizes.push(leftMargin);
					}
					x -= leftMargin;
				}
				var size = x + esize + this.letterSpacing;
				var k = i + 1;
				var max = text.length;
				var prevChar1 = prevChar;
				var breakFound = false;
				while(size <= maxWidth && k < max) {
					var cc1 = HxOverrides.cca(text,k++);
					if(this.lineBreak && (font.charset.isSpace(cc1) || cc1 == 10)) {
						breakFound = true;
						break;
					}
					var c1 = font.glyphs.h[cc1];
					if(c1 == null) {
						c1 = font.charset.resolveChar(cc1,font.glyphs);
						if(c1 == null) {
							c1 = cc1 == 13 || cc1 == 10 ? font.nullChar : font.defaultChar;
						}
					}
					var e1 = c1;
					size += e1.width + this.letterSpacing + e1.getKerningOffset(prevChar1);
					prevChar1 = cc1;
					var nc1 = HxOverrides.cca(text,k + 1);
					if(font.charset.isBreakChar(cc1) && (nc1 == null || !font.charset.isComplementChar(nc1))) {
						break;
					}
				}
				if(this.lineBreak && (size > maxWidth || !breakFound && size + afterData > maxWidth)) {
					newline = true;
					if(font.charset.isSpace(cc)) {
						lines.push(HxOverrides.substr(text,restPos,i - restPos));
						e = null;
					} else {
						lines.push(HxOverrides.substr(text,restPos,i + 1 - restPos));
					}
					restPos = i + 1;
				}
			}
			if(e != null && cc != 10) {
				x += esize + this.letterSpacing;
			}
			if(newline) {
				if(sizes != null) {
					sizes.push(x);
				}
				x = 0;
				prevChar = -1;
			} else {
				prevChar = cc;
			}
		}
		if(restPos < text.length) {
			if(lines.length == 0 && leftMargin > 0 && x + afterData - this.letterSpacing > maxWidth) {
				lines.push("");
				if(sizes != null) {
					sizes.push(leftMargin);
				}
				x -= leftMargin;
			}
			lines.push(HxOverrides.substr(text,restPos,text.length - restPos));
			if(sizes != null) {
				sizes.push(x);
			}
		}
		return lines.join("\n");
	}
	,initGlyphs: function(text,rebuild) {
		if(rebuild == null) {
			rebuild = true;
		}
		if(rebuild) {
			this.glyphs.clear();
		}
		var x = 0.;
		var y = 0.;
		var xMax = 0.;
		var xMin = 0.;
		var yMin = 0.;
		var prevChar = -1;
		var linei = 0;
		var align = this.textAlign;
		var lines = [];
		var dl = this.font.lineHeight + this.lineSpacing;
		var t = this.splitRawText(text,0,0,null,lines);
		var _g = 0;
		while(_g < lines.length) {
			var lw = lines[_g];
			++_g;
			if(lw > x) {
				x = lw;
			}
		}
		this.calcWidth = x;
		switch(align._hx_index) {
		case 0:
			x = 0;
			break;
		case 1:case 2:case 3:case 4:
			var max = align == h2d_Align.MultilineCenter || align == h2d_Align.MultilineRight ? Math.ceil(this.calcWidth) : this.realMaxWidth < 0 ? 0 : Math.ceil(this.realMaxWidth);
			var k = align == h2d_Align.Center || align == h2d_Align.MultilineCenter ? 0.5 : 1;
			var _g = 0;
			var _g1 = lines.length;
			while(_g < _g1) {
				var i = _g++;
				lines[i] = Math.floor((max - lines[i]) * k);
			}
			x = lines[0];
			xMin = x;
			break;
		}
		var _g = 0;
		var _g1 = t.length;
		while(_g < _g1) {
			var i = _g++;
			var cc = HxOverrides.cca(t,i);
			var _this = this.font;
			var c = _this.glyphs.h[cc];
			if(c == null) {
				c = _this.charset.resolveChar(cc,_this.glyphs);
				if(c == null) {
					c = cc == 13 || cc == 10 ? _this.nullChar : _this.defaultChar;
				}
			}
			var e = c;
			var offs = e.getKerningOffset(prevChar);
			var esize = e.width + offs;
			if(cc == 10) {
				if(x > xMax) {
					xMax = x;
				}
				switch(align._hx_index) {
				case 0:
					x = 0;
					break;
				case 1:case 2:case 3:case 4:
					x = lines[++linei];
					if(x < xMin) {
						xMin = x;
					}
					break;
				}
				y += dl;
				prevChar = -1;
			} else {
				if(e != null) {
					if(rebuild) {
						var _this1 = this.glyphs;
						_this1.content.add(x + offs,y,_this1.curColor.x,_this1.curColor.y,_this1.curColor.z,_this1.curColor.w,e.t);
					}
					if(y == 0 && e.t.dy < yMin) {
						yMin = e.t.dy;
					}
					x += esize + this.letterSpacing;
				}
				prevChar = cc;
			}
		}
		if(x > xMax) {
			xMax = x;
		}
		this.calcXMin = xMin;
		this.calcYMin = yMin;
		this.calcWidth = xMax - xMin;
		this.calcHeight = y + this.font.lineHeight;
		this.calcSizeHeight = y + (this.font.baseLine > 0 ? this.font.baseLine : this.font.lineHeight);
		this.calcDone = true;
		if(rebuild) {
			this.needsRebuild = false;
		}
	}
	,get_textHeight: function() {
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
		if(!this.calcDone) {
			this.initGlyphs(this.text,this.needsRebuild);
		}
		return this.calcHeight;
	}
	,get_textWidth: function() {
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
		if(!this.calcDone) {
			this.initGlyphs(this.text,this.needsRebuild);
		}
		return this.calcWidth;
	}
	,set_maxWidth: function(w) {
		if(this.maxWidth == w) {
			return w;
		}
		this.maxWidth = w;
		this.updateConstraint();
		return w;
	}
	,updateConstraint: function() {
		var old = this.realMaxWidth;
		if(this.maxWidth == null) {
			this.realMaxWidth = this.constraintWidth;
		} else if(this.constraintWidth < 0) {
			this.realMaxWidth = this.maxWidth;
		} else {
			var a = this.maxWidth;
			var b = this.constraintWidth;
			this.realMaxWidth = a > b ? b : a;
		}
		if(this.realMaxWidth != old) {
			this.rebuild();
		}
	}
	,set_textColor: function(c) {
		if(this.textColor == c) {
			return c;
		}
		this.textColor = c;
		var a = this.color.w;
		var _this = this.color;
		_this.x = (c >> 16 & 255) / 255;
		_this.y = (c >> 8 & 255) / 255;
		_this.z = (c & 255) / 255;
		_this.w = (c >>> 24) / 255;
		this.color.w = a;
		return c;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
		if(!this.calcDone) {
			this.initGlyphs(this.text,this.needsRebuild);
		}
		var x;
		var y;
		var w;
		var h;
		if(forSize) {
			x = this.calcXMin;
			y = 0.;
			w = this.calcWidth;
			h = this.calcSizeHeight;
		} else {
			x = this.calcXMin;
			y = this.calcYMin;
			w = this.calcWidth;
			h = this.calcHeight - this.calcYMin;
		}
		this.addBounds(relativeTo,out,x,y,w,h);
	}
	,__class__: h2d_Text
});
var hxd_Interactive = function() { };
$hxClasses["hxd.Interactive"] = hxd_Interactive;
hxd_Interactive.__name__ = "hxd.Interactive";
hxd_Interactive.__isInterface__ = true;
hxd_Interactive.prototype = {
	__class__: hxd_Interactive
};
var h2d_Interactive = function(width,height,parent,shape) {
	this.shapeY = 0;
	this.shapeX = 0;
	this.lastClickFrame = -1;
	this.mouseDownButton = -1;
	this.allowMultiClick = false;
	this.enableRightButton = false;
	this.propagateEvents = false;
	this.cancelEvents = false;
	this.cursor = hxd_Cursor.Button;
	h2d_Object.call(this,parent);
	this.width = width;
	this.height = height;
	this.shape = shape;
};
$hxClasses["h2d.Interactive"] = h2d_Interactive;
h2d_Interactive.__name__ = "h2d.Interactive";
h2d_Interactive.__interfaces__ = [hxd_Interactive];
h2d_Interactive.__super__ = h2d_Object;
h2d_Interactive.prototype = $extend(h2d_Object.prototype,{
	onAdd: function() {
		this.scene = this.getScene();
		if(this.scene != null) {
			this.scene.addEventTarget(this);
		}
		h2d_Object.prototype.onAdd.call(this);
	}
	,draw: function(ctx) {
		this.maskedBounds = ctx.getCurrentRenderZone();
		if(this.backgroundColor != null) {
			this.emitTile(ctx,h2d_Tile.fromColor(this.backgroundColor,this.width | 0,this.height | 0,(this.backgroundColor >>> 24) / 255));
		}
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Object.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.backgroundColor != null || forSize) {
			this.addBounds(relativeTo,out,0,0,this.width | 0,this.height | 0);
		}
	}
	,onHierarchyMoved: function(parentChanged) {
		h2d_Object.prototype.onHierarchyMoved.call(this,parentChanged);
		if(this.scene != null) {
			this.scene.removeEventTarget(this);
			this.scene = this.getScene();
			if(this.scene != null) {
				this.scene.addEventTarget(this);
			}
		}
	}
	,onRemove: function() {
		if(this.scene != null) {
			this.scene.removeEventTarget(this,true);
			this.scene = null;
		}
		h2d_Object.prototype.onRemove.call(this);
	}
	,checkBounds: function(e) {
		switch(e.kind._hx_index) {
		case 4:case 6:case 7:case 10:
			return false;
		default:
			return true;
		}
	}
	,getInteractiveScene: function() {
		return this.scene;
	}
	,handleEvent: function(e) {
		if(this.maskedBounds != null && this.checkBounds(e)) {
			var pt = new h2d_col_Point(e.relX,e.relY);
			this.localToGlobal(pt);
			if(pt.x < this.maskedBounds.xMin || pt.y < this.maskedBounds.yMin || pt.x > this.maskedBounds.xMax || pt.y > this.maskedBounds.yMax) {
				e.cancel = true;
				return;
			}
		}
		if(this.shape == null && this.isEllipse && this.checkBounds(e)) {
			var cx = this.width * 0.5;
			var cy = this.height * 0.5;
			var dx = (e.relX - cx) / cx;
			var dy = (e.relY - cy) / cy;
			if(dx * dx + dy * dy > 1) {
				e.cancel = true;
				return;
			}
		}
		if(this.propagateEvents) {
			e.propagate = true;
		}
		if(this.cancelEvents) {
			e.cancel = true;
		}
		switch(e.kind._hx_index) {
		case 0:
			if(this.enableRightButton || e.button == 0) {
				this.mouseDownButton = e.button;
				this.onPush(e);
				if(e.cancel) {
					this.mouseDownButton = -1;
				}
			}
			break;
		case 1:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				var frame = hxd_Timer.frameCount;
				if(this.mouseDownButton == e.button && (this.lastClickFrame != frame || this.allowMultiClick)) {
					this.onClick(e);
					this.lastClickFrame = frame;
				}
			}
			this.mouseDownButton = -1;
			break;
		case 2:
			this.onMove(e);
			break;
		case 3:
			this.onOver(e);
			break;
		case 4:
			this.onOut(e);
			break;
		case 5:
			e.propagate = true;
			this.onWheel(e);
			break;
		case 6:
			this.onFocus(e);
			break;
		case 7:
			this.onFocusLost(e);
			break;
		case 8:
			this.onKeyDown(e);
			break;
		case 9:
			this.onKeyUp(e);
			break;
		case 10:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onReleaseOutside(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 11:
			this.onTextInput(e);
			break;
		case 12:
			this.onCheck(e);
			break;
		}
	}
	,calcAbsPos: function() {
		h2d_Object.prototype.calcAbsPos.call(this);
		this.invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
	}
	,onOver: function(e) {
	}
	,onOut: function(e) {
	}
	,onPush: function(e) {
	}
	,onRelease: function(e) {
	}
	,onReleaseOutside: function(e) {
	}
	,onClick: function(e) {
	}
	,onMove: function(e) {
	}
	,onWheel: function(e) {
	}
	,onFocus: function(e) {
	}
	,onFocusLost: function(e) {
	}
	,onKeyUp: function(e) {
	}
	,onKeyDown: function(e) {
	}
	,onCheck: function(e) {
	}
	,onTextInput: function(e) {
	}
	,__class__: h2d_Interactive
});
var h2d_Layers = function(parent) {
	h2d_Object.call(this,parent);
	this.layersIndexes = [];
	this.layerCount = 0;
};
$hxClasses["h2d.Layers"] = h2d_Layers;
h2d_Layers.__name__ = "h2d.Layers";
h2d_Layers.__super__ = h2d_Object;
h2d_Layers.prototype = $extend(h2d_Object.prototype,{
	addChild: function(s) {
		this.add(s,-1);
	}
	,add: function(s,layer,index) {
		if(index == null) {
			index = -1;
		}
		if(layer == null) {
			layer = -1;
		}
		if(s.parent == this) {
			var old = s.allocated;
			s.allocated = false;
			this.removeChild(s);
			s.allocated = old;
		}
		if(layer == -1) {
			layer = this.layerCount == 0 ? 0 : this.layerCount - 1;
		}
		while(layer >= this.layerCount) this.layersIndexes[this.layerCount++] = this.children.length;
		if(index != -1) {
			if(layer == 0) {
				var b = this.layersIndexes[layer];
				var b1 = index > b ? b : index;
				h2d_Object.prototype.addChildAt.call(this,s,0 < b1 ? b1 : 0);
			} else if(index < 0) {
				h2d_Object.prototype.addChildAt.call(this,s,this.layersIndexes[layer - 1]);
			} else {
				var a = this.layersIndexes[layer - 1] + index;
				var b = this.layersIndexes[layer];
				h2d_Object.prototype.addChildAt.call(this,s,a > b ? b : a);
			}
		} else {
			h2d_Object.prototype.addChildAt.call(this,s,this.layersIndexes[layer]);
		}
		var _g = layer;
		var _g1 = this.layerCount;
		while(_g < _g1) {
			var i = _g++;
			this.layersIndexes[i]++;
		}
	}
	,addChildAt: function(s,index) {
		this.add(s,-1,index);
	}
	,removeChild: function(s) {
		var _g = 0;
		var _g1 = this.children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.children[i] == s) {
				this.children.splice(i,1);
				if(s.allocated) {
					s.onRemove();
				}
				s.parent = null;
				s.posChanged = true;
				if(s.parentContainer != null) {
					s.setParentContainer(null);
				}
				var k = this.layerCount - 1;
				while(k >= 0 && this.layersIndexes[k] > i) {
					this.layersIndexes[k]--;
					--k;
				}
				if(this.parentContainer != null) {
					this.parentContainer.contentChanged(this);
				}
				break;
			}
		}
	}
	,over: function(s) {
		var _g = 0;
		var _g1 = this.children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.children[i] == s) {
				var _g2 = 0;
				var _g3 = this.layersIndexes;
				while(_g2 < _g3.length) {
					var l = _g3[_g2];
					++_g2;
					if(l > i) {
						var _g4 = i;
						var _g5 = l - 1;
						while(_g4 < _g5) {
							var p = _g4++;
							this.children[p] = this.children[p + 1];
						}
						this.children[l - 1] = s;
						if(s.allocated) {
							s.onHierarchyMoved(false);
						}
						return;
					}
				}
				return;
			}
		}
	}
	,__class__: h2d_Layers
});
var h3d_impl_RenderContext = function() {
	this.engine = h3d_Engine.CURRENT;
	this.frame = 0;
	this.time = 0.;
	this.elapsedTime = 1. / hxd_System.getDefaultFrameRate();
	this.textures = new h3d_impl_TextureCache(this);
};
$hxClasses["h3d.impl.RenderContext"] = h3d_impl_RenderContext;
h3d_impl_RenderContext.__name__ = "h3d.impl.RenderContext";
h3d_impl_RenderContext.prototype = {
	__class__: h3d_impl_RenderContext
};
var h2d_RenderContext = function(scene) {
	this.renderZoneIndex = 0;
	this.renderZoneStack = [];
	this.tmpBounds = new h2d_col_Bounds();
	this.defaultSmooth = false;
	this.globalAlpha = 1.;
	h3d_impl_RenderContext.call(this);
	this.scene = scene;
	this.bufPos = 0;
	this.manager = new h3d_pass_ShaderManager();
	this.pass = new h3d_mat_Pass("",null);
	this.pass.depth(true,h3d_mat_Compare.Always);
	this.pass.set_culling(h3d_mat_Face.None);
	this.baseShader = new h3d_shader_Base2d();
	this.baseShader.setPriority(100);
	this.baseShader.zValue__ = 0.;
	this.baseShaderList = new hxsl_ShaderList(this.baseShader);
	this.targetsStack = [];
	this.targetsStackIndex = 0;
	this.cameraStack = [];
	this.cameraStackIndex = 0;
	this.filterStack = [];
	this.filterStackIndex = 0;
};
$hxClasses["h2d.RenderContext"] = h2d_RenderContext;
h2d_RenderContext.__name__ = "h2d.RenderContext";
h2d_RenderContext.__super__ = h3d_impl_RenderContext;
h2d_RenderContext.prototype = $extend(h3d_impl_RenderContext.prototype,{
	begin: function() {
		this.texture = null;
		this.currentObj = null;
		this.bufPos = 0;
		this.stride = 0;
		this.viewA = this.scene.viewportA;
		this.viewB = 0;
		this.viewC = 0;
		this.viewD = this.scene.viewportD;
		this.viewX = this.scene.viewportX;
		this.viewY = this.scene.viewportY;
		this.targetFlipY = this.engine.driver.hasFeature(h3d_impl_Feature.BottomLeftCoords) ? -1 : 1;
		this.baseFlipY = this.engine.getCurrentTarget() != null ? this.targetFlipY : 1;
		this.inFilter = null;
		this.manager.globals.set("time",this.time);
		this.manager.globals.set("global.time",this.time);
		var _this = this.baseShader;
		_this.constModified = true;
		_this.pixelAlign__ = false;
		var _this = this.baseShader.halfPixelInverse__;
		var x = 0.5 / this.engine.width;
		var y = 0.5 / this.engine.height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		_this.w = 1.;
		var _this = this.baseShader.viewportA__;
		var x = this.scene.viewportA;
		var y = 0;
		var z = this.scene.viewportX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		var _this = this.baseShader.viewportB__;
		var x = 0;
		var y = this.scene.viewportD * -this.baseFlipY;
		var z = this.scene.viewportY * -this.baseFlipY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		var _this = this.baseShader.filterMatrixA__;
		var x = 1;
		var y = 0;
		var z = 0;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		var _this = this.baseShader.filterMatrixB__;
		var x = 0;
		var y = 1;
		var z = 0;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		this.baseShaderList.next = null;
		this.initShaders(this.baseShaderList);
		this.engine.selectMaterial(this.pass);
		this.textures.begin();
	}
	,initShaders: function(shaders) {
		this.currentShaders = shaders;
		this.compiledShader = this.manager.compileShaders(shaders);
		if(this.buffers == null) {
			this.buffers = new h3d_shader_Buffers(this.compiledShader);
		} else {
			var _this = this.buffers;
			var s = this.compiledShader;
			_this.vertex.grow(s.vertex);
			_this.fragment.grow(s.fragment);
		}
		this.manager.fillGlobals(this.buffers,this.compiledShader);
		this.engine.selectShader(this.compiledShader);
		this.engine.uploadShaderBuffers(this.buffers,0);
	}
	,end: function() {
		this.texture = null;
		this.currentObj = null;
		this.baseShaderList.next = null;
		if(this.targetsStackIndex != 0) {
			throw haxe_Exception.thrown("Missing popTarget()");
		}
		if(this.cameraStackIndex != 0) {
			throw haxe_Exception.thrown("Missing popCamera()");
		}
	}
	,pushCamera: function(cam) {
		var entry = this.cameraStack[this.cameraStackIndex++];
		if(entry == null) {
			entry = { va : 0, vb : 0, vc : 0, vd : 0, vx : 0, vy : 0};
			this.cameraStack.push(entry);
		}
		var tmpA = this.viewA;
		var tmpB = this.viewB;
		var tmpC = this.viewC;
		var tmpD = this.viewD;
		entry.va = tmpA;
		entry.vb = tmpB;
		entry.vc = tmpC;
		entry.vd = tmpD;
		entry.vx = this.viewX;
		entry.vy = this.viewY;
		this.viewA = cam.matA * tmpA + cam.matB * tmpC;
		this.viewB = cam.matA * tmpB + cam.matB * tmpD;
		this.viewC = cam.matC * tmpA + cam.matD * tmpC;
		this.viewD = cam.matC * tmpB + cam.matD * tmpD;
		this.viewX = cam.absX * tmpA + cam.absY * tmpC + this.viewX;
		this.viewY = cam.absX * tmpB + cam.absY * tmpD + this.viewY;
		var flipY = this.curTarget != null ? -this.targetFlipY : -this.baseFlipY;
		var _this = this.baseShader.viewportA__;
		var x = this.viewA;
		var y = this.viewC;
		var z = this.viewX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		var _this = this.baseShader.viewportB__;
		var x = this.viewB * flipY;
		var y = this.viewD * flipY;
		var z = this.viewY * flipY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
	}
	,popCamera: function() {
		if(this.cameraStackIndex == 0) {
			throw haxe_Exception.thrown("Too many popCamera()");
		}
		var inf = this.cameraStack[--this.cameraStackIndex];
		this.viewA = inf.va;
		this.viewB = inf.vb;
		this.viewC = inf.vc;
		this.viewD = inf.vd;
		this.viewX = inf.vx;
		this.viewY = inf.vy;
		var flipY = this.curTarget != null ? -this.targetFlipY : -this.baseFlipY;
		var _this = this.baseShader.viewportA__;
		var x = this.viewA;
		var y = this.viewC;
		var z = this.viewX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		var _this = this.baseShader.viewportB__;
		var x = this.viewB * flipY;
		var y = this.viewD * flipY;
		var z = this.viewY * flipY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
	}
	,pushFilter: function(spr) {
		if(this.filterStack.length == 0 && this.onEnterFilter != null) {
			if(!this.onEnterFilter(spr)) {
				return false;
			}
		}
		this.inFilter = this.filterStack[this.filterStackIndex++];
		if(this.inFilter == null) {
			this.inFilter = { spr : null, scaleX : 1, scaleY : 1};
			this.filterStack.push(this.inFilter);
		}
		this.inFilter.spr = spr;
		this.inFilter.scaleX = 1;
		this.inFilter.scaleY = 1;
		return true;
	}
	,setFilterScale: function(scaleX,scaleY) {
		if(this.inFilter != null) {
			this.inFilter.scaleX = scaleX;
			this.inFilter.scaleY = scaleY;
		}
	}
	,popFilter: function() {
		this.inFilter.spr = null;
		this.filterStackIndex--;
		if(this.filterStackIndex > 0) {
			this.inFilter = this.filterStack[this.filterStackIndex - 1];
		} else {
			this.inFilter = null;
			if(this.onLeaveFilter != null) {
				this.onLeaveFilter(this.filterStack[this.filterStackIndex].spr);
			}
		}
	}
	,pushTarget: function(t,startX,startY,width,height) {
		if(height == null) {
			height = -1;
		}
		if(width == null) {
			width = -1;
		}
		if(startY == null) {
			startY = 0;
		}
		if(startX == null) {
			startX = 0;
		}
		this.engine.pushTarget(t);
		this.initShaders(this.baseShaderList);
		var entry = this.targetsStack[this.targetsStackIndex++];
		if(entry == null) {
			entry = { t : null, va : 0, vb : 0, vc : 0, vd : 0, vx : 0, vy : 0, hasRZ : false, rzX : 0, rzY : 0, rzW : 0, rzH : 0};
			this.targetsStack.push(entry);
		}
		entry.t = this.curTarget;
		entry.va = this.viewA;
		entry.vb = this.viewB;
		entry.vc = this.viewC;
		entry.vd = this.viewD;
		entry.vx = this.viewX;
		entry.vy = this.viewY;
		entry.hasRZ = this.hasRenderZone;
		entry.rzX = this.renderX;
		entry.rzY = this.renderY;
		entry.rzW = this.renderW;
		entry.rzH = this.renderH;
		if(width < 0) {
			width = t == null ? this.scene.width : t.width;
		}
		if(height < 0) {
			height = t == null ? this.scene.height : t.height;
		}
		this.viewA = 2 / width;
		this.viewB = 0;
		this.viewC = 0;
		this.viewD = 2 / height;
		this.viewX = -1 - startX * this.viewA;
		this.viewY = -1 - startY * this.viewD;
		var _this = this.baseShader.halfPixelInverse__;
		var x = 0.5 / (t == null ? this.engine.width : t.width);
		var y = 0.5 / (t == null ? this.engine.height : t.height);
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		_this.w = 1.;
		var _this = this.baseShader.viewportA__;
		var x = this.viewA;
		var y = this.viewC;
		var z = this.viewX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		var _this = this.baseShader.viewportB__;
		var x = this.viewB * -this.targetFlipY;
		var y = this.viewD * -this.targetFlipY;
		var z = this.viewY * -this.targetFlipY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		this.curTarget = t;
		this.currentBlend = null;
		if(this.hasRenderZone) {
			this.hasRenderZone = false;
			this.engine.setRenderZone();
		}
	}
	,popTarget: function() {
		if(this.targetsStackIndex <= 0) {
			throw haxe_Exception.thrown("Too many popTarget()");
		}
		this.engine.popTarget();
		var tinf = this.targetsStack[--this.targetsStackIndex];
		var t = this.curTarget = tinf.t;
		this.viewA = tinf.va;
		this.viewB = tinf.vb;
		this.viewC = tinf.vc;
		this.viewD = tinf.vd;
		this.viewX = tinf.vx;
		this.viewY = tinf.vy;
		var flipY = t == null ? -this.baseFlipY : -this.targetFlipY;
		this.initShaders(this.baseShaderList);
		var _this = this.baseShader.halfPixelInverse__;
		var x = 0.5 / (t == null ? this.engine.width : t.width);
		var y = 0.5 / (t == null ? this.engine.height : t.height);
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		_this.w = 1.;
		var _this = this.baseShader.viewportA__;
		var x = this.viewA;
		var y = this.viewC;
		var z = this.viewX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		var _this = this.baseShader.viewportB__;
		var x = this.viewB * flipY;
		var y = this.viewD * flipY;
		var z = this.viewY * flipY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		if(tinf.hasRZ) {
			this.setRZ(tinf.rzX,tinf.rzY,tinf.rzW,tinf.rzH);
		}
	}
	,pushRenderZone: function(x,y,w,h) {
		var inf = this.renderZoneStack[this.renderZoneIndex++];
		if(inf == null) {
			inf = { hasRZ : this.hasRenderZone, x : this.renderX, y : this.renderY, w : this.renderW, h : this.renderH};
			this.renderZoneStack[this.renderZoneIndex - 1] = inf;
		} else if(this.hasRenderZone) {
			inf.hasRZ = true;
			inf.x = this.renderX;
			inf.y = this.renderY;
			inf.w = this.renderW;
			inf.h = this.renderH;
		} else {
			inf.hasRZ = false;
		}
		this.setRZ(x,y,w,h);
	}
	,popRenderZone: function() {
		if(this.renderZoneIndex == 0) {
			throw haxe_Exception.thrown("Too many popRenderZone()");
		}
		var inf = this.renderZoneStack[--this.renderZoneIndex];
		if(inf.hasRZ) {
			this.setRZ(inf.x,inf.y,inf.w,inf.h);
		} else {
			this.hasRenderZone = false;
			this.engine.setRenderZone();
		}
	}
	,getCurrentRenderZone: function() {
		if(!this.hasRenderZone) {
			return null;
		}
		var x0 = this.renderX;
		var y0 = this.renderY;
		var width = this.renderW;
		var height = this.renderH;
		var b = new h2d_col_Bounds();
		b.xMin = x0;
		b.yMin = y0;
		b.xMax = x0 + width;
		b.yMax = y0 + height;
		return b;
	}
	,setRZ: function(x,y,w,h) {
		this.hasRenderZone = true;
		this.renderX = x;
		this.renderY = y;
		this.renderW = w;
		this.renderH = h;
		var scaleX = this.scene.viewportA * this.engine.width / 2;
		var scaleY = this.scene.viewportD * this.engine.height / 2;
		if(this.inFilter != null) {
			var fa = this.baseShader.filterMatrixA__;
			var fb = this.baseShader.filterMatrixB__;
			var x2 = x + w;
			var y2 = y + h;
			var rx1 = x * fa.x + y * fa.y + fa.z;
			var ry1 = x * fb.x + y * fb.y + fb.z;
			var rx2 = x2 * fa.x + y2 * fa.y + fa.z;
			var ry2 = x2 * fb.x + y2 * fb.y + fb.z;
			x = rx1;
			y = ry1;
			w = rx2 - rx1;
			h = ry2 - ry1;
		}
		this.engine.setRenderZone(x * scaleX + (this.scene.viewportX + 1) * (this.engine.width / 2) + 1e-10 | 0,y * scaleY + (this.scene.viewportY + 1) * (this.engine.height / 2) + 1e-10 | 0,w * scaleX + 1e-10 | 0,h * scaleY + 1e-10 | 0);
	}
	,drawScene: function() {
		this.scene.drawRec(this);
	}
	,beforeDraw: function() {
		if(this.texture == null) {
			this.texture = h3d_mat_Texture.fromColor(16711935);
		}
		this.baseShader.texture__ = this.texture;
		this.texture.set_filter((this.currentObj.smooth == null ? this.defaultSmooth : this.currentObj.smooth) ? h3d_mat_Filter.Linear : h3d_mat_Filter.Nearest);
		this.texture.set_wrap(this.currentObj.tileWrap && (this.currentObj.filter == null || this.inFilter != null) ? h3d_mat_Wrap.Repeat : h3d_mat_Wrap.Clamp);
		var blend = this.currentObj.blendMode;
		if(this.inFilter != null && this.inFilter.spr == this.currentObj && blend == h2d_BlendMode.Erase) {
			blend = h2d_BlendMode.Add;
		}
		if(this.inFilterBlend != null) {
			blend = this.inFilterBlend;
		}
		if(blend != this.currentBlend) {
			this.currentBlend = blend;
			this.pass.setBlendMode(blend);
			if(blend == h2d_BlendMode.Alpha || blend == h2d_BlendMode.Add) {
				this.pass.set_blendAlphaSrc(h3d_mat_Blend.One);
				if(this.inFilterBlend != null) {
					this.pass.set_blendSrc(h3d_mat_Blend.One);
				}
			}
		}
		this.manager.fillParams(this.buffers,this.compiledShader,this.currentShaders);
		this.engine.selectMaterial(this.pass);
		this.engine.uploadShaderBuffers(this.buffers,1);
		this.engine.uploadShaderBuffers(this.buffers,2);
		this.engine.uploadShaderBuffers(this.buffers,3);
	}
	,beginDrawBatchState: function(obj) {
		if(!this.beginDraw(obj,null,true)) {
			return false;
		}
		if(this.inFilter != null && this.inFilter.spr == obj) {
			var _this = this.baseShader.color__;
			var x = obj.color.x;
			var y = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else if(this.inFilterBlend != null) {
			var _this = this.baseShader.color__;
			var x = this.globalAlpha;
			var y = this.globalAlpha;
			var z = this.globalAlpha;
			var w = this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else {
			var _this = this.baseShader.color__;
			var x = obj.color.x;
			var y = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w * this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		}
		var _this = this.baseShader.absoluteMatrixA__;
		var x = obj.matA;
		var y = obj.matC;
		var z = obj.absX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		var _this = this.baseShader.absoluteMatrixB__;
		var x = obj.matB;
		var y = obj.matD;
		var z = obj.absY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		return true;
	}
	,drawTile: function(obj,tile) {
		var matA;
		var matB;
		var matC;
		var matD;
		var absX;
		var absY;
		if(this.inFilter != null) {
			var f1 = this.baseShader.filterMatrixA__;
			var f2 = this.baseShader.filterMatrixB__;
			var tmpA = obj.matA * f1.x + obj.matB * f1.y;
			var tmpB = obj.matA * f2.x + obj.matB * f2.y;
			var tmpC = obj.matC * f1.x + obj.matD * f1.y;
			var tmpD = obj.matC * f2.x + obj.matD * f2.y;
			var tmpX = obj.absX * f1.x + obj.absY * f1.y + f1.z;
			var tmpY = obj.absX * f2.x + obj.absY * f2.y + f2.z;
			matA = tmpA * this.viewA + tmpB * this.viewC;
			matB = tmpA * this.viewB + tmpB * this.viewD;
			matC = tmpC * this.viewA + tmpD * this.viewC;
			matD = tmpC * this.viewB + tmpD * this.viewD;
			absX = tmpX * this.viewA + tmpY * this.viewC + this.viewX;
			absY = tmpX * this.viewB + tmpY * this.viewD + this.viewY;
		} else {
			matA = obj.matA * this.viewA + obj.matB * this.viewC;
			matB = obj.matA * this.viewB + obj.matB * this.viewD;
			matC = obj.matC * this.viewA + obj.matD * this.viewC;
			matD = obj.matC * this.viewB + obj.matD * this.viewD;
			absX = obj.absX * this.viewA + obj.absY * this.viewC + this.viewX;
			absY = obj.absX * this.viewB + obj.absY * this.viewD + this.viewY;
		}
		if(matB == 0 && matC == 0) {
			var tx = tile.dx + tile.width * 0.5;
			var ty = tile.dy + tile.height * 0.5;
			var a = matA < 0 ? -matA : matA;
			var b = matD < 0 ? -matD : matD;
			var tr = (tile.width > tile.height ? tile.width : tile.height) * 1.5 * (a < b ? b : a);
			var cx = absX + tx * matA;
			var cy = absY + ty * matD;
			if(cx + tr < -1 || cx - tr > 1 || cy + tr < -1 || cy - tr > 1) {
				return false;
			}
		} else {
			var xMin = 1e20;
			var yMin = 1e20;
			var xMax = -1e20;
			var yMax = -1e20;
			var hw = tile.width * 0.5;
			var hh = tile.height * 0.5;
			var px = tile.dx * matA + tile.dy * matC;
			var py = tile.dx * matB + tile.dy * matD;
			if(px < xMin) {
				xMin = px;
			}
			if(px > xMax) {
				xMax = px;
			}
			if(py < yMin) {
				yMin = py;
			}
			if(py > yMax) {
				yMax = py;
			}
			var x = tile.width;
			var px = (x + tile.dx) * matA + tile.dy * matC;
			var py = (x + tile.dx) * matB + tile.dy * matD;
			if(px < xMin) {
				xMin = px;
			}
			if(px > xMax) {
				xMax = px;
			}
			if(py < yMin) {
				yMin = py;
			}
			if(py > yMax) {
				yMax = py;
			}
			var y = tile.height;
			var px = tile.dx * matA + (y + tile.dy) * matC;
			var py = tile.dx * matB + (y + tile.dy) * matD;
			if(px < xMin) {
				xMin = px;
			}
			if(px > xMax) {
				xMax = px;
			}
			if(py < yMin) {
				yMin = py;
			}
			if(py > yMax) {
				yMax = py;
			}
			var x = tile.width;
			var y = tile.height;
			var px = (x + tile.dx) * matA + (y + tile.dy) * matC;
			var py = (x + tile.dx) * matB + (y + tile.dy) * matD;
			if(px < xMin) {
				xMin = px;
			}
			if(px > xMax) {
				xMax = px;
			}
			if(py < yMin) {
				yMin = py;
			}
			if(py > yMax) {
				yMax = py;
			}
			if(absX + xMax < -1 || absY + yMax < -1 || absX + xMin > 1 || absY + yMin > 1) {
				return false;
			}
		}
		if(!this.beginDraw(obj,tile.innerTex,true,true)) {
			return false;
		}
		if(this.inFilter != null && this.inFilter.spr == obj) {
			var _this = this.baseShader.color__;
			var x = obj.color.x;
			var y = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else if(this.inFilterBlend != null) {
			var _this = this.baseShader.color__;
			var x = this.globalAlpha;
			var y = this.globalAlpha;
			var z = this.globalAlpha;
			var w = this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else {
			var _this = this.baseShader.color__;
			var x = obj.color.x;
			var y = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w * this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		}
		var _this = this.baseShader.absoluteMatrixA__;
		var x = tile.width * obj.matA;
		var y = tile.height * obj.matC;
		var z = obj.absX + tile.dx * obj.matA + tile.dy * obj.matC;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		var _this = this.baseShader.absoluteMatrixB__;
		var x = tile.width * obj.matB;
		var y = tile.height * obj.matD;
		var z = obj.absY + tile.dx * obj.matB + tile.dy * obj.matD;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		var _this = this.baseShader.uvPos__;
		var x = tile.u;
		var y = tile.v;
		var z = tile.u2 - tile.u;
		var w = tile.v2 - tile.v;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = w;
		this.beforeDraw();
		var tmp;
		if(this.fixedBuffer != null) {
			var _this = this.fixedBuffer;
			tmp = _this.buffer == null || _this.buffer.vbuf == null;
		} else {
			tmp = true;
		}
		if(tmp) {
			this.fixedBuffer = new h3d_Buffer(4,8,[h3d_BufferFlag.Quads,h3d_BufferFlag.RawFormat]);
			var this1 = hxd__$FloatBuffer_Float32Expand._new(0);
			var k = this1;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			this.fixedBuffer.uploadVector(k,0,4);
		}
		var _this = this.engine;
		_this.renderBuffer(this.fixedBuffer,_this.mem.quadIndexes,2,0,-1);
		return true;
	}
	,beginDraw: function(obj,texture,isRelative,hasUVPos) {
		if(hasUVPos == null) {
			hasUVPos = false;
		}
		if(this.onBeginDraw != null && !this.onBeginDraw(obj)) {
			return false;
		}
		var stride = 8;
		var shaderChanged = false;
		var paramsChanged = false;
		var objShaders = obj.shaders;
		var curShaders = this.currentShaders.next;
		while(objShaders != null && curShaders != null) {
			var s = objShaders.s;
			var t = curShaders.s;
			objShaders = objShaders.next;
			curShaders = curShaders.next;
			var prevInst = t.instance;
			if(s != t) {
				paramsChanged = true;
			}
			s.updateConstants(this.manager.globals);
			if(s.instance != prevInst) {
				shaderChanged = true;
			}
		}
		if(objShaders != null || curShaders != null || this.baseShader.isRelative__ != isRelative || this.baseShader.hasUVPos__ != hasUVPos || this.baseShader.killAlpha__ != this.killAlpha) {
			shaderChanged = true;
		}
		if(shaderChanged) {
			var _this = this.baseShader;
			_this.constModified = true;
			_this.hasUVPos__ = hasUVPos;
			var _this = this.baseShader;
			_this.constModified = true;
			_this.isRelative__ = isRelative;
			var _this = this.baseShader;
			_this.constModified = true;
			_this.killAlpha__ = this.killAlpha;
			this.baseShader.updateConstants(this.manager.globals);
			this.baseShaderList.next = obj.shaders;
			this.initShaders(this.baseShaderList);
		} else if(paramsChanged) {
			if(this.currentShaders != this.baseShaderList) {
				throw haxe_Exception.thrown("!");
			}
			this.currentShaders.next = obj.shaders;
		}
		this.texture = texture;
		this.stride = stride;
		this.currentObj = obj;
		return true;
	}
	,__class__: h2d_RenderContext
});
var h2d_TileGroup = function(t,parent) {
	h2d_Drawable.call(this,parent);
	this.tile = t;
	this.rangeMin = this.rangeMax = -1;
	this.curColor = new h3d_Vector(1,1,1,1);
	this.content = new h2d_TileLayerContent();
};
$hxClasses["h2d.TileGroup"] = h2d_TileGroup;
h2d_TileGroup.__name__ = "h2d.TileGroup";
h2d_TileGroup.__super__ = h2d_Drawable;
h2d_TileGroup.prototype = $extend(h2d_Drawable.prototype,{
	getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		this.addBounds(relativeTo,out,this.content.xMin,this.content.yMin,this.content.xMax - this.content.xMin,this.content.yMax - this.content.yMin);
	}
	,clear: function() {
		this.content.clear();
	}
	,invalidate: function() {
		this.content.dispose();
	}
	,count: function() {
		return this.content.triCount() >> 1;
	}
	,onRemove: function() {
		this.content.dispose();
		h2d_Drawable.prototype.onRemove.call(this);
	}
	,draw: function(ctx) {
		this.drawWith(ctx,this);
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		if(this.visible) {
			var _this = this.content;
			var tmp;
			if(_this.buffer != null) {
				var _this1 = _this.buffer;
				tmp = _this1.buffer == null || _this1.buffer.vbuf == null;
			} else {
				tmp = true;
			}
			if(tmp) {
				_this.alloc(h3d_Engine.CURRENT);
			}
		}
	}
	,drawWith: function(ctx,obj) {
		var max = this.content.triCount();
		if(max == 0) {
			return;
		}
		if(!ctx.beginDrawBatchState(obj)) {
			return;
		}
		var min = this.rangeMin < 0 ? 0 : this.rangeMin * 2;
		if(this.rangeMax > 0 && this.rangeMax < max * 2) {
			max = this.rangeMax * 2;
		}
		var _this = this.content;
		var tmp;
		if(_this.buffer != null) {
			var _this1 = _this.buffer;
			tmp = _this1.buffer == null || _this1.buffer.vbuf == null;
		} else {
			tmp = true;
		}
		if(tmp) {
			_this.alloc(h3d_Engine.CURRENT);
		}
		_this.state.drawQuads(ctx,_this.buffer,min,max - min);
	}
	,__class__: h2d_TileGroup
});
var h2d_ScaleModeAlign = $hxEnums["h2d.ScaleModeAlign"] = { __ename__:true,__constructs__:null
	,Left: {_hx_name:"Left",_hx_index:0,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Right: {_hx_name:"Right",_hx_index:1,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Center: {_hx_name:"Center",_hx_index:2,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Top: {_hx_name:"Top",_hx_index:3,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Bottom: {_hx_name:"Bottom",_hx_index:4,__enum__:"h2d.ScaleModeAlign",toString:$estr}
};
h2d_ScaleModeAlign.__constructs__ = [h2d_ScaleModeAlign.Left,h2d_ScaleModeAlign.Right,h2d_ScaleModeAlign.Center,h2d_ScaleModeAlign.Top,h2d_ScaleModeAlign.Bottom];
h2d_ScaleModeAlign.__empty_constructs__ = [h2d_ScaleModeAlign.Left,h2d_ScaleModeAlign.Right,h2d_ScaleModeAlign.Center,h2d_ScaleModeAlign.Top,h2d_ScaleModeAlign.Bottom];
var h2d_ScaleMode = $hxEnums["h2d.ScaleMode"] = { __ename__:true,__constructs__:null
	,Resize: {_hx_name:"Resize",_hx_index:0,__enum__:"h2d.ScaleMode",toString:$estr}
	,Stretch: ($_=function(width,height) { return {_hx_index:1,width:width,height:height,__enum__:"h2d.ScaleMode",toString:$estr}; },$_._hx_name="Stretch",$_.__params__ = ["width","height"],$_)
	,LetterBox: ($_=function(width,height,integerScale,horizontalAlign,verticalAlign) { return {_hx_index:2,width:width,height:height,integerScale:integerScale,horizontalAlign:horizontalAlign,verticalAlign:verticalAlign,__enum__:"h2d.ScaleMode",toString:$estr}; },$_._hx_name="LetterBox",$_.__params__ = ["width","height","integerScale","horizontalAlign","verticalAlign"],$_)
	,Fixed: ($_=function(width,height,zoom,horizontalAlign,verticalAlign) { return {_hx_index:3,width:width,height:height,zoom:zoom,horizontalAlign:horizontalAlign,verticalAlign:verticalAlign,__enum__:"h2d.ScaleMode",toString:$estr}; },$_._hx_name="Fixed",$_.__params__ = ["width","height","zoom","horizontalAlign","verticalAlign"],$_)
	,Zoom: ($_=function(level) { return {_hx_index:4,level:level,__enum__:"h2d.ScaleMode",toString:$estr}; },$_._hx_name="Zoom",$_.__params__ = ["level"],$_)
	,AutoZoom: ($_=function(minWidth,minHeight,integerScaling) { return {_hx_index:5,minWidth:minWidth,minHeight:minHeight,integerScaling:integerScaling,__enum__:"h2d.ScaleMode",toString:$estr}; },$_._hx_name="AutoZoom",$_.__params__ = ["minWidth","minHeight","integerScaling"],$_)
};
h2d_ScaleMode.__constructs__ = [h2d_ScaleMode.Resize,h2d_ScaleMode.Stretch,h2d_ScaleMode.LetterBox,h2d_ScaleMode.Fixed,h2d_ScaleMode.Zoom,h2d_ScaleMode.AutoZoom];
h2d_ScaleMode.__empty_constructs__ = [h2d_ScaleMode.Resize];
var hxd_InteractiveScene = function() { };
$hxClasses["hxd.InteractiveScene"] = hxd_InteractiveScene;
hxd_InteractiveScene.__name__ = "hxd.InteractiveScene";
hxd_InteractiveScene.__isInterface__ = true;
hxd_InteractiveScene.prototype = {
	__class__: hxd_InteractiveScene
};
var h2d_Scene = function() {
	this.scaleMode = h2d_ScaleMode.Resize;
	h2d_Layers.call(this,null);
	var e = h3d_Engine.CURRENT;
	this.ctx = new h2d_RenderContext(this);
	this._cameras = [];
	new h2d_Camera(this);
	this.set_interactiveCamera(this._cameras[0]);
	this.width = e.width;
	this.height = e.height;
	this.viewportA = 2 / e.width;
	this.viewportD = 2 / e.height;
	this.viewportX = -1;
	this.viewportY = -1;
	this.viewportScaleX = 1;
	this.viewportScaleY = 1;
	this.offsetX = 0;
	this.offsetY = 0;
	this.interactive = [];
	this.eventListeners = [];
	this.shapePoint = new h2d_col_Point();
	this.window = hxd_Window.getInstance();
	this.posChanged = true;
};
$hxClasses["h2d.Scene"] = h2d_Scene;
h2d_Scene.__name__ = "h2d.Scene";
h2d_Scene.__interfaces__ = [hxd_InteractiveScene,h3d_IDrawable];
h2d_Scene.__super__ = h2d_Layers;
h2d_Scene.prototype = $extend(h2d_Layers.prototype,{
	setEvents: function(events) {
		this.events = events;
	}
	,set_interactiveCamera: function(cam) {
		if(cam == null) {
			throw haxe_Exception.thrown("Interactive cammera cannot be null!");
		}
		if(cam.scene != this) {
			this.addCamera(cam);
		}
		return this.interactiveCamera = cam;
	}
	,addCamera: function(cam,pos) {
		if(cam.scene != null) {
			cam.scene.removeCamera(cam);
		}
		cam.scene = this;
		cam.posChanged = true;
		if(pos != null) {
			this._cameras.splice(pos,0,cam);
		} else {
			this._cameras.push(cam);
		}
	}
	,removeCamera: function(cam) {
		if(cam == this.interactiveCamera) {
			throw haxe_Exception.thrown("Current interactive Camera cannot be removed from camera list!");
		}
		cam.scene = null;
		HxOverrides.remove(this._cameras,cam);
	}
	,checkResize: function() {
		var _gthis = this;
		var engine = h3d_Engine.CURRENT;
		if(engine == null) {
			return;
		}
		var _g = this.scaleMode;
		switch(_g._hx_index) {
		case 0:
			var w = engine.width;
			var h = engine.height;
			if(w != _gthis.width || h != _gthis.height) {
				_gthis.width = w;
				_gthis.height = h;
				_gthis.posChanged = true;
			}
			_gthis.viewportScaleX = 1;
			_gthis.viewportScaleY = 1;
			_gthis.viewportA = 2 / _gthis.width;
			_gthis.viewportD = 2 / _gthis.height;
			_gthis.viewportX = -1;
			_gthis.viewportY = -1;
			break;
		case 1:
			var _width = _g.width;
			var _height = _g.height;
			if(_width != _gthis.width || _height != _gthis.height) {
				_gthis.width = _width;
				_gthis.height = _height;
				_gthis.posChanged = true;
			}
			_gthis.viewportScaleX = engine.width / _width;
			_gthis.viewportScaleY = engine.height / _height;
			_gthis.viewportA = 2 / _gthis.width;
			_gthis.viewportD = 2 / _gthis.height;
			_gthis.viewportX = -1;
			_gthis.viewportY = -1;
			break;
		case 2:
			var _width = _g.width;
			var _height = _g.height;
			var integerScale = _g.integerScale;
			var horizontalAlign = _g.horizontalAlign;
			var verticalAlign = _g.verticalAlign;
			if(_width != _gthis.width || _height != _gthis.height) {
				_gthis.width = _width;
				_gthis.height = _height;
				_gthis.posChanged = true;
			}
			var a = engine.width / _width;
			var b = engine.height / _height;
			var zoom = a > b ? b : a;
			if(integerScale) {
				zoom = zoom | 0;
				if(zoom == 0) {
					zoom = 1;
				}
			}
			var horizontal = horizontalAlign;
			var vertical = verticalAlign;
			_gthis.viewportA = zoom * 2 / engine.width;
			_gthis.viewportD = zoom * 2 / engine.height;
			_gthis.viewportScaleX = zoom;
			_gthis.viewportScaleY = zoom;
			if(horizontal == null) {
				horizontal = h2d_ScaleModeAlign.Center;
			}
			switch(horizontal._hx_index) {
			case 0:
				_gthis.viewportX = -1;
				_gthis.offsetX = 0;
				break;
			case 1:
				_gthis.viewportX = 1 - _gthis.width * _gthis.viewportA;
				_gthis.offsetX = engine.width - _gthis.width * zoom;
				break;
			default:
				_gthis.viewportX = Math.floor((engine.width - _gthis.width * zoom) / (zoom * 2)) * _gthis.viewportA - 1.;
				_gthis.offsetX = Math.floor((engine.width - _gthis.width * zoom) / 2);
			}
			if(vertical == null) {
				vertical = h2d_ScaleModeAlign.Center;
			}
			switch(vertical._hx_index) {
			case 3:
				_gthis.viewportY = -1;
				_gthis.offsetY = 0;
				break;
			case 4:
				_gthis.viewportY = 1 - _gthis.height * _gthis.viewportD;
				_gthis.offsetY = engine.height - _gthis.height * zoom;
				break;
			default:
				_gthis.viewportY = Math.floor((engine.height - _gthis.height * zoom) / (zoom * 2)) * _gthis.viewportD - 1.;
				_gthis.offsetY = Math.floor((engine.height - _gthis.height * zoom) / 2);
			}
			break;
		case 3:
			var _width = _g.width;
			var _height = _g.height;
			var zoom = _g.zoom;
			var horizontalAlign = _g.horizontalAlign;
			var verticalAlign = _g.verticalAlign;
			if(_width != _gthis.width || _height != _gthis.height) {
				_gthis.width = _width;
				_gthis.height = _height;
				_gthis.posChanged = true;
			}
			var horizontal = horizontalAlign;
			var vertical = verticalAlign;
			_gthis.viewportA = zoom * 2 / engine.width;
			_gthis.viewportD = zoom * 2 / engine.height;
			_gthis.viewportScaleX = zoom;
			_gthis.viewportScaleY = zoom;
			if(horizontal == null) {
				horizontal = h2d_ScaleModeAlign.Center;
			}
			switch(horizontal._hx_index) {
			case 0:
				_gthis.viewportX = -1;
				_gthis.offsetX = 0;
				break;
			case 1:
				_gthis.viewportX = 1 - _gthis.width * _gthis.viewportA;
				_gthis.offsetX = engine.width - _gthis.width * zoom;
				break;
			default:
				_gthis.viewportX = Math.floor((engine.width - _gthis.width * zoom) / (zoom * 2)) * _gthis.viewportA - 1.;
				_gthis.offsetX = Math.floor((engine.width - _gthis.width * zoom) / 2);
			}
			if(vertical == null) {
				vertical = h2d_ScaleModeAlign.Center;
			}
			switch(vertical._hx_index) {
			case 3:
				_gthis.viewportY = -1;
				_gthis.offsetY = 0;
				break;
			case 4:
				_gthis.viewportY = 1 - _gthis.height * _gthis.viewportD;
				_gthis.offsetY = engine.height - _gthis.height * zoom;
				break;
			default:
				_gthis.viewportY = Math.floor((engine.height - _gthis.height * zoom) / (zoom * 2)) * _gthis.viewportD - 1.;
				_gthis.offsetY = Math.floor((engine.height - _gthis.height * zoom) / 2);
			}
			break;
		case 4:
			var level = _g.level;
			var w = Math.ceil(engine.width / level);
			var h = Math.ceil(engine.height / level);
			if(w != _gthis.width || h != _gthis.height) {
				_gthis.width = w;
				_gthis.height = h;
				_gthis.posChanged = true;
			}
			_gthis.viewportScaleX = level;
			_gthis.viewportScaleY = level;
			_gthis.viewportA = 2 / _gthis.width;
			_gthis.viewportD = 2 / _gthis.height;
			_gthis.viewportX = -1;
			_gthis.viewportY = -1;
			break;
		case 5:
			var minWidth = _g.minWidth;
			var minHeight = _g.minHeight;
			var integerScaling = _g.integerScaling;
			var a = engine.width / minWidth;
			var b = engine.height / minHeight;
			var zoom = a > b ? b : a;
			if(integerScaling) {
				zoom = zoom | 0;
				if(zoom == 0) {
					zoom = 1;
				}
			}
			var w = Math.ceil(engine.width / zoom);
			var h = Math.ceil(engine.height / zoom);
			if(w != _gthis.width || h != _gthis.height) {
				_gthis.width = w;
				_gthis.height = h;
				_gthis.posChanged = true;
			}
			_gthis.viewportScaleX = zoom;
			_gthis.viewportScaleY = zoom;
			_gthis.viewportA = 2 / _gthis.width;
			_gthis.viewportD = 2 / _gthis.height;
			_gthis.viewportX = -1;
			_gthis.viewportY = -1;
			break;
		}
	}
	,dispatchListeners: function(event) {
		this.screenToViewport(event);
		var _g = 0;
		var _g1 = this.eventListeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			l(event);
			if(!event.propagate) {
				break;
			}
		}
	}
	,isInteractiveVisible: function(i) {
		var s = i;
		while(s != this) {
			if(s == null || !s.visible) {
				return false;
			}
			s = s.parent;
		}
		return true;
	}
	,screenToViewport: function(e) {
		this.interactiveCamera.eventToCamera(e);
	}
	,dispatchEvent: function(event,to) {
		var i = to;
		this.screenToViewport(event);
		var dx = event.relX - i.absX;
		var dy = event.relY - i.absY;
		var rx = (dx * i.matD - dy * i.matC) * i.invDet;
		var ry = (dy * i.matA - dx * i.matB) * i.invDet;
		event.relX = rx;
		event.relY = ry;
		i.handleEvent(event);
	}
	,handleEvent: function(event,last) {
		this.screenToViewport(event);
		var ex = event.relX;
		var ey = event.relY;
		var index = last == null ? 0 : this.interactive.indexOf(last) + 1;
		var pt = this.shapePoint;
		var _g = index;
		var _g1 = this.interactive.length;
		while(_g < _g1) {
			var idx = _g++;
			var i = this.interactive[idx];
			if(i == null) {
				break;
			}
			if(i.invDet == 0) {
				continue;
			}
			var dx = ex - i.absX;
			var dy = ey - i.absY;
			var rx = (dx * i.matD - dy * i.matC) * i.invDet;
			var ry = (dy * i.matA - dx * i.matB) * i.invDet;
			if(i.shape != null) {
				var x = rx + i.shapeX;
				var y = ry + i.shapeY;
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				pt.x = x;
				pt.y = y;
				if(!i.shape.contains(pt)) {
					continue;
				}
			} else if(ry < 0 || rx < 0 || rx >= i.width || ry >= i.height) {
				continue;
			}
			var visible = true;
			var p = i;
			while(p != null) {
				if(!p.visible) {
					visible = false;
					break;
				}
				p = p.parent;
			}
			if(!visible) {
				continue;
			}
			event.relX = rx;
			event.relY = ry;
			i.handleEvent(event);
			if(event.cancel) {
				event.cancel = false;
				event.propagate = false;
				continue;
			}
			return i;
		}
		return null;
	}
	,addEventTarget: function(i) {
		var i1 = i;
		var lv = 0;
		while(i1 != null) {
			i1 = i1.parent;
			++lv;
		}
		var level = lv;
		var _g = 0;
		var _g1 = this.interactive.length;
		while(_g < _g1) {
			var index = _g++;
			var i1 = i;
			var i2 = this.interactive[index];
			var lv1 = level;
			var i3 = i2;
			var lv = 0;
			while(i3 != null) {
				i3 = i3.parent;
				++lv;
			}
			var lv2 = lv;
			var p1 = i1;
			var p2 = i2;
			while(lv1 > lv2) {
				i1 = p1;
				p1 = p1.parent;
				--lv1;
			}
			while(lv2 > lv1) {
				i2 = p2;
				p2 = p2.parent;
				--lv2;
			}
			while(p1 != p2) {
				i1 = p1;
				p1 = p1.parent;
				i2 = p2;
				p2 = p2.parent;
			}
			var id = -1;
			var _g2 = 0;
			var _g3 = p1.children.length;
			while(_g2 < _g3) {
				var k = _g2++;
				if(p1.children[k] == i1) {
					id = k;
					break;
				}
			}
			var tmp = id;
			var id1 = -1;
			var _g4 = 0;
			var _g5 = p2.children.length;
			while(_g4 < _g5) {
				var k1 = _g4++;
				if(p2.children[k1] == i2) {
					id1 = k1;
					break;
				}
			}
			if(tmp > id1) {
				this.interactive.splice(index,0,i);
				return;
			}
		}
		this.interactive.push(i);
	}
	,removeEventTarget: function(i,notify) {
		if(notify == null) {
			notify = false;
		}
		HxOverrides.remove(this.interactive,i);
		if(notify && this.events != null) {
			this.events.onRemove(i);
		}
	}
	,setElapsedTime: function(v) {
		this.ctx.elapsedTime = v;
	}
	,render: function(engine) {
		this.ctx.engine = engine;
		this.ctx.frame++;
		this.ctx.time += this.ctx.elapsedTime;
		this.ctx.globalAlpha = this.alpha;
		this.sync(this.ctx);
		if(this.children.length == 0) {
			return;
		}
		this.ctx.begin();
		this.ctx.drawScene();
		this.ctx.end();
	}
	,sync: function(ctx) {
		var forceCamSync = this.posChanged;
		if(!this.allocated) {
			this.onAdd();
		}
		h2d_Layers.prototype.sync.call(this,ctx);
		var _g = 0;
		var _g1 = this._cameras;
		while(_g < _g1.length) {
			var cam = _g1[_g];
			++_g;
			cam.sync(ctx,forceCamSync);
		}
	}
	,clipBounds: function(ctx,bounds,scaleX,scaleY) {
		if(scaleY == null) {
			scaleY = 1.;
		}
		if(scaleX == null) {
			scaleX = 1.;
		}
		var matA;
		var matB;
		var matC;
		var matD;
		var absX;
		var absY;
		if(ctx.inFilter != null) {
			var f1 = ctx.baseShader.filterMatrixA__;
			var f2 = ctx.baseShader.filterMatrixB__;
			var tmpA = this.matA * f1.x + this.matB * f1.y;
			var tmpB = this.matA * f2.x + this.matB * f2.y;
			var tmpC = this.matC * f1.x + this.matD * f1.y;
			var tmpD = this.matC * f2.x + this.matD * f2.y;
			var tmpX = this.absX * f1.x + this.absY * f1.y + f1.z;
			var tmpY = this.absX * f2.x + this.absY * f2.y + f2.z;
			matA = (tmpA * ctx.viewA + tmpB * ctx.viewC) / scaleX;
			matB = (tmpA * ctx.viewB + tmpB * ctx.viewD) / scaleY;
			matC = (tmpC * ctx.viewA + tmpD * ctx.viewC) / scaleX;
			matD = (tmpC * ctx.viewB + tmpD * ctx.viewD) / scaleY;
			absX = tmpX * ctx.viewA + tmpY * ctx.viewC + ctx.viewX;
			absY = tmpX * ctx.viewB + tmpY * ctx.viewD + ctx.viewY;
		} else {
			matA = (this.matA * ctx.viewA + this.matB * ctx.viewC) / scaleX;
			matB = (this.matA * ctx.viewB + this.matB * ctx.viewD) / scaleY;
			matC = (this.matC * ctx.viewA + this.matD * ctx.viewC) / scaleX;
			matD = (this.matC * ctx.viewB + this.matD * ctx.viewD) / scaleY;
			absX = this.absX * ctx.viewA + this.absY * ctx.viewC + ctx.viewX;
			absY = this.absX * ctx.viewB + this.absY * ctx.viewD + ctx.viewY;
		}
		var invDet = 1 / (matA * matD - matB * matC);
		bounds.xMin = ((-1 - absX) * matD + (absY + 1) * matC) * invDet;
		bounds.yMin = ((absX + 1) * matB + (-1 - absY) * matA) * invDet;
		bounds.xMax = ((1 - absX) * matD + (absY - 1) * matC) * invDet;
		bounds.yMax = ((absX - 1) * matB + (1 - absY) * matA) * invDet;
	}
	,drawContent: function(ctx) {
		if(ctx.front2back) {
			var _g = 0;
			var _g1 = this._cameras;
			while(_g < _g1.length) {
				var cam = _g1[_g];
				++_g;
				if(!cam.visible) {
					continue;
				}
				var i = this.children.length;
				var l = this.layerCount;
				cam.enter(ctx);
				while(l-- > 0) {
					var top = l == 0 ? 0 : this.layersIndexes[l - 1];
					if(cam.layerVisible(l)) {
						while(i >= top) this.children[i--].drawRec(ctx);
					} else {
						i = top - 1;
					}
				}
				cam.exit(ctx);
			}
			this.draw(ctx);
		} else {
			this.draw(ctx);
			var _g = 0;
			var _g1 = this._cameras;
			while(_g < _g1.length) {
				var cam = _g1[_g];
				++_g;
				if(!cam.visible) {
					continue;
				}
				var i = 0;
				var l = 0;
				cam.enter(ctx);
				while(l < this.layerCount) {
					var top = this.layersIndexes[l++];
					if(cam.layerVisible(l - 1)) {
						while(i < top) this.children[i++].drawRec(ctx);
					} else {
						i = top;
					}
				}
				cam.exit(ctx);
			}
		}
	}
	,onAdd: function() {
		this.checkResize();
		h2d_Layers.prototype.onAdd.call(this);
		this.window.addResizeEvent($bind(this,this.checkResize));
	}
	,onRemove: function() {
		h2d_Layers.prototype.onRemove.call(this);
		this.window.removeResizeEvent($bind(this,this.checkResize));
	}
	,__class__: h2d_Scene
});
var h2d_BasicElement = function(t) {
	this.gravity = 0.;
	this.friction = 1.;
	this.vy = 0.;
	this.vx = 0.;
	h2d_BatchElement.call(this,t);
};
$hxClasses["h2d.BasicElement"] = h2d_BasicElement;
h2d_BasicElement.__name__ = "h2d.BasicElement";
h2d_BasicElement.__super__ = h2d_BatchElement;
h2d_BasicElement.prototype = $extend(h2d_BatchElement.prototype,{
	update: function(dt) {
		this.vy += this.gravity * dt;
		this.x += this.vx * dt;
		this.y += this.vy * dt;
		if(this.friction != 1) {
			var p = Math.pow(this.friction,dt * 60);
			this.vx *= p;
			this.vy *= p;
		}
		return true;
	}
	,__class__: h2d_BasicElement
});
var h2d_Align = $hxEnums["h2d.Align"] = { __ename__:true,__constructs__:null
	,Left: {_hx_name:"Left",_hx_index:0,__enum__:"h2d.Align",toString:$estr}
	,Right: {_hx_name:"Right",_hx_index:1,__enum__:"h2d.Align",toString:$estr}
	,Center: {_hx_name:"Center",_hx_index:2,__enum__:"h2d.Align",toString:$estr}
	,MultilineRight: {_hx_name:"MultilineRight",_hx_index:3,__enum__:"h2d.Align",toString:$estr}
	,MultilineCenter: {_hx_name:"MultilineCenter",_hx_index:4,__enum__:"h2d.Align",toString:$estr}
};
h2d_Align.__constructs__ = [h2d_Align.Left,h2d_Align.Right,h2d_Align.Center,h2d_Align.MultilineRight,h2d_Align.MultilineCenter];
h2d_Align.__empty_constructs__ = [h2d_Align.Left,h2d_Align.Right,h2d_Align.Center,h2d_Align.MultilineRight,h2d_Align.MultilineCenter];
var h2d_Tile = function(tex,x,y,w,h,dx,dy) {
	if(dy == null) {
		dy = 0;
	}
	if(dx == null) {
		dx = 0;
	}
	this.innerTex = tex;
	this.x = x;
	this.y = y;
	this.width = w;
	this.height = h;
	this.dx = dx;
	this.dy = dy;
	if(tex != null) {
		this.setTexture(tex);
	}
};
$hxClasses["h2d.Tile"] = h2d_Tile;
h2d_Tile.__name__ = "h2d.Tile";
h2d_Tile.fromColor = function(color,width,height,alpha) {
	if(alpha == null) {
		alpha = 1.;
	}
	if(height == null) {
		height = 1;
	}
	if(width == null) {
		width = 1;
	}
	var t = new h2d_Tile(h3d_mat_Texture.fromColor(color,alpha),0,0,1,1);
	t.width = width;
	t.height = height;
	return t;
};
h2d_Tile.fromTexture = function(t) {
	return new h2d_Tile(t,0,0,t.width,t.height);
};
h2d_Tile.prototype = {
	setTexture: function(tex) {
		this.innerTex = tex;
		if(tex != null) {
			this.u = this.x / tex.width;
			this.v = this.y / tex.height;
			this.u2 = (this.x + this.width) / tex.width;
			this.v2 = (this.y + this.height) / tex.height;
		}
	}
	,sub: function(x,y,w,h,dx,dy) {
		if(dy == null) {
			dy = 0.;
		}
		if(dx == null) {
			dx = 0.;
		}
		return new h2d_Tile(this.innerTex,this.x + x,this.y + y,w,h,dx,dy);
	}
	,setPosition: function(x,y) {
		this.x = x;
		this.y = y;
		var tex = this.innerTex;
		if(tex != null) {
			this.u = x / tex.width;
			this.v = y / tex.height;
			this.u2 = (x + this.width) / tex.width;
			this.v2 = (y + this.height) / tex.height;
		}
	}
	,setSize: function(w,h) {
		this.width = w;
		this.height = h;
		var tex = this.innerTex;
		if(tex != null) {
			this.u2 = (this.x + w) / tex.width;
			this.v2 = (this.y + h) / tex.height;
		}
	}
	,scaleToSize: function(w,h) {
		this.width = w;
		this.height = h;
	}
	,clone: function() {
		var t = new h2d_Tile(null,this.x,this.y,this.width,this.height,this.dx,this.dy);
		t.innerTex = this.innerTex;
		t.u = this.u;
		t.u2 = this.u2;
		t.v = this.v;
		t.v2 = this.v2;
		return t;
	}
	,__class__: h2d_Tile
};
var h2d_TileLayerContent = function() {
	this.useAllocatorLimit = 1024;
	h3d_prim_Primitive.call(this);
	this.state = new h2d_impl_BatchDrawState();
	this.clear();
};
$hxClasses["h2d.TileLayerContent"] = h2d_TileLayerContent;
h2d_TileLayerContent.__name__ = "h2d.TileLayerContent";
h2d_TileLayerContent.__super__ = h3d_prim_Primitive;
h2d_TileLayerContent.prototype = $extend(h3d_prim_Primitive.prototype,{
	clear: function() {
		var this1 = hxd__$FloatBuffer_Float32Expand._new(0);
		this.tmp = this1;
		if(this.buffer != null) {
			if(this.buffer.vertices * 8 < this.useAllocatorLimit) {
				hxd_impl_Allocator.get().disposeBuffer(this.buffer);
			} else {
				this.buffer.dispose();
			}
		}
		this.buffer = null;
		this.xMin = Infinity;
		this.yMin = Infinity;
		this.xMax = -Infinity;
		this.yMax = -Infinity;
		this.state.clear();
	}
	,triCount: function() {
		if(this.buffer == null) {
			return this.tmp.pos >> 4;
		} else {
			return this.buffer.totalVertices() >> 1;
		}
	}
	,add: function(x,y,r,g,b,a,t) {
		var sx = x + t.dx;
		var sy = y + t.dy;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = sx;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = sy;
		var this1 = this.tmp;
		var v = t.u;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = t.v;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = r;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = g;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = b;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = a;
		var this1 = this.tmp;
		var v = sx + t.width;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = sy;
		var this1 = this.tmp;
		var v = t.u2;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = t.v;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = r;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = g;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = b;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = a;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = sx;
		var this1 = this.tmp;
		var v = sy + t.height;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = t.u;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = t.v2;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = r;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = g;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = b;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = a;
		var this1 = this.tmp;
		var v = sx + t.width;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = sy + t.height;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = t.u2;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = t.v2;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = r;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = g;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = b;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = a;
		var x1 = x + t.dx;
		var y1 = y + t.dy;
		if(x1 < this.xMin) {
			this.xMin = x1;
		}
		if(y1 < this.yMin) {
			this.yMin = y1;
		}
		x1 += t.width;
		y1 += t.height;
		if(x1 > this.xMax) {
			this.xMax = x1;
		}
		if(y1 > this.yMax) {
			this.yMax = y1;
		}
		if(t != null) {
			this.state.setTexture(t.innerTex);
		}
		var _this = this.state;
		_this.tail.count += 4;
		_this.totalCount += 4;
	}
	,alloc: function(engine) {
		if(this.tmp == null) {
			this.clear();
		}
		if(this.tmp.pos > 0) {
			this.buffer = this.tmp.pos < this.useAllocatorLimit ? hxd_impl_Allocator.get().ofFloats(this.tmp,8,3) : h3d_Buffer.ofFloats(this.tmp,8,[h3d_BufferFlag.Quads,h3d_BufferFlag.RawFormat]);
		}
	}
	,dispose: function() {
		if(this.buffer != null) {
			if(this.buffer.vertices * 8 < this.useAllocatorLimit) {
				hxd_impl_Allocator.get().disposeBuffer(this.buffer);
			} else {
				this.buffer.dispose();
			}
			this.buffer = null;
		}
		h3d_prim_Primitive.prototype.dispose.call(this);
	}
	,__class__: h2d_TileLayerContent
});
var h2d_col_Collider = function() { };
$hxClasses["h2d.col.Collider"] = h2d_col_Collider;
h2d_col_Collider.__name__ = "h2d.col.Collider";
h2d_col_Collider.__isInterface__ = true;
h2d_col_Collider.prototype = {
	__class__: h2d_col_Collider
};
var h2d_col_Bounds = function() {
	this.xMin = 1e20;
	this.yMin = 1e20;
	this.xMax = -1e20;
	this.yMax = -1e20;
};
$hxClasses["h2d.col.Bounds"] = h2d_col_Bounds;
h2d_col_Bounds.__name__ = "h2d.col.Bounds";
h2d_col_Bounds.__interfaces__ = [h2d_col_Collider];
h2d_col_Bounds.prototype = {
	contains: function(p) {
		if(p.x >= this.xMin && p.x < this.xMax && p.y >= this.yMin) {
			return p.y < this.yMax;
		} else {
			return false;
		}
	}
	,__class__: h2d_col_Bounds
};
var h2d_col_Matrix = function() {
	this.a = 1;
	this.b = 0;
	this.c = 0;
	this.d = 1;
	this.x = 0;
	this.y = 0;
};
$hxClasses["h2d.col.Matrix"] = h2d_col_Matrix;
h2d_col_Matrix.__name__ = "h2d.col.Matrix";
h2d_col_Matrix.prototype = {
	__class__: h2d_col_Matrix
};
var h2d_filter_Filter = function() {
	this.useScreenResolution = h2d_filter_Filter.defaultUseScreenResolution;
	this.resolutionScale = 1;
	this.enable = true;
	this.smooth = false;
	this.boundsExtend = 0.;
	this.autoBounds = true;
};
$hxClasses["h2d.filter.Filter"] = h2d_filter_Filter;
h2d_filter_Filter.__name__ = "h2d.filter.Filter";
h2d_filter_Filter.prototype = {
	get_enable: function() {
		return this.enable;
	}
	,sync: function(ctx,s) {
	}
	,bind: function(s) {
	}
	,unbind: function(s) {
	}
	,getBounds: function(s,bounds,scale) {
		s.getBounds(s,bounds);
		bounds.xMin = bounds.xMin * scale.x - this.boundsExtend;
		bounds.xMax = bounds.xMax * scale.x + this.boundsExtend;
		bounds.yMin = bounds.yMin * scale.y - this.boundsExtend;
		bounds.yMax = bounds.yMax * scale.y + this.boundsExtend;
	}
	,draw: function(ctx,input) {
		return input;
	}
	,__class__: h2d_filter_Filter
};
var h2d_filter_Blur = function(radius,gain,quality,linear) {
	if(linear == null) {
		linear = 0.;
	}
	if(quality == null) {
		quality = 1.;
	}
	if(gain == null) {
		gain = 1.;
	}
	if(radius == null) {
		radius = 1.;
	}
	h2d_filter_Filter.call(this);
	this.smooth = true;
	this.pass = new h3d_pass_Blur(radius,gain,linear,quality);
};
$hxClasses["h2d.filter.Blur"] = h2d_filter_Blur;
h2d_filter_Blur.__name__ = "h2d.filter.Blur";
h2d_filter_Blur.__super__ = h2d_filter_Filter;
h2d_filter_Blur.prototype = $extend(h2d_filter_Filter.prototype,{
	sync: function(ctx,s) {
		this.boundsExtend = this.pass.radius * 2;
	}
	,draw: function(ctx,t) {
		var out = t.innerTex;
		var old = out.filter;
		out.set_filter(h3d_mat_Filter.Linear);
		this.pass.apply(ctx,out);
		out.set_filter(old);
		return t;
	}
	,__class__: h2d_filter_Blur
});
var h2d_filter_ColorMatrix = function(m) {
	h2d_filter_Filter.call(this);
	this.pass = new h3d_pass_ColorMatrix(m);
	var _this = this.pass.shader;
	_this.constModified = true;
	_this.useAlpha__ = true;
};
$hxClasses["h2d.filter.ColorMatrix"] = h2d_filter_ColorMatrix;
h2d_filter_ColorMatrix.__name__ = "h2d.filter.ColorMatrix";
h2d_filter_ColorMatrix.__super__ = h2d_filter_Filter;
h2d_filter_ColorMatrix.prototype = $extend(h2d_filter_Filter.prototype,{
	draw: function(ctx,t) {
		var tout = ctx.textures.allocTileTarget("colorMatrixOut",t);
		this.pass.apply(t.innerTex,tout);
		return h2d_Tile.fromTexture(tout);
	}
	,__class__: h2d_filter_ColorMatrix
});
var h2d_impl_BatchDrawState = function() {
	this.head = this.tail = new h2d_impl__$BatchDrawState_StateEntry(null);
	this.totalCount = 0;
};
$hxClasses["h2d.impl.BatchDrawState"] = h2d_impl_BatchDrawState;
h2d_impl_BatchDrawState.__name__ = "h2d.impl.BatchDrawState";
h2d_impl_BatchDrawState.prototype = {
	setTexture: function(texture) {
		if(texture != null) {
			if(this.tail.texture == null) {
				this.tail.texture = texture;
			} else if(this.tail.texture != texture) {
				var cur = this.tail;
				if(cur.count == 0) {
					cur.set(texture);
				} else if(cur.next == null) {
					cur.next = this.tail = new h2d_impl__$BatchDrawState_StateEntry(texture);
				} else {
					this.tail = cur.next.set(texture);
				}
			}
		}
	}
	,clear: function() {
		var state = this.head;
		while(true) {
			state.texture = null;
			state = state.next;
			if(!(state != null)) {
				break;
			}
		}
		this.tail = this.head;
		this.tail.count = 0;
		this.totalCount = 0;
	}
	,drawQuads: function(ctx,buffer,offset,length) {
		if(length == null) {
			length = -1;
		}
		if(offset == null) {
			offset = 0;
		}
		var state = this.head;
		var last = this.tail.next;
		var engine = ctx.engine;
		var stateLen;
		if(offset == 0 && length == -1) {
			while(true) {
				ctx.texture = state.texture;
				ctx.beforeDraw();
				stateLen = state.count >> 1;
				var start = offset;
				var max = stateLen;
				if(max == null) {
					max = -1;
				}
				if(start == null) {
					start = 0;
				}
				engine.renderBuffer(buffer,engine.mem.quadIndexes,2,start,max);
				offset += stateLen;
				state = state.next;
				if(!(state != last)) {
					break;
				}
			}
		} else {
			if(length == -1) {
				length = (this.totalCount >> 1) - offset;
			}
			var caret = 0;
			while(true) {
				stateLen = state.count >> 1;
				if(caret + stateLen >= offset) {
					var stateMin = offset >= caret ? offset : caret;
					var stateLen1 = length > stateLen ? stateLen : length;
					ctx.texture = state.texture;
					ctx.beforeDraw();
					var start = stateMin;
					var max = stateLen1;
					if(max == null) {
						max = -1;
					}
					if(start == null) {
						start = 0;
					}
					engine.renderBuffer(buffer,engine.mem.quadIndexes,2,start,max);
					length -= stateLen1;
					if(length == 0) {
						break;
					}
				}
				caret += stateLen;
				state = state.next;
				if(!(state != last)) {
					break;
				}
			}
		}
	}
	,__class__: h2d_impl_BatchDrawState
};
var h2d_impl__$BatchDrawState_StateEntry = function(texture) {
	this.texture = texture;
	this.count = 0;
};
$hxClasses["h2d.impl._BatchDrawState.StateEntry"] = h2d_impl__$BatchDrawState_StateEntry;
h2d_impl__$BatchDrawState_StateEntry.__name__ = "h2d.impl._BatchDrawState.StateEntry";
h2d_impl__$BatchDrawState_StateEntry.prototype = {
	set: function(texture) {
		this.texture = texture;
		this.count = 0;
		return this;
	}
	,__class__: h2d_impl__$BatchDrawState_StateEntry
};
var h3d_BufferFlag = $hxEnums["h3d.BufferFlag"] = { __ename__:true,__constructs__:null
	,Dynamic: {_hx_name:"Dynamic",_hx_index:0,__enum__:"h3d.BufferFlag",toString:$estr}
	,Triangles: {_hx_name:"Triangles",_hx_index:1,__enum__:"h3d.BufferFlag",toString:$estr}
	,Quads: {_hx_name:"Quads",_hx_index:2,__enum__:"h3d.BufferFlag",toString:$estr}
	,Managed: {_hx_name:"Managed",_hx_index:3,__enum__:"h3d.BufferFlag",toString:$estr}
	,RawFormat: {_hx_name:"RawFormat",_hx_index:4,__enum__:"h3d.BufferFlag",toString:$estr}
	,NoAlloc: {_hx_name:"NoAlloc",_hx_index:5,__enum__:"h3d.BufferFlag",toString:$estr}
	,UniformBuffer: {_hx_name:"UniformBuffer",_hx_index:6,__enum__:"h3d.BufferFlag",toString:$estr}
	,LargeBuffer: {_hx_name:"LargeBuffer",_hx_index:7,__enum__:"h3d.BufferFlag",toString:$estr}
};
h3d_BufferFlag.__constructs__ = [h3d_BufferFlag.Dynamic,h3d_BufferFlag.Triangles,h3d_BufferFlag.Quads,h3d_BufferFlag.Managed,h3d_BufferFlag.RawFormat,h3d_BufferFlag.NoAlloc,h3d_BufferFlag.UniformBuffer,h3d_BufferFlag.LargeBuffer];
h3d_BufferFlag.__empty_constructs__ = [h3d_BufferFlag.Dynamic,h3d_BufferFlag.Triangles,h3d_BufferFlag.Quads,h3d_BufferFlag.Managed,h3d_BufferFlag.RawFormat,h3d_BufferFlag.NoAlloc,h3d_BufferFlag.UniformBuffer,h3d_BufferFlag.LargeBuffer];
var h3d_Buffer = function(vertices,stride,flags) {
	this.id = h3d_Buffer.GUID++;
	this.vertices = vertices;
	var this1 = 0;
	this.flags = this1;
	if(flags != null) {
		var _g = 0;
		while(_g < flags.length) {
			var f = flags[_g];
			++_g;
			this.flags |= 1 << f._hx_index;
		}
	}
	if((this.flags & 1 << h3d_BufferFlag.NoAlloc._hx_index) == 0) {
		h3d_Engine.CURRENT.mem.allocBuffer(this,stride);
	}
};
$hxClasses["h3d.Buffer"] = h3d_Buffer;
h3d_Buffer.__name__ = "h3d.Buffer";
h3d_Buffer.ofFloats = function(v,stride,flags) {
	var nvert = v.pos / stride | 0;
	var b = new h3d_Buffer(nvert,stride,flags);
	b.uploadVector(v,0,nvert);
	return b;
};
h3d_Buffer.ofSubFloats = function(v,stride,vertices,flags) {
	var b = new h3d_Buffer(vertices,stride,flags);
	b.uploadVector(v,0,vertices);
	return b;
};
h3d_Buffer.prototype = {
	dispose: function() {
		if(this.buffer != null) {
			this.buffer.freeBuffer(this);
			this.buffer = null;
			if(this.next != null) {
				this.next.dispose();
			}
		}
	}
	,totalVertices: function() {
		var count = 0;
		var b = this;
		while(b != null) {
			count += b.vertices;
			b = b.next;
		}
		return count;
	}
	,uploadVector: function(buf,bufPos,vertices,startVertice) {
		if(startVertice == null) {
			startVertice = 0;
		}
		var cur = this;
		while(cur != null && startVertice >= cur.vertices) {
			startVertice -= cur.vertices;
			cur = cur.next;
		}
		while(vertices > 0) {
			if(cur == null) {
				throw haxe_Exception.thrown("Too many vertices");
			}
			var count = vertices + startVertice > cur.vertices ? cur.vertices - startVertice : vertices;
			cur.buffer.uploadVertexBuffer(cur.position + startVertice,count,buf,bufPos);
			startVertice = 0;
			bufPos += count * this.buffer.stride;
			vertices -= count;
			cur = cur.next;
		}
	}
	,__class__: h3d_Buffer
};
var h3d_BufferOffset = function(buffer,offset) {
	this.buffer = buffer;
	this.offset = offset;
};
$hxClasses["h3d.BufferOffset"] = h3d_BufferOffset;
h3d_BufferOffset.__name__ = "h3d.BufferOffset";
h3d_BufferOffset.prototype = {
	dispose: function() {
		if(this.buffer != null) {
			this.buffer.dispose();
			this.buffer = null;
		}
		this.next = null;
	}
	,__class__: h3d_BufferOffset
};
var h3d_Camera = function(fovY,zoom,screenRatio,zNear,zFar,rightHanded) {
	if(rightHanded == null) {
		rightHanded = false;
	}
	if(zFar == null) {
		zFar = 4000.;
	}
	if(zNear == null) {
		zNear = 0.02;
	}
	if(screenRatio == null) {
		screenRatio = 1.333333;
	}
	if(zoom == null) {
		zoom = 1.;
	}
	if(fovY == null) {
		fovY = 25.;
	}
	this.viewY = 0.;
	this.viewX = 0.;
	this.fovY = fovY;
	this.zoom = zoom;
	this.screenRatio = screenRatio;
	this.zNear = zNear;
	this.zFar = zFar;
	this.rightHanded = rightHanded;
	this.pos = new h3d_Vector(2,3,4);
	this.up = new h3d_Vector(0,0,1);
	this.target = new h3d_Vector(0,0,0);
	this.m = new h3d_Matrix();
	this.mcam = new h3d_Matrix();
	this.mproj = new h3d_Matrix();
	this.frustum = new h3d_col_Frustum();
	this.update();
};
$hxClasses["h3d.Camera"] = h3d_Camera;
h3d_Camera.__name__ = "h3d.Camera";
h3d_Camera.prototype = {
	getInverseViewProj: function() {
		if(this.minv == null) {
			this.minv = new h3d_Matrix();
		}
		if(this.needInv) {
			this.minv.initInverse(this.m);
			this.needInv = false;
		}
		return this.minv;
	}
	,getInverseView: function() {
		if(this.mcamInv == null) {
			this.mcamInv = new h3d_Matrix();
			this.mcamInv._44 = 0;
		}
		if(this.mcamInv._44 == 0) {
			this.mcamInv.initInverse(this.mcam);
		}
		return this.mcamInv;
	}
	,unproject: function(screenX,screenY,camZ) {
		var p = new h3d_Vector(screenX,screenY,camZ);
		var m = this.getInverseViewProj();
		var px = p.x * m._11 + p.y * m._21 + p.z * m._31 + p.w * m._41;
		var py = p.x * m._12 + p.y * m._22 + p.z * m._32 + p.w * m._42;
		var pz = p.x * m._13 + p.y * m._23 + p.z * m._33 + p.w * m._43;
		var iw = 1 / (p.x * m._14 + p.y * m._24 + p.z * m._34 + p.w * m._44);
		p.x = px * iw;
		p.y = py * iw;
		p.z = pz * iw;
		p.w = 1;
		return p;
	}
	,update: function() {
		if(this.follow != null) {
			var fpos = this.follow.pos.localToGlobal();
			var ftarget = this.follow.target.localToGlobal();
			var _this = this.pos;
			var x = fpos.x;
			var y = fpos.y;
			var z = fpos.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = 1.;
			var _this = this.target;
			var x = ftarget.x;
			var y = ftarget.y;
			var z = ftarget.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = 1.;
			if(this.follow.pos.name != null) {
				var p = this.follow.pos;
				while(p != null) {
					if(p.currentAnimation != null) {
						var v = p.currentAnimation.getPropValue(this.follow.pos.name,"FOVY");
						if(v != null) {
							this.fovY = v;
							break;
						}
					}
					p = p.parent;
				}
			}
		}
		this.makeCameraMatrix(this.mcam);
		this.makeFrustumMatrix(this.mproj);
		this.m.multiply(this.mcam,this.mproj);
		this.needInv = true;
		if(this.mcamInv != null) {
			this.mcamInv._44 = 0;
		}
		if(this.mprojInv != null) {
			this.mprojInv._44 = 0;
		}
		this.frustum.loadMatrix(this.m);
	}
	,makeCameraMatrix: function(m) {
		var _this = this.target;
		var v = this.pos;
		var x = _this.x - v.x;
		var y = _this.y - v.y;
		var z = _this.z - v.z;
		var w = _this.w - v.w;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var az_x = x;
		var az_y = y;
		var az_z = z;
		var az_w = w;
		if(this.rightHanded) {
			az_x *= -1;
			az_y *= -1;
			az_z *= -1;
		}
		var k = az_x * az_x + az_y * az_y + az_z * az_z;
		if(k < 1e-10) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		az_x *= k;
		az_y *= k;
		az_z *= k;
		var _this = this.up;
		var x = _this.y * az_z - _this.z * az_y;
		var y = _this.z * az_x - _this.x * az_z;
		var z = _this.x * az_y - _this.y * az_x;
		var w = 1;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var ax_x = x;
		var ax_y = y;
		var ax_z = z;
		var ax_w = w;
		var k = ax_x * ax_x + ax_y * ax_y + ax_z * ax_z;
		if(k < 1e-10) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		ax_x *= k;
		ax_y *= k;
		ax_z *= k;
		if(Math.sqrt(ax_x * ax_x + ax_y * ax_y + ax_z * ax_z) == 0) {
			ax_x = az_y;
			ax_y = az_z;
			ax_z = az_x;
		}
		var x = az_y * ax_z - az_z * ax_y;
		var y = az_z * ax_x - az_x * ax_z;
		var z = az_x * ax_y - az_y * ax_x;
		var w = 1;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var ay_x = x;
		var ay_y = y;
		var ay_z = z;
		var ay_w = w;
		m._11 = ax_x;
		m._12 = ay_x;
		m._13 = az_x;
		m._14 = 0;
		m._21 = ax_y;
		m._22 = ay_y;
		m._23 = az_y;
		m._24 = 0;
		m._31 = ax_z;
		m._32 = ay_z;
		m._33 = az_z;
		m._34 = 0;
		var v = this.pos;
		m._41 = -(ax_x * v.x + ax_y * v.y + ax_z * v.z);
		var v = this.pos;
		m._42 = -(ay_x * v.x + ay_y * v.y + ay_z * v.z);
		var v = this.pos;
		m._43 = -(az_x * v.x + az_y * v.y + az_z * v.z);
		m._44 = 1;
	}
	,makeFrustumMatrix: function(m) {
		m.zero();
		var bounds = this.orthoBounds;
		if(bounds != null) {
			var w = 1 / (bounds.xMax - bounds.xMin);
			var h = 1 / (bounds.yMax - bounds.yMin);
			var d = 1 / (bounds.zMax - bounds.zMin);
			m._11 = 2 * w;
			m._22 = 2 * h;
			m._33 = d;
			m._41 = -(bounds.xMin + bounds.xMax) * w;
			m._42 = -(bounds.yMin + bounds.yMax) * h;
			m._43 = -bounds.zMin * d;
			m._44 = 1;
		} else {
			var degToRad = Math.PI / 180;
			var halfFovX = Math.atan(Math.tan(this.fovY * 0.5 * degToRad) * this.screenRatio);
			var scale = this.zoom / Math.tan(halfFovX);
			m._11 = scale;
			m._22 = scale * this.screenRatio;
			m._33 = this.zFar / (this.zFar - this.zNear);
			m._34 = 1;
			m._43 = -(this.zNear * this.zFar) / (this.zFar - this.zNear);
		}
		m._11 += this.viewX * m._14;
		m._21 += this.viewX * m._24;
		m._31 += this.viewX * m._34;
		m._41 += this.viewX * m._44;
		m._12 += this.viewY * m._14;
		m._22 += this.viewY * m._24;
		m._32 += this.viewY * m._34;
		m._42 += this.viewY * m._44;
		if(this.rightHanded) {
			m._33 *= -1;
			m._34 *= -1;
		}
	}
	,distanceToDepth: function(dist) {
		var min = this.zNear;
		var max = this.zFar;
		if(max == null) {
			max = 1.;
		}
		if(min == null) {
			min = 0.;
		}
		return ((this.zFar + this.zNear - 2.0 * this.zNear * this.zFar / (dist < min ? min : dist > max ? max : dist)) / (this.zFar - this.zNear) + 1.0) / 2.0;
	}
	,__class__: h3d_Camera
};
var h3d__$Engine_TargetTmp = function(t,n,l,m) {
	this.t = t;
	this.next = n;
	this.layer = l;
	this.mipLevel = m;
};
$hxClasses["h3d._Engine.TargetTmp"] = h3d__$Engine_TargetTmp;
h3d__$Engine_TargetTmp.__name__ = "h3d._Engine.TargetTmp";
h3d__$Engine_TargetTmp.prototype = {
	__class__: h3d__$Engine_TargetTmp
};
var h3d_Engine = function() {
	this.resCache = new haxe_ds_ObjectMap();
	this.ready = false;
	this.inRender = false;
	this.textureColorCache = new haxe_ds_IntMap();
	this.tmpVector = new h3d_Vector();
	this.backgroundColor = -16777216;
	this.hardware = !h3d_Engine.SOFTWARE_DRIVER;
	this.antiAlias = h3d_Engine.ANTIALIASING;
	this.autoResize = true;
	this.set_fullScreen(!hxd_System.getValue(hxd_SystemValue.IsWindowed));
	this.window = hxd_Window.getInstance();
	this.realFps = hxd_System.getDefaultFrameRate();
	this.lastTime = HxOverrides.now() / 1000;
	this.window.addResizeEvent($bind(this,this.onWindowResize));
	this.driver = js_Browser.get_supported() ? new h3d_impl_GlDriver(this.antiAlias) : new h3d_impl_NullDriver();
	h3d_Engine.CURRENT = this;
};
$hxClasses["h3d.Engine"] = h3d_Engine;
h3d_Engine.__name__ = "h3d.Engine";
h3d_Engine.prototype = {
	init: function() {
		this.driver.init($bind(this,this.onCreate),!this.hardware);
	}
	,selectShader: function(shader) {
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		if(this.driver.selectShader(shader)) {
			this.shaderSwitches++;
		}
	}
	,selectMaterial: function(pass) {
		this.driver.selectMaterial(pass);
	}
	,uploadShaderBuffers: function(buffers,which) {
		this.driver.uploadShaderBuffers(buffers,which);
	}
	,selectBuffer: function(buf) {
		if(buf.buffer == null || buf.buffer.vbuf == null) {
			return false;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.selectBuffer(buf);
		return true;
	}
	,renderBuffer: function(b,indexes,vertPerTri,startTri,drawTri) {
		if(drawTri == null) {
			drawTri = -1;
		}
		if(startTri == null) {
			startTri = 0;
		}
		if(indexes.isDisposed()) {
			return;
		}
		while(true) {
			var ntri = b.vertices / vertPerTri | 0;
			var pos = b.position / vertPerTri | 0;
			if(startTri > 0) {
				if(startTri >= ntri) {
					startTri -= ntri;
					b = b.next;
					if(!(b != null)) {
						break;
					} else {
						continue;
					}
				}
				pos += startTri;
				ntri -= startTri;
				startTri = 0;
			}
			if(drawTri >= 0) {
				if(drawTri == 0) {
					return;
				}
				drawTri -= ntri;
				if(drawTri < 0) {
					ntri += drawTri;
					drawTri = 0;
				}
			}
			if(ntri > 0 && this.selectBuffer(b)) {
				this.driver.draw(indexes.ibuf,pos * 3,ntri);
				this.drawTriangles += ntri;
				this.drawCalls++;
			}
			b = b.next;
			if(!(b != null)) {
				break;
			}
		}
	}
	,renderIndexed: function(b,indexes,startTri,drawTri) {
		if(drawTri == null) {
			drawTri = -1;
		}
		if(startTri == null) {
			startTri = 0;
		}
		if(b.next != null) {
			throw haxe_Exception.thrown("Buffer is split");
		}
		if(indexes.isDisposed()) {
			return;
		}
		var maxTri = indexes.count / 3 | 0;
		if(drawTri < 0) {
			drawTri = maxTri - startTri;
		}
		if(drawTri > 0 && this.selectBuffer(b)) {
			this.driver.draw(indexes.ibuf,startTri * 3,drawTri);
			this.drawTriangles += drawTri;
			this.drawCalls++;
		}
	}
	,renderMultiBuffers: function(buffers,indexes,startTri,drawTri) {
		if(drawTri == null) {
			drawTri = -1;
		}
		if(startTri == null) {
			startTri = 0;
		}
		var maxTri = indexes.count / 3 | 0;
		if(maxTri <= 0) {
			return;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.selectMultiBuffers(buffers);
		if(indexes.isDisposed()) {
			return;
		}
		if(drawTri < 0) {
			drawTri = maxTri - startTri;
		}
		if(drawTri > 0) {
			this.driver.draw(indexes.ibuf,startTri * 3,drawTri);
			this.drawTriangles += drawTri;
			this.drawCalls++;
		}
	}
	,renderInstanced: function(buffers,indexes,commands) {
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.selectMultiBuffers(buffers);
		if(indexes.isDisposed()) {
			return;
		}
		if(commands.commandCount > 0) {
			this.driver.drawInstanced(indexes.ibuf,commands);
			this.drawTriangles += commands.triCount;
			this.drawCalls++;
		}
	}
	,set_debug: function(d) {
		this.debug = d;
		this.driver.setDebug(this.debug);
		return d;
	}
	,onCreate: function(disposed) {
		h3d_Engine.CURRENT = this;
		if(this.autoResize) {
			this.width = this.window.get_width();
			this.height = this.window.get_height();
		}
		if(disposed) {
			hxd_impl_Allocator.get().onContextLost();
			this.mem.onContextLost();
		} else {
			this.mem = new h3d_impl_MemoryManager(this.driver);
			this.mem.init();
			this.nullTexture = new h3d_mat_Texture(0,0,[h3d_mat_TextureFlags.NoAlloc]);
		}
		this.hardware = this.driver.hasFeature(h3d_impl_Feature.HardwareAccelerated);
		this.set_debug(this.debug);
		this.set_fullScreen(this.fullScreen);
		this.resize(this.width,this.height);
		if(disposed) {
			this.onContextLost();
		} else {
			this.onReady();
		}
		this.ready = true;
	}
	,onContextLost: function() {
	}
	,onReady: function() {
	}
	,onWindowResize: function() {
		if(this.autoResize && !this.driver.isDisposed()) {
			var w = this.window.get_width();
			var h = this.window.get_height();
			if(w != this.width || h != this.height) {
				this.resize(w,h);
			}
			this.onResized();
		}
	}
	,set_fullScreen: function(v) {
		this.fullScreen = v;
		if(this.mem != null && hxd_System.getValue(hxd_SystemValue.IsWindowed)) {
			this.window.set_displayMode(v ? hxd_DisplayMode.Borderless : hxd_DisplayMode.Windowed);
		}
		return v;
	}
	,onResized: function() {
	}
	,resize: function(width,height) {
		if(width < 32) {
			width = 32;
		}
		if(height < 32) {
			height = 32;
		}
		this.width = width;
		this.height = height;
		if(!this.driver.isDisposed()) {
			this.driver.resize(width,height);
		}
	}
	,begin: function() {
		if(this.driver.isDisposed()) {
			return false;
		}
		this.inRender = true;
		this.drawTriangles = 0;
		this.shaderSwitches = 0;
		this.drawCalls = 0;
		this.targetStack = null;
		this.needFlushTarget = this.currentTargetTex != null;
		this.driver.begin(hxd_Timer.frameCount);
		if(this.backgroundColor != null) {
			this.clear(this.backgroundColor,1,0);
		}
		return true;
	}
	,end: function() {
		this.inRender = false;
		this.driver.end();
	}
	,getCurrentTarget: function() {
		if(this.targetStack == null) {
			return null;
		} else if(this.targetStack.t == this.nullTexture) {
			return this.targetStack.textures[0];
		} else {
			return this.targetStack.t;
		}
	}
	,pushTarget: function(tex,layer,mipLevel) {
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(layer == null) {
			layer = 0;
		}
		var c = this.targetTmp;
		if(c == null) {
			c = new h3d__$Engine_TargetTmp(tex,this.targetStack,layer,mipLevel);
		} else {
			this.targetTmp = c.next;
			c.t = tex;
			c.next = this.targetStack;
			c.mipLevel = mipLevel;
			c.layer = layer;
		}
		this.targetStack = c;
		this.updateNeedFlush();
	}
	,updateNeedFlush: function() {
		var t = this.targetStack;
		if(t == null) {
			this.needFlushTarget = this.currentTargetTex != null;
		} else {
			this.needFlushTarget = this.currentTargetTex != t.t || this.currentTargetLayer != t.layer || this.currentTargetMip != t.mipLevel || t.textures != null;
		}
	}
	,popTarget: function() {
		var c = this.targetStack;
		if(c == null) {
			throw haxe_Exception.thrown("popTarget() with no matching pushTarget()");
		}
		this.targetStack = c.next;
		this.updateNeedFlush();
		c.t = null;
		c.textures = null;
		c.next = this.targetTmp;
		this.targetTmp = c;
	}
	,doFlushTarget: function() {
		var t = this.targetStack;
		if(t == null) {
			this.driver.setRenderTarget(null);
			this.currentTargetTex = null;
		} else {
			if(t.textures != null) {
				this.driver.setRenderTargets(t.textures);
			} else {
				this.driver.setRenderTarget(t.t,t.layer,t.mipLevel);
			}
			this.currentTargetTex = t.t;
			this.currentTargetLayer = t.layer;
			this.currentTargetMip = t.mipLevel;
		}
		this.needFlushTarget = false;
	}
	,clear: function(color,depth,stencil) {
		if(color != null) {
			var _this = this.tmpVector;
			_this.x = (color >> 16 & 255) / 255;
			_this.y = (color >> 8 & 255) / 255;
			_this.z = (color & 255) / 255;
			_this.w = (color >>> 24) / 255;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.clear(color == null ? null : this.tmpVector,depth,stencil);
	}
	,setRenderZone: function(x,y,width,height) {
		if(height == null) {
			height = -1;
		}
		if(width == null) {
			width = -1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.setRenderZone(x,y,width,height);
	}
	,render: function(obj) {
		if(!this.begin()) {
			return false;
		}
		obj.render(this);
		this.end();
		var delta = HxOverrides.now() / 1000 - this.lastTime;
		this.lastTime += delta;
		if(delta > 0) {
			var curFps = 1. / delta;
			if(curFps > this.realFps * 2) {
				curFps = this.realFps * 2;
			} else if(curFps < this.realFps * 0.5) {
				curFps = this.realFps * 0.5;
			}
			var f = delta / .5;
			if(f > 0.3) {
				f = 0.3;
			}
			this.realFps = this.realFps * (1 - f) + curFps * f;
		}
		return true;
	}
	,__class__: h3d_Engine
};
var h3d_Indexes = function(count,is32) {
	if(is32 == null) {
		is32 = false;
	}
	this.mem = h3d_Engine.CURRENT.mem;
	this.count = count;
	this.is32 = is32;
	this.mem.allocIndexes(this);
};
$hxClasses["h3d.Indexes"] = h3d_Indexes;
h3d_Indexes.__name__ = "h3d.Indexes";
h3d_Indexes.alloc = function(i,startPos,length) {
	if(length == null) {
		length = -1;
	}
	if(startPos == null) {
		startPos = 0;
	}
	if(length < 0) {
		length = i.length;
	}
	var idx = new h3d_Indexes(length);
	idx.upload(i,0,length);
	return idx;
};
h3d_Indexes.prototype = {
	isDisposed: function() {
		return this.ibuf == null;
	}
	,upload: function(indexes,pos,count,bufferPos) {
		if(bufferPos == null) {
			bufferPos = 0;
		}
		this.mem.driver.uploadIndexBuffer(this.ibuf,pos,count,indexes,bufferPos);
	}
	,dispose: function() {
		if(this.ibuf != null) {
			this.mem.deleteIndexes(this);
		}
	}
	,__class__: h3d_Indexes
};
var h3d_Matrix = function() {
};
$hxClasses["h3d.Matrix"] = h3d_Matrix;
h3d_Matrix.__name__ = "h3d.Matrix";
h3d_Matrix.I = function() {
	var m = new h3d_Matrix();
	m.identity();
	return m;
};
h3d_Matrix.L = function(a) {
	var m = new h3d_Matrix();
	m.loadValues(a);
	return m;
};
h3d_Matrix.prototype = {
	zero: function() {
		this._11 = 0.0;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = 0.0;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = 0.0;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 0.0;
	}
	,identity: function() {
		this._11 = 1.0;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = 1.0;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = 1.0;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 1.0;
	}
	,multiply3x4: function(a,b) {
		var m11 = a._11;
		var m12 = a._12;
		var m13 = a._13;
		var m21 = a._21;
		var m22 = a._22;
		var m23 = a._23;
		var a31 = a._31;
		var a32 = a._32;
		var a33 = a._33;
		var a41 = a._41;
		var a42 = a._42;
		var a43 = a._43;
		var b11 = b._11;
		var b12 = b._12;
		var b13 = b._13;
		var b21 = b._21;
		var b22 = b._22;
		var b23 = b._23;
		var b31 = b._31;
		var b32 = b._32;
		var b33 = b._33;
		var b41 = b._41;
		var b42 = b._42;
		var b43 = b._43;
		this._11 = m11 * b11 + m12 * b21 + m13 * b31;
		this._12 = m11 * b12 + m12 * b22 + m13 * b32;
		this._13 = m11 * b13 + m12 * b23 + m13 * b33;
		this._14 = 0;
		this._21 = m21 * b11 + m22 * b21 + m23 * b31;
		this._22 = m21 * b12 + m22 * b22 + m23 * b32;
		this._23 = m21 * b13 + m22 * b23 + m23 * b33;
		this._24 = 0;
		this._31 = a31 * b11 + a32 * b21 + a33 * b31;
		this._32 = a31 * b12 + a32 * b22 + a33 * b32;
		this._33 = a31 * b13 + a32 * b23 + a33 * b33;
		this._34 = 0;
		this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
		this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
		this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
		this._44 = 1;
	}
	,multiply: function(a,b) {
		var a11 = a._11;
		var a12 = a._12;
		var a13 = a._13;
		var a14 = a._14;
		var a21 = a._21;
		var a22 = a._22;
		var a23 = a._23;
		var a24 = a._24;
		var a31 = a._31;
		var a32 = a._32;
		var a33 = a._33;
		var a34 = a._34;
		var a41 = a._41;
		var a42 = a._42;
		var a43 = a._43;
		var a44 = a._44;
		var b11 = b._11;
		var b12 = b._12;
		var b13 = b._13;
		var b14 = b._14;
		var b21 = b._21;
		var b22 = b._22;
		var b23 = b._23;
		var b24 = b._24;
		var b31 = b._31;
		var b32 = b._32;
		var b33 = b._33;
		var b34 = b._34;
		var b41 = b._41;
		var b42 = b._42;
		var b43 = b._43;
		var b44 = b._44;
		this._11 = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
		this._12 = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
		this._13 = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
		this._14 = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
		this._21 = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
		this._22 = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
		this._23 = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
		this._24 = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
		this._31 = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
		this._32 = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
		this._33 = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
		this._34 = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
		this._41 = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
		this._42 = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
		this._43 = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
		this._44 = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
	}
	,inverse3x4: function(m) {
		var m11 = m._11;
		var m12 = m._12;
		var m13 = m._13;
		var m21 = m._21;
		var m22 = m._22;
		var m23 = m._23;
		var m31 = m._31;
		var m32 = m._32;
		var m33 = m._33;
		var m41 = m._41;
		var m42 = m._42;
		var m43 = m._43;
		this._11 = m22 * m33 - m23 * m32;
		this._12 = m13 * m32 - m12 * m33;
		this._13 = m12 * m23 - m13 * m22;
		this._14 = 0;
		this._21 = m23 * m31 - m21 * m33;
		this._22 = m11 * m33 - m13 * m31;
		this._23 = m13 * m21 - m11 * m23;
		this._24 = 0;
		this._31 = m21 * m32 - m22 * m31;
		this._32 = m12 * m31 - m11 * m32;
		this._33 = m11 * m22 - m12 * m21;
		this._34 = 0;
		this._41 = -m21 * m32 * m43 + m21 * m33 * m42 + m31 * m22 * m43 - m31 * m23 * m42 - m41 * m22 * m33 + m41 * m23 * m32;
		this._42 = m11 * m32 * m43 - m11 * m33 * m42 - m31 * m12 * m43 + m31 * m13 * m42 + m41 * m12 * m33 - m41 * m13 * m32;
		this._43 = -m11 * m22 * m43 + m11 * m23 * m42 + m21 * m12 * m43 - m21 * m13 * m42 - m41 * m12 * m23 + m41 * m13 * m22;
		this._44 = m11 * m22 * m33 - m11 * m23 * m32 - m21 * m12 * m33 + m21 * m13 * m32 + m31 * m12 * m23 - m31 * m13 * m22;
		this._44 = 1;
		var det = m11 * this._11 + m12 * this._21 + m13 * this._31;
		if((det < 0 ? -det : det) < 1e-10) {
			this.zero();
			return;
		}
		var invDet = 1.0 / det;
		this._11 *= invDet;
		this._12 *= invDet;
		this._13 *= invDet;
		this._21 *= invDet;
		this._22 *= invDet;
		this._23 *= invDet;
		this._31 *= invDet;
		this._32 *= invDet;
		this._33 *= invDet;
		this._41 *= invDet;
		this._42 *= invDet;
		this._43 *= invDet;
	}
	,initInverse: function(m) {
		var m11 = m._11;
		var m12 = m._12;
		var m13 = m._13;
		var m14 = m._14;
		var m21 = m._21;
		var m22 = m._22;
		var m23 = m._23;
		var m24 = m._24;
		var m31 = m._31;
		var m32 = m._32;
		var m33 = m._33;
		var m34 = m._34;
		var m41 = m._41;
		var m42 = m._42;
		var m43 = m._43;
		var m44 = m._44;
		this._11 = m22 * m33 * m44 - m22 * m34 * m43 - m32 * m23 * m44 + m32 * m24 * m43 + m42 * m23 * m34 - m42 * m24 * m33;
		this._12 = -m12 * m33 * m44 + m12 * m34 * m43 + m32 * m13 * m44 - m32 * m14 * m43 - m42 * m13 * m34 + m42 * m14 * m33;
		this._13 = m12 * m23 * m44 - m12 * m24 * m43 - m22 * m13 * m44 + m22 * m14 * m43 + m42 * m13 * m24 - m42 * m14 * m23;
		this._14 = -m12 * m23 * m34 + m12 * m24 * m33 + m22 * m13 * m34 - m22 * m14 * m33 - m32 * m13 * m24 + m32 * m14 * m23;
		this._21 = -m21 * m33 * m44 + m21 * m34 * m43 + m31 * m23 * m44 - m31 * m24 * m43 - m41 * m23 * m34 + m41 * m24 * m33;
		this._22 = m11 * m33 * m44 - m11 * m34 * m43 - m31 * m13 * m44 + m31 * m14 * m43 + m41 * m13 * m34 - m41 * m14 * m33;
		this._23 = -m11 * m23 * m44 + m11 * m24 * m43 + m21 * m13 * m44 - m21 * m14 * m43 - m41 * m13 * m24 + m41 * m14 * m23;
		this._24 = m11 * m23 * m34 - m11 * m24 * m33 - m21 * m13 * m34 + m21 * m14 * m33 + m31 * m13 * m24 - m31 * m14 * m23;
		this._31 = m21 * m32 * m44 - m21 * m34 * m42 - m31 * m22 * m44 + m31 * m24 * m42 + m41 * m22 * m34 - m41 * m24 * m32;
		this._32 = -m11 * m32 * m44 + m11 * m34 * m42 + m31 * m12 * m44 - m31 * m14 * m42 - m41 * m12 * m34 + m41 * m14 * m32;
		this._33 = m11 * m22 * m44 - m11 * m24 * m42 - m21 * m12 * m44 + m21 * m14 * m42 + m41 * m12 * m24 - m41 * m14 * m22;
		this._34 = -m11 * m22 * m34 + m11 * m24 * m32 + m21 * m12 * m34 - m21 * m14 * m32 - m31 * m12 * m24 + m31 * m14 * m22;
		this._41 = -m21 * m32 * m43 + m21 * m33 * m42 + m31 * m22 * m43 - m31 * m23 * m42 - m41 * m22 * m33 + m41 * m23 * m32;
		this._42 = m11 * m32 * m43 - m11 * m33 * m42 - m31 * m12 * m43 + m31 * m13 * m42 + m41 * m12 * m33 - m41 * m13 * m32;
		this._43 = -m11 * m22 * m43 + m11 * m23 * m42 + m21 * m12 * m43 - m21 * m13 * m42 - m41 * m12 * m23 + m41 * m13 * m22;
		this._44 = m11 * m22 * m33 - m11 * m23 * m32 - m21 * m12 * m33 + m21 * m13 * m32 + m31 * m12 * m23 - m31 * m13 * m22;
		var det = m11 * this._11 + m12 * this._21 + m13 * this._31 + m14 * this._41;
		if((det < 0 ? -det : det) < 1e-10) {
			this.zero();
			return;
		}
		det = 1.0 / det;
		this._11 *= det;
		this._12 *= det;
		this._13 *= det;
		this._14 *= det;
		this._21 *= det;
		this._22 *= det;
		this._23 *= det;
		this._24 *= det;
		this._31 *= det;
		this._32 *= det;
		this._33 *= det;
		this._34 *= det;
		this._41 *= det;
		this._42 *= det;
		this._43 *= det;
		this._44 *= det;
	}
	,loadValues: function(a) {
		this._11 = a[0];
		this._12 = a[1];
		this._13 = a[2];
		this._14 = a[3];
		this._21 = a[4];
		this._22 = a[5];
		this._23 = a[6];
		this._24 = a[7];
		this._31 = a[8];
		this._32 = a[9];
		this._33 = a[10];
		this._34 = a[11];
		this._41 = a[12];
		this._42 = a[13];
		this._43 = a[14];
		this._44 = a[15];
	}
	,__class__: h3d_Matrix
};
var h3d_Quat = function(x,y,z,w) {
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["h3d.Quat"] = h3d_Quat;
h3d_Quat.__name__ = "h3d.Quat";
h3d_Quat.prototype = {
	toMatrix: function(m) {
		if(m == null) {
			m = new h3d_Matrix();
		}
		var xx = this.x * this.x;
		var xy = this.x * this.y;
		var xz = this.x * this.z;
		var xw = this.x * this.w;
		var yy = this.y * this.y;
		var yz = this.y * this.z;
		var yw = this.y * this.w;
		var zz = this.z * this.z;
		var zw = this.z * this.w;
		m._11 = 1 - 2 * (yy + zz);
		m._12 = 2 * (xy + zw);
		m._13 = 2 * (xz - yw);
		m._14 = 0;
		m._21 = 2 * (xy - zw);
		m._22 = 1 - 2 * (xx + zz);
		m._23 = 2 * (yz + xw);
		m._24 = 0;
		m._31 = 2 * (xz + yw);
		m._32 = 2 * (yz - xw);
		m._33 = 1 - 2 * (xx + yy);
		m._34 = 0;
		m._41 = 0;
		m._42 = 0;
		m._43 = 0;
		m._44 = 1;
		return m;
	}
	,__class__: h3d_Quat
};
var h3d_Vector = function(x,y,z,w) {
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["h3d.Vector"] = h3d_Vector;
h3d_Vector.__name__ = "h3d.Vector";
h3d_Vector.prototype = {
	__class__: h3d_Vector
};
var h3d_anim_AnimatedObject = function() { };
$hxClasses["h3d.anim.AnimatedObject"] = h3d_anim_AnimatedObject;
h3d_anim_AnimatedObject.__name__ = "h3d.anim.AnimatedObject";
var h3d_anim_Animation = function(name,frameCount,sampling) {
	this.name = name;
	this.frameCount = frameCount;
	this.sampling = sampling;
	this.objects = [];
	this.lastEvent = -1;
	this.frame = 0.;
	this.speed = 1.;
	this.loop = true;
	this.pause = false;
};
$hxClasses["h3d.anim.Animation"] = h3d_anim_Animation;
h3d_anim_Animation.__name__ = "h3d.anim.Animation";
h3d_anim_Animation.prototype = {
	getPropValue: function(objectName,propName) {
		return null;
	}
	,sync: function(decompose) {
		if(decompose == null) {
			decompose = false;
		}
		throw haxe_Exception.thrown("assert");
	}
	,isPlaying: function() {
		if(!this.pause) {
			return (this.speed < 0 ? -this.speed : this.speed) > 0.000001;
		} else {
			return false;
		}
	}
	,endFrame: function() {
		return this.frameCount;
	}
	,update: function(dt) {
		if(!this.isInstance) {
			throw haxe_Exception.thrown("You must instanciate this animation first");
		}
		if(!this.isPlaying()) {
			return 0;
		}
		if(this.events != null && this.onEvent != null) {
			var f0 = this.frame | 0;
			var f1 = this.frame + dt * this.speed * this.sampling | 0;
			if(f1 >= this.frameCount) {
				f1 = this.frameCount - 1;
			}
			var _g = f0;
			var _g1 = f1 + 1;
			while(_g < _g1) {
				var f = _g++;
				if(f == this.lastEvent) {
					continue;
				}
				this.lastEvent = f;
				if(this.events[f] != null) {
					var oldF = this.frame;
					var oldDT = dt;
					dt -= (f - this.frame) / (this.speed * this.sampling);
					this.frame = f;
					var _g2 = 0;
					var _g3 = this.events[f];
					while(_g2 < _g3.length) {
						var e = _g3[_g2];
						++_g2;
						this.onEvent(e);
					}
					if(this.frame == f && f == this.frameCount - 1) {
						this.frame = oldF;
						dt = oldDT;
						break;
					} else {
						return dt;
					}
				}
			}
		}
		if(this.onAnimEnd != null) {
			var end = this.endFrame();
			var et = this.speed == 0 ? 0 : (end - this.frame) / (this.speed * this.sampling);
			if(et <= dt && et > 0) {
				this.frame = end;
				dt -= et;
				this.onAnimEnd();
				if(this.frame == end && this.isPlaying()) {
					if(this.loop) {
						this.frame = 0;
					} else {
						dt = 0;
					}
				}
				return dt;
			}
		}
		this.frame += dt * this.speed * this.sampling;
		if(this.frame >= this.frameCount) {
			if(this.loop) {
				this.frame %= this.frameCount;
			} else {
				this.frame = this.frameCount;
			}
		}
		return 0;
	}
	,__class__: h3d_anim_Animation
};
var h3d_col_Collider = function() { };
$hxClasses["h3d.col.Collider"] = h3d_col_Collider;
h3d_col_Collider.__name__ = "h3d.col.Collider";
h3d_col_Collider.__isInterface__ = true;
h3d_col_Collider.prototype = {
	__class__: h3d_col_Collider
};
var h3d_col_Bounds = function() {
	this.xMin = 1e20;
	this.xMax = -1e20;
	this.yMin = 1e20;
	this.yMax = -1e20;
	this.zMin = 1e20;
	this.zMax = -1e20;
};
$hxClasses["h3d.col.Bounds"] = h3d_col_Bounds;
h3d_col_Bounds.__name__ = "h3d.col.Bounds";
h3d_col_Bounds.__interfaces__ = [h3d_col_Collider];
h3d_col_Bounds.prototype = {
	inFrustum: function(f,m) {
		if(m != null) {
			throw haxe_Exception.thrown("Not implemented");
		}
		return f.hasBounds(this);
	}
	,rayIntersection: function(r,bestMatch) {
		var minTx = (this.xMin - r.px) / r.lx;
		var minTy = (this.yMin - r.py) / r.ly;
		var minTz = (this.zMin - r.pz) / r.lz;
		var maxTx = (this.xMax - r.px) / r.lx;
		var maxTy = (this.yMax - r.py) / r.ly;
		var maxTz = (this.zMax - r.pz) / r.lz;
		var realMinTx = minTx > maxTx ? maxTx : minTx;
		var realMinTy = minTy > maxTy ? maxTy : minTy;
		var realMinTz = minTz > maxTz ? maxTz : minTz;
		var realMaxTx = minTx < maxTx ? maxTx : minTx;
		var realMaxTy = minTy < maxTy ? maxTy : minTy;
		var realMaxTz = minTz < maxTz ? maxTz : minTz;
		var a = realMaxTx > realMaxTy ? realMaxTy : realMaxTx;
		var minmax = a > realMaxTz ? realMaxTz : a;
		var a = realMinTx < realMinTy ? realMinTy : realMinTx;
		var maxmin = a < realMinTz ? realMinTz : a;
		if(minmax < maxmin) {
			return -1;
		}
		return maxmin;
	}
	,transform: function(m) {
		var xMin = this.xMin;
		var yMin = this.yMin;
		var zMin = this.zMin;
		var xMax = this.xMax;
		var yMax = this.yMax;
		var zMax = this.zMax;
		this.xMin = 1e20;
		this.xMax = -1e20;
		this.yMin = 1e20;
		this.yMax = -1e20;
		this.zMin = 1e20;
		this.zMax = -1e20;
		if(xMax < xMin && yMax < yMin && zMax < zMin) {
			return;
		}
		var v_x = 0.;
		var v_y = 0.;
		var v_z = 0.;
		var x = xMin;
		var y = yMin;
		var z = zMin;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		v_x = x;
		v_y = y;
		v_z = z;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		var x = xMin;
		var y = yMin;
		var z = zMax;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		v_x = x;
		v_y = y;
		v_z = z;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		var x = xMin;
		var y = yMax;
		var z = zMin;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		v_x = x;
		v_y = y;
		v_z = z;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		var x = xMin;
		var y = yMax;
		var z = zMax;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		v_x = x;
		v_y = y;
		v_z = z;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		var x = xMax;
		var y = yMin;
		var z = zMin;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		v_x = x;
		v_y = y;
		v_z = z;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		var x = xMax;
		var y = yMin;
		var z = zMax;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		v_x = x;
		v_y = y;
		v_z = z;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		var x = xMax;
		var y = yMax;
		var z = zMin;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		v_x = x;
		v_y = y;
		v_z = z;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		var x = xMax;
		var y = yMax;
		var z = zMax;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		v_x = x;
		v_y = y;
		v_z = z;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
	}
	,intersection: function(a,b) {
		var a1 = a.xMin;
		var b1 = b.xMin;
		var xMin = a1 < b1 ? b1 : a1;
		var a1 = a.yMin;
		var b1 = b.yMin;
		var yMin = a1 < b1 ? b1 : a1;
		var a1 = a.zMin;
		var b1 = b.zMin;
		var zMin = a1 < b1 ? b1 : a1;
		var a1 = a.xMax;
		var b1 = b.xMax;
		var xMax = a1 > b1 ? b1 : a1;
		var a1 = a.yMax;
		var b1 = b.yMax;
		var yMax = a1 > b1 ? b1 : a1;
		var a1 = a.zMax;
		var b1 = b.zMax;
		var zMax = a1 > b1 ? b1 : a1;
		this.xMin = xMin;
		this.xMax = xMax;
		this.yMin = yMin;
		this.yMax = yMax;
		this.zMin = zMin;
		this.zMax = zMax;
	}
	,load: function(b) {
		this.xMin = b.xMin;
		this.xMax = b.xMax;
		this.yMin = b.yMin;
		this.yMax = b.yMax;
		this.zMin = b.zMin;
		this.zMax = b.zMax;
	}
	,scaleCenter: function(v) {
		var dx = (this.xMax - this.xMin) * 0.5 * v;
		var dy = (this.yMax - this.yMin) * 0.5 * v;
		var dz = (this.zMax - this.zMin) * 0.5 * v;
		var mx = (this.xMax + this.xMin) * 0.5;
		var my = (this.yMax + this.yMin) * 0.5;
		var mz = (this.zMax + this.zMin) * 0.5;
		this.xMin = mx - dx;
		this.yMin = my - dy;
		this.zMin = mz - dz;
		this.xMax = mx + dx;
		this.yMax = my + dy;
		this.zMax = mz + dz;
	}
	,__class__: h3d_col_Bounds
};
var h3d_col_Frustum = function(mvp) {
	this.checkNearFar = true;
	this.pleft = new h3d_col_Plane(1,0,0,0.0);
	this.pright = new h3d_col_Plane(1,0,0,0.0);
	this.ptop = new h3d_col_Plane(1,0,0,0.0);
	this.pbottom = new h3d_col_Plane(1,0,0,0.0);
	this.pnear = new h3d_col_Plane(1,0,0,0.0);
	this.pfar = new h3d_col_Plane(1,0,0,0.0);
	if(mvp != null) {
		this.loadMatrix(mvp);
	}
};
$hxClasses["h3d.col.Frustum"] = h3d_col_Frustum;
h3d_col_Frustum.__name__ = "h3d.col.Frustum";
h3d_col_Frustum.prototype = {
	loadMatrix: function(mvp) {
		var _this = this.pleft;
		var p_nx = mvp._14 + mvp._11;
		var p_ny = mvp._24 + mvp._21;
		var p_nz = mvp._34 + mvp._31;
		var p_d = -(mvp._44 + mvp._41);
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this = this.pright;
		var p_nx = mvp._14 - mvp._11;
		var p_ny = mvp._24 - mvp._21;
		var p_nz = mvp._34 - mvp._31;
		var p_d = mvp._41 - mvp._44;
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this = this.ptop;
		var p_nx = mvp._14 - mvp._12;
		var p_ny = mvp._24 - mvp._22;
		var p_nz = mvp._34 - mvp._32;
		var p_d = mvp._42 - mvp._44;
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this = this.pbottom;
		var p_nx = mvp._14 + mvp._12;
		var p_ny = mvp._24 + mvp._22;
		var p_nz = mvp._34 + mvp._32;
		var p_d = -(mvp._44 + mvp._42);
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this = this.pnear;
		var p_nx = mvp._13;
		var p_ny = mvp._23;
		var p_nz = mvp._33;
		var p_d = -mvp._43;
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this = this.pfar;
		var p_nx = mvp._14 - mvp._13;
		var p_ny = mvp._24 - mvp._23;
		var p_nz = mvp._34 - mvp._33;
		var p_d = mvp._43 - mvp._44;
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this = this.pleft;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pright;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.ptop;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pbottom;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pnear;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pfar;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
	}
	,hasSphere: function(s) {
		var x = s.x;
		var y = s.y;
		var z = s.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var p_x = x;
		var p_y = y;
		var p_z = z;
		var _this = this.pleft;
		if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
			return false;
		}
		var _this = this.pright;
		if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
			return false;
		}
		var _this = this.ptop;
		if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
			return false;
		}
		var _this = this.pbottom;
		if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
			return false;
		}
		if(this.checkNearFar) {
			var _this = this.pnear;
			if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
				return false;
			}
			var _this = this.pfar;
			if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
				return false;
			}
		}
		return true;
	}
	,hasBounds: function(b) {
		var p = this.pleft;
		var a = p.nx;
		var b1 = p.ny;
		var c = p.nz;
		var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
		if(dd + rr - p.d * 2 < 0) {
			return false;
		}
		var p = this.pright;
		var a = p.nx;
		var b1 = p.ny;
		var c = p.nz;
		var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
		if(dd + rr - p.d * 2 < 0) {
			return false;
		}
		var p = this.ptop;
		var a = p.nx;
		var b1 = p.ny;
		var c = p.nz;
		var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
		if(dd + rr - p.d * 2 < 0) {
			return false;
		}
		var p = this.ptop;
		var a = p.nx;
		var b1 = p.ny;
		var c = p.nz;
		var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
		if(dd + rr - p.d * 2 < 0) {
			return false;
		}
		var p = this.pnear;
		var a = p.nx;
		var b1 = p.ny;
		var c = p.nz;
		var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
		if(dd + rr - p.d * 2 < 0) {
			return false;
		}
		var p = this.pfar;
		var a = p.nx;
		var b1 = p.ny;
		var c = p.nz;
		var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
		if(dd + rr - p.d * 2 < 0) {
			return false;
		}
		return true;
	}
	,__class__: h3d_col_Frustum
};
var h3d_col_Ray = function() {
};
$hxClasses["h3d.col.Ray"] = h3d_col_Ray;
h3d_col_Ray.__name__ = "h3d.col.Ray";
h3d_col_Ray.prototype = {
	normalize: function() {
		var l = this.lx * this.lx + this.ly * this.ly + this.lz * this.lz;
		if(l == 1.) {
			return;
		}
		if(l < 1e-10) {
			l = 0;
		} else {
			l = 1. / Math.sqrt(l);
		}
		this.lx *= l;
		this.ly *= l;
		this.lz *= l;
	}
	,__class__: h3d_col_Ray
};
var h3d_col_Plane = function(nx,ny,nz,d) {
	this.nx = nx;
	this.ny = ny;
	this.nz = nz;
	this.d = d;
};
$hxClasses["h3d.col.Plane"] = h3d_col_Plane;
h3d_col_Plane.__name__ = "h3d.col.Plane";
h3d_col_Plane.prototype = {
	__class__: h3d_col_Plane
};
var h3d_col_Point = function(x,y,z) {
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["h3d.col.Point"] = h3d_col_Point;
h3d_col_Point.__name__ = "h3d.col.Point";
h3d_col_Point.prototype = {
	__class__: h3d_col_Point
};
var h3d_scene_Object = function(parent) {
	var this1 = 0;
	this.flags = this1;
	this.absPos = new h3d_Matrix();
	this.absPos.identity();
	this.x = 0;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	this.y = 0;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	this.z = 0;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	this.scaleX = 1;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	this.scaleY = 1;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	this.scaleZ = 1;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	this.qRot = new h3d_Quat();
	var f = 1;
	var b = this.follow != null;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	var f = 2;
	this.flags |= f;
	this.children = [];
	if(parent != null) {
		parent.addChild(this);
	}
};
$hxClasses["h3d.scene.Object"] = h3d_scene_Object;
h3d_scene_Object.__name__ = "h3d.scene.Object";
h3d_scene_Object.prototype = {
	set_cullingCollider: function(c) {
		this.cullingCollider = c;
		var f = 4096;
		this.flags &= ~f;
		return c;
	}
	,localToGlobal: function(pt) {
		this.syncPos();
		if(pt == null) {
			pt = new h3d_col_Point();
		}
		var m = this.absPos;
		var px = pt.x * m._11 + pt.y * m._21 + pt.z * m._31 + m._41;
		var py = pt.x * m._12 + pt.y * m._22 + pt.z * m._32 + m._42;
		var pz = pt.x * m._13 + pt.y * m._23 + pt.z * m._33 + m._43;
		pt.x = px;
		pt.y = py;
		pt.z = pz;
		return pt;
	}
	,getInvPos: function() {
		this.syncPos();
		if(this.invPos == null) {
			this.invPos = new h3d_Matrix();
			this.invPos._44 = 0;
		}
		if(this.invPos._44 == 0) {
			this.invPos.inverse3x4(this.absPos);
		}
		return this.invPos;
	}
	,addChild: function(o) {
		this.addChildAt(o,this.children.length);
	}
	,addChildAt: function(o,pos) {
		if(pos < 0) {
			pos = 0;
		}
		if(pos > this.children.length) {
			pos = this.children.length;
		}
		var p = this;
		while(p != null) {
			if(p == o) {
				throw haxe_Exception.thrown("Recursive addChild");
			}
			p = p.parent;
		}
		if(o.parent != null) {
			var old = (o.flags & 32) != 0;
			var f = 32;
			o.flags &= ~f;
			o.parent.removeChild(o);
			var f = 32;
			if(old) {
				o.flags |= f;
			} else {
				o.flags &= ~f;
			}
		}
		this.children.splice(pos,0,o);
		if((this.flags & 32) == 0 && (o.flags & 32) != 0) {
			o.onRemove();
		}
		o.parent = this;
		var f = 1;
		var b = true;
		if(b) {
			o.flags |= f;
		} else {
			o.flags &= ~f;
		}
		if((this.flags & 32) != 0) {
			if((o.flags & 32) == 0) {
				o.onAdd();
			} else {
				o.onParentChanged();
			}
		}
	}
	,iterVisibleMeshes: function(callb) {
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0) {
			return;
		}
		if((this.flags & 4) == 0) {
			var m = ((this) instanceof h3d_scene_Mesh) ? this : null;
			if(m != null) {
				callb(m);
			}
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			o.iterVisibleMeshes(callb);
		}
	}
	,onParentChanged: function() {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onParentChanged();
		}
	}
	,onAdd: function() {
		var f = 32;
		this.flags |= f;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onAdd();
		}
	}
	,onRemove: function() {
		var f = 32;
		this.flags &= ~f;
		var i = this.children.length - 1;
		while(i >= 0) this.children[i--].onRemove();
	}
	,removeChild: function(o) {
		if(HxOverrides.remove(this.children,o)) {
			if((o.flags & 32) != 0) {
				o.onRemove();
			}
			o.parent = null;
			var f = 1;
			var b = true;
			if(b) {
				o.flags |= f;
			} else {
				o.flags &= ~f;
			}
		}
	}
	,getScene: function() {
		var p = this;
		while(p.parent != null) p = p.parent;
		if(((p) instanceof h3d_scene_Scene)) {
			return p;
		} else {
			return null;
		}
	}
	,getAbsPos: function() {
		this.syncPos();
		return this.absPos;
	}
	,draw: function(ctx) {
	}
	,calcAbsPos: function() {
		this.qRot.toMatrix(this.absPos);
		this.absPos._11 *= this.scaleX;
		this.absPos._12 *= this.scaleX;
		this.absPos._13 *= this.scaleX;
		this.absPos._21 *= this.scaleY;
		this.absPos._22 *= this.scaleY;
		this.absPos._23 *= this.scaleY;
		this.absPos._31 *= this.scaleZ;
		this.absPos._32 *= this.scaleZ;
		this.absPos._33 *= this.scaleZ;
		this.absPos._41 = this.x;
		this.absPos._42 = this.y;
		this.absPos._43 = this.z;
		if(this.follow != null) {
			this.follow.syncPos();
			if((this.flags & 8) != 0) {
				var _this = this.absPos;
				var a = this.absPos;
				var b = this.parent.absPos;
				var m11 = a._11;
				var m12 = a._12;
				var m13 = a._13;
				var m21 = a._21;
				var m22 = a._22;
				var m23 = a._23;
				var a31 = a._31;
				var a32 = a._32;
				var a33 = a._33;
				var a41 = a._41;
				var a42 = a._42;
				var a43 = a._43;
				var b11 = b._11;
				var b12 = b._12;
				var b13 = b._13;
				var b21 = b._21;
				var b22 = b._22;
				var b23 = b._23;
				var b31 = b._31;
				var b32 = b._32;
				var b33 = b._33;
				var b41 = b._41;
				var b42 = b._42;
				var b43 = b._43;
				_this._11 = m11 * b11 + m12 * b21 + m13 * b31;
				_this._12 = m11 * b12 + m12 * b22 + m13 * b32;
				_this._13 = m11 * b13 + m12 * b23 + m13 * b33;
				_this._14 = 0;
				_this._21 = m21 * b11 + m22 * b21 + m23 * b31;
				_this._22 = m21 * b12 + m22 * b22 + m23 * b32;
				_this._23 = m21 * b13 + m22 * b23 + m23 * b33;
				_this._24 = 0;
				_this._31 = a31 * b11 + a32 * b21 + a33 * b31;
				_this._32 = a31 * b12 + a32 * b22 + a33 * b32;
				_this._33 = a31 * b13 + a32 * b23 + a33 * b33;
				_this._34 = 0;
				_this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
				_this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
				_this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
				_this._44 = 1;
				this.absPos._41 = this.x + this.follow.absPos._41;
				this.absPos._42 = this.y + this.follow.absPos._42;
				this.absPos._43 = this.z + this.follow.absPos._43;
			} else {
				this.absPos.multiply3x4(this.absPos,this.follow.absPos);
			}
		} else if(this.parent != null && (this.flags & 2048) == 0) {
			var _this = this.absPos;
			var a = this.absPos;
			var b = this.parent.absPos;
			var m11 = a._11;
			var m12 = a._12;
			var m13 = a._13;
			var m21 = a._21;
			var m22 = a._22;
			var m23 = a._23;
			var a31 = a._31;
			var a32 = a._32;
			var a33 = a._33;
			var a41 = a._41;
			var a42 = a._42;
			var a43 = a._43;
			var b11 = b._11;
			var b12 = b._12;
			var b13 = b._13;
			var b21 = b._21;
			var b22 = b._22;
			var b23 = b._23;
			var b31 = b._31;
			var b32 = b._32;
			var b33 = b._33;
			var b41 = b._41;
			var b42 = b._42;
			var b43 = b._43;
			_this._11 = m11 * b11 + m12 * b21 + m13 * b31;
			_this._12 = m11 * b12 + m12 * b22 + m13 * b32;
			_this._13 = m11 * b13 + m12 * b23 + m13 * b33;
			_this._14 = 0;
			_this._21 = m21 * b11 + m22 * b21 + m23 * b31;
			_this._22 = m21 * b12 + m22 * b22 + m23 * b32;
			_this._23 = m21 * b13 + m22 * b23 + m23 * b33;
			_this._24 = 0;
			_this._31 = a31 * b11 + a32 * b21 + a33 * b31;
			_this._32 = a31 * b12 + a32 * b22 + a33 * b32;
			_this._33 = a31 * b13 + a32 * b23 + a33 * b33;
			_this._34 = 0;
			_this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
			_this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
			_this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
			_this._44 = 1;
		}
		if(this.defaultTransform != null) {
			var _this = this.absPos;
			var a = this.defaultTransform;
			var b = this.absPos;
			var m11 = a._11;
			var m12 = a._12;
			var m13 = a._13;
			var m21 = a._21;
			var m22 = a._22;
			var m23 = a._23;
			var a31 = a._31;
			var a32 = a._32;
			var a33 = a._33;
			var a41 = a._41;
			var a42 = a._42;
			var a43 = a._43;
			var b11 = b._11;
			var b12 = b._12;
			var b13 = b._13;
			var b21 = b._21;
			var b22 = b._22;
			var b23 = b._23;
			var b31 = b._31;
			var b32 = b._32;
			var b33 = b._33;
			var b41 = b._41;
			var b42 = b._42;
			var b43 = b._43;
			_this._11 = m11 * b11 + m12 * b21 + m13 * b31;
			_this._12 = m11 * b12 + m12 * b22 + m13 * b32;
			_this._13 = m11 * b13 + m12 * b23 + m13 * b33;
			_this._14 = 0;
			_this._21 = m21 * b11 + m22 * b21 + m23 * b31;
			_this._22 = m21 * b12 + m22 * b22 + m23 * b32;
			_this._23 = m21 * b13 + m22 * b23 + m23 * b33;
			_this._24 = 0;
			_this._31 = a31 * b11 + a32 * b21 + a33 * b31;
			_this._32 = a31 * b12 + a32 * b22 + a33 * b32;
			_this._33 = a31 * b13 + a32 * b23 + a33 * b33;
			_this._34 = 0;
			_this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
			_this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
			_this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
			_this._44 = 1;
		}
		if(this.invPos != null) {
			this.invPos._44 = 0;
		}
	}
	,sync: function(ctx) {
	}
	,syncRec: function(ctx) {
		if(this.currentAnimation != null) {
			var old = this.parent;
			var dt = ctx.elapsedTime;
			while(dt > 0 && this.currentAnimation != null) dt = this.currentAnimation.update(dt);
			if(this.currentAnimation != null && (ctx.visibleFlag && (this.flags & 2) != 0 && (this.flags & 4) == 0 || (this.flags & 64) != 0)) {
				this.currentAnimation.sync();
			}
			if(this.parent == null && old != null) {
				return;
			}
		}
		var old = ctx.visibleFlag;
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0) {
			ctx.visibleFlag = false;
		}
		if(ctx.cullingCollider != null && (this.cullingCollider == null || (this.flags & 4096) != 0)) {
			this.set_cullingCollider(ctx.cullingCollider);
			var f = 4096;
			this.flags |= f;
		} else if((this.flags & 4096) != 0) {
			this.set_cullingCollider(null);
		}
		var prevCollider = ctx.cullingCollider;
		if((this.flags & 128) != 0) {
			ctx.cullingCollider = this.cullingCollider;
		}
		var changed = (this.flags & 1) != 0;
		if(changed) {
			this.calcAbsPos();
		}
		if((this.flags & 8192) != 0) {
			if((this.flags & 16384) != 0 && !changed && !ctx.wasContextLost) {
				ctx.visibleFlag = old;
				ctx.cullingCollider = prevCollider;
				return;
			}
			var f = 16384;
			this.flags |= f;
		}
		this.sync(ctx);
		var f = 1;
		var b = this.follow != null;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		this.lastFrame = ctx.frame;
		var p = 0;
		var len = this.children.length;
		while(p < len) {
			var c = this.children[p];
			if(c == null) {
				break;
			}
			if(c.lastFrame != ctx.frame) {
				if(changed) {
					var f = 1;
					var b = true;
					if(b) {
						c.flags |= f;
					} else {
						c.flags &= ~f;
					}
				}
				c.syncRec(ctx);
			}
			if(this.children[p] != c) {
				p = 0;
				len = this.children.length;
			} else {
				++p;
			}
		}
		ctx.visibleFlag = old;
		ctx.cullingCollider = prevCollider;
	}
	,syncPos: function() {
		if(this.parent != null) {
			this.parent.syncPos();
		}
		if((this.flags & 1) != 0) {
			var f = 1;
			var b = this.follow != null;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var f = 1;
				var b = true;
				if(b) {
					c.flags |= f;
				} else {
					c.flags &= ~f;
				}
			}
		}
	}
	,emit: function(ctx) {
	}
	,emitRec: function(ctx) {
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0 && !ctx.computingStatic) {
			return;
		}
		if((this.flags & 1) != 0) {
			if(this.currentAnimation != null) {
				this.currentAnimation.sync();
			}
			var f = 1;
			var b = this.follow != null;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var f = 1;
				var b = true;
				if(b) {
					c.flags |= f;
				} else {
					c.flags &= ~f;
				}
			}
		}
		if((this.flags & 4) == 0 || ctx.computingStatic) {
			this.emit(ctx);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.emitRec(ctx);
		}
	}
	,__class__: h3d_scene_Object
};
var h3d_col_Sphere = function(x,y,z,r) {
	if(r == null) {
		r = 0.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var sx = x;
	var sy = y;
	var sz = z;
	var sr = r;
	if(sr == null) {
		sr = 0.;
	}
	if(sz == null) {
		sz = 0.;
	}
	if(sy == null) {
		sy = 0.;
	}
	if(sx == null) {
		sx = 0.;
	}
	this.x = sx;
	this.y = sy;
	this.z = sz;
	this.r = sr;
};
$hxClasses["h3d.col.Sphere"] = h3d_col_Sphere;
h3d_col_Sphere.__name__ = "h3d.col.Sphere";
h3d_col_Sphere.__interfaces__ = [h3d_col_Collider];
h3d_col_Sphere.prototype = {
	rayIntersection: function(r,bestMatch) {
		var r2 = this.r * this.r;
		var px = r.px + r.lx;
		var py = r.py + r.ly;
		var pz = r.pz + r.lz;
		var a = r.lx * r.lx + r.ly * r.ly + r.lz * r.lz;
		var b = 2 * r.lx * (this.x - px) + 2 * r.ly * (this.y - py) + 2 * r.lz * (this.z - pz);
		var c = this.x * this.x + this.y * this.y + this.z * this.z + (px * px + py * py + pz * pz) - 2 * (this.x * px + this.y * py + this.z * pz) - r2;
		var d = b * b - 4 * a * c;
		if(d < 0) {
			return -1;
		}
		d = Math.sqrt(d);
		var t = (-b + d) / (2 * a);
		return 1 - t;
	}
	,inFrustum: function(f,m) {
		if(m != null) {
			return this.inFrustumMatrix(f,m);
		}
		return f.hasSphere(this);
	}
	,inFrustumMatrix: function(f,m) {
		var oldX = this.x;
		var oldY = this.y;
		var oldZ = this.z;
		var oldR = this.r;
		var x = this.x;
		var y = this.y;
		var z = this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v_x = x;
		var v_y = y;
		var v_z = z;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px;
		v_y = py;
		v_z = pz;
		this.x = v_x;
		this.y = v_y;
		this.z = v_z;
		var scale_x = 0.;
		var scale_y = 0.;
		var scale_z = 0.;
		var scale_w = 1.;
		scale_x = Math.sqrt(m._11 * m._11 + m._12 * m._12 + m._13 * m._13);
		scale_y = Math.sqrt(m._21 * m._21 + m._22 * m._22 + m._23 * m._23);
		scale_z = Math.sqrt(m._31 * m._31 + m._32 * m._32 + m._33 * m._33);
		if(m._11 * (m._22 * m._33 - m._23 * m._32) + m._12 * (m._23 * m._31 - m._21 * m._33) + m._13 * (m._21 * m._32 - m._22 * m._31) < 0) {
			scale_x *= -1;
			scale_y *= -1;
			scale_z *= -1;
		}
		this.r *= Math.max(Math.max(scale_x,scale_y),scale_z);
		var res = f.hasSphere(this);
		this.x = oldX;
		this.y = oldY;
		this.z = oldZ;
		this.r = oldR;
		return res;
	}
	,__class__: h3d_col_Sphere
};
var h3d_impl_Feature = $hxEnums["h3d.impl.Feature"] = { __ename__:true,__constructs__:null
	,StandardDerivatives: {_hx_name:"StandardDerivatives",_hx_index:0,__enum__:"h3d.impl.Feature",toString:$estr}
	,FloatTextures: {_hx_name:"FloatTextures",_hx_index:1,__enum__:"h3d.impl.Feature",toString:$estr}
	,AllocDepthBuffer: {_hx_name:"AllocDepthBuffer",_hx_index:2,__enum__:"h3d.impl.Feature",toString:$estr}
	,HardwareAccelerated: {_hx_name:"HardwareAccelerated",_hx_index:3,__enum__:"h3d.impl.Feature",toString:$estr}
	,MultipleRenderTargets: {_hx_name:"MultipleRenderTargets",_hx_index:4,__enum__:"h3d.impl.Feature",toString:$estr}
	,Queries: {_hx_name:"Queries",_hx_index:5,__enum__:"h3d.impl.Feature",toString:$estr}
	,SRGBTextures: {_hx_name:"SRGBTextures",_hx_index:6,__enum__:"h3d.impl.Feature",toString:$estr}
	,ShaderModel3: {_hx_name:"ShaderModel3",_hx_index:7,__enum__:"h3d.impl.Feature",toString:$estr}
	,BottomLeftCoords: {_hx_name:"BottomLeftCoords",_hx_index:8,__enum__:"h3d.impl.Feature",toString:$estr}
	,Wireframe: {_hx_name:"Wireframe",_hx_index:9,__enum__:"h3d.impl.Feature",toString:$estr}
	,InstancedRendering: {_hx_name:"InstancedRendering",_hx_index:10,__enum__:"h3d.impl.Feature",toString:$estr}
};
h3d_impl_Feature.__constructs__ = [h3d_impl_Feature.StandardDerivatives,h3d_impl_Feature.FloatTextures,h3d_impl_Feature.AllocDepthBuffer,h3d_impl_Feature.HardwareAccelerated,h3d_impl_Feature.MultipleRenderTargets,h3d_impl_Feature.Queries,h3d_impl_Feature.SRGBTextures,h3d_impl_Feature.ShaderModel3,h3d_impl_Feature.BottomLeftCoords,h3d_impl_Feature.Wireframe,h3d_impl_Feature.InstancedRendering];
h3d_impl_Feature.__empty_constructs__ = [h3d_impl_Feature.StandardDerivatives,h3d_impl_Feature.FloatTextures,h3d_impl_Feature.AllocDepthBuffer,h3d_impl_Feature.HardwareAccelerated,h3d_impl_Feature.MultipleRenderTargets,h3d_impl_Feature.Queries,h3d_impl_Feature.SRGBTextures,h3d_impl_Feature.ShaderModel3,h3d_impl_Feature.BottomLeftCoords,h3d_impl_Feature.Wireframe,h3d_impl_Feature.InstancedRendering];
var h3d_impl_RenderFlag = $hxEnums["h3d.impl.RenderFlag"] = { __ename__:true,__constructs__:null
	,CameraHandness: {_hx_name:"CameraHandness",_hx_index:0,__enum__:"h3d.impl.RenderFlag",toString:$estr}
};
h3d_impl_RenderFlag.__constructs__ = [h3d_impl_RenderFlag.CameraHandness];
h3d_impl_RenderFlag.__empty_constructs__ = [h3d_impl_RenderFlag.CameraHandness];
var h3d_impl_InputNames = function(names) {
	this.id = h3d_impl_InputNames.UID++;
	this.names = names;
};
$hxClasses["h3d.impl.InputNames"] = h3d_impl_InputNames;
h3d_impl_InputNames.__name__ = "h3d.impl.InputNames";
h3d_impl_InputNames.get = function(names) {
	var key = names.join("|");
	var i = h3d_impl_InputNames.CACHE.h[key];
	if(i == null) {
		i = new h3d_impl_InputNames(names.slice());
		h3d_impl_InputNames.CACHE.h[key] = i;
	}
	return i;
};
h3d_impl_InputNames.prototype = {
	__class__: h3d_impl_InputNames
};
var h3d_impl_Driver = function() { };
$hxClasses["h3d.impl.Driver"] = h3d_impl_Driver;
h3d_impl_Driver.__name__ = "h3d.impl.Driver";
h3d_impl_Driver.prototype = {
	hasFeature: function(f) {
		return false;
	}
	,setRenderFlag: function(r,value) {
	}
	,isSupportedFormat: function(fmt) {
		return false;
	}
	,isDisposed: function() {
		return true;
	}
	,begin: function(frame) {
	}
	,generateMipMaps: function(texture) {
		throw haxe_Exception.thrown("Mipmaps auto generation is not supported on this platform");
	}
	,clear: function(color,depth,stencil) {
	}
	,init: function(onCreate,forceSoftware) {
		if(forceSoftware == null) {
			forceSoftware = false;
		}
	}
	,resize: function(width,height) {
	}
	,selectShader: function(shader) {
		return false;
	}
	,selectMaterial: function(pass) {
	}
	,uploadShaderBuffers: function(buffers,which) {
	}
	,getShaderInputNames: function() {
		return null;
	}
	,selectBuffer: function(buffer) {
	}
	,selectMultiBuffers: function(buffers) {
	}
	,draw: function(ibuf,startIndex,ntriangles) {
	}
	,drawInstanced: function(ibuf,commands) {
	}
	,setRenderZone: function(x,y,width,height) {
	}
	,setRenderTarget: function(tex,layer,mipLevel) {
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(layer == null) {
			layer = 0;
		}
	}
	,setRenderTargets: function(textures) {
	}
	,allocDepthBuffer: function(b) {
		return null;
	}
	,disposeDepthBuffer: function(b) {
	}
	,getDefaultDepthBuffer: function() {
		return null;
	}
	,end: function() {
	}
	,setDebug: function(b) {
	}
	,allocTexture: function(t) {
		return null;
	}
	,allocIndexes: function(count,is32) {
		return null;
	}
	,allocVertexes: function(m) {
		return null;
	}
	,disposeTexture: function(t) {
	}
	,disposeIndexes: function(i) {
	}
	,disposeVertexes: function(v) {
	}
	,uploadIndexBuffer: function(i,startIndice,indiceCount,buf,bufPos) {
	}
	,uploadVertexBuffer: function(v,startVertex,vertexCount,buf,bufPos) {
	}
	,uploadTextureBitmap: function(t,bmp,mipLevel,side) {
	}
	,uploadTexturePixels: function(t,pixels,mipLevel,side) {
	}
	,copyTexture: function(from,to) {
		return false;
	}
	,__class__: h3d_impl_Driver
};
var h3d_impl__$GlDriver_CompiledShader = function(s,vertex,shader) {
	this.s = s;
	this.vertex = vertex;
	this.shader = shader;
};
$hxClasses["h3d.impl._GlDriver.CompiledShader"] = h3d_impl__$GlDriver_CompiledShader;
h3d_impl__$GlDriver_CompiledShader.__name__ = "h3d.impl._GlDriver.CompiledShader";
h3d_impl__$GlDriver_CompiledShader.prototype = {
	__class__: h3d_impl__$GlDriver_CompiledShader
};
var h3d_impl__$GlDriver_CompiledAttribute = function() {
};
$hxClasses["h3d.impl._GlDriver.CompiledAttribute"] = h3d_impl__$GlDriver_CompiledAttribute;
h3d_impl__$GlDriver_CompiledAttribute.__name__ = "h3d.impl._GlDriver.CompiledAttribute";
h3d_impl__$GlDriver_CompiledAttribute.prototype = {
	__class__: h3d_impl__$GlDriver_CompiledAttribute
};
var h3d_impl__$GlDriver_CompiledProgram = function() {
};
$hxClasses["h3d.impl._GlDriver.CompiledProgram"] = h3d_impl__$GlDriver_CompiledProgram;
h3d_impl__$GlDriver_CompiledProgram.__name__ = "h3d.impl._GlDriver.CompiledProgram";
h3d_impl__$GlDriver_CompiledProgram.prototype = {
	__class__: h3d_impl__$GlDriver_CompiledProgram
};
var h3d_impl_GlDriver = function(antiAlias) {
	if(antiAlias == null) {
		antiAlias = 0;
	}
	this.features = new haxe_ds_EnumValueMap();
	this.maxCompressedTexturesSupport = 0;
	this.rightHanded = false;
	this.firstShader = true;
	this.boundTextures = [];
	this.curTargets = [];
	var _g = [];
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	this.currentDivisor = _g;
	this.curColorMask = -1;
	this.lastActiveIndex = 0;
	this.curStEnabled = false;
	this.curStMaskBits = -1;
	this.curStOpBits = -1;
	this.curMatBits = -1;
	this.maxIdxCurAttribs = 0;
	this.curAttribs = [];
	this.canvas = hxd_Window.getInstance().canvas;
	var options = { alpha : false, stencil : true, antialias : antiAlias > 0};
	if(h3d_impl_GlDriver.ALLOW_WEBGL2) {
		this.gl = this.canvas.getContext("webgl2",options);
	}
	if(this.gl == null) {
		this.gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.canvas,options);
	}
	if(this.gl == null) {
		throw haxe_Exception.thrown("Could not acquire GL context");
	}
	if(typeof(WebGLDebugUtils) != "undefined") {
		this.gl = WebGLDebugUtils.makeDebugContext(this.gl);
		this.glDebug = true;
	}
	this.commonFB = this.gl.createFramebuffer();
	this.programs = new haxe_ds_IntMap();
	this.defStencil = new h3d_mat_Stencil();
	this.frame = hxd_Timer.frameCount;
	var v = this.gl.getParameter(7938);
	var reg = new EReg("ES ([0-9]+\\.[0-9]+)","");
	if(reg.match(v)) {
		this.glES = parseFloat(reg.matched(1));
	}
	var reg = new EReg("[0-9]+\\.[0-9]+","");
	var v = this.gl.getParameter(35724);
	if(reg.match(v)) {
		this.glES = parseFloat(reg.matched(0));
		this.shaderVersion = Math.round(parseFloat(reg.matched(0)) * 100);
	}
	this.drawMode = 4;
	this.makeFeatures();
	if(this.hasFeature(h3d_impl_Feature.InstancedRendering) && this.glES < 3) {
		var extension = this.gl.getExtension("ANGLE_instanced_arrays");
		this.gl["vertexAttribDivisor"] = $bind(extension,extension.vertexAttribDivisorANGLE);
		this.gl["drawElementsInstanced"] = $bind(extension,extension.drawElementsInstancedANGLE);
	}
	hxsl_SharedShader.UNROLL_LOOPS = !this.hasFeature(h3d_impl_Feature.ShaderModel3);
	this.gl.pixelStorei(3333,1);
	this.gl.pixelStorei(3317,1);
};
$hxClasses["h3d.impl.GlDriver"] = h3d_impl_GlDriver;
h3d_impl_GlDriver.__name__ = "h3d.impl.GlDriver";
h3d_impl_GlDriver.__super__ = h3d_impl_Driver;
h3d_impl_GlDriver.prototype = $extend(h3d_impl_Driver.prototype,{
	setRenderFlag: function(r,value) {
		this.rightHanded = value > 0;
	}
	,setDebug: function(d) {
		this.debug = d;
	}
	,begin: function(frame) {
		this.frame = frame;
		this.resetStream();
		this.gl.useProgram(null);
		this.curShader = null;
		this.curBuffer = null;
	}
	,getShaderInputNames: function() {
		return this.curShader.inputs;
	}
	,makeCompiler: function() {
		var glout = new hxsl_GlslOut();
		glout.glES = this.glES;
		glout.version = this.shaderVersion;
		glout.intelDriverFix = this.isIntelGpu;
		return glout;
	}
	,getDriverName: function(details) {
		var render = this.gl.getParameter(7937);
		if(details) {
			render += " GLv" + Std.string(this.gl.getParameter(7938));
		} else {
			render = render.split("/").shift();
		}
		render = render.split("WebGL ").join("");
		return "OpenGL " + render;
	}
	,compileShader: function(glout,shader) {
		var type = shader.vertex ? 35633 : 35632;
		var s = this.gl.createShader(type);
		if(shader.code == null) {
			shader.code = glout.run(shader.data);
			shader.data.funs = null;
		}
		this.gl.shaderSource(s,shader.code);
		this.gl.compileShader(s);
		var log = this.gl.getShaderInfoLog(s);
		if(this.gl.getShaderParameter(s,35713) != 1) {
			var log = this.gl.getShaderInfoLog(s);
			var lid = Std.parseInt(HxOverrides.substr(log,9,null));
			var line = lid == null ? null : shader.code.split("\n")[lid - 1];
			if(line == null) {
				line = "";
			} else {
				line = "(" + StringTools.trim(line) + ")";
			}
			var codeLines = shader.code.split("\n");
			var _g = 0;
			var _g1 = codeLines.length;
			while(_g < _g1) {
				var i = _g++;
				codeLines[i] = i + 1 + "\t" + codeLines[i];
			}
			throw haxe_Exception.thrown("An error occurred compiling the shaders: " + log + line + "\n\n" + codeLines.join("\n"));
		}
		return new h3d_impl__$GlDriver_CompiledShader(s,shader.vertex,shader);
	}
	,initShader: function(p,s,shader,rt) {
		var prefix = s.vertex ? "vertex" : "fragment";
		s.globals = this.gl.getUniformLocation(p.p,prefix + "Globals");
		s.params = this.gl.getUniformLocation(p.p,prefix + "Params");
		s.textures = [];
		var index = 0;
		var curT = null;
		var mode = 0;
		var name = "";
		var t = shader.textures;
		while(t != null) {
			var tt = t.type;
			var count = 1;
			switch(tt._hx_index) {
			case 15:
				var _g = tt.size;
				if(_g._hx_index == 0) {
					var n = _g.v;
					var t1 = tt.t;
					tt = t1;
					count = n;
				}
				break;
			case 17:
				var _g1 = tt.size;
				tt = hxsl_Type.TSampler2D;
				break;
			default:
			}
			if(tt != curT) {
				curT = tt;
				switch(tt._hx_index) {
				case 10:
					mode = 3553;
					name = "Textures";
					break;
				case 11:
					mode = 35866;
					name = "TexturesArray";
					break;
				case 12:
					mode = 34067;
					name = "TexturesCube";
					break;
				default:
					throw haxe_Exception.thrown("Unsupported texture type " + Std.string(tt));
				}
				index = 0;
			}
			var _g2 = 0;
			var _g3 = count;
			while(_g2 < _g3) {
				var i = _g2++;
				var loc = this.gl.getUniformLocation(p.p,prefix + name + "[" + index + "]");
				if(loc == null) {
					throw haxe_Exception.thrown("Texture " + rt.spec.instances[t.instance].shader.data.name + "." + t.name + " is missing from generated shader");
				}
				s.textures.push({ u : loc, t : curT, mode : mode});
				++index;
			}
			t = t.next;
		}
		if(shader.bufferCount > 0) {
			var _g = [];
			var _g1 = 0;
			var _g2 = shader.bufferCount;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(this.gl.getUniformBlockIndex(p.p,(shader.vertex ? "vertex_" : "") + "uniform_buffer" + i));
			}
			s.buffers = _g;
			var start = 0;
			if(!s.vertex) {
				start = rt.vertex.bufferCount;
			}
			var _g = 0;
			var _g1 = shader.bufferCount;
			while(_g < _g1) {
				var i = _g++;
				this.gl.uniformBlockBinding(p.p,s.buffers[i],i + start);
			}
		}
	}
	,selectShader: function(shader) {
		var p = this.programs.h[shader.id];
		if(p == null) {
			p = new h3d_impl__$GlDriver_CompiledProgram();
			var glout = this.makeCompiler();
			p.vertex = this.compileShader(glout,shader.vertex);
			p.fragment = this.compileShader(glout,shader.fragment);
			p.p = this.gl.createProgram();
			this.gl.attachShader(p.p,p.vertex.s);
			this.gl.attachShader(p.p,p.fragment.s);
			var log = null;
			try {
				this.gl.linkProgram(p.p);
				if(this.gl.getProgramParameter(p.p,35714) != 1) {
					log = this.gl.getProgramInfoLog(p.p);
				}
			} catch( _g ) {
				var e = haxe_Exception.caught(_g).unwrap();
				throw haxe_Exception.thrown("Shader linkage error: " + Std.string(e) + " (" + this.getDriverName(false) + ")");
			}
			this.gl.deleteShader(p.vertex.s);
			this.gl.deleteShader(p.fragment.s);
			if(log != null) {
				this.gl.deleteProgram(p.p);
				throw haxe_Exception.thrown("Program linkage failure: " + log + "\nVertex=\n" + shader.vertex.code + "\n\nFragment=\n" + shader.fragment.code);
			}
			this.firstShader = false;
			this.initShader(p,p.vertex,shader.vertex,shader);
			this.initShader(p,p.fragment,shader.fragment,shader);
			var attribNames = [];
			p.attribs = [];
			p.hasAttribIndex = [];
			p.stride = 0;
			var _g = 0;
			var _g1 = shader.vertex.data.vars;
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				if(v.kind._hx_index == 1) {
					var t = 5126;
					var size;
					var _g2 = v.type;
					switch(_g2._hx_index) {
					case 3:
						size = 1;
						break;
					case 5:
						var _g3 = _g2.t;
						var n = _g2.size;
						size = n;
						break;
					case 9:
						var n1 = _g2.size;
						t = 5120;
						size = n1;
						break;
					default:
						throw haxe_Exception.thrown("assert " + Std.string(v.type));
					}
					var index = this.gl.getAttribLocation(p.p,glout.varNames.h.hasOwnProperty(v.id) ? glout.varNames.h[v.id] : v.name);
					if(index < 0) {
						p.stride += size;
						continue;
					}
					var a = new h3d_impl__$GlDriver_CompiledAttribute();
					a.type = t;
					a.size = size;
					a.index = index;
					a.offset = p.stride;
					a.divisor = 0;
					if(v.qualifiers != null) {
						var _g4 = 0;
						var _g5 = v.qualifiers;
						while(_g4 < _g5.length) {
							var q = _g5[_g4];
							++_g4;
							if(q._hx_index == 9) {
								var n2 = q.v;
								a.divisor = n2;
							}
						}
					}
					p.attribs.push(a);
					p.hasAttribIndex[a.index] = true;
					attribNames.push(v.name);
					p.stride += size;
				}
			}
			p.inputs = h3d_impl_InputNames.get(attribNames);
			this.programs.h[shader.id] = p;
		}
		if(this.curShader == p) {
			return false;
		}
		this.setProgram(p);
		return true;
	}
	,setProgram: function(p) {
		this.gl.useProgram(p.p);
		var _g = 0;
		var _g1 = p.attribs;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(!this.curAttribs[a.index]) {
				this.gl.enableVertexAttribArray(a.index);
				this.curAttribs[a.index] = true;
				if(this.maxIdxCurAttribs < a.index) {
					this.maxIdxCurAttribs = a.index;
				}
			}
		}
		var lastIdxCurAttribTrue = 0;
		var _g = 0;
		var _g1 = this.maxIdxCurAttribs + 1;
		while(_g < _g1) {
			var i = _g++;
			if(this.curAttribs[i] && !p.hasAttribIndex[i]) {
				this.gl.disableVertexAttribArray(i);
				this.curAttribs[i] = false;
			} else if(this.curAttribs[i]) {
				lastIdxCurAttribTrue = i;
			}
		}
		this.maxIdxCurAttribs = lastIdxCurAttribTrue;
		this.curShader = p;
		this.curBuffer = null;
		var _g = 0;
		var _g1 = this.boundTextures.length;
		while(_g < _g1) {
			var i = _g++;
			this.boundTextures[i] = null;
		}
	}
	,uploadShaderBuffers: function(buf,which) {
		this.uploadBuffer(buf,this.curShader.vertex,buf.vertex,which);
		this.uploadBuffer(buf,this.curShader.fragment,buf.fragment,which);
	}
	,uploadBuffer: function(buffer,s,buf,which) {
		switch(which) {
		case 0:
			if(s.globals != null) {
				var a = buf.globals.subarray(0,s.shader.globalsSize * 4);
				this.gl.uniform4fv(s.globals,a);
			}
			break;
		case 1:
			if(s.params != null) {
				var a = buf.params.subarray(0,s.shader.paramsSize * 4);
				this.gl.uniform4fv(s.params,a);
			}
			break;
		case 2:
			var tcount = s.textures.length;
			var _g = 0;
			var _g1 = s.textures.length;
			while(_g < _g1) {
				var i = _g++;
				var t = buf.tex[i];
				var pt = s.textures[i];
				if(t == null || t.t == null && t.realloc == null) {
					switch(pt.t._hx_index) {
					case 10:
						var color = h3d_mat_Defaults.loadingTextureColor;
						t = h3d_mat_Texture.fromColor(color,(color >>> 24) / 255);
						break;
					case 12:
						t = h3d_mat_Texture.defaultCubeTexture();
						break;
					default:
						throw haxe_Exception.thrown("Missing texture");
					}
				}
				if(t != null && t.t == null && t.realloc != null) {
					var s1 = this.curShader;
					t.alloc();
					t.realloc();
					if(this.curShader != s1) {
						this.setProgram(s1);
						this.uploadShaderBuffers(buffer,0);
						this.uploadShaderBuffers(buffer,1);
						this.uploadShaderBuffers(buffer,2);
						return;
					}
				}
				t.set_lastFrame(this.frame);
				if(pt.u == null) {
					continue;
				}
				var idx = s.vertex ? i : this.curShader.vertex.textures.length + i;
				if(this.boundTextures[idx] != t.t) {
					this.boundTextures[idx] = t.t;
					var mode = this.getBindType(t);
					if(mode != pt.mode) {
						throw haxe_Exception.thrown("Texture format mismatch: " + Std.string(t) + " should be " + Std.string(pt.t));
					}
					this.gl.activeTexture(33984 + idx);
					this.gl.uniform1i(pt.u,idx);
					this.gl.bindTexture(mode,t.t.t);
					this.lastActiveIndex = idx;
				}
				var mip = t.mipMap._hx_index;
				var filter = t.filter._hx_index;
				var wrap = t.wrap._hx_index;
				var bits = mip | filter << 3 | wrap << 6;
				if(bits != t.t.bits) {
					t.t.bits = bits;
					var flags = h3d_impl_GlDriver.TFILTERS[mip][filter];
					var mode1 = pt.mode;
					this.gl.texParameteri(mode1,10240,flags[0]);
					this.gl.texParameteri(mode1,10241,flags[1]);
					var w = h3d_impl_GlDriver.TWRAP[wrap];
					this.gl.texParameteri(mode1,10242,w);
					this.gl.texParameteri(mode1,10243,w);
				}
			}
			break;
		case 3:
			if(s.buffers != null) {
				var start = 0;
				if(!s.vertex && this.curShader.vertex.buffers != null) {
					start = this.curShader.vertex.buffers.length;
				}
				var _g = 0;
				var _g1 = s.buffers.length;
				while(_g < _g1) {
					var i = _g++;
					this.gl.bindBufferBase(35345,i + start,buf.buffers[i].buffer.vbuf.b);
				}
			}
			break;
		}
	}
	,selectMaterial: function(pass) {
		var bits = pass.bits;
		if(this.curTarget == null == this.rightHanded) {
			switch(pass.culling._hx_index) {
			case 1:
				bits = bits & -4 | 2;
				break;
			case 2:
				bits = bits & -4 | 1;
				break;
			default:
			}
		}
		this.selectMaterialBits(bits);
		if(this.curColorMask != pass.colorMask) {
			var m = pass.colorMask;
			this.gl.colorMask((m & 1) != 0,(m & 2) != 0,(m & 4) != 0,(m & 8) != 0);
			this.curColorMask = m;
		}
		var s = this.defStencil;
		if(pass.stencil == null) {
			if(this.curStEnabled) {
				this.gl.disable(2960);
				this.curStEnabled = false;
			}
		} else {
			s = pass.stencil;
			if(!this.curStEnabled) {
				this.gl.enable(2960);
				this.curStEnabled = true;
			}
		}
		this.selectStencilBits(s.opBits,s.maskBits);
	}
	,selectMaterialBits: function(bits) {
		var diff = bits ^ this.curMatBits;
		if(this.curMatBits < 0) {
			diff = -1;
		}
		if(diff == 0) {
			return;
		}
		var wireframe = (bits & 268435456) != 0;
		this.drawMode = wireframe ? 3 : 4;
		if((diff & 3) != 0) {
			var cull = bits & 3;
			if(cull == 0) {
				this.gl.disable(2884);
			} else {
				if(this.curMatBits < 0 || (this.curMatBits & 3) == 0) {
					this.gl.enable(2884);
				}
				this.gl.cullFace(h3d_impl_GlDriver.FACES[cull]);
			}
		}
		if((diff & 4194240) != 0) {
			var csrc = bits >> 6 & 15;
			var cdst = bits >> 10 & 15;
			var asrc = bits >> 14 & 15;
			var adst = bits >> 18 & 15;
			if(csrc == asrc && cdst == adst) {
				if(csrc == 0 && cdst == 1) {
					this.gl.disable(3042);
				} else {
					if(this.curMatBits < 0 || (this.curMatBits >> 6 & 15) == 0 && (this.curMatBits >> 10 & 15) == 1) {
						this.gl.enable(3042);
					}
					this.gl.blendFunc(h3d_impl_GlDriver.BLEND[csrc],h3d_impl_GlDriver.BLEND[cdst]);
				}
			} else {
				if(this.curMatBits < 0 || (this.curMatBits >> 6 & 15) == 0 && (this.curMatBits >> 10 & 15) == 1) {
					this.gl.enable(3042);
				}
				this.gl.blendFuncSeparate(h3d_impl_GlDriver.BLEND[csrc],h3d_impl_GlDriver.BLEND[cdst],h3d_impl_GlDriver.BLEND[asrc],h3d_impl_GlDriver.BLEND[adst]);
			}
		}
		if((diff & 264241152) != 0) {
			var cop = bits >> 22 & 7;
			var aop = bits >> 25 & 7;
			if(cop == aop) {
				this.gl.blendEquation(h3d_impl_GlDriver.OP[cop]);
			} else {
				this.gl.blendEquationSeparate(h3d_impl_GlDriver.OP[cop],h3d_impl_GlDriver.OP[aop]);
			}
		}
		if((diff & 4) != 0) {
			this.gl.depthMask((bits >> 2 & 1) != 0);
		}
		if((diff & 56) != 0) {
			var cmp = bits >> 3 & 7;
			if(cmp == 0) {
				this.gl.disable(2929);
			} else {
				if(this.curMatBits < 0 || (this.curMatBits >> 3 & 7) == 0) {
					this.gl.enable(2929);
				}
				this.gl.depthFunc(h3d_impl_GlDriver.COMPARE[cmp]);
			}
		}
		this.curMatBits = bits;
	}
	,selectStencilBits: function(opBits,maskBits) {
		var diffOp = opBits ^ this.curStOpBits;
		var diffMask = maskBits ^ this.curStMaskBits;
		if((diffOp | diffMask) == 0) {
			return;
		}
		if((diffOp & 4088) != 0) {
			this.gl.stencilOpSeparate(h3d_impl_GlDriver.FACES[2],h3d_impl_GlDriver.STENCIL_OP[opBits >> 6 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 9 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 3 & 7]);
		}
		if((diffOp & 16744448) != 0) {
			this.gl.stencilOpSeparate(h3d_impl_GlDriver.FACES[1],h3d_impl_GlDriver.STENCIL_OP[opBits >> 18 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 21 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 15 & 7]);
		}
		if((diffOp & 7 | diffMask & 16711935) != 0) {
			this.gl.stencilFuncSeparate(h3d_impl_GlDriver.FACES[2],h3d_impl_GlDriver.COMPARE[opBits & 7],maskBits >> 16 & 255,maskBits & 255);
		}
		if((diffOp & 28672 | diffMask & 16711935) != 0) {
			this.gl.stencilFuncSeparate(h3d_impl_GlDriver.FACES[1],h3d_impl_GlDriver.COMPARE[opBits >> 12 & 7],maskBits >> 16 & 255,maskBits & 255);
		}
		if((diffMask & 65280) != 0) {
			var w = maskBits >> 8 & 255;
			this.gl.stencilMaskSeparate(h3d_impl_GlDriver.FACES[2],w);
			this.gl.stencilMaskSeparate(h3d_impl_GlDriver.FACES[1],w);
		}
		this.curStOpBits = opBits;
		this.curStMaskBits = maskBits;
	}
	,clear: function(color,depth,stencil) {
		var bits = 0;
		if(color != null) {
			this.gl.colorMask(true,true,true,true);
			this.curColorMask = 15;
			this.gl.clearColor(color.x,color.y,color.z,color.w);
			bits |= 16384;
		}
		if(depth != null) {
			this.gl.depthMask(true);
			if(this.curMatBits >= 0) {
				this.curMatBits |= 4;
			}
			this.gl.clearDepth(depth);
			bits |= 256;
		}
		if(stencil != null) {
			this.selectStencilBits(this.defStencil.opBits,this.defStencil.maskBits);
			this.gl.clearStencil(stencil);
			bits |= 1024;
		}
		if(bits != 0) {
			this.gl.clear(bits);
		}
		if(this.curTarget != null) {
			this.curTarget.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		}
	}
	,resize: function(width,height) {
		if(this.canvas.style.width == "") {
			var tmp = width / window.devicePixelRatio | 0;
			this.canvas.style.width = tmp + "px";
			var tmp = height / window.devicePixelRatio | 0;
			this.canvas.style.height = tmp + "px";
		}
		this.canvas.width = width;
		this.canvas.height = height;
		this.bufferWidth = width;
		this.bufferHeight = height;
		this.gl.viewport(0,0,width,height);
		if(this.defaultDepth != null) {
			this.disposeDepthBuffer(this.defaultDepth);
			this.defaultDepth.width = this.bufferWidth;
			this.defaultDepth.height = this.bufferHeight;
			this.defaultDepth.b = this.allocDepthBuffer(this.defaultDepth);
		}
	}
	,getChannels: function(t) {
		switch(t.internalFmt) {
		case 6407:
			return 6407;
		case 6408:
			return 6408;
		case 32857:
			return 6408;
		case 6403:case 33321:case 33325:case 33326:
			return 6403;
		case 33319:case 33323:case 33327:case 33328:
			return 33319;
		case 33777:case 33778:case 33779:
			return 6408;
		case 34836:case 34842:
			return 6408;
		case 34837:case 34843:
			return 6407;
		case 35898:
			return 6407;
		case 35904:case 35905:
			return 6407;
		default:
			throw haxe_Exception.thrown("Invalid format " + t.internalFmt);
		}
	}
	,isSupportedFormat: function(fmt) {
		switch(fmt._hx_index) {
		case 2:
			return true;
		case 3:case 4:
			return this.hasFeature(h3d_impl_Feature.FloatTextures);
		case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 16:case 17:
			return this.glES >= 3;
		case 14:case 15:
			return this.hasFeature(h3d_impl_Feature.SRGBTextures);
		case 21:
			var n = fmt.v;
			return n <= this.maxCompressedTexturesSupport;
		default:
			return false;
		}
	}
	,getBindType: function(t) {
		var isCube = (t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0;
		var isArray = (t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0;
		if(isCube) {
			return 34067;
		} else if(isArray) {
			return 35866;
		} else {
			return 3553;
		}
	}
	,allocTexture: function(t) {
		var _gthis = this;
		if(h3d_impl_GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
		var tt = this.gl.createTexture();
		var bind = this.getBindType(t);
		var tt1 = { t : tt, width : t.width, height : t.height, internalFmt : 6408, pixelFmt : 5121, bits : -1, bind : bind, bias : 0};
		var _g = t.format;
		switch(_g._hx_index) {
		case 1:
			tt1.internalFmt = 32856;
			break;
		case 2:
			break;
		case 3:
			if(this.hasFeature(h3d_impl_Feature.FloatTextures)) {
				tt1.pixelFmt = 5131;
				tt1.internalFmt = 34842;
			} else {
				throw haxe_Exception.thrown("Unsupported texture format " + Std.string(t.format));
			}
			break;
		case 4:
			if(this.hasFeature(h3d_impl_Feature.FloatTextures)) {
				tt1.internalFmt = 34836;
				tt1.pixelFmt = 5126;
			} else {
				throw haxe_Exception.thrown("Unsupported texture format " + Std.string(t.format));
			}
			break;
		case 5:
			tt1.internalFmt = 33321;
			break;
		case 6:
			tt1.internalFmt = 33325;
			tt1.pixelFmt = 5131;
			break;
		case 7:
			tt1.internalFmt = 33326;
			tt1.pixelFmt = 5126;
			break;
		case 8:
			tt1.internalFmt = 33323;
			break;
		case 9:
			tt1.internalFmt = 33327;
			tt1.pixelFmt = 5131;
			break;
		case 10:
			tt1.internalFmt = 33328;
			tt1.pixelFmt = 5126;
			break;
		case 11:
			tt1.internalFmt = 6407;
			break;
		case 12:
			tt1.internalFmt = 34843;
			tt1.pixelFmt = 5131;
			break;
		case 13:
			tt1.internalFmt = 34837;
			tt1.pixelFmt = 5126;
			break;
		case 14:
			tt1.internalFmt = 35905;
			break;
		case 16:
			tt1.internalFmt = 32857;
			tt1.pixelFmt = 33640;
			break;
		case 17:
			tt1.internalFmt = 35898;
			tt1.pixelFmt = 35899;
			break;
		case 21:
			var n = _g.v;
			if(n <= this.maxCompressedTexturesSupport) {
				if((t.width & 3) != 0 || (t.height & 3) != 0) {
					throw haxe_Exception.thrown("Compressed texture " + Std.string(t) + " has size " + t.width + "x" + t.height + " - must be a multiple of 4");
				}
				switch(n) {
				case 1:
					tt1.internalFmt = 33777;
					break;
				case 2:
					tt1.internalFmt = 33778;
					break;
				case 3:
					tt1.internalFmt = 33779;
					break;
				default:
					throw haxe_Exception.thrown("Unsupported texture format " + Std.string(t.format));
				}
			} else {
				throw haxe_Exception.thrown("Unsupported texture format " + Std.string(t.format));
			}
			break;
		default:
			throw haxe_Exception.thrown("Unsupported texture format " + Std.string(t.format));
		}
		t.set_lastFrame(this.frame);
		t.flags &= -1 - (1 << h3d_mat_TextureFlags.WasCleared._hx_index);
		this.gl.bindTexture(bind,tt1.t);
		var outOfMem = false;
		this.gl.texParameteri(bind,33084,0);
		this.gl.texParameteri(bind,33085,t.get_mipLevels() - 1);
		var _g = 0;
		var _g1 = t.get_mipLevels();
		while(_g < _g1) {
			var mip = _g++;
			var b = tt1.width >> mip;
			var w = 1 < b ? b : 1;
			var b1 = tt1.height >> mip;
			var h = 1 < b1 ? b1 : 1;
			if((t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0) {
				var _g2 = 0;
				while(_g2 < 6) {
					var i = _g2++;
					this.gl.texImage2D(h3d_impl_GlDriver.CUBE_FACES[i],mip,tt1.internalFmt,w,h,0,this.getChannels(tt1),tt1.pixelFmt,null);
					var tmp;
					if(!h3d_impl_GlDriver.outOfMemoryCheck) {
						tmp = false;
					} else {
						var err = _gthis.gl.getError();
						if(err == 1285) {
							outOfMem = true;
							tmp = true;
						} else {
							if(err != 0) {
								throw haxe_Exception.thrown("Failed to alloc texture " + Std.string(t.format) + "(error " + err + ")");
							}
							tmp = false;
						}
					}
					if(tmp) {
						break;
					}
				}
			} else if((t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0) {
				this.gl.texImage3D(bind,mip,tt1.internalFmt,w,h,t.get_layerCount(),0,this.getChannels(tt1),tt1.pixelFmt,null);
				if(h3d_impl_GlDriver.outOfMemoryCheck) {
					var err1 = _gthis.gl.getError();
					if(err1 == 1285) {
						outOfMem = true;
					} else if(err1 != 0) {
						throw haxe_Exception.thrown("Failed to alloc texture " + Std.string(t.format) + "(error " + err1 + ")");
					}
				}
			} else {
				var _g3 = t.format;
				var tmp1;
				if(_g3._hx_index == 21) {
					var _g4 = _g3.v;
					tmp1 = true;
				} else {
					tmp1 = false;
				}
				if(!tmp1) {
					this.gl.texImage2D(bind,mip,tt1.internalFmt,w,h,0,this.getChannels(tt1),tt1.pixelFmt,null);
				}
				if(h3d_impl_GlDriver.outOfMemoryCheck) {
					var err2 = _gthis.gl.getError();
					if(err2 == 1285) {
						outOfMem = true;
					} else if(err2 != 0) {
						throw haxe_Exception.thrown("Failed to alloc texture " + Std.string(t.format) + "(error " + err2 + ")");
					}
				}
			}
		}
		this.restoreBind();
		if(outOfMem) {
			this.gl.deleteTexture(tt1.t);
			return null;
		}
		return tt1;
	}
	,restoreBind: function() {
		var t = this.boundTextures[this.lastActiveIndex];
		if(t == null) {
			this.gl.bindTexture(3553,null);
		} else {
			this.gl.bindTexture(t.bind,t.t);
		}
	}
	,allocDepthBuffer: function(b) {
		var r = this.gl.createRenderbuffer();
		if(b.format == null) {
			b.format = this.glES >= 3 ? h3d_mat_DepthFormat.Depth24Stencil8 : h3d_mat_DepthFormat.Depth16;
		}
		var format;
		switch(b.format._hx_index) {
		case 0:
			format = 33189;
			break;
		case 1:
			if(this.glES >= 3) {
				format = 33190;
			} else {
				throw haxe_Exception.thrown("Unsupported depth format " + Std.string(b.format));
			}
			break;
		case 2:
			format = 34041;
			break;
		default:
			throw haxe_Exception.thrown("Unsupported depth format " + Std.string(b.format));
		}
		this.gl.bindRenderbuffer(36161,r);
		this.gl.renderbufferStorage(36161,format,b.width,b.height);
		this.gl.bindRenderbuffer(36161,null);
		return { r : r};
	}
	,disposeDepthBuffer: function(b) {
		if(b.b != null && b.b.r != null) {
			this.gl.deleteRenderbuffer(b.b.r);
			b.b = null;
		}
	}
	,getDefaultDepthBuffer: function() {
		if(this.defaultDepth != null) {
			return this.defaultDepth;
		}
		this.defaultDepth = new h3d_mat_DepthBuffer(0,0);
		this.defaultDepth.width = this.bufferWidth;
		this.defaultDepth.height = this.bufferHeight;
		this.defaultDepth.b = this.allocDepthBuffer(this.defaultDepth);
		return this.defaultDepth;
	}
	,allocVertexes: function(m) {
		if(h3d_impl_GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
		var b = this.gl.createBuffer();
		this.gl.bindBuffer(34962,b);
		if(m.size * m.stride == 0) {
			throw haxe_Exception.thrown("assert");
		}
		this.gl.bufferData(34962,m.size * m.stride * 4,(m.flags & 1 << h3d_BufferFlag.Dynamic._hx_index) != 0 ? 35048 : 35044);
		var outOfMem = h3d_impl_GlDriver.outOfMemoryCheck && this.gl.getError() == 1285;
		this.gl.bindBuffer(34962,null);
		if(outOfMem) {
			this.gl.deleteBuffer(b);
			return null;
		}
		return { b : b, stride : m.stride};
	}
	,allocIndexes: function(count,is32) {
		if(h3d_impl_GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
		var b = this.gl.createBuffer();
		var size = is32 ? 4 : 2;
		this.gl.bindBuffer(34963,b);
		this.gl.bufferData(34963,count * size,35044);
		var outOfMem = h3d_impl_GlDriver.outOfMemoryCheck && this.gl.getError() == 1285;
		this.gl.bindBuffer(34963,null);
		this.curIndexBuffer = null;
		if(outOfMem) {
			this.gl.deleteBuffer(b);
			return null;
		}
		return { b : b, is32 : is32};
	}
	,disposeTexture: function(t) {
		var tt = t.t;
		if(tt == null) {
			return;
		}
		t.t = null;
		var _g = 0;
		var _g1 = this.boundTextures.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.boundTextures[i] == tt) {
				this.boundTextures[i] = null;
			}
		}
		this.gl.deleteTexture(tt.t);
	}
	,disposeIndexes: function(i) {
		this.gl.deleteBuffer(i.b);
	}
	,disposeVertexes: function(v) {
		this.gl.deleteBuffer(v.b);
	}
	,generateMipMaps: function(t) {
		var bind = this.getBindType(t);
		this.gl.bindTexture(bind,t.t.t);
		this.gl.generateMipmap(bind);
		this.restoreBind();
	}
	,uploadTextureBitmap: function(t,bmp,mipLevel,side) {
		if(t.format != hxd_PixelFormat.RGBA || t.get_layerCount() != 1) {
			var pixels = bmp.getPixels();
			this.uploadTexturePixels(t,pixels,mipLevel,side);
			pixels.dispose();
		} else {
			var img = bmp.ctx;
			this.gl.bindTexture(3553,t.t.t);
			this.gl.texImage2D(3553,mipLevel,t.t.internalFmt,this.getChannels(t.t),t.t.pixelFmt,img.getImageData(0,0,bmp.ctx.canvas.width,bmp.ctx.canvas.height));
			this.restoreBind();
		}
	}
	,resetStream: function() {
	}
	,uploadTexturePixels: function(t,pixels,mipLevel,side) {
		var cubic = (t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0;
		var face = cubic ? h3d_impl_GlDriver.CUBE_FACES[side] : (t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0 ? 35866 : 3553;
		var bind = this.getBindType(t);
		this.gl.bindTexture(bind,t.t.t);
		pixels.convert(t.format);
		pixels.setFlip(false);
		var dataLen = pixels.dataSize;
		var buffer;
		switch(t.format._hx_index) {
		case 3:case 6:case 9:case 12:
			buffer = new Uint16Array(pixels.bytes.b.buffer,pixels.offset,dataLen >> 1);
			break;
		case 4:case 7:case 10:case 13:
			buffer = new Float32Array(pixels.bytes.b.buffer,pixels.offset,dataLen >> 2);
			break;
		case 16:case 17:
			buffer = new Uint32Array(pixels.bytes.b.buffer,pixels.offset,dataLen >> 2);
			break;
		default:
			buffer = new Uint8Array(pixels.bytes.b.buffer,pixels.offset,dataLen);
		}
		var _g = t.format;
		var tmp;
		if(_g._hx_index == 21) {
			var _g1 = _g.v;
			tmp = true;
		} else {
			tmp = false;
		}
		if(tmp) {
			if((t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0) {
				this.gl.compressedTexSubImage3D(face,mipLevel,0,0,side,pixels.width,pixels.height,1,t.t.internalFmt,buffer);
			} else {
				this.gl.compressedTexImage2D(face,mipLevel,t.t.internalFmt,pixels.width,pixels.height,0,buffer);
			}
		} else if((t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0) {
			this.gl.texSubImage3D(face,mipLevel,0,0,side,pixels.width,pixels.height,1,this.getChannels(t.t),t.t.pixelFmt,buffer);
		} else {
			this.gl.texImage2D(face,mipLevel,t.t.internalFmt,pixels.width,pixels.height,0,this.getChannels(t.t),t.t.pixelFmt,buffer);
		}
		t.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		this.restoreBind();
	}
	,uploadVertexBuffer: function(v,startVertex,vertexCount,buf,bufPos) {
		var stride = v.stride;
		this.gl.bindBuffer(34962,v.b);
		var buf1 = buf.array;
		var sub = new Float32Array(buf1.buffer,bufPos * 4,vertexCount * stride);
		this.gl.bufferSubData(34962,startVertex * stride * 4,sub);
		this.gl.bindBuffer(34962,null);
	}
	,uploadIndexBuffer: function(i,startIndice,indiceCount,buf,bufPos) {
		var bits = i.is32 ? 2 : 1;
		this.gl.bindBuffer(34963,i.b);
		var buf1 = new Uint16Array(buf);
		var sub = new Uint16Array(buf1.buffer,bufPos << bits,indiceCount);
		this.gl.bufferSubData(34963,startIndice << bits,sub);
		this.gl.bindBuffer(34963,null);
		this.curIndexBuffer = null;
	}
	,selectBuffer: function(v) {
		if(v == this.curBuffer) {
			return;
		}
		if(this.curBuffer != null && v.buffer == this.curBuffer.buffer && (v.buffer.flags & 1 << h3d_BufferFlag.RawFormat._hx_index) != 0 == ((this.curBuffer.flags & 1 << h3d_BufferFlag.RawFormat._hx_index) != 0)) {
			this.curBuffer = v;
			return;
		}
		if(this.curShader == null) {
			throw haxe_Exception.thrown("No shader selected");
		}
		this.curBuffer = v;
		var m = v.buffer.vbuf;
		if(m.stride < this.curShader.stride) {
			throw haxe_Exception.thrown("Buffer stride (" + m.stride + ") and shader stride (" + this.curShader.stride + ") mismatch");
		}
		this.gl.bindBuffer(34962,m.b);
		if((v.flags & 1 << h3d_BufferFlag.RawFormat._hx_index) != 0) {
			var _g = 0;
			var _g1 = this.curShader.attribs;
			while(_g < _g1.length) {
				var a = _g1[_g];
				++_g;
				var pos = a.offset;
				this.gl.vertexAttribPointer(a.index,a.size,a.type,false,m.stride * 4,pos * 4);
				if(this.currentDivisor[a.index] != a.divisor) {
					this.currentDivisor[a.index] = a.divisor;
					this.gl.vertexAttribDivisor(a.index,a.divisor);
				}
			}
		} else {
			var offset = 8;
			var _g = 0;
			var _g1 = this.curShader.attribs.length;
			while(_g < _g1) {
				var i = _g++;
				var a = this.curShader.attribs[i];
				var pos;
				var _g2 = this.curShader.inputs.names[i];
				switch(_g2) {
				case "normal":
					if(m.stride < 6) {
						throw haxe_Exception.thrown("Buffer is missing NORMAL data, set it to RAW format ?");
					}
					pos = 3;
					break;
				case "position":
					pos = 0;
					break;
				case "uv":
					if(m.stride < 8) {
						throw haxe_Exception.thrown("Buffer is missing UV data, set it to RAW format ?");
					}
					pos = 6;
					break;
				default:
					var s = _g2;
					pos = offset;
					offset += a.size;
					if(offset > m.stride) {
						throw haxe_Exception.thrown("Buffer is missing '" + s + "' data, set it to RAW format ?");
					}
				}
				this.gl.vertexAttribPointer(a.index,a.size,a.type,false,m.stride * 4,pos * 4);
				if(this.currentDivisor[a.index] != a.divisor) {
					this.currentDivisor[a.index] = a.divisor;
					this.gl.vertexAttribDivisor(a.index,a.divisor);
				}
			}
		}
	}
	,selectMultiBuffers: function(buffers) {
		var _g = 0;
		var _g1 = this.curShader.attribs;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			this.gl.bindBuffer(34962,buffers.buffer.buffer.vbuf.b);
			this.gl.vertexAttribPointer(a.index,a.size,a.type,false,buffers.buffer.buffer.stride * 4,buffers.offset * 4);
			if(this.currentDivisor[a.index] != a.divisor) {
				this.currentDivisor[a.index] = a.divisor;
				this.gl.vertexAttribDivisor(a.index,a.divisor);
			}
			buffers = buffers.next;
		}
		this.curBuffer = null;
	}
	,draw: function(ibuf,startIndex,ntriangles) {
		if(ibuf != this.curIndexBuffer) {
			this.curIndexBuffer = ibuf;
			this.gl.bindBuffer(34963,ibuf.b);
		}
		if(ibuf.is32) {
			this.gl.drawElements(this.drawMode,ntriangles * 3,5125,startIndex * 4);
		} else {
			this.gl.drawElements(this.drawMode,ntriangles * 3,5123,startIndex * 2);
		}
	}
	,drawInstanced: function(ibuf,commands) {
		if(ibuf != this.curIndexBuffer) {
			this.curIndexBuffer = ibuf;
			this.gl.bindBuffer(34963,ibuf.b);
		}
		var kind;
		var size;
		if(ibuf.is32) {
			kind = 5125;
			size = 4;
		} else {
			kind = 5123;
			size = 2;
		}
		var args = commands.data;
		if(args != null) {
			var p = 0;
			var _g = 0;
			var _g1 = args.length / 3 | 0;
			while(_g < _g1) {
				var i = _g++;
				this.gl.drawElementsInstanced(this.drawMode,args[p++],kind,args[p++] * size,args[p++]);
			}
		} else {
			this.gl.drawElementsInstanced(this.drawMode,commands.indexCount,kind,commands.startIndex * size,commands.commandCount);
		}
	}
	,end: function() {
	}
	,isDisposed: function() {
		return this.gl.isContextLost();
	}
	,setRenderZone: function(x,y,width,height) {
		if(x == 0 && y == 0 && width < 0 && height < 0) {
			this.gl.disable(3089);
		} else {
			this.gl.enable(3089);
			if(this.curTarget == null) {
				y = this.bufferHeight - (y + height);
			}
			this.gl.scissor(x,y,width,height);
		}
	}
	,setDrawBuffers: function(k) {
		if(this.glES >= 3) {
			this.gl.drawBuffers(h3d_impl_GlDriver.CBUFFERS[k]);
		} else if(this.mrtExt != null) {
			this.mrtExt.drawBuffersWEBGL(h3d_impl_GlDriver.CBUFFERS[k]);
		}
	}
	,unbindTargets: function() {
		if(this.curTarget != null && this.numTargets > 1) {
			while(this.numTargets > 1) {
				this.gl.framebufferTexture2D(36160,36064 + --this.numTargets,3553,null,0);
				this.curTargets[this.numTargets] = null;
			}
			this.setDrawBuffers(1);
		}
	}
	,setRenderTarget: function(tex,layer,mipLevel) {
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(layer == null) {
			layer = 0;
		}
		this.unbindTargets();
		this.curTarget = tex;
		if(tex == null) {
			this.gl.bindFramebuffer(36160,null);
			this.gl.viewport(0,0,this.bufferWidth,this.bufferHeight);
			return;
		}
		if(tex.depthBuffer != null && (tex.depthBuffer.width != tex.width || tex.depthBuffer.height != tex.height)) {
			throw haxe_Exception.thrown("Invalid depth buffer size : does not match render target size");
		}
		if(mipLevel > 0 && this.glES == 1) {
			throw haxe_Exception.thrown("Cannot render to mipLevel in WebGL1, use upload() instead");
		}
		if(tex.t == null) {
			tex.alloc();
		}
		if((tex.flags & 1 << h3d_mat_TextureFlags.MipMapped._hx_index) != 0 && (tex.flags & 1 << h3d_mat_TextureFlags.WasCleared._hx_index) == 0) {
			var bind = this.getBindType(tex);
			this.gl.bindTexture(bind,tex.t.t);
			this.gl.generateMipmap(bind);
			this.restoreBind();
		}
		tex.set_lastFrame(this.frame);
		this.curTargetLayer = layer;
		this.curTargetMip = mipLevel;
		this.gl.bindFramebuffer(36160,this.commonFB);
		if((tex.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0) {
			this.gl.framebufferTextureLayer(36160,36064,tex.t.t,mipLevel,layer);
		} else {
			this.gl.framebufferTexture2D(36160,36064,(tex.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0 ? h3d_impl_GlDriver.CUBE_FACES[layer] : 3553,tex.t.t,mipLevel);
		}
		if(tex.depthBuffer != null) {
			if(tex.depthBuffer.hasStencil() && tex.depthBuffer.format == h3d_mat_DepthFormat.Depth24Stencil8) {
				this.gl.framebufferRenderbuffer(36160,33306,36161,tex.depthBuffer.b.r);
			} else {
				this.gl.framebufferRenderbuffer(36160,33306,36161,null);
				this.gl.framebufferRenderbuffer(36160,36096,36161,tex.depthBuffer.b.r);
				this.gl.framebufferRenderbuffer(36160,36128,36161,tex.depthBuffer.hasStencil() ? tex.depthBuffer.b.r : null);
			}
		} else {
			this.gl.framebufferRenderbuffer(36160,33306,36161,null);
			this.gl.framebufferRenderbuffer(36160,36096,36161,null);
			this.gl.framebufferRenderbuffer(36160,36128,36161,null);
		}
		var w = tex.width >> mipLevel;
		if(w == 0) {
			w = 1;
		}
		var h = tex.height >> mipLevel;
		if(h == 0) {
			h = 1;
		}
		this.gl.viewport(0,0,w,h);
		var _g = 0;
		var _g1 = this.boundTextures.length;
		while(_g < _g1) {
			var i = _g++;
			this.boundTextures[i] = null;
		}
		if((tex.flags & 1 << h3d_mat_TextureFlags.WasCleared._hx_index) == 0) {
			tex.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
			this.clear(h3d_impl_GlDriver.BLACK);
		}
		if(this.glDebug) {
			var code = this.gl.checkFramebufferStatus(36160);
			if(code != 36053) {
				throw haxe_Exception.thrown("Invalid frame buffer: " + code);
			}
		}
	}
	,setRenderTargets: function(textures) {
		this.unbindTargets();
		this.setRenderTarget(textures[0]);
		if(textures.length < 2) {
			return;
		}
		this.numTargets = textures.length;
		var needClear = false;
		var _g = 1;
		var _g1 = textures.length;
		while(_g < _g1) {
			var i = _g++;
			var tex = textures[i];
			if(tex.t == null) {
				tex.alloc();
			}
			this.gl.framebufferTexture2D(36160,36064 + i,3553,tex.t.t,0);
			this.curTargets[i] = tex;
			tex.set_lastFrame(this.frame);
			if((tex.flags & 1 << h3d_mat_TextureFlags.WasCleared._hx_index) == 0) {
				tex.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
				needClear = true;
			}
		}
		this.setDrawBuffers(textures.length);
		if(needClear) {
			this.clear(h3d_impl_GlDriver.BLACK);
		}
	}
	,init: function(onCreate,forceSoftware) {
		if(forceSoftware == null) {
			forceSoftware = false;
		}
		if(window.document.readyState == "complete") {
			var _g = onCreate;
			var a1 = false;
			haxe_Timer.delay(function() {
				_g(a1);
			},1);
		} else {
			var onLoad = null;
			onLoad = function() {
				window.removeEventListener("load",onLoad);
				onCreate(false);
			};
			window.addEventListener("load",onLoad);
		}
	}
	,hasFeature: function(f) {
		return this.features.get(f);
	}
	,makeFeatures: function() {
		var _g = 0;
		var _g1 = h3d_impl_Feature.__empty_constructs__.slice();
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.features.set(f,this.checkFeature(f));
		}
		if(this.gl.getExtension("WEBGL_compressed_texture_s3tc") != null) {
			this.maxCompressedTexturesSupport = 3;
		}
	}
	,checkFeature: function(f) {
		switch(f._hx_index) {
		case 0:
			if(this.glES >= 3) {
				return true;
			} else {
				return this.gl.getExtension("OES_standard_derivatives") != null;
			}
			break;
		case 1:
			if(this.glES >= 3) {
				if(this.gl.getExtension("EXT_color_buffer_float") != null) {
					return this.gl.getExtension("OES_texture_float_linear") != null;
				} else {
					return false;
				}
			} else if(this.gl.getExtension("OES_texture_float") != null && this.gl.getExtension("OES_texture_float_linear") != null && this.gl.getExtension("OES_texture_half_float") != null) {
				return this.gl.getExtension("OES_texture_half_float_linear") != null;
			} else {
				return false;
			}
			break;
		case 2:case 3:case 8:case 9:
			return true;
		case 4:
			if(this.glES >= 3) {
				return true;
			} else if(this.mrtExt == null) {
				return (this.mrtExt = this.gl.getExtension("WEBGL_draw_buffers")) != null;
			} else {
				return true;
			}
			break;
		case 6:
			if(this.glES >= 3) {
				return true;
			} else {
				return this.gl.getExtension("EXT_sRGB") != null;
			}
			break;
		case 7:
			if(this.glES >= 3) {
				return true;
			} else {
				return false;
			}
			break;
		case 10:
			if(this.glES >= 3) {
				return true;
			} else {
				return this.gl.getExtension("ANGLE_instanced_arrays") != null;
			}
			break;
		default:
			return false;
		}
	}
	,__class__: h3d_impl_GlDriver
});
var h3d_impl_InstanceBuffer = function() {
	this.triCount = 0;
};
$hxClasses["h3d.impl.InstanceBuffer"] = h3d_impl_InstanceBuffer;
h3d_impl_InstanceBuffer.__name__ = "h3d.impl.InstanceBuffer";
h3d_impl_InstanceBuffer.prototype = {
	__class__: h3d_impl_InstanceBuffer
};
var h3d_impl__$ManagedBuffer_FreeCell = function(pos,count,next) {
	this.pos = pos;
	this.count = count;
	this.next = next;
};
$hxClasses["h3d.impl._ManagedBuffer.FreeCell"] = h3d_impl__$ManagedBuffer_FreeCell;
h3d_impl__$ManagedBuffer_FreeCell.__name__ = "h3d.impl._ManagedBuffer.FreeCell";
h3d_impl__$ManagedBuffer_FreeCell.prototype = {
	__class__: h3d_impl__$ManagedBuffer_FreeCell
};
var h3d_impl_ManagedBuffer = function(stride,size,flags) {
	var this1 = 0;
	this.flags = this1;
	if(flags != null) {
		var _g = 0;
		while(_g < flags.length) {
			var f = flags[_g];
			++_g;
			this.flags |= 1 << f._hx_index;
		}
	}
	this.size = size;
	this.stride = stride;
	this.freeList = new h3d_impl__$ManagedBuffer_FreeCell(0,size,null);
	this.mem = h3d_Engine.CURRENT.mem;
	this.mem.allocManaged(this);
};
$hxClasses["h3d.impl.ManagedBuffer"] = h3d_impl_ManagedBuffer;
h3d_impl_ManagedBuffer.__name__ = "h3d.impl.ManagedBuffer";
h3d_impl_ManagedBuffer.prototype = {
	uploadVertexBuffer: function(start,vertices,buf,bufPos) {
		if(bufPos == null) {
			bufPos = 0;
		}
		this.mem.driver.uploadVertexBuffer(this.vbuf,start,vertices,buf,bufPos);
	}
	,allocPosition: function(nvert,align) {
		var free = this.freeList;
		while(free != null) {
			if(free.count >= nvert) {
				var d = (align - free.pos % align) % align;
				if(d == 0) {
					break;
				}
				if(free.count >= nvert + d) {
					free.next = new h3d_impl__$ManagedBuffer_FreeCell(free.pos + d,free.count - d,free.next);
					free.count = d;
					free = free.next;
					break;
				}
			}
			free = free.next;
		}
		if(free == null) {
			return -1;
		}
		var pos = free.pos;
		free.pos += nvert;
		free.count -= nvert;
		return pos;
	}
	,allocBuffer: function(b) {
		var align = (b.flags & 1 << h3d_BufferFlag.Quads._hx_index) != 0 ? 4 : (b.flags & 1 << h3d_BufferFlag.Triangles._hx_index) != 0 ? 3 : 1;
		var p = this.allocPosition(b.vertices,align);
		if(p < 0) {
			return false;
		}
		b.position = p;
		b.buffer = this;
		return true;
	}
	,freeBuffer: function(b) {
		var prev = null;
		var f = this.freeList;
		var nvert = b.vertices;
		var end = b.position + nvert;
		while(f != null) {
			if(f.pos == end) {
				f.pos -= nvert;
				f.count += nvert;
				if(prev != null && prev.pos + prev.count == f.pos) {
					prev.count += f.count;
					prev.next = f.next;
				}
				nvert = 0;
				break;
			}
			if(f.pos > end) {
				if(prev != null && prev.pos + prev.count == b.position) {
					prev.count += nvert;
				} else {
					var n = new h3d_impl__$ManagedBuffer_FreeCell(b.position,nvert,f);
					if(prev == null) {
						this.freeList = n;
					} else {
						prev.next = n;
					}
				}
				nvert = 0;
				break;
			}
			prev = f;
			f = f.next;
		}
		if(nvert != 0) {
			throw haxe_Exception.thrown("assert");
		}
		if(this.freeList.count == this.size && (this.flags & 1 << h3d_BufferFlag.Managed._hx_index) == 0) {
			this.dispose();
		}
	}
	,dispose: function() {
		this.mem.freeManaged(this);
	}
	,__class__: h3d_impl_ManagedBuffer
};
var h3d_impl_MemoryManager = function(driver) {
	this.bufferCount = 0;
	this.texMemory = 0;
	this.usedMemory = 0;
	this.driver = driver;
};
$hxClasses["h3d.impl.MemoryManager"] = h3d_impl_MemoryManager;
h3d_impl_MemoryManager.__name__ = "h3d.impl.MemoryManager";
h3d_impl_MemoryManager.prototype = {
	init: function() {
		this.indexes = [];
		this.textures = [];
		this.buffers = [];
		this.depths = [];
		this.initIndexes();
	}
	,initIndexes: function() {
		var this1 = new Array(0);
		var indices = this1;
		var _g = 0;
		while(_g < 65533) {
			var i = _g++;
			indices.push(i);
		}
		this.triIndexes = h3d_Indexes.alloc(indices);
		var this1 = new Array(0);
		var indices = this1;
		var p = 0;
		var _g = 0;
		var _g1 = 16383;
		while(_g < _g1) {
			var i = _g++;
			var k = i << 2;
			indices.push(k);
			indices.push(k + 1);
			indices.push(k + 2);
			indices.push(k + 2);
			indices.push(k + 1);
			indices.push(k + 3);
		}
		indices.push(65533);
		this.quadIndexes = h3d_Indexes.alloc(indices);
	}
	,garbage: function() {
	}
	,cleanManagedBuffers: function() {
		var _g = 1;
		var _g1 = this.buffers.length;
		while(_g < _g1) {
			var i = _g++;
			var b = this.buffers[i];
			var prev = null;
			while(b != null) {
				if(b.freeList.count == b.size) {
					b.dispose();
					if(prev == null) {
						this.buffers[i] = b.next;
					} else {
						prev.next = b.next;
					}
				} else {
					prev = b;
				}
				b = b.next;
			}
		}
	}
	,allocManaged: function(m) {
		if(m.vbuf != null) {
			return;
		}
		var mem = m.size * m.stride * 4;
		if(mem == 0) {
			return;
		}
		while(this.usedMemory + mem > 4294967296. || this.bufferCount >= 65536 || (m.vbuf = this.driver.allocVertexes(m)) == null) {
			if(this.driver.isDisposed()) {
				return;
			}
			var size = this.usedMemory - this.freeMemorySize();
			this.garbage();
			this.cleanManagedBuffers();
			if(this.usedMemory - this.freeMemorySize() == size) {
				if(this.bufferCount >= 65536) {
					throw haxe_Exception.thrown("Too many buffers");
				}
				throw haxe_Exception.thrown("Memory full (" + Math.ceil(size / 1024) + " KB," + this.bufferCount + " buffers)");
			}
		}
		this.usedMemory += mem;
		this.bufferCount++;
	}
	,freeManaged: function(m) {
		if(m.vbuf == null) {
			return;
		}
		this.driver.disposeVertexes(m.vbuf);
		m.vbuf = null;
		this.usedMemory -= m.size * m.stride * 4;
		this.bufferCount--;
		if((m.flags & 1 << h3d_BufferFlag.Managed._hx_index) == 0) {
			var c = this.buffers[0];
			var prev = null;
			while(c != null) {
				if(c == m) {
					if(prev == null) {
						this.buffers[0] = m.next;
					} else {
						prev.next = m.next;
					}
					break;
				}
				prev = c;
				c = c.next;
			}
		}
	}
	,allocBuffer: function(b,stride) {
		var max = (b.flags & 1 << h3d_BufferFlag.Quads._hx_index) != 0 ? 65532 : (b.flags & 1 << h3d_BufferFlag.Triangles._hx_index) != 0 ? 65533 : 65534;
		if(b.vertices > max && (b.flags & 1 << h3d_BufferFlag.UniformBuffer._hx_index) == 0 && (b.flags & 1 << h3d_BufferFlag.LargeBuffer._hx_index) == 0) {
			if(max == 65534) {
				throw haxe_Exception.thrown("Cannot split buffer with " + b.vertices + " vertices if it's not Quads/Triangles");
			}
			var rem = b.vertices - max;
			b.vertices = max;
			this.allocBuffer(b,stride);
			var n = b;
			while(n.next != null) n = n.next;
			var flags = [];
			var _g = 0;
			var _g1 = h3d_impl_MemoryManager.ALL_FLAGS;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				if((b.flags & 1 << f._hx_index) != 0) {
					flags.push(f);
				}
			}
			n.next = new h3d_Buffer(rem,stride,flags);
			return;
		}
		if((b.flags & 1 << h3d_BufferFlag.Managed._hx_index) == 0) {
			var flags = null;
			if((b.flags & 1 << h3d_BufferFlag.Dynamic._hx_index) != 0) {
				if(flags == null) {
					flags = [];
				}
				flags.push(h3d_BufferFlag.Dynamic);
			}
			if((b.flags & 1 << h3d_BufferFlag.UniformBuffer._hx_index) != 0) {
				if(flags == null) {
					flags = [];
				}
				flags.push(h3d_BufferFlag.UniformBuffer);
			}
			var m = new h3d_impl_ManagedBuffer(stride,b.vertices,flags);
			m.next = this.buffers[0];
			this.buffers[0] = m;
			if(!m.allocBuffer(b)) {
				throw haxe_Exception.thrown("assert");
			}
			return;
		}
		var m = this.buffers[stride];
		var prev = null;
		while(m != null) {
			if(m.allocBuffer(b)) {
				return;
			}
			prev = m;
			m = m.next;
		}
		var align = (b.flags & 1 << h3d_BufferFlag.Triangles._hx_index) != 0 ? 3 : (b.flags & 1 << h3d_BufferFlag.Quads._hx_index) != 0 ? 4 : 0;
		if(m == null && align > 0) {
			var total = b.vertices;
			var size = total;
			while(size > 2048) {
				m = this.buffers[stride];
				size >>= 1;
				size -= size % align;
				b.vertices = size;
				while(m != null) {
					if(m.allocBuffer(b)) {
						var flags = [];
						var _g = 0;
						var _g1 = h3d_impl_MemoryManager.ALL_FLAGS;
						while(_g < _g1.length) {
							var f = _g1[_g];
							++_g;
							if((b.flags & 1 << f._hx_index) != 0) {
								flags.push(f);
							}
						}
						b.next = new h3d_Buffer(total - size,stride,flags);
						return;
					}
					m = m.next;
				}
			}
			b.vertices = total;
		}
		m = new h3d_impl_ManagedBuffer(stride,65533,[h3d_BufferFlag.Managed]);
		if(prev == null) {
			this.buffers[stride] = m;
		} else {
			prev.next = m;
		}
		if(!m.allocBuffer(b)) {
			throw haxe_Exception.thrown("assert");
		}
	}
	,deleteIndexes: function(i) {
		HxOverrides.remove(this.indexes,i);
		this.driver.disposeIndexes(i.ibuf);
		i.ibuf = null;
		this.usedMemory -= i.count * (i.is32 ? 4 : 2);
	}
	,allocIndexes: function(i) {
		i.ibuf = this.driver.allocIndexes(i.count,i.is32);
		this.indexes.push(i);
		this.usedMemory += i.count * (i.is32 ? 4 : 2);
	}
	,memSize: function(t) {
		if((t.flags & 1 << h3d_mat_TextureFlags.AsyncLoading._hx_index) != 0 && (t.flags & 1 << h3d_mat_TextureFlags.Loading._hx_index) != 0) {
			return 4;
		}
		var size = hxd_Pixels.calcDataSize(t.width,t.height,t.format);
		if(t.get_mipLevels() > 0) {
			var _g = 1;
			var _g1 = t.get_mipLevels();
			while(_g < _g1) {
				var i = _g++;
				var w = t.width >> i;
				if(w == 0) {
					w = 1;
				}
				var h = t.height >> i;
				if(h == 0) {
					h = 1;
				}
				size += hxd_Pixels.calcDataSize(w,h,t.format);
			}
		}
		return size * t.get_layerCount();
	}
	,cleanTextures: function(force) {
		if(force == null) {
			force = true;
		}
		this.textures.sort($bind(this,this.sortByLRU));
		var _g = 0;
		var _g1 = this.textures;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if(t.realloc == null || t.t == null && t.realloc == null) {
				continue;
			}
			if((force || t.get_lastFrame() < hxd_Timer.frameCount - 3600) && t.get_lastFrame() != h3d_mat_Texture.PREVENT_AUTO_DISPOSE) {
				t.dispose();
				return true;
			}
		}
		return false;
	}
	,sortByLRU: function(t1,t2) {
		return t1.get_lastFrame() - t2.get_lastFrame();
	}
	,deleteTexture: function(t) {
		if(!HxOverrides.remove(this.textures,t)) {
			return;
		}
		this.driver.disposeTexture(t);
		this.texMemory -= this.memSize(t);
	}
	,allocTexture: function(t) {
		while(true) {
			var free = this.cleanTextures(false);
			t.t = this.driver.allocTexture(t);
			if(t.t != null) {
				break;
			}
			if(this.driver.isDisposed()) {
				return;
			}
			while(this.cleanTextures(false)) {
			}
			if(!free && !this.cleanTextures(true)) {
				throw haxe_Exception.thrown("Maximum texture memory reached");
			}
		}
		this.textures.push(t);
		this.texMemory += this.memSize(t);
	}
	,allocDepth: function(b) {
		while(true) {
			var free = this.cleanTextures(false);
			b.b = this.driver.allocDepthBuffer(b);
			if(b.b != null) {
				break;
			}
			if(this.driver.isDisposed()) {
				return;
			}
			while(this.cleanTextures(false)) {
			}
			if(!free && !this.cleanTextures(true)) {
				throw haxe_Exception.thrown("Maximum texture memory reached");
			}
		}
		this.depths.push(b);
		this.texMemory += b.width * b.height * 4;
	}
	,deleteDepth: function(b) {
		if(!HxOverrides.remove(this.depths,b)) {
			return;
		}
		this.driver.disposeDepthBuffer(b);
		this.texMemory -= b.width * b.height * 4;
	}
	,onContextLost: function() {
		this.dispose();
		this.initIndexes();
	}
	,dispose: function() {
		if(this.triIndexes != null) {
			this.triIndexes.dispose();
		}
		if(this.quadIndexes != null) {
			this.quadIndexes.dispose();
		}
		this.triIndexes = null;
		this.quadIndexes = null;
		var _g = 0;
		var _g1 = this.textures.slice();
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			t.dispose();
		}
		var _g = 0;
		var _g1 = this.depths.slice();
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			b.dispose();
		}
		var _g = 0;
		var _g1 = this.buffers.slice();
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			var b1 = b;
			while(b1 != null) {
				b1.dispose();
				b1 = b1.next;
			}
		}
		var _g = 0;
		var _g1 = this.indexes.slice();
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			i.dispose();
		}
		this.buffers = [];
		this.indexes = [];
		this.textures = [];
		this.bufferCount = 0;
		this.usedMemory = 0;
		this.texMemory = 0;
	}
	,freeMemorySize: function() {
		var size = 0;
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			var b1 = b;
			while(b1 != null) {
				var free = b1.freeList;
				while(free != null) {
					size += free.count * b1.stride * 4;
					free = free.next;
				}
				b1 = b1.next;
			}
		}
		return size;
	}
	,__class__: h3d_impl_MemoryManager
};
var h3d_impl_NullDriver = function() {
};
$hxClasses["h3d.impl.NullDriver"] = h3d_impl_NullDriver;
h3d_impl_NullDriver.__name__ = "h3d.impl.NullDriver";
h3d_impl_NullDriver.__super__ = h3d_impl_Driver;
h3d_impl_NullDriver.prototype = $extend(h3d_impl_Driver.prototype,{
	hasFeature: function(f) {
		return true;
	}
	,isSupportedFormat: function(fmt) {
		return true;
	}
	,isDisposed: function() {
		return false;
	}
	,init: function(onCreate,forceSoftware) {
		if(forceSoftware == null) {
			forceSoftware = false;
		}
		onCreate(false);
	}
	,selectShader: function(shader) {
		if(this.cur == shader) {
			return false;
		}
		this.cur = shader;
		return true;
	}
	,getShaderInputNames: function() {
		var names = [];
		var _g = 0;
		var _g1 = this.cur.vertex.data.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			if(v.kind == hxsl_VarKind.Input) {
				names.push(v.name);
			}
		}
		return h3d_impl_InputNames.get(names);
	}
	,allocTexture: function(t) {
		return { };
	}
	,allocIndexes: function(count,is32) {
		return { };
	}
	,allocVertexes: function(m) {
		return { };
	}
	,__class__: h3d_impl_NullDriver
});
var h3d_impl_TextureCache = function(ctx) {
	this.position = 0;
	this.ctx = ctx;
	this.cache = [];
	var engine = h3d_Engine.CURRENT;
	this.defaultFormat = h3d_mat_Texture.nativeFormat;
	this.defaultDepthBuffer = h3d_mat_DepthBuffer.getDefault();
};
$hxClasses["h3d.impl.TextureCache"] = h3d_impl_TextureCache;
h3d_impl_TextureCache.__name__ = "h3d.impl.TextureCache";
h3d_impl_TextureCache.prototype = {
	begin: function() {
		while(this.cache.length > this.position) {
			var t = this.cache.pop();
			if(t != null) {
				t.dispose();
			}
		}
		this.position = 0;
	}
	,lookupTarget: function(name,width,height,format,isCube) {
		var t = this.cache[this.position];
		var _g = this.position + 1;
		var _g1 = this.cache.length;
		while(_g < _g1) {
			var i = _g++;
			var t2 = this.cache[i];
			if(t2 != null && !(t2.t == null && t2.realloc == null) && t2.width == width && t2.height == height && t2.format == format && isCube == ((t2.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0)) {
				this.cache[this.position] = t2;
				this.cache[i] = t;
				return t2;
			}
		}
		if(t != null && t.name == name) {
			t.dispose();
			t = null;
		}
		var flags = [h3d_mat_TextureFlags.Target];
		if(isCube) {
			flags.push(h3d_mat_TextureFlags.Cube);
		}
		var newt = new h3d_mat_Texture(width,height,flags,format);
		newt.realloc = function() {
		};
		if(t != null) {
			this.cache.splice(this.position,0,newt);
		} else {
			this.cache[this.position] = newt;
		}
		return newt;
	}
	,allocTarget: function(name,width,height,defaultDepth,format,isCube) {
		if(isCube == null) {
			isCube = false;
		}
		if(defaultDepth == null) {
			defaultDepth = true;
		}
		var t = this.cache[this.position];
		if(format == null) {
			format = this.defaultFormat;
		}
		if(t == null || t.t == null && t.realloc == null || t.width != width || t.height != height || t.format != format || isCube != ((t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0)) {
			t = this.lookupTarget(name,width,height,format,isCube);
		}
		t.depthBuffer = defaultDepth ? this.defaultDepthBuffer : null;
		t.setName(name);
		this.position++;
		return t;
	}
	,allocTileTarget: function(name,tile,defaultDepth,format) {
		if(defaultDepth == null) {
			defaultDepth = false;
		}
		return this.allocTarget(name,Math.ceil(tile.width + tile.x) - Math.floor(tile.x),Math.ceil(tile.height + tile.y) - Math.floor(tile.y),defaultDepth,format);
	}
	,__class__: h3d_impl_TextureCache
};
var hxd_impl_AnyProps = function() { };
$hxClasses["hxd.impl.AnyProps"] = hxd_impl_AnyProps;
hxd_impl_AnyProps.__name__ = "hxd.impl.AnyProps";
hxd_impl_AnyProps.prototype = {
	set_props: function(p) {
		this.props = p;
		this.refreshProps();
		return p;
	}
	,getDefaultProps: function(kind) {
		return { };
	}
	,refreshProps: function() {
	}
	,__class__: hxd_impl_AnyProps
};
var h3d_mat_BaseMaterial = function(shader) {
	if(shader != null) {
		this.addPass(new h3d_mat_Pass("default",null)).addShader(shader);
	}
};
$hxClasses["h3d.mat.BaseMaterial"] = h3d_mat_BaseMaterial;
h3d_mat_BaseMaterial.__name__ = "h3d.mat.BaseMaterial";
h3d_mat_BaseMaterial.__super__ = hxd_impl_AnyProps;
h3d_mat_BaseMaterial.prototype = $extend(hxd_impl_AnyProps.prototype,{
	addPass: function(p) {
		var prev = null;
		var cur = this.passes;
		while(cur != null) {
			prev = cur;
			cur = cur.nextPass;
		}
		if(prev == null) {
			this.passes = p;
		} else {
			prev.nextPass = p;
		}
		p.nextPass = null;
		return p;
	}
	,removePass: function(p) {
		var prev = null;
		var cur = this.passes;
		while(cur != null) {
			if(cur == p) {
				if(prev == null) {
					this.passes = p.nextPass;
				} else {
					prev.nextPass = p.nextPass;
				}
				p.nextPass = null;
				return true;
			}
			prev = cur;
			cur = cur.nextPass;
		}
		return false;
	}
	,getPass: function(name) {
		var p = this.passes;
		while(p != null) {
			if(p.name == name) {
				return p;
			}
			p = p.nextPass;
		}
		return null;
	}
	,__class__: h3d_mat_BaseMaterial
});
var h3d_mat_Face = $hxEnums["h3d.mat.Face"] = { __ename__:true,__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"h3d.mat.Face",toString:$estr}
	,Back: {_hx_name:"Back",_hx_index:1,__enum__:"h3d.mat.Face",toString:$estr}
	,Front: {_hx_name:"Front",_hx_index:2,__enum__:"h3d.mat.Face",toString:$estr}
	,Both: {_hx_name:"Both",_hx_index:3,__enum__:"h3d.mat.Face",toString:$estr}
};
h3d_mat_Face.__constructs__ = [h3d_mat_Face.None,h3d_mat_Face.Back,h3d_mat_Face.Front,h3d_mat_Face.Both];
h3d_mat_Face.__empty_constructs__ = [h3d_mat_Face.None,h3d_mat_Face.Back,h3d_mat_Face.Front,h3d_mat_Face.Both];
var h3d_mat_Blend = $hxEnums["h3d.mat.Blend"] = { __ename__:true,__constructs__:null
	,One: {_hx_name:"One",_hx_index:0,__enum__:"h3d.mat.Blend",toString:$estr}
	,Zero: {_hx_name:"Zero",_hx_index:1,__enum__:"h3d.mat.Blend",toString:$estr}
	,SrcAlpha: {_hx_name:"SrcAlpha",_hx_index:2,__enum__:"h3d.mat.Blend",toString:$estr}
	,SrcColor: {_hx_name:"SrcColor",_hx_index:3,__enum__:"h3d.mat.Blend",toString:$estr}
	,DstAlpha: {_hx_name:"DstAlpha",_hx_index:4,__enum__:"h3d.mat.Blend",toString:$estr}
	,DstColor: {_hx_name:"DstColor",_hx_index:5,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusSrcAlpha: {_hx_name:"OneMinusSrcAlpha",_hx_index:6,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusSrcColor: {_hx_name:"OneMinusSrcColor",_hx_index:7,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusDstAlpha: {_hx_name:"OneMinusDstAlpha",_hx_index:8,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusDstColor: {_hx_name:"OneMinusDstColor",_hx_index:9,__enum__:"h3d.mat.Blend",toString:$estr}
	,ConstantColor: {_hx_name:"ConstantColor",_hx_index:10,__enum__:"h3d.mat.Blend",toString:$estr}
	,ConstantAlpha: {_hx_name:"ConstantAlpha",_hx_index:11,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusConstantColor: {_hx_name:"OneMinusConstantColor",_hx_index:12,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusConstantAlpha: {_hx_name:"OneMinusConstantAlpha",_hx_index:13,__enum__:"h3d.mat.Blend",toString:$estr}
	,SrcAlphaSaturate: {_hx_name:"SrcAlphaSaturate",_hx_index:14,__enum__:"h3d.mat.Blend",toString:$estr}
};
h3d_mat_Blend.__constructs__ = [h3d_mat_Blend.One,h3d_mat_Blend.Zero,h3d_mat_Blend.SrcAlpha,h3d_mat_Blend.SrcColor,h3d_mat_Blend.DstAlpha,h3d_mat_Blend.DstColor,h3d_mat_Blend.OneMinusSrcAlpha,h3d_mat_Blend.OneMinusSrcColor,h3d_mat_Blend.OneMinusDstAlpha,h3d_mat_Blend.OneMinusDstColor,h3d_mat_Blend.ConstantColor,h3d_mat_Blend.ConstantAlpha,h3d_mat_Blend.OneMinusConstantColor,h3d_mat_Blend.OneMinusConstantAlpha,h3d_mat_Blend.SrcAlphaSaturate];
h3d_mat_Blend.__empty_constructs__ = [h3d_mat_Blend.One,h3d_mat_Blend.Zero,h3d_mat_Blend.SrcAlpha,h3d_mat_Blend.SrcColor,h3d_mat_Blend.DstAlpha,h3d_mat_Blend.DstColor,h3d_mat_Blend.OneMinusSrcAlpha,h3d_mat_Blend.OneMinusSrcColor,h3d_mat_Blend.OneMinusDstAlpha,h3d_mat_Blend.OneMinusDstColor,h3d_mat_Blend.ConstantColor,h3d_mat_Blend.ConstantAlpha,h3d_mat_Blend.OneMinusConstantColor,h3d_mat_Blend.OneMinusConstantAlpha,h3d_mat_Blend.SrcAlphaSaturate];
var h3d_mat_Compare = $hxEnums["h3d.mat.Compare"] = { __ename__:true,__constructs__:null
	,Always: {_hx_name:"Always",_hx_index:0,__enum__:"h3d.mat.Compare",toString:$estr}
	,Never: {_hx_name:"Never",_hx_index:1,__enum__:"h3d.mat.Compare",toString:$estr}
	,Equal: {_hx_name:"Equal",_hx_index:2,__enum__:"h3d.mat.Compare",toString:$estr}
	,NotEqual: {_hx_name:"NotEqual",_hx_index:3,__enum__:"h3d.mat.Compare",toString:$estr}
	,Greater: {_hx_name:"Greater",_hx_index:4,__enum__:"h3d.mat.Compare",toString:$estr}
	,GreaterEqual: {_hx_name:"GreaterEqual",_hx_index:5,__enum__:"h3d.mat.Compare",toString:$estr}
	,Less: {_hx_name:"Less",_hx_index:6,__enum__:"h3d.mat.Compare",toString:$estr}
	,LessEqual: {_hx_name:"LessEqual",_hx_index:7,__enum__:"h3d.mat.Compare",toString:$estr}
};
h3d_mat_Compare.__constructs__ = [h3d_mat_Compare.Always,h3d_mat_Compare.Never,h3d_mat_Compare.Equal,h3d_mat_Compare.NotEqual,h3d_mat_Compare.Greater,h3d_mat_Compare.GreaterEqual,h3d_mat_Compare.Less,h3d_mat_Compare.LessEqual];
h3d_mat_Compare.__empty_constructs__ = [h3d_mat_Compare.Always,h3d_mat_Compare.Never,h3d_mat_Compare.Equal,h3d_mat_Compare.NotEqual,h3d_mat_Compare.Greater,h3d_mat_Compare.GreaterEqual,h3d_mat_Compare.Less,h3d_mat_Compare.LessEqual];
var h3d_mat_StencilOp = $hxEnums["h3d.mat.StencilOp"] = { __ename__:true,__constructs__:null
	,Keep: {_hx_name:"Keep",_hx_index:0,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Zero: {_hx_name:"Zero",_hx_index:1,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Replace: {_hx_name:"Replace",_hx_index:2,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Increment: {_hx_name:"Increment",_hx_index:3,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,IncrementWrap: {_hx_name:"IncrementWrap",_hx_index:4,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Decrement: {_hx_name:"Decrement",_hx_index:5,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,DecrementWrap: {_hx_name:"DecrementWrap",_hx_index:6,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Invert: {_hx_name:"Invert",_hx_index:7,__enum__:"h3d.mat.StencilOp",toString:$estr}
};
h3d_mat_StencilOp.__constructs__ = [h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Zero,h3d_mat_StencilOp.Replace,h3d_mat_StencilOp.Increment,h3d_mat_StencilOp.IncrementWrap,h3d_mat_StencilOp.Decrement,h3d_mat_StencilOp.DecrementWrap,h3d_mat_StencilOp.Invert];
h3d_mat_StencilOp.__empty_constructs__ = [h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Zero,h3d_mat_StencilOp.Replace,h3d_mat_StencilOp.Increment,h3d_mat_StencilOp.IncrementWrap,h3d_mat_StencilOp.Decrement,h3d_mat_StencilOp.DecrementWrap,h3d_mat_StencilOp.Invert];
var h3d_mat_MipMap = $hxEnums["h3d.mat.MipMap"] = { __ename__:true,__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"h3d.mat.MipMap",toString:$estr}
	,Nearest: {_hx_name:"Nearest",_hx_index:1,__enum__:"h3d.mat.MipMap",toString:$estr}
	,Linear: {_hx_name:"Linear",_hx_index:2,__enum__:"h3d.mat.MipMap",toString:$estr}
};
h3d_mat_MipMap.__constructs__ = [h3d_mat_MipMap.None,h3d_mat_MipMap.Nearest,h3d_mat_MipMap.Linear];
h3d_mat_MipMap.__empty_constructs__ = [h3d_mat_MipMap.None,h3d_mat_MipMap.Nearest,h3d_mat_MipMap.Linear];
var h3d_mat_Filter = $hxEnums["h3d.mat.Filter"] = { __ename__:true,__constructs__:null
	,Nearest: {_hx_name:"Nearest",_hx_index:0,__enum__:"h3d.mat.Filter",toString:$estr}
	,Linear: {_hx_name:"Linear",_hx_index:1,__enum__:"h3d.mat.Filter",toString:$estr}
};
h3d_mat_Filter.__constructs__ = [h3d_mat_Filter.Nearest,h3d_mat_Filter.Linear];
h3d_mat_Filter.__empty_constructs__ = [h3d_mat_Filter.Nearest,h3d_mat_Filter.Linear];
var h3d_mat_Wrap = $hxEnums["h3d.mat.Wrap"] = { __ename__:true,__constructs__:null
	,Clamp: {_hx_name:"Clamp",_hx_index:0,__enum__:"h3d.mat.Wrap",toString:$estr}
	,Repeat: {_hx_name:"Repeat",_hx_index:1,__enum__:"h3d.mat.Wrap",toString:$estr}
};
h3d_mat_Wrap.__constructs__ = [h3d_mat_Wrap.Clamp,h3d_mat_Wrap.Repeat];
h3d_mat_Wrap.__empty_constructs__ = [h3d_mat_Wrap.Clamp,h3d_mat_Wrap.Repeat];
var h3d_mat_Operation = $hxEnums["h3d.mat.Operation"] = { __ename__:true,__constructs__:null
	,Add: {_hx_name:"Add",_hx_index:0,__enum__:"h3d.mat.Operation",toString:$estr}
	,Sub: {_hx_name:"Sub",_hx_index:1,__enum__:"h3d.mat.Operation",toString:$estr}
	,ReverseSub: {_hx_name:"ReverseSub",_hx_index:2,__enum__:"h3d.mat.Operation",toString:$estr}
	,Min: {_hx_name:"Min",_hx_index:3,__enum__:"h3d.mat.Operation",toString:$estr}
	,Max: {_hx_name:"Max",_hx_index:4,__enum__:"h3d.mat.Operation",toString:$estr}
};
h3d_mat_Operation.__constructs__ = [h3d_mat_Operation.Add,h3d_mat_Operation.Sub,h3d_mat_Operation.ReverseSub,h3d_mat_Operation.Min,h3d_mat_Operation.Max];
h3d_mat_Operation.__empty_constructs__ = [h3d_mat_Operation.Add,h3d_mat_Operation.Sub,h3d_mat_Operation.ReverseSub,h3d_mat_Operation.Min,h3d_mat_Operation.Max];
var h3d_mat_TextureFlags = $hxEnums["h3d.mat.TextureFlags"] = { __ename__:true,__constructs__:null
	,Target: {_hx_name:"Target",_hx_index:0,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Cube: {_hx_name:"Cube",_hx_index:1,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,MipMapped: {_hx_name:"MipMapped",_hx_index:2,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,ManualMipMapGen: {_hx_name:"ManualMipMapGen",_hx_index:3,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,IsNPOT: {_hx_name:"IsNPOT",_hx_index:4,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,NoAlloc: {_hx_name:"NoAlloc",_hx_index:5,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Dynamic: {_hx_name:"Dynamic",_hx_index:6,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,AlphaPremultiplied: {_hx_name:"AlphaPremultiplied",_hx_index:7,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,WasCleared: {_hx_name:"WasCleared",_hx_index:8,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Loading: {_hx_name:"Loading",_hx_index:9,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Serialize: {_hx_name:"Serialize",_hx_index:10,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,IsArray: {_hx_name:"IsArray",_hx_index:11,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,AsyncLoading: {_hx_name:"AsyncLoading",_hx_index:12,__enum__:"h3d.mat.TextureFlags",toString:$estr}
};
h3d_mat_TextureFlags.__constructs__ = [h3d_mat_TextureFlags.Target,h3d_mat_TextureFlags.Cube,h3d_mat_TextureFlags.MipMapped,h3d_mat_TextureFlags.ManualMipMapGen,h3d_mat_TextureFlags.IsNPOT,h3d_mat_TextureFlags.NoAlloc,h3d_mat_TextureFlags.Dynamic,h3d_mat_TextureFlags.AlphaPremultiplied,h3d_mat_TextureFlags.WasCleared,h3d_mat_TextureFlags.Loading,h3d_mat_TextureFlags.Serialize,h3d_mat_TextureFlags.IsArray,h3d_mat_TextureFlags.AsyncLoading];
h3d_mat_TextureFlags.__empty_constructs__ = [h3d_mat_TextureFlags.Target,h3d_mat_TextureFlags.Cube,h3d_mat_TextureFlags.MipMapped,h3d_mat_TextureFlags.ManualMipMapGen,h3d_mat_TextureFlags.IsNPOT,h3d_mat_TextureFlags.NoAlloc,h3d_mat_TextureFlags.Dynamic,h3d_mat_TextureFlags.AlphaPremultiplied,h3d_mat_TextureFlags.WasCleared,h3d_mat_TextureFlags.Loading,h3d_mat_TextureFlags.Serialize,h3d_mat_TextureFlags.IsArray,h3d_mat_TextureFlags.AsyncLoading];
var h3d_mat_Defaults = function() { };
$hxClasses["h3d.mat.Defaults"] = h3d_mat_Defaults;
h3d_mat_Defaults.__name__ = "h3d.mat.Defaults";
h3d_mat_Defaults.get_shadowShader = function() {
	var s = h3d_mat_Defaults.shadowShader;
	if(s == null) {
		s = new h3d_shader_Shadow();
		h3d_mat_Defaults.set_shadowShader(s);
		h3d_mat_Defaults.shadowShader.setPriority(-1);
	}
	return s;
};
h3d_mat_Defaults.set_shadowShader = function(s) {
	return h3d_mat_Defaults.shadowShader = s;
};
var h3d_mat_DepthFormat = $hxEnums["h3d.mat.DepthFormat"] = { __ename__:true,__constructs__:null
	,Depth16: {_hx_name:"Depth16",_hx_index:0,__enum__:"h3d.mat.DepthFormat",toString:$estr}
	,Depth24: {_hx_name:"Depth24",_hx_index:1,__enum__:"h3d.mat.DepthFormat",toString:$estr}
	,Depth24Stencil8: {_hx_name:"Depth24Stencil8",_hx_index:2,__enum__:"h3d.mat.DepthFormat",toString:$estr}
};
h3d_mat_DepthFormat.__constructs__ = [h3d_mat_DepthFormat.Depth16,h3d_mat_DepthFormat.Depth24,h3d_mat_DepthFormat.Depth24Stencil8];
h3d_mat_DepthFormat.__empty_constructs__ = [h3d_mat_DepthFormat.Depth16,h3d_mat_DepthFormat.Depth24,h3d_mat_DepthFormat.Depth24Stencil8];
var h3d_mat_DepthBuffer = function(width,height,format) {
	this.width = width;
	this.height = height;
	this.format = format;
	if(width > 0) {
		this.alloc();
	}
};
$hxClasses["h3d.mat.DepthBuffer"] = h3d_mat_DepthBuffer;
h3d_mat_DepthBuffer.__name__ = "h3d.mat.DepthBuffer";
h3d_mat_DepthBuffer.getDefault = function() {
	return h3d_Engine.CURRENT.driver.getDefaultDepthBuffer();
};
h3d_mat_DepthBuffer.prototype = {
	hasStencil: function() {
		switch(this.format._hx_index) {
		case 0:case 1:
			return false;
		case 2:
			return true;
		}
	}
	,alloc: function() {
		h3d_Engine.CURRENT.mem.allocDepth(this);
	}
	,dispose: function() {
		if(this.b != null) {
			h3d_Engine.CURRENT.mem.deleteDepth(this);
			this.b = null;
		}
	}
	,isDisposed: function() {
		return this.b == null;
	}
	,__class__: h3d_mat_DepthBuffer
};
var h3d_mat_Material = function(texture) {
	this.mshader = new h3d_shader_BaseMesh();
	this.set_blendMode(h2d_BlendMode.None);
	h3d_mat_BaseMaterial.call(this,this.mshader);
	this.set_texture(texture);
};
$hxClasses["h3d.mat.Material"] = h3d_mat_Material;
h3d_mat_Material.__name__ = "h3d.mat.Material";
h3d_mat_Material.__super__ = h3d_mat_BaseMaterial;
h3d_mat_Material.prototype = $extend(h3d_mat_BaseMaterial.prototype,{
	set_castShadows: function(v) {
		if(this.castShadows == v) {
			return v;
		}
		if(this.passes != null) {
			if(v) {
				this.addPass(new h3d_mat_Pass("shadow",null,this.passes)).set_isStatic(this.staticShadows);
			} else {
				this.removePass(this.getPass("shadow"));
			}
		}
		return this.castShadows = v;
	}
	,set_receiveShadows: function(v) {
		if(v == this.receiveShadows) {
			return v;
		}
		if(this.passes != null) {
			var shadows = h3d_mat_Defaults.get_shadowShader();
			if(v) {
				this.passes.addShader(shadows);
			} else {
				this.passes.removeShader(shadows);
			}
		}
		return this.receiveShadows = v;
	}
	,set_blendMode: function(v) {
		if(this.passes != null) {
			this.passes.setBlendMode(v);
			switch(v._hx_index) {
			case 0:
				this.passes.set_depthWrite(true);
				this.passes.setPassName("default");
				break;
			case 1:
				this.passes.set_depthWrite(true);
				this.passes.setPassName("alpha");
				break;
			case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:
				this.passes.set_depthWrite(false);
				this.passes.setPassName("additive");
				break;
			}
		}
		return this.blendMode = v;
	}
	,set_texture: function(t) {
		if(t == null) {
			if(this.textureShader != null) {
				this.passes.removeShader(this.textureShader);
				this.textureShader = null;
			}
		} else {
			if(this.textureShader == null) {
				this.textureShader = new h3d_shader_Texture();
				this.passes.addShader(this.textureShader);
			}
			this.textureShader.texture__ = t;
		}
		return t;
	}
	,getDefaultProps: function(type) {
		var props;
		if(type == null) {
			props = { kind : "Opaque", shadows : true, culling : true, light : true};
		} else {
			switch(type) {
			case "particles3D":case "trail3D":
				props = { kind : "Alpha", shadows : false, culling : false, light : true};
				break;
			case "ui":
				props = { kind : "Alpha", shadows : false, culling : false, light : false};
				break;
			default:
				props = { kind : "Opaque", shadows : true, culling : true, light : true};
			}
		}
		return props;
	}
	,refreshProps: function() {
		if(this.props == null || this.passes == null) {
			return;
		}
		var props = this.props;
		switch(props.kind) {
		case "Add":
			this.set_blendMode(h2d_BlendMode.Add);
			break;
		case "Alpha":
			this.set_blendMode(h2d_BlendMode.Alpha);
			break;
		case "AlphaKill":case "Hidden":case "Opaque":
			this.set_blendMode(h2d_BlendMode.None);
			break;
		case "SoftAdd":
			this.set_blendMode(h2d_BlendMode.SoftAdd);
			break;
		}
		var tshader = this.textureShader;
		if(tshader != null) {
			tshader.constModified = true;
			tshader.killAlpha__ = props.kind == "AlphaKill";
			tshader.killAlphaThreshold__ = 0.5;
		}
		this.passes.set_culling(props.kind == "Hidden" ? h3d_mat_Face.Both : props.culling ? h3d_mat_Face.Back : h3d_mat_Face.None);
		this.passes.set_enableLights(props.light);
		var v = props.shadows;
		this.set_castShadows(v);
		this.set_receiveShadows(v);
		if(this.castShadows && this.receiveShadows) {
			this.getPass("shadow").set_culling(this.passes.culling);
		}
	}
	,__class__: h3d_mat_Material
});
var h3d_mat_MaterialDatabase = function() {
};
$hxClasses["h3d.mat.MaterialDatabase"] = h3d_mat_MaterialDatabase;
h3d_mat_MaterialDatabase.__name__ = "h3d.mat.MaterialDatabase";
h3d_mat_MaterialDatabase.prototype = {
	__class__: h3d_mat_MaterialDatabase
};
var h3d_mat_MaterialSetup = function(name) {
	if(this.database == null) {
		this.database = new h3d_mat_MaterialDatabase();
	}
	this.name = name;
};
$hxClasses["h3d.mat.MaterialSetup"] = h3d_mat_MaterialSetup;
h3d_mat_MaterialSetup.__name__ = "h3d.mat.MaterialSetup";
h3d_mat_MaterialSetup.prototype = {
	createRenderer: function() {
		return new h3d_scene_fwd_Renderer();
	}
	,createLightSystem: function() {
		return new h3d_scene_fwd_LightSystem();
	}
	,createMaterial: function() {
		return new h3d_mat_Material();
	}
	,__class__: h3d_mat_MaterialSetup
};
var h3d_mat_Pass = function(name,shaders,parent) {
	this.layer = 0;
	this.bits = 0;
	this.parentPass = parent;
	this.shaders = shaders;
	this.setPassName(name);
	this.set_culling(h3d_mat_Face.Back);
	var src = h3d_mat_Blend.One;
	var dst = h3d_mat_Blend.Zero;
	this.set_blendSrc(src);
	this.set_blendAlphaSrc(src);
	this.set_blendDst(dst);
	this.set_blendAlphaDst(dst);
	this.depth(true,h3d_mat_Compare.Less);
	this.set_blendOp(this.set_blendAlphaOp(h3d_mat_Operation.Add));
	this.colorMask = 15;
};
$hxClasses["h3d.mat.Pass"] = h3d_mat_Pass;
h3d_mat_Pass.__name__ = "h3d.mat.Pass";
h3d_mat_Pass.prototype = {
	setPassName: function(name) {
		this.name = name;
		this.passId = hxsl_Globals.allocID(name);
	}
	,setBlendMode: function(b) {
		switch(b._hx_index) {
		case 0:
			var src = h3d_mat_Blend.One;
			var dst = h3d_mat_Blend.Zero;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 1:
			var src = h3d_mat_Blend.SrcAlpha;
			var dst = h3d_mat_Blend.OneMinusSrcAlpha;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 2:
			var src = h3d_mat_Blend.SrcAlpha;
			var dst = h3d_mat_Blend.One;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 3:
			var src = h3d_mat_Blend.One;
			var dst = h3d_mat_Blend.OneMinusSrcAlpha;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 4:
			var src = h3d_mat_Blend.OneMinusDstColor;
			var dst = h3d_mat_Blend.One;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 5:
			var src = h3d_mat_Blend.DstColor;
			var dst = h3d_mat_Blend.Zero;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 6:
			var src = h3d_mat_Blend.DstColor;
			var dst = h3d_mat_Blend.OneMinusSrcAlpha;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 7:
			var src = h3d_mat_Blend.Zero;
			var dst = h3d_mat_Blend.OneMinusSrcColor;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 8:
			var src = h3d_mat_Blend.One;
			var dst = h3d_mat_Blend.OneMinusSrcColor;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 9:
			var src = h3d_mat_Blend.SrcAlpha;
			var dst = h3d_mat_Blend.One;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendOp(h3d_mat_Operation.ReverseSub);
			this.set_blendAlphaOp(h3d_mat_Operation.ReverseSub);
			break;
		case 10:
			this.set_blendSrc(h3d_mat_Blend.Zero);
			this.set_blendAlphaSrc(h3d_mat_Blend.Zero);
			this.set_blendDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaSrc(h3d_mat_Blend.Zero);
			this.set_blendAlphaDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaOp(h3d_mat_Operation.Max);
			this.set_blendOp(h3d_mat_Operation.Max);
			break;
		case 11:
			this.set_blendSrc(h3d_mat_Blend.Zero);
			this.set_blendAlphaSrc(h3d_mat_Blend.Zero);
			this.set_blendDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaSrc(h3d_mat_Blend.Zero);
			this.set_blendAlphaDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaOp(h3d_mat_Operation.Min);
			this.set_blendOp(h3d_mat_Operation.Min);
			break;
		}
	}
	,depth: function(write,test) {
		this.set_depthWrite(write);
		this.set_depthTest(test);
	}
	,addShader: function(s) {
		if(s == null) {
			return null;
		}
		this.shaders = hxsl_ShaderList.addSort(s,this.shaders);
		return s;
	}
	,removeShader: function(s) {
		var sl = this.shaders;
		var prev = null;
		while(sl != null) {
			if(sl.s == s) {
				if(prev == null) {
					this.shaders = sl.next;
				} else {
					prev.next = sl.next;
				}
				return true;
			}
			prev = sl;
			sl = sl.next;
		}
		return false;
	}
	,getShadersRec: function() {
		if(this.parentPass == null || this.parentShaders == this.parentPass.shaders) {
			return this.shaders;
		}
		var s = this.shaders;
		var prev = null;
		while(s != null && s != this.parentShaders) {
			prev = s;
			s = s.next;
		}
		this.parentShaders = this.parentPass.shaders;
		if(prev == null) {
			this.shaders = this.parentShaders;
		} else {
			prev.next = this.parentShaders;
		}
		return this.shaders;
	}
	,set_enableLights: function(v) {
		this.flags = this.flags & -2 | (v ? 1 : 0);
		return this.enableLights = v;
	}
	,set_isStatic: function(v) {
		this.flags = this.flags & -5 | (v ? 1 : 0) << 2;
		return this.isStatic = v;
	}
	,set_culling: function(v) {
		this.bits = this.bits & -4 | v._hx_index;
		return this.culling = v;
	}
	,set_depthWrite: function(v) {
		this.bits = this.bits & -5 | (v ? 1 : 0) << 2;
		return this.depthWrite = v;
	}
	,set_depthTest: function(v) {
		this.bits = this.bits & -57 | v._hx_index << 3;
		return this.depthTest = v;
	}
	,set_blendSrc: function(v) {
		this.bits = this.bits & -961 | v._hx_index << 6;
		return this.blendSrc = v;
	}
	,set_blendDst: function(v) {
		this.bits = this.bits & -15361 | v._hx_index << 10;
		return this.blendDst = v;
	}
	,set_blendAlphaSrc: function(v) {
		this.bits = this.bits & -245761 | v._hx_index << 14;
		return this.blendAlphaSrc = v;
	}
	,set_blendAlphaDst: function(v) {
		this.bits = this.bits & -3932161 | v._hx_index << 18;
		return this.blendAlphaDst = v;
	}
	,set_blendOp: function(v) {
		this.bits = this.bits & -29360129 | v._hx_index << 22;
		return this.blendOp = v;
	}
	,set_blendAlphaOp: function(v) {
		this.bits = this.bits & -234881025 | v._hx_index << 25;
		return this.blendAlphaOp = v;
	}
	,__class__: h3d_mat_Pass
};
var h3d_mat_Stencil = function() {
	this.opBits = 0;
	this.maskBits = 0;
	this.setOp(h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Keep);
	this.setFunc(h3d_mat_Compare.Always);
};
$hxClasses["h3d.mat.Stencil"] = h3d_mat_Stencil;
h3d_mat_Stencil.__name__ = "h3d.mat.Stencil";
h3d_mat_Stencil.prototype = {
	setFront: function(stfail,dpfail,pass) {
		this.set_frontSTfail(stfail);
		this.set_frontDPfail(dpfail);
		this.set_frontPass(pass);
	}
	,setBack: function(stfail,dpfail,pass) {
		this.set_backSTfail(stfail);
		this.set_backDPfail(dpfail);
		this.set_backPass(pass);
	}
	,setOp: function(stfail,dpfail,pass) {
		this.setFront(stfail,dpfail,pass);
		this.setBack(stfail,dpfail,pass);
	}
	,setFunc: function(f,reference,readMask,writeMask) {
		if(writeMask == null) {
			writeMask = 255;
		}
		if(readMask == null) {
			readMask = 255;
		}
		if(reference == null) {
			reference = 0;
		}
		this.set_frontTest(this.set_backTest(f));
		this.set_reference(reference);
		this.set_readMask(readMask);
		this.set_writeMask(writeMask);
	}
	,set_readMask: function(v) {
		this.maskBits = this.maskBits & -256 | v & 255;
		return this.readMask = v;
	}
	,set_writeMask: function(v) {
		this.maskBits = this.maskBits & -65281 | (v & 255) << 8;
		return this.writeMask = v;
	}
	,set_reference: function(v) {
		this.maskBits = this.maskBits & -16711681 | (v & 255) << 16;
		return this.reference = v;
	}
	,set_frontTest: function(v) {
		this.opBits = this.opBits & -8 | v._hx_index;
		return this.frontTest = v;
	}
	,set_frontPass: function(v) {
		this.opBits = this.opBits & -57 | v._hx_index << 3;
		return this.frontPass = v;
	}
	,set_frontSTfail: function(v) {
		this.opBits = this.opBits & -449 | v._hx_index << 6;
		return this.frontSTfail = v;
	}
	,set_frontDPfail: function(v) {
		this.opBits = this.opBits & -3585 | v._hx_index << 9;
		return this.frontDPfail = v;
	}
	,set_backTest: function(v) {
		this.opBits = this.opBits & -28673 | v._hx_index << 12;
		return this.backTest = v;
	}
	,set_backPass: function(v) {
		this.opBits = this.opBits & -229377 | v._hx_index << 15;
		return this.backPass = v;
	}
	,set_backSTfail: function(v) {
		this.opBits = this.opBits & -1835009 | v._hx_index << 18;
		return this.backSTfail = v;
	}
	,set_backDPfail: function(v) {
		this.opBits = this.opBits & -14680065 | v._hx_index << 21;
		return this.backDPfail = v;
	}
	,__class__: h3d_mat_Stencil
};
var hxd_PixelFormat = $hxEnums["hxd.PixelFormat"] = { __ename__:true,__constructs__:null
	,ARGB: {_hx_name:"ARGB",_hx_index:0,__enum__:"hxd.PixelFormat",toString:$estr}
	,BGRA: {_hx_name:"BGRA",_hx_index:1,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA: {_hx_name:"RGBA",_hx_index:2,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA16F: {_hx_name:"RGBA16F",_hx_index:3,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA32F: {_hx_name:"RGBA32F",_hx_index:4,__enum__:"hxd.PixelFormat",toString:$estr}
	,R8: {_hx_name:"R8",_hx_index:5,__enum__:"hxd.PixelFormat",toString:$estr}
	,R16F: {_hx_name:"R16F",_hx_index:6,__enum__:"hxd.PixelFormat",toString:$estr}
	,R32F: {_hx_name:"R32F",_hx_index:7,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG8: {_hx_name:"RG8",_hx_index:8,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG16F: {_hx_name:"RG16F",_hx_index:9,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG32F: {_hx_name:"RG32F",_hx_index:10,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB8: {_hx_name:"RGB8",_hx_index:11,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB16F: {_hx_name:"RGB16F",_hx_index:12,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB32F: {_hx_name:"RGB32F",_hx_index:13,__enum__:"hxd.PixelFormat",toString:$estr}
	,SRGB: {_hx_name:"SRGB",_hx_index:14,__enum__:"hxd.PixelFormat",toString:$estr}
	,SRGB_ALPHA: {_hx_name:"SRGB_ALPHA",_hx_index:15,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB10A2: {_hx_name:"RGB10A2",_hx_index:16,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG11B10UF: {_hx_name:"RG11B10UF",_hx_index:17,__enum__:"hxd.PixelFormat",toString:$estr}
	,R16U: {_hx_name:"R16U",_hx_index:18,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB16U: {_hx_name:"RGB16U",_hx_index:19,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA16U: {_hx_name:"RGBA16U",_hx_index:20,__enum__:"hxd.PixelFormat",toString:$estr}
	,S3TC: ($_=function(v) { return {_hx_index:21,v:v,__enum__:"hxd.PixelFormat",toString:$estr}; },$_._hx_name="S3TC",$_.__params__ = ["v"],$_)
};
hxd_PixelFormat.__constructs__ = [hxd_PixelFormat.ARGB,hxd_PixelFormat.BGRA,hxd_PixelFormat.RGBA,hxd_PixelFormat.RGBA16F,hxd_PixelFormat.RGBA32F,hxd_PixelFormat.R8,hxd_PixelFormat.R16F,hxd_PixelFormat.R32F,hxd_PixelFormat.RG8,hxd_PixelFormat.RG16F,hxd_PixelFormat.RG32F,hxd_PixelFormat.RGB8,hxd_PixelFormat.RGB16F,hxd_PixelFormat.RGB32F,hxd_PixelFormat.SRGB,hxd_PixelFormat.SRGB_ALPHA,hxd_PixelFormat.RGB10A2,hxd_PixelFormat.RG11B10UF,hxd_PixelFormat.R16U,hxd_PixelFormat.RGB16U,hxd_PixelFormat.RGBA16U,hxd_PixelFormat.S3TC];
hxd_PixelFormat.__empty_constructs__ = [hxd_PixelFormat.ARGB,hxd_PixelFormat.BGRA,hxd_PixelFormat.RGBA,hxd_PixelFormat.RGBA16F,hxd_PixelFormat.RGBA32F,hxd_PixelFormat.R8,hxd_PixelFormat.R16F,hxd_PixelFormat.R32F,hxd_PixelFormat.RG8,hxd_PixelFormat.RG16F,hxd_PixelFormat.RG32F,hxd_PixelFormat.RGB8,hxd_PixelFormat.RGB16F,hxd_PixelFormat.RGB32F,hxd_PixelFormat.SRGB,hxd_PixelFormat.SRGB_ALPHA,hxd_PixelFormat.RGB10A2,hxd_PixelFormat.RG11B10UF,hxd_PixelFormat.R16U,hxd_PixelFormat.RGB16U,hxd_PixelFormat.RGBA16U];
var h3d_mat_Texture = function(w,h,flags,format) {
	var engine = h3d_Engine.CURRENT;
	this.mem = engine.mem;
	if(format == null) {
		format = h3d_mat_Texture.nativeFormat;
	}
	this.id = ++h3d_mat_Texture.UID;
	this.format = format;
	var this1 = 0;
	this.flags = this1;
	if(flags != null) {
		var _g = 0;
		while(_g < flags.length) {
			var f = flags[_g];
			++_g;
			this.flags |= 1 << f._hx_index;
		}
	}
	var tw = 1;
	var th = 1;
	while(tw < w) tw <<= 1;
	while(th < h) th <<= 1;
	if(tw != w || th != h) {
		this.flags |= 1 << h3d_mat_TextureFlags.IsNPOT._hx_index;
	}
	this.width = w;
	this.height = h;
	this.set_mipMap((this.flags & 1 << h3d_mat_TextureFlags.MipMapped._hx_index) != 0 ? h3d_mat_MipMap.Linear : h3d_mat_MipMap.None);
	this.set_filter(h3d_mat_Filter.Linear);
	this.set_wrap(h3d_mat_Wrap.Clamp);
	this.bits &= 32767;
	if((this.flags & 1 << h3d_mat_TextureFlags.NoAlloc._hx_index) == 0) {
		this.alloc();
	}
};
$hxClasses["h3d.mat.Texture"] = h3d_mat_Texture;
h3d_mat_Texture.__name__ = "h3d.mat.Texture";
h3d_mat_Texture.fromBitmap = function(bmp) {
	var t = new h3d_mat_Texture(bmp.ctx.canvas.width,bmp.ctx.canvas.height);
	t.uploadBitmap(bmp);
	return t;
};
h3d_mat_Texture.fromColor = function(color,alpha) {
	if(alpha == null) {
		alpha = 1.;
	}
	var engine = h3d_Engine.CURRENT;
	var aval = alpha * 255 | 0;
	if(aval < 0) {
		aval = 0;
	} else if(aval > 255) {
		aval = 255;
	}
	var key = color & 16777215 | aval << 24;
	var t = engine.textureColorCache.h[key];
	if(t != null) {
		return t;
	}
	var t = new h3d_mat_Texture(1,1,null);
	t.clear(color,alpha);
	t.realloc = function() {
		t.clear(color,alpha);
	};
	engine.textureColorCache.h[key] = t;
	return t;
};
h3d_mat_Texture.defaultCubeTexture = function() {
	var engine = h3d_Engine.CURRENT;
	var t = engine.resCache.h[h3d_mat_Texture.__id__];
	if(t != null) {
		return t;
	}
	t = new h3d_mat_Texture(1,1,[h3d_mat_TextureFlags.Cube]);
	t.clear(2105376);
	t.realloc = function() {
		t.clear(2105376);
	};
	engine.resCache.set(h3d_mat_Texture,t);
	return t;
};
h3d_mat_Texture.prototype = {
	set_lastFrame: function(lf) {
		if(this._lastFrame != h3d_mat_Texture.PREVENT_AUTO_DISPOSE) {
			this._lastFrame = lf;
		}
		return this._lastFrame;
	}
	,get_lastFrame: function() {
		return this._lastFrame;
	}
	,get_mipLevels: function() {
		if((this.flags & 1 << h3d_mat_TextureFlags.MipMapped._hx_index) == 0) {
			return 1;
		}
		if(this.customMipLevels > 0) {
			return this.customMipLevels;
		}
		var lv = 1;
		var w = this.width;
		var h = this.height;
		while(w >> lv >= 1 || h >> lv >= 1) ++lv;
		return lv;
	}
	,get_layerCount: function() {
		if((this.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0) {
			return 6;
		} else {
			return 1;
		}
	}
	,alloc: function() {
		if(this.t == null) {
			this.mem.allocTexture(this);
		}
	}
	,toString: function() {
		var str = this.name;
		if(this.name == null) {
			str = "Texture_" + this.id;
		}
		return str + "(" + this.width + "x" + this.height + ")";
	}
	,setName: function(n) {
		this.name = n;
	}
	,set_mipMap: function(m) {
		this.bits = this.bits & -4 | m._hx_index;
		return this.mipMap = m;
	}
	,set_filter: function(f) {
		this.bits = this.bits & -25 | f._hx_index << 3;
		return this.filter = f;
	}
	,set_wrap: function(w) {
		this.bits = this.bits & -193 | w._hx_index << 6;
		return this.wrap = w;
	}
	,resize: function(width,height) {
		this.dispose();
		var tw = 1;
		var th = 1;
		while(tw < width) tw <<= 1;
		while(th < height) th <<= 1;
		if(tw != width || th != height) {
			this.flags |= 1 << h3d_mat_TextureFlags.IsNPOT._hx_index;
		} else {
			this.flags &= -1 - (1 << h3d_mat_TextureFlags.IsNPOT._hx_index);
		}
		this.width = width;
		this.height = height;
		if((this.flags & 1 << h3d_mat_TextureFlags.NoAlloc._hx_index) == 0) {
			this.alloc();
		}
	}
	,clear: function(color,alpha,layer) {
		if(layer == null) {
			layer = -1;
		}
		if(alpha == null) {
			alpha = 1.;
		}
		this.alloc();
		if(this.width == 0 || this.height == 0) {
			return;
		}
		if(this.width != 1 || this.height != 1) {
			var engine = h3d_Engine.CURRENT;
			color |= ((alpha < 0. ? 0. : alpha > 1. ? 1. : alpha) * 255 | 0) << 24;
			if(layer < 0) {
				var _g = 0;
				var _g1 = this.get_layerCount();
				while(_g < _g1) {
					var i = _g++;
					engine.pushTarget(this,i);
					engine.clear(color);
					engine.popTarget();
				}
			} else {
				engine.pushTarget(this,layer);
				engine.clear(color);
				engine.popTarget();
			}
		} else {
			var p = hxd_Pixels.alloc(this.width,this.height,h3d_mat_Texture.nativeFormat);
			var k = 0;
			var b = color & 255;
			var g = color >> 8 & 255;
			var r = color >> 16 & 255;
			var a = alpha * 255 | 0;
			if(a < 0) {
				a = 0;
			} else if(a > 255) {
				a = 255;
			}
			switch(h3d_mat_Texture.nativeFormat._hx_index) {
			case 1:
				var tmp = r;
				r = b;
				b = tmp;
				break;
			case 2:
				break;
			default:
				throw haxe_Exception.thrown("TODO");
			}
			var _g = 0;
			var _g1 = this.width * this.height;
			while(_g < _g1) {
				var i = _g++;
				p.bytes.b[k++] = r;
				p.bytes.b[k++] = g;
				p.bytes.b[k++] = b;
				p.bytes.b[k++] = a;
			}
			if(layer < 0) {
				var _g = 0;
				var _g1 = this.get_layerCount();
				while(_g < _g1) {
					var i = _g++;
					this.uploadPixels(p,0,i);
				}
			} else {
				this.uploadPixels(p,0,layer);
			}
			p.dispose();
		}
	}
	,checkSize: function(width,height,mip) {
		var mw = this.width >> mip;
		if(mw == 0) {
			mw = 1;
		}
		var mh = this.height >> mip;
		if(mh == 0) {
			mh = 1;
		}
		if(width != mw || height != mh) {
			throw haxe_Exception.thrown("Invalid upload size : " + width + "x" + height + " should be " + mw + "x" + mh);
		}
	}
	,checkMipMapGen: function(mipLevel,layer) {
		if(mipLevel == 0 && (this.flags & 1 << h3d_mat_TextureFlags.MipMapped._hx_index) != 0 && (this.flags & 1 << h3d_mat_TextureFlags.ManualMipMapGen._hx_index) == 0 && layer == this.get_layerCount() - 1) {
			this.mem.driver.generateMipMaps(this);
		}
	}
	,uploadBitmap: function(bmp,mipLevel,layer) {
		if(layer == null) {
			layer = 0;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		this.alloc();
		this.checkSize(bmp.ctx.canvas.width,bmp.ctx.canvas.height,mipLevel);
		this.mem.driver.uploadTextureBitmap(this,bmp,mipLevel,layer);
		this.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		this.checkMipMapGen(mipLevel,layer);
	}
	,uploadPixels: function(pixels,mipLevel,layer) {
		if(layer == null) {
			layer = 0;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		this.alloc();
		this.checkSize(pixels.width,pixels.height,mipLevel);
		this.mem.driver.uploadTexturePixels(this,pixels,mipLevel,layer);
		this.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		this.checkMipMapGen(mipLevel,layer);
	}
	,dispose: function() {
		if(this.t != null) {
			this.mem.deleteTexture(this);
		}
	}
	,__class__: h3d_mat_Texture
};
var h3d_mat_TextureArray = function(w,h,layers,flags,format) {
	this.layers = layers;
	if(flags == null) {
		flags = [];
	}
	flags.push(h3d_mat_TextureFlags.IsArray);
	h3d_mat_Texture.call(this,w,h,flags,format);
};
$hxClasses["h3d.mat.TextureArray"] = h3d_mat_TextureArray;
h3d_mat_TextureArray.__name__ = "h3d.mat.TextureArray";
h3d_mat_TextureArray.__super__ = h3d_mat_Texture;
h3d_mat_TextureArray.prototype = $extend(h3d_mat_Texture.prototype,{
	get_layerCount: function() {
		return this.layers;
	}
	,toString: function() {
		return h3d_mat_Texture.prototype.toString.call(this) + "[" + this.layers + "]";
	}
	,__class__: h3d_mat_TextureArray
});
var h3d_pass_Base = function(name) {
	this.name = name;
};
$hxClasses["h3d.pass.Base"] = h3d_pass_Base;
h3d_pass_Base.__name__ = "h3d.pass.Base";
h3d_pass_Base.prototype = {
	setContext: function(ctx) {
		this.ctx = ctx;
	}
	,draw: function(passes,sort) {
	}
	,__class__: h3d_pass_Base
};
var h3d_pass_ScreenFx = function(shader,output) {
	this.shader = shader;
	this.manager = new h3d_pass_ShaderManager(output);
	this.pass = new h3d_mat_Pass("screenfx",new hxsl_ShaderList(shader));
	this.pass.set_culling(h3d_mat_Face.None);
	this.pass.depth(false,h3d_mat_Compare.Always);
};
$hxClasses["h3d.pass.ScreenFx"] = h3d_pass_ScreenFx;
h3d_pass_ScreenFx.__name__ = "h3d.pass.ScreenFx";
h3d_pass_ScreenFx.prototype = {
	get_engine: function() {
		if(this._engine == null) {
			this._engine = h3d_Engine.CURRENT;
		}
		return this._engine;
	}
	,render: function() {
		if(this.primitive == null) {
			this.primitive = h3d_prim_Plane2D.get();
		}
		this.shader.flipY__ = this.get_engine().driver.hasFeature(h3d_impl_Feature.BottomLeftCoords) && this.get_engine().getCurrentTarget() != null ? -1 : 1;
		var shaders = this.pass.shaders;
		var rts = this.manager.compileShaders(shaders);
		this.get_engine().selectMaterial(this.pass);
		this.get_engine().selectShader(rts);
		if(this.buffers == null) {
			this.buffers = new h3d_shader_Buffers(rts);
		} else {
			var _this = this.buffers;
			_this.vertex.grow(rts.vertex);
			_this.fragment.grow(rts.fragment);
		}
		this.manager.fillGlobals(this.buffers,rts);
		this.manager.fillParams(this.buffers,rts,shaders);
		this.get_engine().uploadShaderBuffers(this.buffers,0);
		this.get_engine().uploadShaderBuffers(this.buffers,1);
		this.get_engine().uploadShaderBuffers(this.buffers,2);
		this.primitive.render(this.get_engine());
	}
	,dispose: function() {
	}
	,__class__: h3d_pass_ScreenFx
};
var h3d_pass_Blur = function(radius,gain,linear,quality) {
	if(quality == null) {
		quality = 1.;
	}
	if(linear == null) {
		linear = 0.;
	}
	if(gain == null) {
		gain = 1.;
	}
	if(radius == null) {
		radius = 1.;
	}
	this.cubeDir = [h3d_Matrix.L([0,0,-1,0,0,-1,0,0,1,0,0,0]),h3d_Matrix.L([0,0,1,0,0,-1,0,0,-1,0,0,0]),h3d_Matrix.L([1,0,0,0,0,0,1,0,0,1,0,0]),h3d_Matrix.L([1,0,0,0,0,0,-1,0,0,-1,0,0]),h3d_Matrix.L([1,0,0,0,0,-1,0,0,0,1,0,0]),h3d_Matrix.L([-1,0,0,0,0,-1,0,0,0,0,-1,0])];
	h3d_pass_ScreenFx.call(this,new h3d_shader_Blur());
	this.set_radius(radius);
	this.set_quality(quality);
	this.set_gain(gain);
	this.set_linear(linear);
};
$hxClasses["h3d.pass.Blur"] = h3d_pass_Blur;
h3d_pass_Blur.__name__ = "h3d.pass.Blur";
h3d_pass_Blur.__super__ = h3d_pass_ScreenFx;
h3d_pass_Blur.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	set_radius: function(r) {
		if(this.radius == r) {
			return r;
		}
		this.values = null;
		return this.radius = r;
	}
	,set_quality: function(q) {
		if(this.quality == q) {
			return q;
		}
		this.values = null;
		return this.quality = q;
	}
	,set_gain: function(s) {
		if(this.gain == s) {
			return s;
		}
		this.values = null;
		return this.gain = s;
	}
	,set_linear: function(b) {
		if(this.linear == b) {
			return b;
		}
		this.values = null;
		return this.linear = b;
	}
	,gauss: function(x,s) {
		if(s <= 0) {
			if(x == 0) {
				return 1;
			} else {
				return 0;
			}
		}
		var sq = s * s;
		var p = Math.pow(2.718281828459,-(x * x) / (2 * sq));
		return p / Math.sqrt(2 * Math.PI * sq);
	}
	,calcValues: function() {
		this.values = [];
		this.offsets = [];
		var tot = 0.;
		var f = this.quality;
		var qadj = (f < 0. ? 0. : f > 1. ? 1. : f) * 0.7 + 0.3;
		var width;
		if(this.radius > 0) {
			var a = this.radius - 1;
			width = Math.ceil((a < 1 ? 1 : a) * qadj / 2);
		} else {
			width = 0;
		}
		var sigma = Math.sqrt(this.radius);
		var _g = 0;
		var _g1 = width + 1;
		while(_g < _g1) {
			var i = _g++;
			var i1 = i * 2;
			var i2 = i == 0 ? 0 : i * 2 - 1;
			var g1 = this.gauss(i1,sigma);
			var g2 = this.gauss(i2,sigma);
			var g = g1 + g2;
			this.values[i] = g;
			this.offsets[i] = i == 0 ? 0 : (g1 * i1 + g2 * i2) / (g * i * Math.sqrt(qadj));
			tot += g;
			if(i > 0) {
				tot += g;
			}
		}
		var minVal = this.values[0] * (0.01 / qadj);
		while(this.values.length > 2) {
			var last = this.values[this.values.length - 1];
			if(last > minVal) {
				break;
			}
			tot -= last * 2;
			this.values.pop();
		}
		tot /= this.gain;
		var _g = 0;
		var _g1 = this.values.length;
		while(_g < _g1) {
			var i = _g++;
			this.values[i] /= tot;
		}
		if(this.linear > 0) {
			var m = this.gain / (this.values.length * 2 - 1);
			var _g = 0;
			var _g1 = this.values.length;
			while(_g < _g1) {
				var i = _g++;
				var a = this.values[i];
				this.values[i] = a + this.linear * (m - a);
				var a1 = this.offsets[i];
				this.offsets[i] = a1 + this.linear * ((i == 0 ? 0 : (i * 2 - 0.5) / (i * qadj)) - a1);
			}
		}
	}
	,apply: function(ctx,src,output) {
		if(this.radius <= 0 && this.shader.fixedColor__ == null) {
			if(output != null) {
				h3d_pass_Copy.run(src,output);
			}
			return;
		}
		if(output == null) {
			output = src;
		}
		if(this.values == null) {
			this.calcValues();
		}
		var isCube = (src.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0;
		var faceCount = isCube ? 6 : 1;
		var tmp = ctx.textures.allocTarget(src.name + "BlurTmp",src.width,src.height,false,src.format,isCube);
		var _this = this.shader;
		_this.constModified = true;
		_this.Quality__ = this.values.length;
		this.shader.values__ = this.values;
		this.shader.offsets__ = this.offsets;
		if(isCube) {
			this.shader.cubeTexture__ = src;
			var _this = this.shader;
			_this.constModified = true;
			_this.isCube__ = true;
		} else {
			this.shader.texture__ = src;
			var _this = this.shader;
			_this.constModified = true;
			_this.isCube__ = false;
		}
		var _this = this.shader.pixel__;
		var x = 1 / src.width;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		_this.w = 1.;
		var _g = 0;
		var _g1 = faceCount;
		while(_g < _g1) {
			var i = _g++;
			this.get_engine().pushTarget(tmp,i);
			if(isCube) {
				this.shader.cubeDir__ = this.cubeDir[i];
			}
			this.render();
			this.get_engine().popTarget();
		}
		if(isCube) {
			this.shader.cubeTexture__ = tmp;
		} else {
			this.shader.texture__ = tmp;
		}
		var _this = this.shader.pixel__;
		var x = 0;
		var y = 1 / src.height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		_this.w = 1.;
		var outDepth = output.depthBuffer;
		output.depthBuffer = null;
		var _g = 0;
		var _g1 = faceCount;
		while(_g < _g1) {
			var i = _g++;
			this.get_engine().pushTarget(output,i);
			if(isCube) {
				this.shader.cubeDir__ = this.cubeDir[i];
			}
			this.render();
			this.get_engine().popTarget();
		}
		output.depthBuffer = outDepth;
	}
	,__class__: h3d_pass_Blur
});
var hxsl_Shader = function() {
	this.priority = 0;
	this.initialize();
};
$hxClasses["hxsl.Shader"] = hxsl_Shader;
hxsl_Shader.__name__ = "hxsl.Shader";
hxsl_Shader.prototype = {
	initialize: function() {
		this.constModified = true;
		if(this.shader != null) {
			return;
		}
		var cl = js_Boot.getClass(this);
		this.shader = cl._SHADER;
		if(this.shader == null) {
			var curClass = cl;
			while(curClass != null && curClass.SRC == null) curClass = curClass.__super__;
			if(curClass == null) {
				throw haxe_Exception.thrown(cl.__name__ + " has no shader source");
			}
			this.shader = curClass._SHADER;
			if(this.shader == null) {
				this.shader = new hxsl_SharedShader(curClass.SRC);
				curClass._SHADER = this.shader;
			}
		}
	}
	,setPriority: function(v) {
		this.priority = v;
	}
	,getParamValue: function(index) {
		throw haxe_Exception.thrown("assert");
	}
	,getParamFloatValue: function(index) {
		throw haxe_Exception.thrown("assert");
	}
	,updateConstants: function(globals) {
		throw haxe_Exception.thrown("assert");
	}
	,updateConstantsFinal: function(globals) {
		var c = this.shader.consts;
		while(c != null) {
			if(c.globalId == 0) {
				c = c.next;
				continue;
			}
			var v = globals.map.h[c.globalId];
			var _g = c.v.type;
			switch(_g._hx_index) {
			case 1:
				var v1 = v;
				if(v1 >>> c.bits != 0) {
					throw haxe_Exception.thrown("Constant " + c.v.name + " is outside range (" + v1 + " > " + ((1 << c.bits) - 1) + ")");
				}
				this.constBits |= v1 << c.pos;
				break;
			case 2:
				var v2 = v;
				if(v2) {
					this.constBits |= 1 << c.pos;
				}
				break;
			case 17:
				var count = _g.size;
				if(v == null) {
					c = c.next;
					continue;
				}
				var v3 = v;
				var sel = v3.channel;
				if(v3.texture == null) {
					sel = hxsl_Channel.Unknown;
				} else if(sel == null || sel == hxsl_Channel.Unknown) {
					switch(count) {
					case 1:
						if(v3.texture.format == h3d_mat_Texture.nativeFormat) {
							sel = hxsl_Channel.PackedFloat;
						} else {
							throw haxe_Exception.thrown("Constant " + c.v.name + " does not define channel select value");
						}
						break;
					case 3:
						if(v3.texture.format == h3d_mat_Texture.nativeFormat) {
							sel = hxsl_Channel.PackedNormal;
						} else {
							throw haxe_Exception.thrown("Constant " + c.v.name + " does not define channel select value");
						}
						break;
					default:
						throw haxe_Exception.thrown("Constant " + c.v.name + " does not define channel select value");
					}
				}
				this.constBits |= (globals.allocChannelID(v3.texture) << 3 | sel._hx_index) << c.pos;
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
			c = c.next;
		}
		var _this = this.shader;
		var constBits = this.constBits;
		var i = _this.instanceCache.h[constBits];
		this.instance = i == null ? _this.makeInstance(constBits) : i;
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__;
	}
	,__class__: hxsl_Shader
};
var h3d_shader_ScreenShader = function() {
	this.flipY__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.ScreenShader"] = h3d_shader_ScreenShader;
h3d_shader_ScreenShader.__name__ = "h3d.shader.ScreenShader";
h3d_shader_ScreenShader.__super__ = hxsl_Shader;
h3d_shader_ScreenShader.prototype = $extend(hxsl_Shader.prototype,{
	get_flipY: function() {
		return this.flipY__;
	}
	,set_flipY: function(_v) {
		return this.flipY__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_shader_ScreenShader
});
var h3d_pass__$Border_BorderShader = function() {
	this.color__ = new h3d_Vector();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass._Border.BorderShader"] = h3d_pass__$Border_BorderShader;
h3d_pass__$Border_BorderShader.__name__ = "h3d.pass._Border.BorderShader";
h3d_pass__$Border_BorderShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$Border_BorderShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.color__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_pass__$Border_BorderShader
});
var h3d_pass_Border = function(width,height,size) {
	if(size == null) {
		size = 1;
	}
	h3d_pass_ScreenFx.call(this,new h3d_pass__$Border_BorderShader());
	var this1 = hxd__$FloatBuffer_Float32Expand._new(0);
	var bbuf = this1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - size / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - size / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = size / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = size / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - (height - size) / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - (height - size) / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = (width - size) / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = (width - size) / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	this.primitive = new h3d_prim_RawPrimitive({ vbuf : bbuf, stride : 2, quads : true},true);
	var _this = this.shader.color__;
	var x = 1;
	var y = 1;
	var z = 1;
	var w = 1;
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = w;
};
$hxClasses["h3d.pass.Border"] = h3d_pass_Border;
h3d_pass_Border.__name__ = "h3d.pass.Border";
h3d_pass_Border.__super__ = h3d_pass_ScreenFx;
h3d_pass_Border.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	dispose: function() {
		h3d_pass_ScreenFx.prototype.dispose.call(this);
		this.primitive.dispose();
	}
	,__class__: h3d_pass_Border
});
var h3d_pass_ColorMatrixShader = function() {
	this.maskChannel__ = new h3d_Vector();
	this.maskPower__ = 0;
	this.maskMatB__ = new h3d_Vector();
	this.maskMatA__ = new h3d_Vector();
	this.matrix2__ = new h3d_Matrix();
	this.matrix__ = new h3d_Matrix();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass.ColorMatrixShader"] = h3d_pass_ColorMatrixShader;
h3d_pass_ColorMatrixShader.__name__ = "h3d.pass.ColorMatrixShader";
h3d_pass_ColorMatrixShader.__super__ = h3d_shader_ScreenShader;
h3d_pass_ColorMatrixShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,get_matrix: function() {
		return this.matrix__;
	}
	,set_matrix: function(_v) {
		return this.matrix__ = _v;
	}
	,get_useAlpha: function() {
		return this.useAlpha__;
	}
	,set_useAlpha: function(_v) {
		this.constModified = true;
		return this.useAlpha__ = _v;
	}
	,get_useMask: function() {
		return this.useMask__;
	}
	,set_useMask: function(_v) {
		this.constModified = true;
		return this.useMask__ = _v;
	}
	,get_maskInvert: function() {
		return this.maskInvert__;
	}
	,set_maskInvert: function(_v) {
		this.constModified = true;
		return this.maskInvert__ = _v;
	}
	,get_hasSecondMatrix: function() {
		return this.hasSecondMatrix__;
	}
	,set_hasSecondMatrix: function(_v) {
		this.constModified = true;
		return this.hasSecondMatrix__ = _v;
	}
	,get_matrix2: function() {
		return this.matrix2__;
	}
	,set_matrix2: function(_v) {
		return this.matrix2__ = _v;
	}
	,get_mask: function() {
		return this.mask__;
	}
	,set_mask: function(_v) {
		return this.mask__ = _v;
	}
	,get_maskMatA: function() {
		return this.maskMatA__;
	}
	,set_maskMatA: function(_v) {
		return this.maskMatA__ = _v;
	}
	,get_maskMatB: function() {
		return this.maskMatB__;
	}
	,set_maskMatB: function(_v) {
		return this.maskMatB__ = _v;
	}
	,get_maskPower: function() {
		return this.maskPower__;
	}
	,set_maskPower: function(_v) {
		return this.maskPower__ = _v;
	}
	,get_maskChannel: function() {
		return this.maskChannel__;
	}
	,set_maskChannel: function(_v) {
		return this.maskChannel__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.useAlpha__) {
			this.constBits |= 1;
		}
		if(this.useMask__) {
			this.constBits |= 2;
		}
		if(this.maskInvert__) {
			this.constBits |= 4;
		}
		if(this.hasSecondMatrix__) {
			this.constBits |= 8;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		case 2:
			return this.matrix__;
		case 3:
			return this.useAlpha__;
		case 4:
			return this.useMask__;
		case 5:
			return this.maskInvert__;
		case 6:
			return this.hasSecondMatrix__;
		case 7:
			return this.matrix2__;
		case 8:
			return this.mask__;
		case 9:
			return this.maskMatA__;
		case 10:
			return this.maskMatB__;
		case 11:
			return this.maskPower__;
		case 12:
			return this.maskChannel__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 11:
			return this.maskPower__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_pass_ColorMatrixShader
});
var h3d_pass_ColorMatrix = function(m) {
	h3d_pass_ScreenFx.call(this,new h3d_pass_ColorMatrixShader());
	if(m != null) {
		this.shader.matrix__ = m;
	} else {
		this.shader.matrix__.identity();
	}
	this.shader.maskPower__ = 1;
	var _this = this.shader.maskChannel__;
	var x = 1;
	var y = 0;
	var z = 0;
	var w = 0;
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = w;
};
$hxClasses["h3d.pass.ColorMatrix"] = h3d_pass_ColorMatrix;
h3d_pass_ColorMatrix.__name__ = "h3d.pass.ColorMatrix";
h3d_pass_ColorMatrix.__super__ = h3d_pass_ScreenFx;
h3d_pass_ColorMatrix.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	apply: function(src,out,mask,maskMatrix) {
		this.get_engine().pushTarget(out);
		this.shader.texture__ = src;
		var _this = this.shader;
		_this.constModified = true;
		_this.useMask__ = mask != null;
		if(mask != null) {
			this.shader.mask__ = mask;
			if(maskMatrix == null) {
				var _this = this.shader.maskMatA__;
				var x = 1;
				var y = 0;
				var z = 0;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				_this.x = x;
				_this.y = y;
				_this.z = z;
				_this.w = 1.;
				var _this = this.shader.maskMatB__;
				var x = 0;
				var y = 1;
				var z = 0;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				_this.x = x;
				_this.y = y;
				_this.z = z;
				_this.w = 1.;
			} else {
				var _this = this.shader.maskMatA__;
				var x = maskMatrix.a;
				var y = maskMatrix.c;
				var z = maskMatrix.x;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				_this.x = x;
				_this.y = y;
				_this.z = z;
				_this.w = 1.;
				var _this = this.shader.maskMatB__;
				var x = maskMatrix.b;
				var y = maskMatrix.d;
				var z = maskMatrix.y;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				_this.x = x;
				_this.y = y;
				_this.z = z;
				_this.w = 1.;
			}
		}
		this.render();
		this.get_engine().popTarget();
	}
	,__class__: h3d_pass_ColorMatrix
});
var h3d_pass__$Copy_ArrayCopyShader = function() {
	this.layer__ = 0;
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass._Copy.ArrayCopyShader"] = h3d_pass__$Copy_ArrayCopyShader;
h3d_pass__$Copy_ArrayCopyShader.__name__ = "h3d.pass._Copy.ArrayCopyShader";
h3d_pass__$Copy_ArrayCopyShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$Copy_ArrayCopyShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,get_layer: function() {
		return this.layer__;
	}
	,set_layer: function(_v) {
		return this.layer__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		case 2:
			return this.layer__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_pass__$Copy_ArrayCopyShader
});
var h3d_pass__$Copy_CopyShader = function() {
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass._Copy.CopyShader"] = h3d_pass__$Copy_CopyShader;
h3d_pass__$Copy_CopyShader.__name__ = "h3d.pass._Copy.CopyShader";
h3d_pass__$Copy_CopyShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$Copy_CopyShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_pass__$Copy_CopyShader
});
var h3d_pass_Copy = function() {
	h3d_pass_ScreenFx.call(this,new h3d_pass__$Copy_CopyShader());
};
$hxClasses["h3d.pass.Copy"] = h3d_pass_Copy;
h3d_pass_Copy.__name__ = "h3d.pass.Copy";
h3d_pass_Copy.run = function(from,to,blend,pass,layer) {
	var engine = h3d_Engine.CURRENT;
	if(to != null && from != null && (blend == null || blend == h2d_BlendMode.None) && pass == null && layer == null && engine.driver.copyTexture(from,to)) {
		return;
	}
	var inst = engine.resCache.h[h3d_pass_Copy.__id__];
	if(inst == null) {
		inst = new h3d_pass_Copy();
		engine.resCache.set(h3d_pass_Copy,inst);
	}
	inst.apply(from,to,blend,pass,layer);
};
h3d_pass_Copy.__super__ = h3d_pass_ScreenFx;
h3d_pass_Copy.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	apply: function(from,to,blend,customPass,layer) {
		if(to != null) {
			this.get_engine().pushTarget(to,layer != null ? layer : 0);
		}
		this.shader.texture__ = from;
		if(customPass != null) {
			if(blend != null) {
				customPass.setBlendMode(blend);
			}
			var h = customPass.shaders;
			while(h.next != null) h = h.next;
			h.next = this.pass.shaders;
			var old = this.pass;
			this.pass = customPass;
			this.render();
			this.pass = old;
			h.next = null;
		} else {
			this.pass.setBlendMode(blend == null ? h2d_BlendMode.None : blend);
			this.render();
		}
		this.shader.texture__ = null;
		if(to != null) {
			this.get_engine().popTarget();
		}
	}
	,__class__: h3d_pass_Copy
});
var h3d_pass__$CubeCopy_CubeCopyShader = function() {
	this.mat__ = new h3d_Matrix();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass._CubeCopy.CubeCopyShader"] = h3d_pass__$CubeCopy_CubeCopyShader;
h3d_pass__$CubeCopy_CubeCopyShader.__name__ = "h3d.pass._CubeCopy.CubeCopyShader";
h3d_pass__$CubeCopy_CubeCopyShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$CubeCopy_CubeCopyShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,get_mat: function() {
		return this.mat__;
	}
	,set_mat: function(_v) {
		return this.mat__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		case 2:
			return this.mat__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_pass__$CubeCopy_CubeCopyShader
});
var h3d_pass_Default = function(name) {
	this.defaultSort = ($_=new h3d_pass_SortByMaterial(),$bind($_,$_.sort));
	h3d_pass_Base.call(this,name);
	this.manager = new h3d_pass_ShaderManager(this.getOutputs());
	this.initGlobals();
};
$hxClasses["h3d.pass.Default"] = h3d_pass_Default;
h3d_pass_Default.__name__ = "h3d.pass.Default";
h3d_pass_Default.__super__ = h3d_pass_Base;
h3d_pass_Default.prototype = $extend(h3d_pass_Base.prototype,{
	getCurrentPixelSize: function() {
		var t = this.ctx.engine.getCurrentTarget();
		return new h3d_Vector(2 / (t == null ? this.ctx.engine.width : t.width),2 / (t == null ? this.ctx.engine.height : t.height));
	}
	,getOutputs: function() {
		return [hxsl_Output.Value("output.color")];
	}
	,processShaders: function(p,shaders) {
		var p = this.ctx.extraShaders;
		while(p != null) {
			shaders = this.ctx.allocShaderList(p.s,shaders);
			p = p.next;
		}
		return shaders;
	}
	,setupShaders: function(passes) {
		var lightInit = false;
		var _g_o = passes.current;
		while(_g_o != null) {
			var tmp = _g_o;
			_g_o = _g_o.next;
			var p = tmp;
			var shaders = p.pass.getShadersRec();
			shaders = this.processShaders(p,shaders);
			if(p.pass.enableLights && this.ctx.lightSystem != null) {
				if(!lightInit) {
					this.ctx.lightSystem.initGlobals(this.manager.globals);
					lightInit = true;
				}
				shaders = this.ctx.lightSystem.computeLight(p.obj,shaders);
			}
			p.shader = this.manager.compileShaders(shaders,p.pass.batchMode);
			p.shaders = shaders;
			var t = p.shader.fragment.textures;
			var tmp1;
			if(t != null) {
				var _g = t.type;
				if(_g._hx_index == 15) {
					var _g1 = _g.t;
					var _g2 = _g.size;
					tmp1 = true;
				} else {
					tmp1 = false;
				}
			} else {
				tmp1 = true;
			}
			if(tmp1) {
				p.texture = 0;
			} else {
				var _this = this.manager;
				var opt = true;
				if(opt == null) {
					opt = false;
				}
				var t1;
				if(t.perObjectGlobal != null) {
					var v = _this.globals.map.h[t.perObjectGlobal.gid];
					if(v == null) {
						throw haxe_Exception.thrown("Missing global value " + t.perObjectGlobal.path + " for shader " + _this.shaderInfo(shaders,t.perObjectGlobal.path));
					}
					var _g3 = t.type;
					var t2;
					if(_g3._hx_index == 17) {
						var _g4 = _g3.size;
						t2 = true;
					} else {
						t2 = false;
					}
					t1 = t2 ? v.texture : v;
				} else {
					var si = shaders;
					var n = t.instance;
					while(--n > 0) si = si.next;
					var v1 = si.s.getParamValue(t.index);
					if(v1 == null && !opt) {
						throw haxe_Exception.thrown("Missing param value " + Std.string(si.s) + "." + t.name);
					}
					t1 = v1;
				}
				p.texture = t1 == null ? 0 : t1.id;
			}
		}
	}
	,drawObject: function(p) {
		this.ctx.drawPass = p;
		this.ctx.engine.selectMaterial(p.pass);
		p.obj.draw(this.ctx);
	}
	,draw: function(passes,sort) {
		if(passes.current == null) {
			return;
		}
		var _g = 0;
		var _g1 = this.ctx.sharedGlobals;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			this.manager.globals.map.h[g.gid] = g.value;
		}
		this.setGlobals();
		this.setupShaders(passes);
		if(sort == null) {
			this.defaultSort(passes);
		} else {
			sort(passes);
		}
		this.ctx.currentManager = this.manager;
		var buf = this.ctx.shaderBuffers;
		var prevShader = null;
		var _g2_o = passes.current;
		while(_g2_o != null) {
			var tmp = _g2_o;
			_g2_o = _g2_o.next;
			var p = tmp;
			var v = p.obj.absPos;
			this.manager.globals.map.h[this.globalModelView_id] = v;
			if(p.shader.globals.h.hasOwnProperty(this.globalModelViewInverse_id)) {
				var v1 = p.obj.getInvPos();
				this.manager.globals.map.h[this.globalModelViewInverse_id] = v1;
			}
			if(prevShader != p.shader) {
				prevShader = p.shader;
				this.ctx.engine.selectShader(p.shader);
				if(buf == null) {
					buf = this.ctx.shaderBuffers = new h3d_shader_Buffers(p.shader);
				} else {
					var s = p.shader;
					buf.vertex.grow(s.vertex);
					buf.fragment.grow(s.fragment);
				}
				this.manager.fillGlobals(buf,p.shader);
				this.ctx.engine.uploadShaderBuffers(buf,0);
			}
			if(!p.pass.dynamicParameters) {
				this.manager.fillParams(buf,p.shader,p.shaders);
				this.ctx.engine.uploadShaderBuffers(buf,1);
				this.ctx.engine.uploadShaderBuffers(buf,2);
				this.ctx.engine.uploadShaderBuffers(buf,3);
			}
			this.drawObject(p);
		}
		var _this = this.ctx;
		_this.cachedPos = 0;
		_this.drawPass = null;
	}
	,initGlobals: function() {
		var this1 = hxsl_Globals.allocID("camera.view");
		this.cameraView_id = this1;
		var this1 = hxsl_Globals.allocID("camera.zNear");
		this.cameraNear_id = this1;
		var this1 = hxsl_Globals.allocID("camera.zFar");
		this.cameraFar_id = this1;
		var this1 = hxsl_Globals.allocID("camera.proj");
		this.cameraProj_id = this1;
		var this1 = hxsl_Globals.allocID("camera.position");
		this.cameraPos_id = this1;
		var this1 = hxsl_Globals.allocID("camera.projDiag");
		this.cameraProjDiag_id = this1;
		var this1 = hxsl_Globals.allocID("camera.projFlip");
		this.cameraProjFlip_id = this1;
		var this1 = hxsl_Globals.allocID("camera.viewProj");
		this.cameraViewProj_id = this1;
		var this1 = hxsl_Globals.allocID("camera.inverseViewProj");
		this.cameraInverseViewProj_id = this1;
		var this1 = hxsl_Globals.allocID("global.time");
		this.globalTime_id = this1;
		var this1 = hxsl_Globals.allocID("global.pixelSize");
		this.pixelSize_id = this1;
		var this1 = hxsl_Globals.allocID("global.modelView");
		this.globalModelView_id = this1;
		var this1 = hxsl_Globals.allocID("global.modelViewInverse");
		this.globalModelViewInverse_id = this1;
	}
	,setGlobals: function() {
		var v = this.ctx.camera.mcam;
		this.manager.globals.map.h[this.cameraView_id] = v;
		var v = this.ctx.camera.zNear;
		this.manager.globals.map.h[this.cameraNear_id] = v;
		var v = this.ctx.camera.zFar;
		this.manager.globals.map.h[this.cameraFar_id] = v;
		var v = this.ctx.camera.mproj;
		this.manager.globals.map.h[this.cameraProj_id] = v;
		var v = this.ctx.camera.pos;
		this.manager.globals.map.h[this.cameraPos_id] = v;
		var v = new h3d_Vector(this.ctx.camera.mproj._11,this.ctx.camera.mproj._22,this.ctx.camera.mproj._33,this.ctx.camera.mproj._44);
		this.manager.globals.map.h[this.cameraProjDiag_id] = v;
		var v = this.ctx.engine.driver.hasFeature(h3d_impl_Feature.BottomLeftCoords) && this.ctx.engine.getCurrentTarget() != null ? -1 : 1;
		this.manager.globals.map.h[this.cameraProjFlip_id] = v;
		var v = this.ctx.camera.m;
		this.manager.globals.map.h[this.cameraViewProj_id] = v;
		var v = this.ctx.camera.getInverseViewProj();
		this.manager.globals.map.h[this.cameraInverseViewProj_id] = v;
		var v = this.ctx.time;
		this.manager.globals.map.h[this.globalTime_id] = v;
		var v = this.getCurrentPixelSize();
		this.manager.globals.map.h[this.pixelSize_id] = v;
	}
	,__class__: h3d_pass_Default
});
var h3d_pass_Shadows = function(light) {
	this.pcfScale = 1.0;
	this.pcfQuality = 1;
	this.bias = 0.01;
	this.power = 30.0;
	this.samplingKind = h3d_pass_ShadowSamplingKind.None;
	this.size = 1024;
	this.mode = h3d_pass_RenderMode.None;
	this.enabled = true;
	if(this.format == null) {
		this.format = hxd_PixelFormat.R16F;
	}
	if(!h3d_Engine.CURRENT.driver.isSupportedFormat(this.format)) {
		this.format = h3d_mat_Texture.nativeFormat;
	}
	h3d_pass_Default.call(this,"shadow");
	this.light = light;
	this.blur = new h3d_pass_Blur(5);
	this.blur.set_quality(0.5);
	var _this = this.blur.shader;
	_this.constModified = true;
	_this.isDepth__ = this.format == h3d_mat_Texture.nativeFormat;
};
$hxClasses["h3d.pass.Shadows"] = h3d_pass_Shadows;
h3d_pass_Shadows.__name__ = "h3d.pass.Shadows";
h3d_pass_Shadows.__super__ = h3d_pass_Default;
h3d_pass_Shadows.prototype = $extend(h3d_pass_Default.prototype,{
	set_size: function(s) {
		if(s != this.size && this.staticTexture != null) {
			this.staticTexture.dispose();
			this.staticTexture = null;
		}
		return this.size = s;
	}
	,getShadowProj: function() {
		return this.lightCamera.m;
	}
	,isUsingWorldDist: function() {
		return false;
	}
	,getOutputs: function() {
		if(this.isUsingWorldDist()) {
			return [hxsl_Output.Swiz(hxsl_Output.Value("output.worldDist",1),[hxsl_Component.X,hxsl_Component.X,hxsl_Component.X,hxsl_Component.X])];
		}
		if(this.format == h3d_mat_Texture.nativeFormat) {
			return [hxsl_Output.PackFloat(hxsl_Output.Value("output.depth"))];
		}
		return [hxsl_Output.Swiz(hxsl_Output.Value("output.depth",1),[hxsl_Component.X,hxsl_Component.X,hxsl_Component.X,hxsl_Component.X])];
	}
	,createDefaultShadowMap: function() {
		var tex = h3d_mat_Texture.fromColor(16777215);
		tex.name = "defaultShadowMap";
		return tex;
	}
	,syncShader: function(texture) {
	}
	,filterPasses: function(passes) {
		if(!this.ctx.computingStatic) {
			switch(this.mode._hx_index) {
			case 0:
				return false;
			case 1:
				var tmp;
				if(this.staticTexture != null) {
					var _this = this.staticTexture;
					tmp = _this.t == null && _this.realloc == null;
				} else {
					tmp = true;
				}
				if(tmp) {
					this.staticTexture = this.createDefaultShadowMap();
				}
				this.syncShader(this.staticTexture);
				return false;
			case 2:
				return true;
			case 3:
				var tmp;
				if(this.staticTexture != null) {
					var _this = this.staticTexture;
					tmp = _this.t == null && _this.realloc == null;
				} else {
					tmp = true;
				}
				if(tmp) {
					this.staticTexture = this.createDefaultShadowMap();
				}
				var head = null;
				var prev = null;
				var disc = passes.discarded;
				var discQueue = passes.lastDisc;
				var cur = passes.current;
				while(cur != null) {
					if(cur.pass.isStatic == false) {
						if(head == null) {
							prev = cur;
							head = prev;
						} else {
							prev.next = cur;
							prev = cur;
						}
					} else if(disc == null) {
						discQueue = cur;
						disc = discQueue;
					} else {
						discQueue.next = cur;
						discQueue = cur;
					}
					cur = cur.next;
				}
				if(prev != null) {
					prev.next = null;
				}
				if(discQueue != null) {
					discQueue.next = null;
				}
				passes.current = head;
				passes.discarded = disc;
				passes.lastDisc = discQueue;
				return true;
			}
		} else {
			switch(this.mode._hx_index) {
			case 0:
				return false;
			case 1:
				var head = null;
				var prev = null;
				var disc = passes.discarded;
				var discQueue = passes.lastDisc;
				var cur = passes.current;
				while(cur != null) {
					if(cur.pass.isStatic == true) {
						if(head == null) {
							prev = cur;
							head = prev;
						} else {
							prev.next = cur;
							prev = cur;
						}
					} else if(disc == null) {
						discQueue = cur;
						disc = discQueue;
					} else {
						discQueue.next = cur;
						discQueue = cur;
					}
					cur = cur.next;
				}
				if(prev != null) {
					prev.next = null;
				}
				if(discQueue != null) {
					discQueue.next = null;
				}
				passes.current = head;
				passes.discarded = disc;
				passes.lastDisc = discQueue;
				return true;
			case 2:
				return false;
			case 3:
				var head = null;
				var prev = null;
				var disc = passes.discarded;
				var discQueue = passes.lastDisc;
				var cur = passes.current;
				while(cur != null) {
					if(cur.pass.isStatic == true) {
						if(head == null) {
							prev = cur;
							head = prev;
						} else {
							prev.next = cur;
							prev = cur;
						}
					} else if(disc == null) {
						discQueue = cur;
						disc = discQueue;
					} else {
						discQueue.next = cur;
						discQueue = cur;
					}
					cur = cur.next;
				}
				if(prev != null) {
					prev.next = null;
				}
				if(discQueue != null) {
					discQueue.next = null;
				}
				passes.current = head;
				passes.discarded = disc;
				passes.lastDisc = discQueue;
				return true;
			}
		}
	}
	,__class__: h3d_pass_Shadows
});
var h3d_pass_DirShadowMap = function(light) {
	this.minDist = -1.0;
	this.maxDist = -1.0;
	this.autoZPlanes = false;
	this.autoShrink = true;
	this.mergePass = new h3d_pass_ScreenFx(new h3d_shader_MinMaxShader());
	h3d_pass_Shadows.call(this,light);
	this.lightCamera = new h3d_Camera();
	this.lightCamera.orthoBounds = new h3d_col_Bounds();
	this.shader = this.dshader = new h3d_shader_DirShadow();
	this.border = new h3d_pass_Border(this.size,this.size);
	this.customDepth = h3d_Engine.CURRENT.driver.hasFeature(h3d_impl_Feature.AllocDepthBuffer);
	if(!this.customDepth) {
		this.depth = h3d_mat_DepthBuffer.getDefault();
	}
};
$hxClasses["h3d.pass.DirShadowMap"] = h3d_pass_DirShadowMap;
h3d_pass_DirShadowMap.__name__ = "h3d.pass.DirShadowMap";
h3d_pass_DirShadowMap.__super__ = h3d_pass_Shadows;
h3d_pass_DirShadowMap.prototype = $extend(h3d_pass_Shadows.prototype,{
	set_mode: function(m) {
		var _this = this.dshader;
		_this.constModified = true;
		_this.enable__ = m != h3d_pass_RenderMode.None;
		return this.mode = m;
	}
	,set_size: function(s) {
		if(this.border != null && this.size != s) {
			this.border.dispose();
			this.border = new h3d_pass_Border(s,s);
		}
		return h3d_pass_Shadows.prototype.set_size.call(this,s);
	}
	,calcShadowBounds: function(camera) {
		var _gthis = this;
		var bounds = camera.orthoBounds;
		var zMax = -1e9;
		var zMin = 1e9;
		if(this.autoShrink) {
			var mtmp = new h3d_Matrix();
			var btmp = this.autoZPlanes ? new h3d_col_Bounds() : null;
			var obj = this.boundingObject != null ? this.boundingObject : this.ctx.scene;
			obj.iterVisibleMeshes(function(m) {
				if(m.primitive == null || !m.material.castShadows) {
					return;
				}
				var b = m.primitive.getBounds();
				if(b.xMin > b.xMax) {
					return;
				}
				var absPos = ((m.primitive) instanceof h3d_prim_Instanced) ? h3d_Matrix.I() : m.getAbsPos();
				if(_gthis.autoZPlanes) {
					btmp.load(b);
					btmp.transform(absPos);
					if(btmp.zMax > zMax) {
						zMax = btmp.zMax;
					}
					if(btmp.zMin < zMin) {
						zMin = btmp.zMin;
					}
				}
				mtmp.multiply3x4(absPos,camera.mcam);
				var x = b.xMin;
				var y = b.yMin;
				var z = b.zMin;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var p_x = x;
				var p_y = y;
				var p_z = z;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
				var x = b.xMin;
				var y = b.yMin;
				var z = b.zMax;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var p_x = x;
				var p_y = y;
				var p_z = z;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
				var x = b.xMin;
				var y = b.yMax;
				var z = b.zMin;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var p_x = x;
				var p_y = y;
				var p_z = z;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
				var x = b.xMin;
				var y = b.yMax;
				var z = b.zMax;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var p_x = x;
				var p_y = y;
				var p_z = z;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
				var x = b.xMax;
				var y = b.yMin;
				var z = b.zMin;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var p_x = x;
				var p_y = y;
				var p_z = z;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
				var x = b.xMax;
				var y = b.yMin;
				var z = b.zMax;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var p_x = x;
				var p_y = y;
				var p_z = z;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
				var x = b.xMax;
				var y = b.yMax;
				var z = b.zMin;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var p_x = x;
				var p_y = y;
				var p_z = z;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
				var x = b.xMax;
				var y = b.yMax;
				var z = b.zMax;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var p_x = x;
				var p_y = y;
				var p_z = z;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
			});
		} else if(this.mode == h3d_pass_RenderMode.Dynamic) {
			bounds.xMin = -1e20;
			bounds.xMax = 1e20;
			bounds.yMin = -1e20;
			bounds.yMax = 1e20;
			bounds.zMin = -1e20;
			bounds.zMax = 1e20;
		}
		if(this.mode == h3d_pass_RenderMode.Dynamic) {
			var cameraBounds = new h3d_col_Bounds();
			var minDist = this.minDist < 0 ? this.ctx.camera.zNear : this.minDist;
			var maxDist = this.maxDist < 0 ? this.ctx.camera.zFar : this.maxDist;
			var dist = minDist;
			var _this = _gthis.ctx.camera.unproject(-1,-1,_gthis.ctx.camera.distanceToDepth(dist));
			var x = _this.x;
			var y = _this.y;
			var z = _this.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var pt_x = x;
			var pt_y = y;
			var pt_z = z;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				var _this = _gthis.ctx.camera.pos;
				var x = _this.x;
				var y = _this.y;
				var z = _this.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var p1_x = x;
				var p1_y = y;
				var p1_z = z;
				var r = new h3d_col_Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = pt_x - p1_x;
				r.ly = pt_y - p1_y;
				r.lz = pt_z - p1_z;
				r.normalize();
				var r1 = r;
				var v = zMax;
				if(v == null) {
					v = 0.0;
				}
				var p_nx = 0;
				var p_ny = 0;
				var p_nz = 1;
				var p_d = v;
				var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				var d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				var k = 1;
				if(d2 > 0 && d2 * k > dist * k) {
					var x = r1.px + d2 * r1.lx;
					var y = r1.py + d2 * r1.ly;
					var z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var p_x = x;
					var p_y = y;
					var p_z = z;
					pt_x = p_x;
					pt_y = p_y;
					pt_z = p_z;
				}
			}
			var m = camera.mcam;
			var px = pt_x * m._11 + pt_y * m._21 + pt_z * m._31 + m._41;
			var py = pt_x * m._12 + pt_y * m._22 + pt_z * m._32 + m._42;
			var pz = pt_x * m._13 + pt_y * m._23 + pt_z * m._33 + m._43;
			pt_x = px;
			pt_y = py;
			pt_z = pz;
			var x = pt_x;
			var y = pt_y;
			var z = pt_z;
			if(x < cameraBounds.xMin) {
				cameraBounds.xMin = x;
			}
			if(x > cameraBounds.xMax) {
				cameraBounds.xMax = x;
			}
			if(y < cameraBounds.yMin) {
				cameraBounds.yMin = y;
			}
			if(y > cameraBounds.yMax) {
				cameraBounds.yMax = y;
			}
			if(z < cameraBounds.zMin) {
				cameraBounds.zMin = z;
			}
			if(z > cameraBounds.zMax) {
				cameraBounds.zMax = z;
			}
			var dist = minDist;
			var _this = _gthis.ctx.camera.unproject(-1,1,_gthis.ctx.camera.distanceToDepth(dist));
			var x = _this.x;
			var y = _this.y;
			var z = _this.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var pt_x = x;
			var pt_y = y;
			var pt_z = z;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				var _this = _gthis.ctx.camera.pos;
				var x = _this.x;
				var y = _this.y;
				var z = _this.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var p1_x = x;
				var p1_y = y;
				var p1_z = z;
				var r = new h3d_col_Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = pt_x - p1_x;
				r.ly = pt_y - p1_y;
				r.lz = pt_z - p1_z;
				r.normalize();
				var r1 = r;
				var v = zMax;
				if(v == null) {
					v = 0.0;
				}
				var p_nx = 0;
				var p_ny = 0;
				var p_nz = 1;
				var p_d = v;
				var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				var d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				var k = 1;
				if(d2 > 0 && d2 * k > dist * k) {
					var x = r1.px + d2 * r1.lx;
					var y = r1.py + d2 * r1.ly;
					var z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var p_x = x;
					var p_y = y;
					var p_z = z;
					pt_x = p_x;
					pt_y = p_y;
					pt_z = p_z;
				}
			}
			var m = camera.mcam;
			var px = pt_x * m._11 + pt_y * m._21 + pt_z * m._31 + m._41;
			var py = pt_x * m._12 + pt_y * m._22 + pt_z * m._32 + m._42;
			var pz = pt_x * m._13 + pt_y * m._23 + pt_z * m._33 + m._43;
			pt_x = px;
			pt_y = py;
			pt_z = pz;
			var x = pt_x;
			var y = pt_y;
			var z = pt_z;
			if(x < cameraBounds.xMin) {
				cameraBounds.xMin = x;
			}
			if(x > cameraBounds.xMax) {
				cameraBounds.xMax = x;
			}
			if(y < cameraBounds.yMin) {
				cameraBounds.yMin = y;
			}
			if(y > cameraBounds.yMax) {
				cameraBounds.yMax = y;
			}
			if(z < cameraBounds.zMin) {
				cameraBounds.zMin = z;
			}
			if(z > cameraBounds.zMax) {
				cameraBounds.zMax = z;
			}
			var dist = minDist;
			var _this = _gthis.ctx.camera.unproject(1,-1,_gthis.ctx.camera.distanceToDepth(dist));
			var x = _this.x;
			var y = _this.y;
			var z = _this.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var pt_x = x;
			var pt_y = y;
			var pt_z = z;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				var _this = _gthis.ctx.camera.pos;
				var x = _this.x;
				var y = _this.y;
				var z = _this.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var p1_x = x;
				var p1_y = y;
				var p1_z = z;
				var r = new h3d_col_Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = pt_x - p1_x;
				r.ly = pt_y - p1_y;
				r.lz = pt_z - p1_z;
				r.normalize();
				var r1 = r;
				var v = zMax;
				if(v == null) {
					v = 0.0;
				}
				var p_nx = 0;
				var p_ny = 0;
				var p_nz = 1;
				var p_d = v;
				var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				var d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				var k = 1;
				if(d2 > 0 && d2 * k > dist * k) {
					var x = r1.px + d2 * r1.lx;
					var y = r1.py + d2 * r1.ly;
					var z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var p_x = x;
					var p_y = y;
					var p_z = z;
					pt_x = p_x;
					pt_y = p_y;
					pt_z = p_z;
				}
			}
			var m = camera.mcam;
			var px = pt_x * m._11 + pt_y * m._21 + pt_z * m._31 + m._41;
			var py = pt_x * m._12 + pt_y * m._22 + pt_z * m._32 + m._42;
			var pz = pt_x * m._13 + pt_y * m._23 + pt_z * m._33 + m._43;
			pt_x = px;
			pt_y = py;
			pt_z = pz;
			var x = pt_x;
			var y = pt_y;
			var z = pt_z;
			if(x < cameraBounds.xMin) {
				cameraBounds.xMin = x;
			}
			if(x > cameraBounds.xMax) {
				cameraBounds.xMax = x;
			}
			if(y < cameraBounds.yMin) {
				cameraBounds.yMin = y;
			}
			if(y > cameraBounds.yMax) {
				cameraBounds.yMax = y;
			}
			if(z < cameraBounds.zMin) {
				cameraBounds.zMin = z;
			}
			if(z > cameraBounds.zMax) {
				cameraBounds.zMax = z;
			}
			var dist = minDist;
			var _this = _gthis.ctx.camera.unproject(1,1,_gthis.ctx.camera.distanceToDepth(dist));
			var x = _this.x;
			var y = _this.y;
			var z = _this.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var pt_x = x;
			var pt_y = y;
			var pt_z = z;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				var _this = _gthis.ctx.camera.pos;
				var x = _this.x;
				var y = _this.y;
				var z = _this.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var p1_x = x;
				var p1_y = y;
				var p1_z = z;
				var r = new h3d_col_Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = pt_x - p1_x;
				r.ly = pt_y - p1_y;
				r.lz = pt_z - p1_z;
				r.normalize();
				var r1 = r;
				var v = zMax;
				if(v == null) {
					v = 0.0;
				}
				var p_nx = 0;
				var p_ny = 0;
				var p_nz = 1;
				var p_d = v;
				var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				var d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				var k = 1;
				if(d2 > 0 && d2 * k > dist * k) {
					var x = r1.px + d2 * r1.lx;
					var y = r1.py + d2 * r1.ly;
					var z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var p_x = x;
					var p_y = y;
					var p_z = z;
					pt_x = p_x;
					pt_y = p_y;
					pt_z = p_z;
				}
			}
			var m = camera.mcam;
			var px = pt_x * m._11 + pt_y * m._21 + pt_z * m._31 + m._41;
			var py = pt_x * m._12 + pt_y * m._22 + pt_z * m._32 + m._42;
			var pz = pt_x * m._13 + pt_y * m._23 + pt_z * m._33 + m._43;
			pt_x = px;
			pt_y = py;
			pt_z = pz;
			var x = pt_x;
			var y = pt_y;
			var z = pt_z;
			if(x < cameraBounds.xMin) {
				cameraBounds.xMin = x;
			}
			if(x > cameraBounds.xMax) {
				cameraBounds.xMax = x;
			}
			if(y < cameraBounds.yMin) {
				cameraBounds.yMin = y;
			}
			if(y > cameraBounds.yMax) {
				cameraBounds.yMax = y;
			}
			if(z < cameraBounds.zMin) {
				cameraBounds.zMin = z;
			}
			if(z > cameraBounds.zMax) {
				cameraBounds.zMax = z;
			}
			var dist = maxDist;
			var _this = _gthis.ctx.camera.unproject(-1,-1,_gthis.ctx.camera.distanceToDepth(dist));
			var x = _this.x;
			var y = _this.y;
			var z = _this.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var pt_x = x;
			var pt_y = y;
			var pt_z = z;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				var _this = _gthis.ctx.camera.pos;
				var x = _this.x;
				var y = _this.y;
				var z = _this.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var p1_x = x;
				var p1_y = y;
				var p1_z = z;
				var r = new h3d_col_Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = pt_x - p1_x;
				r.ly = pt_y - p1_y;
				r.lz = pt_z - p1_z;
				r.normalize();
				var r1 = r;
				var v = zMin;
				if(v == null) {
					v = 0.0;
				}
				var p_nx = 0;
				var p_ny = 0;
				var p_nz = 1;
				var p_d = v;
				var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				var d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				var k = -1;
				if(d2 > 0 && d2 * k > dist * k) {
					var x = r1.px + d2 * r1.lx;
					var y = r1.py + d2 * r1.ly;
					var z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var p_x = x;
					var p_y = y;
					var p_z = z;
					pt_x = p_x;
					pt_y = p_y;
					pt_z = p_z;
				}
			}
			var m = camera.mcam;
			var px = pt_x * m._11 + pt_y * m._21 + pt_z * m._31 + m._41;
			var py = pt_x * m._12 + pt_y * m._22 + pt_z * m._32 + m._42;
			var pz = pt_x * m._13 + pt_y * m._23 + pt_z * m._33 + m._43;
			pt_x = px;
			pt_y = py;
			pt_z = pz;
			var x = pt_x;
			var y = pt_y;
			var z = pt_z;
			if(x < cameraBounds.xMin) {
				cameraBounds.xMin = x;
			}
			if(x > cameraBounds.xMax) {
				cameraBounds.xMax = x;
			}
			if(y < cameraBounds.yMin) {
				cameraBounds.yMin = y;
			}
			if(y > cameraBounds.yMax) {
				cameraBounds.yMax = y;
			}
			if(z < cameraBounds.zMin) {
				cameraBounds.zMin = z;
			}
			if(z > cameraBounds.zMax) {
				cameraBounds.zMax = z;
			}
			var dist = maxDist;
			var _this = _gthis.ctx.camera.unproject(-1,1,_gthis.ctx.camera.distanceToDepth(dist));
			var x = _this.x;
			var y = _this.y;
			var z = _this.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var pt_x = x;
			var pt_y = y;
			var pt_z = z;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				var _this = _gthis.ctx.camera.pos;
				var x = _this.x;
				var y = _this.y;
				var z = _this.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var p1_x = x;
				var p1_y = y;
				var p1_z = z;
				var r = new h3d_col_Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = pt_x - p1_x;
				r.ly = pt_y - p1_y;
				r.lz = pt_z - p1_z;
				r.normalize();
				var r1 = r;
				var v = zMin;
				if(v == null) {
					v = 0.0;
				}
				var p_nx = 0;
				var p_ny = 0;
				var p_nz = 1;
				var p_d = v;
				var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				var d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				var k = -1;
				if(d2 > 0 && d2 * k > dist * k) {
					var x = r1.px + d2 * r1.lx;
					var y = r1.py + d2 * r1.ly;
					var z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var p_x = x;
					var p_y = y;
					var p_z = z;
					pt_x = p_x;
					pt_y = p_y;
					pt_z = p_z;
				}
			}
			var m = camera.mcam;
			var px = pt_x * m._11 + pt_y * m._21 + pt_z * m._31 + m._41;
			var py = pt_x * m._12 + pt_y * m._22 + pt_z * m._32 + m._42;
			var pz = pt_x * m._13 + pt_y * m._23 + pt_z * m._33 + m._43;
			pt_x = px;
			pt_y = py;
			pt_z = pz;
			var x = pt_x;
			var y = pt_y;
			var z = pt_z;
			if(x < cameraBounds.xMin) {
				cameraBounds.xMin = x;
			}
			if(x > cameraBounds.xMax) {
				cameraBounds.xMax = x;
			}
			if(y < cameraBounds.yMin) {
				cameraBounds.yMin = y;
			}
			if(y > cameraBounds.yMax) {
				cameraBounds.yMax = y;
			}
			if(z < cameraBounds.zMin) {
				cameraBounds.zMin = z;
			}
			if(z > cameraBounds.zMax) {
				cameraBounds.zMax = z;
			}
			var dist = maxDist;
			var _this = _gthis.ctx.camera.unproject(1,-1,_gthis.ctx.camera.distanceToDepth(dist));
			var x = _this.x;
			var y = _this.y;
			var z = _this.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var pt_x = x;
			var pt_y = y;
			var pt_z = z;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				var _this = _gthis.ctx.camera.pos;
				var x = _this.x;
				var y = _this.y;
				var z = _this.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var p1_x = x;
				var p1_y = y;
				var p1_z = z;
				var r = new h3d_col_Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = pt_x - p1_x;
				r.ly = pt_y - p1_y;
				r.lz = pt_z - p1_z;
				r.normalize();
				var r1 = r;
				var v = zMin;
				if(v == null) {
					v = 0.0;
				}
				var p_nx = 0;
				var p_ny = 0;
				var p_nz = 1;
				var p_d = v;
				var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				var d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				var k = -1;
				if(d2 > 0 && d2 * k > dist * k) {
					var x = r1.px + d2 * r1.lx;
					var y = r1.py + d2 * r1.ly;
					var z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var p_x = x;
					var p_y = y;
					var p_z = z;
					pt_x = p_x;
					pt_y = p_y;
					pt_z = p_z;
				}
			}
			var m = camera.mcam;
			var px = pt_x * m._11 + pt_y * m._21 + pt_z * m._31 + m._41;
			var py = pt_x * m._12 + pt_y * m._22 + pt_z * m._32 + m._42;
			var pz = pt_x * m._13 + pt_y * m._23 + pt_z * m._33 + m._43;
			pt_x = px;
			pt_y = py;
			pt_z = pz;
			var x = pt_x;
			var y = pt_y;
			var z = pt_z;
			if(x < cameraBounds.xMin) {
				cameraBounds.xMin = x;
			}
			if(x > cameraBounds.xMax) {
				cameraBounds.xMax = x;
			}
			if(y < cameraBounds.yMin) {
				cameraBounds.yMin = y;
			}
			if(y > cameraBounds.yMax) {
				cameraBounds.yMax = y;
			}
			if(z < cameraBounds.zMin) {
				cameraBounds.zMin = z;
			}
			if(z > cameraBounds.zMax) {
				cameraBounds.zMax = z;
			}
			var dist = maxDist;
			var _this = _gthis.ctx.camera.unproject(1,1,_gthis.ctx.camera.distanceToDepth(dist));
			var x = _this.x;
			var y = _this.y;
			var z = _this.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var pt_x = x;
			var pt_y = y;
			var pt_z = z;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				var _this = _gthis.ctx.camera.pos;
				var x = _this.x;
				var y = _this.y;
				var z = _this.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var p1_x = x;
				var p1_y = y;
				var p1_z = z;
				var r = new h3d_col_Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = pt_x - p1_x;
				r.ly = pt_y - p1_y;
				r.lz = pt_z - p1_z;
				r.normalize();
				var r1 = r;
				var v = zMin;
				if(v == null) {
					v = 0.0;
				}
				var p_nx = 0;
				var p_ny = 0;
				var p_nz = 1;
				var p_d = v;
				var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				var d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				var k = -1;
				if(d2 > 0 && d2 * k > dist * k) {
					var x = r1.px + d2 * r1.lx;
					var y = r1.py + d2 * r1.ly;
					var z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var p_x = x;
					var p_y = y;
					var p_z = z;
					pt_x = p_x;
					pt_y = p_y;
					pt_z = p_z;
				}
			}
			var m = camera.mcam;
			var px = pt_x * m._11 + pt_y * m._21 + pt_z * m._31 + m._41;
			var py = pt_x * m._12 + pt_y * m._22 + pt_z * m._32 + m._42;
			var pz = pt_x * m._13 + pt_y * m._23 + pt_z * m._33 + m._43;
			pt_x = px;
			pt_y = py;
			pt_z = pz;
			var x = pt_x;
			var y = pt_y;
			var z = pt_z;
			if(x < cameraBounds.xMin) {
				cameraBounds.xMin = x;
			}
			if(x > cameraBounds.xMax) {
				cameraBounds.xMax = x;
			}
			if(y < cameraBounds.yMin) {
				cameraBounds.yMin = y;
			}
			if(y > cameraBounds.yMax) {
				cameraBounds.yMax = y;
			}
			if(z < cameraBounds.zMin) {
				cameraBounds.zMin = z;
			}
			if(z > cameraBounds.zMax) {
				cameraBounds.zMax = z;
			}
			if(this.autoShrink) {
				cameraBounds.zMin = bounds.zMin;
				bounds.intersection(bounds,cameraBounds);
				if(this.autoZPlanes) {
					var _this = camera.target;
					var v = camera.pos;
					var x = _this.x - v.x;
					var y = _this.y - v.y;
					var z = _this.z - v.z;
					var w = _this.w - v.w;
					if(w == null) {
						w = 1.;
					}
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var _this_x = x;
					var _this_y = y;
					var _this_z = z;
					var _this_w = w;
					var k = _this_x * _this_x + _this_y * _this_y + _this_z * _this_z;
					if(k < 1e-10) {
						k = 0;
					} else {
						k = 1. / Math.sqrt(k);
					}
					var x = _this_x * k;
					var y = _this_y * k;
					var z = _this_z * k;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var v_x = x;
					var v_y = y;
					var v_z = z;
					var v_w = 1.;
					var dMin = 1e9;
					var px = bounds.xMin;
					var py = bounds.yMin;
					var x = px;
					var y = py;
					var z = bounds.zMin;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var _this_x = x;
					var _this_y = y;
					var _this_z = z;
					var m = camera.getInverseView();
					var px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
					var py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
					var pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
					var x = px;
					var y = py;
					var z = pz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var r0_x = x;
					var r0_y = y;
					var r0_z = z;
					var r = new h3d_col_Ray();
					r.px = r0_x;
					r.py = r0_y;
					r.pz = r0_z;
					r.lx = v_x;
					r.ly = v_y;
					r.lz = v_z;
					r.normalize();
					var r1 = r;
					var v = zMax;
					if(v == null) {
						v = 0.0;
					}
					var p_nx = 0;
					var p_ny = 0;
					var p_nz = 1;
					var p_d = v;
					var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
					var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
					var d1 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
					if(d1 < dMin) {
						dMin = d1;
					}
					var px = bounds.xMin;
					var py = bounds.yMax;
					var x = px;
					var y = py;
					var z = bounds.zMin;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var _this_x = x;
					var _this_y = y;
					var _this_z = z;
					var m = camera.getInverseView();
					var px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
					var py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
					var pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
					var x = px;
					var y = py;
					var z = pz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var r0_x = x;
					var r0_y = y;
					var r0_z = z;
					var r = new h3d_col_Ray();
					r.px = r0_x;
					r.py = r0_y;
					r.pz = r0_z;
					r.lx = v_x;
					r.ly = v_y;
					r.lz = v_z;
					r.normalize();
					var r1 = r;
					var v = zMax;
					if(v == null) {
						v = 0.0;
					}
					var p_nx = 0;
					var p_ny = 0;
					var p_nz = 1;
					var p_d = v;
					var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
					var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
					var d1 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
					if(d1 < dMin) {
						dMin = d1;
					}
					var px = bounds.xMax;
					var py = bounds.yMin;
					var x = px;
					var y = py;
					var z = bounds.zMin;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var _this_x = x;
					var _this_y = y;
					var _this_z = z;
					var m = camera.getInverseView();
					var px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
					var py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
					var pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
					var x = px;
					var y = py;
					var z = pz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var r0_x = x;
					var r0_y = y;
					var r0_z = z;
					var r = new h3d_col_Ray();
					r.px = r0_x;
					r.py = r0_y;
					r.pz = r0_z;
					r.lx = v_x;
					r.ly = v_y;
					r.lz = v_z;
					r.normalize();
					var r1 = r;
					var v = zMax;
					if(v == null) {
						v = 0.0;
					}
					var p_nx = 0;
					var p_ny = 0;
					var p_nz = 1;
					var p_d = v;
					var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
					var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
					var d1 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
					if(d1 < dMin) {
						dMin = d1;
					}
					var px = bounds.xMax;
					var py = bounds.yMax;
					var x = px;
					var y = py;
					var z = bounds.zMin;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var _this_x = x;
					var _this_y = y;
					var _this_z = z;
					var m = camera.getInverseView();
					var px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
					var py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
					var pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
					var x = px;
					var y = py;
					var z = pz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var r0_x = x;
					var r0_y = y;
					var r0_z = z;
					var r = new h3d_col_Ray();
					r.px = r0_x;
					r.py = r0_y;
					r.pz = r0_z;
					r.lx = v_x;
					r.ly = v_y;
					r.lz = v_z;
					r.normalize();
					var r1 = r;
					var v = zMax;
					if(v == null) {
						v = 0.0;
					}
					var p_nx = 0;
					var p_ny = 0;
					var p_nz = 1;
					var p_d = v;
					var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
					var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
					var d1 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
					if(d1 < dMin) {
						dMin = d1;
					}
					bounds.zMin += dMin;
				}
			} else {
				bounds.load(cameraBounds);
			}
		}
		bounds.scaleCenter(1.01);
	}
	,setGlobals: function() {
		h3d_pass_Shadows.prototype.setGlobals.call(this);
		var v = this.getShadowProj();
		this.manager.globals.map.h[this.cameraViewProj_id] = v;
	}
	,syncShader: function(texture) {
		var _this = this.dshader;
		_this.constModified = true;
		_this.shadowMap__ = texture;
		var _this = this.dshader;
		_this.constModified = true;
		_this.shadowMapChannel__ = this.format == h3d_mat_Texture.nativeFormat ? hxsl_Channel.PackedFloat : hxsl_Channel.R;
		this.dshader.shadowBias__ = this.bias;
		this.dshader.shadowPower__ = this.power;
		this.dshader.shadowProj__ = this.getShadowProj();
		var _this = this.dshader;
		_this.constModified = true;
		_this.USE_ESM__ = this.samplingKind == h3d_pass_ShadowSamplingKind.ESM;
		this.dshader.shadowPower__ = this.power;
		var _this = this.dshader;
		_this.constModified = true;
		_this.USE_PCF__ = this.samplingKind == h3d_pass_ShadowSamplingKind.PCF;
		var _this = this.dshader.shadowRes__;
		var x = texture.width;
		var y = texture.height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		_this.w = 1.;
		this.dshader.pcfScale__ = this.pcfScale;
		this.dshader.set_pcfQuality(this.pcfQuality);
	}
	,draw: function(passes,sort) {
		var _gthis = this;
		if(!this.enabled) {
			return;
		}
		if(!this.filterPasses(passes)) {
			return;
		}
		if(this.mode != h3d_pass_RenderMode.Mixed || this.ctx.computingStatic) {
			var _this = this.lightCamera.orthoBounds;
			_this.xMin = 1e20;
			_this.xMax = -1e20;
			_this.yMin = 1e20;
			_this.yMax = -1e20;
			_this.zMin = 1e20;
			_this.zMax = -1e20;
			if(passes.current != null) {
				this.calcShadowBounds(this.lightCamera);
			}
			this.lightCamera.update();
		}
		var f = function(col) {
			return col.inFrustum(_gthis.lightCamera.frustum);
		};
		var prevCollider = null;
		var prevResult = true;
		var head = null;
		var prev = null;
		var disc = passes.discarded;
		var discQueue = passes.lastDisc;
		var cur = passes.current;
		while(cur != null) {
			var col = cur.obj.cullingCollider;
			var tmp;
			if(col == null) {
				tmp = true;
			} else {
				if(col != prevCollider) {
					prevCollider = col;
					prevResult = f(col);
				}
				tmp = prevResult;
			}
			if(tmp) {
				if(head == null) {
					prev = cur;
					head = prev;
				} else {
					prev.next = cur;
					prev = cur;
				}
			} else if(disc == null) {
				discQueue = cur;
				disc = discQueue;
			} else {
				discQueue.next = cur;
				discQueue = cur;
			}
			cur = cur.next;
		}
		if(prev != null) {
			prev.next = null;
		}
		if(discQueue != null) {
			discQueue.next = null;
		}
		passes.current = head;
		passes.discarded = disc;
		passes.lastDisc = discQueue;
		var texture = this.ctx.textures.allocTarget("dirShadowMap",this.size,this.size,false,this.format);
		if(this.customDepth && (this.depth == null || this.depth.width != this.size || this.depth.height != this.size || this.depth.isDisposed())) {
			if(this.depth != null) {
				this.depth.dispose();
			}
			this.depth = new h3d_mat_DepthBuffer(this.size,this.size);
		}
		texture.depthBuffer = this.depth;
		if(this.mode != h3d_pass_RenderMode.Mixed || this.ctx.computingStatic) {
			var ct = this.ctx.camera.target;
			var slight = this.light == null ? this.ctx.lightSystem.shadowLight : this.light;
			var ldir = slight == null ? null : slight.getShadowDirection();
			if(ldir == null) {
				var _this = this.lightCamera.target;
				var x = 0;
				var y = 0;
				var z = -1;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				_this.x = x;
				_this.y = y;
				_this.z = z;
				_this.w = 1.;
			} else {
				var _this = this.lightCamera.target;
				var x = ldir.x;
				var y = ldir.y;
				var z = ldir.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				_this.x = x;
				_this.y = y;
				_this.z = z;
				_this.w = 1.;
				var _this = this.lightCamera.target;
				var k = _this.x * _this.x + _this.y * _this.y + _this.z * _this.z;
				if(k < 1e-10) {
					k = 0;
				} else {
					k = 1. / Math.sqrt(k);
				}
				_this.x *= k;
				_this.y *= k;
				_this.z *= k;
			}
			this.lightCamera.target.x += ct.x;
			this.lightCamera.target.y += ct.y;
			this.lightCamera.target.z += ct.z;
			var _this = this.lightCamera.pos;
			_this.x = ct.x;
			_this.y = ct.y;
			_this.z = ct.z;
			_this.w = ct.w;
			this.lightCamera.update();
		}
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(16777215,1);
		h3d_pass_Shadows.prototype.draw.call(this,passes,sort);
		var doBlur = this.blur.radius > 0 && (this.mode != h3d_pass_RenderMode.Mixed || !this.ctx.computingStatic);
		if(this.border != null && !doBlur) {
			this.border.render();
		}
		this.ctx.engine.popTarget();
		if(this.mode == h3d_pass_RenderMode.Mixed && !this.ctx.computingStatic) {
			var merge = this.ctx.textures.allocTarget("mergedDirShadowMap",this.size,this.size,false,this.format);
			this.mergePass.shader.texA__ = texture;
			this.mergePass.shader.texB__ = this.staticTexture;
			this.ctx.engine.pushTarget(merge);
			this.mergePass.render();
			this.ctx.engine.popTarget();
			texture = merge;
		}
		if(doBlur) {
			this.blur.apply(this.ctx,texture);
			if(this.border != null) {
				this.ctx.engine.pushTarget(texture);
				this.border.render();
				this.ctx.engine.popTarget();
			}
		}
		this.syncShader(texture);
	}
	,__class__: h3d_pass_DirShadowMap
});
var h3d_pass_DefaultShadowMap = function(size,format) {
	if(size == null) {
		size = 1024;
	}
	if(format != null) {
		this.format = format;
	}
	h3d_pass_DirShadowMap.call(this,null);
	this.set_size(size);
	this.color = new h3d_Vector();
	this.set_mode(h3d_pass_RenderMode.Dynamic);
	this.shadowMapId = hxsl_Globals.allocID("shadow.map");
	this.shadowProjId = hxsl_Globals.allocID("shadow.proj");
	this.shadowColorId = hxsl_Globals.allocID("shadow.color");
	this.shadowPowerId = hxsl_Globals.allocID("shadow.power");
	this.shadowBiasId = hxsl_Globals.allocID("shadow.bias");
};
$hxClasses["h3d.pass.DefaultShadowMap"] = h3d_pass_DefaultShadowMap;
h3d_pass_DefaultShadowMap.__name__ = "h3d.pass.DefaultShadowMap";
h3d_pass_DefaultShadowMap.__super__ = h3d_pass_DirShadowMap;
h3d_pass_DefaultShadowMap.prototype = $extend(h3d_pass_DirShadowMap.prototype,{
	draw: function(passes,sort) {
		h3d_pass_DirShadowMap.prototype.draw.call(this,passes,sort);
		this.ctx.setGlobalID(this.shadowMapId,{ texture : this.dshader.shadowMap__, channel : this.format == h3d_mat_Texture.nativeFormat ? hxsl_Channel.PackedFloat : hxsl_Channel.R});
		this.ctx.setGlobalID(this.shadowProjId,this.getShadowProj());
		this.ctx.setGlobalID(this.shadowColorId,this.color);
		this.ctx.setGlobalID(this.shadowPowerId,this.power);
		this.ctx.setGlobalID(this.shadowBiasId,this.bias);
	}
	,__class__: h3d_pass_DefaultShadowMap
});
var h3d_pass__$HardwarePick_FixedColor = function() {
	this.viewport__ = new h3d_Vector();
	this.colorID__ = new h3d_Vector();
	hxsl_Shader.call(this);
};
$hxClasses["h3d.pass._HardwarePick.FixedColor"] = h3d_pass__$HardwarePick_FixedColor;
h3d_pass__$HardwarePick_FixedColor.__name__ = "h3d.pass._HardwarePick.FixedColor";
h3d_pass__$HardwarePick_FixedColor.__super__ = hxsl_Shader;
h3d_pass__$HardwarePick_FixedColor.prototype = $extend(hxsl_Shader.prototype,{
	get_colorID: function() {
		return this.colorID__;
	}
	,set_colorID: function(_v) {
		return this.colorID__ = _v;
	}
	,get_viewport: function() {
		return this.viewport__;
	}
	,set_viewport: function(_v) {
		return this.viewport__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.colorID__;
		case 1:
			return this.viewport__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_pass__$HardwarePick_FixedColor
});
var h3d_pass_PassList = function(current) {
	this.current = current;
	this.discarded = this.lastDisc = null;
};
$hxClasses["h3d.pass.PassList"] = h3d_pass_PassList;
h3d_pass_PassList.__name__ = "h3d.pass.PassList";
h3d_pass_PassList.prototype = {
	__class__: h3d_pass_PassList
};
var h3d_pass_PassObject = function() {
	this.texture = 0;
};
$hxClasses["h3d.pass.PassObject"] = h3d_pass_PassObject;
h3d_pass_PassObject.__name__ = "h3d.pass.PassObject";
h3d_pass_PassObject.prototype = {
	__class__: h3d_pass_PassObject
};
var h3d_pass_ShaderManager = function(output) {
	this.shaderCache = hxsl_Cache.get();
	this.globals = new hxsl_Globals();
	this.currentOutput = new hxsl_ShaderList(null);
	this.setOutput(output);
};
$hxClasses["h3d.pass.ShaderManager"] = h3d_pass_ShaderManager;
h3d_pass_ShaderManager.__name__ = "h3d.pass.ShaderManager";
h3d_pass_ShaderManager.prototype = {
	setOutput: function(output) {
		if(output == null) {
			output = [hxsl_Output.Value("output.color")];
		}
		this.currentOutput.s = this.shaderCache.getLinkShader(output);
	}
	,fillRec: function(v,type,out,pos) {
		switch(type._hx_index) {
		case 1:
			out[pos] = v;
			return 1;
		case 3:
			out[pos] = v;
			return 1;
		case 5:
			var _g = type.t;
			var n = type.size;
			var v1 = v;
			out[pos++] = v1.x;
			out[pos++] = v1.y;
			switch(n) {
			case 3:
				out[pos++] = v1.z;
				break;
			case 4:
				out[pos++] = v1.z;
				out[pos++] = v1.w;
				break;
			}
			return n;
		case 6:
			var m = v;
			out[pos++] = m._11;
			out[pos++] = m._21;
			out[pos++] = m._31;
			out[pos++] = 0;
			out[pos++] = m._12;
			out[pos++] = m._22;
			out[pos++] = m._32;
			out[pos++] = 0;
			out[pos++] = m._13;
			out[pos++] = m._23;
			out[pos++] = m._33;
			out[pos++] = 0;
			return 12;
		case 7:
			var m = v;
			out[pos++] = m._11;
			out[pos++] = m._21;
			out[pos++] = m._31;
			out[pos++] = m._41;
			out[pos++] = m._12;
			out[pos++] = m._22;
			out[pos++] = m._32;
			out[pos++] = m._42;
			out[pos++] = m._13;
			out[pos++] = m._23;
			out[pos++] = m._33;
			out[pos++] = m._43;
			out[pos++] = m._14;
			out[pos++] = m._24;
			out[pos++] = m._34;
			out[pos++] = m._44;
			return 16;
		case 8:
			var m = v;
			out[pos++] = m._11;
			out[pos++] = m._21;
			out[pos++] = m._31;
			out[pos++] = m._41;
			out[pos++] = m._12;
			out[pos++] = m._22;
			out[pos++] = m._32;
			out[pos++] = m._42;
			out[pos++] = m._13;
			out[pos++] = m._23;
			out[pos++] = m._33;
			out[pos++] = m._43;
			return 12;
		case 13:
			var vl = type.vl;
			var tot = 0;
			var _g = 0;
			while(_g < vl.length) {
				var vv = vl[_g];
				++_g;
				tot += this.fillRec(Reflect.field(v,vv.name),vv.type,out,pos + tot);
			}
			return tot;
		case 15:
			var _g = type.t;
			var _g1 = type.size;
			switch(_g._hx_index) {
			case 3:
				if(_g1._hx_index == 0) {
					var len = _g1.v;
					var v1 = v;
					var size = 0;
					var count = v1.length < len ? v1.length : len;
					var _g2 = 0;
					var _g3 = count;
					while(_g2 < _g3) {
						var i = _g2++;
						out[pos++] = v1[i];
					}
					return len;
				} else {
					throw haxe_Exception.thrown("assert " + Std.string(type));
				}
				break;
			case 5:
				if(_g.size == 4) {
					if(_g.t._hx_index == 1) {
						if(_g1._hx_index == 0) {
							var len = _g1.v;
							var v1 = v;
							var _g2 = 0;
							var _g3 = len;
							while(_g2 < _g3) {
								var i = _g2++;
								var n = v1[i];
								if(n == null) {
									break;
								}
								out[pos++] = n.x;
								out[pos++] = n.y;
								out[pos++] = n.z;
								out[pos++] = n.w;
							}
							return len * 4;
						} else {
							throw haxe_Exception.thrown("assert " + Std.string(type));
						}
					} else if(_g1._hx_index == 0) {
						var t = _g;
						var len = _g1.v;
						var v1 = v;
						var size = 0;
						var _g2 = 0;
						var _g3 = len;
						while(_g2 < _g3) {
							var i = _g2++;
							var n = v1[i];
							if(n == null) {
								break;
							}
							size = this.fillRec(n,t,out,pos);
							pos += size;
						}
						return len * size;
					} else {
						throw haxe_Exception.thrown("assert " + Std.string(type));
					}
				} else if(_g1._hx_index == 0) {
					var t = _g;
					var len = _g1.v;
					var v1 = v;
					var size = 0;
					var _g2 = 0;
					var _g3 = len;
					while(_g2 < _g3) {
						var i = _g2++;
						var n = v1[i];
						if(n == null) {
							break;
						}
						size = this.fillRec(n,t,out,pos);
						pos += size;
					}
					return len * size;
				} else {
					throw haxe_Exception.thrown("assert " + Std.string(type));
				}
				break;
			case 8:
				if(_g1._hx_index == 0) {
					var len = _g1.v;
					var v1 = v;
					var _g2 = 0;
					var _g3 = len;
					while(_g2 < _g3) {
						var i = _g2++;
						var m = v1[i];
						if(m == null) {
							break;
						}
						out[pos++] = m._11;
						out[pos++] = m._21;
						out[pos++] = m._31;
						out[pos++] = m._41;
						out[pos++] = m._12;
						out[pos++] = m._22;
						out[pos++] = m._32;
						out[pos++] = m._42;
						out[pos++] = m._13;
						out[pos++] = m._23;
						out[pos++] = m._33;
						out[pos++] = m._43;
					}
					return len * 12;
				} else {
					throw haxe_Exception.thrown("assert " + Std.string(type));
				}
				break;
			default:
				if(_g1._hx_index == 0) {
					var t = _g;
					var len = _g1.v;
					var v1 = v;
					var size = 0;
					var _g = 0;
					var _g1 = len;
					while(_g < _g1) {
						var i = _g++;
						var n = v1[i];
						if(n == null) {
							break;
						}
						size = this.fillRec(n,t,out,pos);
						pos += size;
					}
					return len * size;
				} else {
					throw haxe_Exception.thrown("assert " + Std.string(type));
				}
			}
			break;
		default:
			throw haxe_Exception.thrown("assert " + Std.string(type));
		}
	}
	,shaderInfo: function(shaders,path) {
		var name = path.split(".").pop();
		while(shaders != null) {
			var inst = shaders.s.instance;
			var _g = 0;
			var _g1 = inst.shader.vars;
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				if(v.name == name) {
					return shaders.s.toString();
				}
			}
			shaders = shaders.next;
		}
		return "(not found)";
	}
	,fillGlobals: function(buf,s) {
		var _gthis = this;
		var s1 = s.vertex;
		var g = s1.globals;
		var ptr = buf.vertex.globals;
		while(g != null) {
			var v = _gthis.globals.map.h[g.gid];
			if(v == null) {
				if(g.path == "__consts__") {
					_gthis.fillRec(s1.consts,g.type,ptr,g.pos);
					g = g.next;
					continue;
				}
				throw haxe_Exception.thrown("Missing global value " + g.path);
			}
			_gthis.fillRec(v,g.type,ptr,g.pos);
			g = g.next;
		}
		var s1 = s.fragment;
		var g = s1.globals;
		var ptr = buf.fragment.globals;
		while(g != null) {
			var v = _gthis.globals.map.h[g.gid];
			if(v == null) {
				if(g.path == "__consts__") {
					_gthis.fillRec(s1.consts,g.type,ptr,g.pos);
					g = g.next;
					continue;
				}
				throw haxe_Exception.thrown("Missing global value " + g.path);
			}
			_gthis.fillRec(v,g.type,ptr,g.pos);
			g = g.next;
		}
	}
	,fillParams: function(buf,s,shaders) {
		var _gthis = this;
		var curInstance = -1;
		var curInstanceValue = null;
		var buf1 = buf.vertex;
		var s1 = s.vertex;
		var p = s1.params;
		var ptr = buf1.params;
		while(p != null) {
			var v;
			if(p.perObjectGlobal == null) {
				if(p.type == hxsl_Type.TFloat) {
					var index = p.instance;
					var i;
					if(curInstance == index) {
						i = curInstanceValue;
					} else {
						var si = shaders;
						curInstance = index;
						while(--index > 0) si = si.next;
						curInstanceValue = si.s;
						i = curInstanceValue;
					}
					ptr[p.pos] = i.getParamFloatValue(p.index);
					p = p.next;
					continue;
				}
				var index1 = p.instance;
				var v1;
				if(curInstance == index1) {
					v1 = curInstanceValue;
				} else {
					var si1 = shaders;
					curInstance = index1;
					while(--index1 > 0) si1 = si1.next;
					curInstanceValue = si1.s;
					v1 = curInstanceValue;
				}
				v = v1.getParamValue(p.index);
				if(v == null) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(curInstanceValue) + "." + p.name);
				}
			} else if(p.perObjectGlobal != null) {
				var v2 = _gthis.globals.map.h[p.perObjectGlobal.gid];
				if(v2 == null) {
					throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
				}
				var _g = p.type;
				var v3;
				if(_g._hx_index == 17) {
					var _g1 = _g.size;
					v3 = true;
				} else {
					v3 = false;
				}
				v = v3 ? v2.texture : v2;
			} else {
				var index2 = p.instance;
				var v4;
				if(curInstance == index2) {
					v4 = curInstanceValue;
				} else {
					var si2 = shaders;
					curInstance = index2;
					while(--index2 > 0) si2 = si2.next;
					curInstanceValue = si2.s;
					v4 = curInstanceValue;
				}
				var v5 = v4.getParamValue(p.index);
				if(v5 == null) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(shaders.s) + "." + p.name);
				}
				v = v5;
			}
			_gthis.fillRec(v,p.type,ptr,p.pos);
			p = p.next;
		}
		var tid = 0;
		var p = s1.textures;
		while(p != null) {
			var opt = !h3d_pass_ShaderManager.STRICT;
			if(opt == null) {
				opt = false;
			}
			var t;
			if(p.perObjectGlobal != null) {
				var v = _gthis.globals.map.h[p.perObjectGlobal.gid];
				if(v == null) {
					throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
				}
				var _g = p.type;
				var t1;
				if(_g._hx_index == 17) {
					var _g1 = _g.size;
					t1 = true;
				} else {
					t1 = false;
				}
				t = t1 ? v.texture : v;
			} else {
				var index = p.instance;
				var v1;
				if(curInstance == index) {
					v1 = curInstanceValue;
				} else {
					var si = shaders;
					curInstance = index;
					while(--index > 0) si = si.next;
					curInstanceValue = si.s;
					v1 = curInstanceValue;
				}
				var v2 = v1.getParamValue(p.index);
				if(v2 == null && !opt) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(shaders.s) + "." + p.name);
				}
				t = v2;
			}
			if(p.pos < 0) {
				var arr = t;
				var _g2 = 0;
				var _g3 = -p.pos;
				while(_g2 < _g3) {
					var i = _g2++;
					buf1.tex[tid++] = arr[i];
				}
			} else {
				buf1.tex[tid++] = t;
			}
			p = p.next;
		}
		var p = s1.buffers;
		var bid = 0;
		while(p != null) {
			var opt = !h3d_pass_ShaderManager.STRICT;
			if(opt == null) {
				opt = false;
			}
			var b;
			if(p.perObjectGlobal != null) {
				var v = _gthis.globals.map.h[p.perObjectGlobal.gid];
				if(v == null) {
					throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
				}
				var _g = p.type;
				var b1;
				if(_g._hx_index == 17) {
					var _g1 = _g.size;
					b1 = true;
				} else {
					b1 = false;
				}
				b = b1 ? v.texture : v;
			} else {
				var index = p.instance;
				var v1;
				if(curInstance == index) {
					v1 = curInstanceValue;
				} else {
					var si = shaders;
					curInstance = index;
					while(--index > 0) si = si.next;
					curInstanceValue = si.s;
					v1 = curInstanceValue;
				}
				var v2 = v1.getParamValue(p.index);
				if(v2 == null && !opt) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(shaders.s) + "." + p.name);
				}
				b = v2;
			}
			buf1.buffers[bid++] = b;
			p = p.next;
		}
		var buf1 = buf.fragment;
		var s1 = s.fragment;
		var p = s1.params;
		var ptr = buf1.params;
		while(p != null) {
			var v;
			if(p.perObjectGlobal == null) {
				if(p.type == hxsl_Type.TFloat) {
					var index = p.instance;
					var i;
					if(curInstance == index) {
						i = curInstanceValue;
					} else {
						var si = shaders;
						curInstance = index;
						while(--index > 0) si = si.next;
						curInstanceValue = si.s;
						i = curInstanceValue;
					}
					ptr[p.pos] = i.getParamFloatValue(p.index);
					p = p.next;
					continue;
				}
				var index1 = p.instance;
				var v1;
				if(curInstance == index1) {
					v1 = curInstanceValue;
				} else {
					var si1 = shaders;
					curInstance = index1;
					while(--index1 > 0) si1 = si1.next;
					curInstanceValue = si1.s;
					v1 = curInstanceValue;
				}
				v = v1.getParamValue(p.index);
				if(v == null) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(curInstanceValue) + "." + p.name);
				}
			} else if(p.perObjectGlobal != null) {
				var v2 = _gthis.globals.map.h[p.perObjectGlobal.gid];
				if(v2 == null) {
					throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
				}
				var _g = p.type;
				var v3;
				if(_g._hx_index == 17) {
					var _g1 = _g.size;
					v3 = true;
				} else {
					v3 = false;
				}
				v = v3 ? v2.texture : v2;
			} else {
				var index2 = p.instance;
				var v4;
				if(curInstance == index2) {
					v4 = curInstanceValue;
				} else {
					var si2 = shaders;
					curInstance = index2;
					while(--index2 > 0) si2 = si2.next;
					curInstanceValue = si2.s;
					v4 = curInstanceValue;
				}
				var v5 = v4.getParamValue(p.index);
				if(v5 == null) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(shaders.s) + "." + p.name);
				}
				v = v5;
			}
			_gthis.fillRec(v,p.type,ptr,p.pos);
			p = p.next;
		}
		var tid = 0;
		var p = s1.textures;
		while(p != null) {
			var opt = !h3d_pass_ShaderManager.STRICT;
			if(opt == null) {
				opt = false;
			}
			var t;
			if(p.perObjectGlobal != null) {
				var v = _gthis.globals.map.h[p.perObjectGlobal.gid];
				if(v == null) {
					throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
				}
				var _g = p.type;
				var t1;
				if(_g._hx_index == 17) {
					var _g1 = _g.size;
					t1 = true;
				} else {
					t1 = false;
				}
				t = t1 ? v.texture : v;
			} else {
				var index = p.instance;
				var v1;
				if(curInstance == index) {
					v1 = curInstanceValue;
				} else {
					var si = shaders;
					curInstance = index;
					while(--index > 0) si = si.next;
					curInstanceValue = si.s;
					v1 = curInstanceValue;
				}
				var v2 = v1.getParamValue(p.index);
				if(v2 == null && !opt) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(shaders.s) + "." + p.name);
				}
				t = v2;
			}
			if(p.pos < 0) {
				var arr = t;
				var _g2 = 0;
				var _g3 = -p.pos;
				while(_g2 < _g3) {
					var i = _g2++;
					buf1.tex[tid++] = arr[i];
				}
			} else {
				buf1.tex[tid++] = t;
			}
			p = p.next;
		}
		var p = s1.buffers;
		var bid = 0;
		while(p != null) {
			var opt = !h3d_pass_ShaderManager.STRICT;
			if(opt == null) {
				opt = false;
			}
			var b;
			if(p.perObjectGlobal != null) {
				var v = _gthis.globals.map.h[p.perObjectGlobal.gid];
				if(v == null) {
					throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
				}
				var _g = p.type;
				var b1;
				if(_g._hx_index == 17) {
					var _g1 = _g.size;
					b1 = true;
				} else {
					b1 = false;
				}
				b = b1 ? v.texture : v;
			} else {
				var index = p.instance;
				var v1;
				if(curInstance == index) {
					v1 = curInstanceValue;
				} else {
					var si = shaders;
					curInstance = index;
					while(--index > 0) si = si.next;
					curInstanceValue = si.s;
					v1 = curInstanceValue;
				}
				var v2 = v1.getParamValue(p.index);
				if(v2 == null && !opt) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(shaders.s) + "." + p.name);
				}
				b = v2;
			}
			buf1.buffers[bid++] = b;
			p = p.next;
		}
	}
	,compileShaders: function(shaders,batchMode) {
		if(batchMode == null) {
			batchMode = false;
		}
		this.globals.maxChannels = 0;
		var _g_l = shaders;
		var _g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			s1.updateConstants(this.globals);
		}
		this.currentOutput.next = shaders;
		var s = this.shaderCache.link(this.currentOutput,batchMode);
		this.currentOutput.next = null;
		return s;
	}
	,__class__: h3d_pass_ShaderManager
};
var h3d_pass_RenderMode = $hxEnums["h3d.pass.RenderMode"] = { __ename__:true,__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"h3d.pass.RenderMode",toString:$estr}
	,Static: {_hx_name:"Static",_hx_index:1,__enum__:"h3d.pass.RenderMode",toString:$estr}
	,Dynamic: {_hx_name:"Dynamic",_hx_index:2,__enum__:"h3d.pass.RenderMode",toString:$estr}
	,Mixed: {_hx_name:"Mixed",_hx_index:3,__enum__:"h3d.pass.RenderMode",toString:$estr}
};
h3d_pass_RenderMode.__constructs__ = [h3d_pass_RenderMode.None,h3d_pass_RenderMode.Static,h3d_pass_RenderMode.Dynamic,h3d_pass_RenderMode.Mixed];
h3d_pass_RenderMode.__empty_constructs__ = [h3d_pass_RenderMode.None,h3d_pass_RenderMode.Static,h3d_pass_RenderMode.Dynamic,h3d_pass_RenderMode.Mixed];
var h3d_pass_ShadowSamplingKind = $hxEnums["h3d.pass.ShadowSamplingKind"] = { __ename__:true,__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"h3d.pass.ShadowSamplingKind",toString:$estr}
	,PCF: {_hx_name:"PCF",_hx_index:1,__enum__:"h3d.pass.ShadowSamplingKind",toString:$estr}
	,ESM: {_hx_name:"ESM",_hx_index:2,__enum__:"h3d.pass.ShadowSamplingKind",toString:$estr}
};
h3d_pass_ShadowSamplingKind.__constructs__ = [h3d_pass_ShadowSamplingKind.None,h3d_pass_ShadowSamplingKind.PCF,h3d_pass_ShadowSamplingKind.ESM];
h3d_pass_ShadowSamplingKind.__empty_constructs__ = [h3d_pass_ShadowSamplingKind.None,h3d_pass_ShadowSamplingKind.PCF,h3d_pass_ShadowSamplingKind.ESM];
var h3d_pass_SortByMaterial = function() {
	this.textureCount = 1;
	this.shaderCount = 1;
	this.shaderIdMap = [];
	this.textureIdMap = [];
};
$hxClasses["h3d.pass.SortByMaterial"] = h3d_pass_SortByMaterial;
h3d_pass_SortByMaterial.__name__ = "h3d.pass.SortByMaterial";
h3d_pass_SortByMaterial.prototype = {
	sort: function(passes) {
		var _gthis = this;
		var shaderStart = this.shaderCount;
		var textureStart = this.textureCount;
		var _g_o = passes.current;
		while(_g_o != null) {
			var tmp = _g_o;
			_g_o = _g_o.next;
			var p = tmp;
			if(this.shaderIdMap[p.shader.id] < shaderStart || this.shaderIdMap[p.shader.id] == null) {
				this.shaderIdMap[p.shader.id] = this.shaderCount++;
			}
			if(this.textureIdMap[p.texture] < textureStart || this.textureIdMap[p.shader.id] == null) {
				this.textureIdMap[p.texture] = this.textureCount++;
			}
		}
		var list = passes.current;
		var tmp;
		if(list == null) {
			tmp = null;
		} else {
			var insize = 1;
			var nmerges;
			var psize = 0;
			var qsize = 0;
			var p;
			var q;
			var e;
			var tail;
			while(true) {
				p = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p != null) {
					++nmerges;
					q = p;
					psize = 0;
					var _g = 0;
					var _g1 = insize;
					while(_g < _g1) {
						var i = _g++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else {
							var tmp1;
							if(!(qsize == 0 || q == null)) {
								var tmp2;
								if(p.pass.layer != q.pass.layer) {
									tmp2 = p.pass.layer - q.pass.layer;
								} else {
									var d = _gthis.shaderIdMap[p.shader.id] - _gthis.shaderIdMap[q.shader.id];
									tmp2 = d != 0 ? d : _gthis.textureIdMap[p.texture] - _gthis.textureIdMap[q.texture];
								}
								tmp1 = tmp2 <= 0;
							} else {
								tmp1 = true;
							}
							if(tmp1) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			tmp = list;
		}
		passes.current = tmp;
	}
	,__class__: h3d_pass_SortByMaterial
};
var h3d_prim_MeshPrimitive = function() {
	h3d_prim_Primitive.call(this);
};
$hxClasses["h3d.prim.MeshPrimitive"] = h3d_prim_MeshPrimitive;
h3d_prim_MeshPrimitive.__name__ = "h3d.prim.MeshPrimitive";
h3d_prim_MeshPrimitive.__super__ = h3d_prim_Primitive;
h3d_prim_MeshPrimitive.prototype = $extend(h3d_prim_Primitive.prototype,{
	allocBuffer: function(engine,name) {
		return null;
	}
	,addBuffer: function(name,buf,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(this.bufferCache == null) {
			this.bufferCache = new haxe_ds_IntMap();
		}
		var id = hxsl_Globals.allocID(name);
		var old = this.bufferCache.h[id];
		if(old != null) {
			old.dispose();
		}
		var this1 = this.bufferCache;
		var value = new h3d_BufferOffset(buf,offset);
		this1.h[id] = value;
		this.layouts = null;
	}
	,dispose: function() {
		h3d_prim_Primitive.prototype.dispose.call(this);
		if(this.bufferCache != null) {
			var b = this.bufferCache.iterator();
			while(b.hasNext()) {
				var b1 = b.next();
				b1.dispose();
			}
		}
		this.bufferCache = null;
		this.layouts = null;
	}
	,getBuffers: function(engine) {
		if(this.bufferCache == null) {
			this.bufferCache = new haxe_ds_IntMap();
		}
		if(this.layouts == null) {
			this.layouts = new haxe_ds_IntMap();
		}
		var inputs = engine.driver.getShaderInputNames();
		var buffers = this.layouts.h[inputs.id];
		if(buffers != null) {
			return buffers;
		}
		var prev = null;
		var _g = 0;
		var _g1 = inputs.names;
		while(_g < _g1.length) {
			var name = _g1[_g];
			++_g;
			var id = hxsl_Globals.allocID(name);
			var b = this.bufferCache.h[id];
			if(b == null) {
				b = this.allocBuffer(engine,name);
				if(b == null) {
					throw haxe_Exception.thrown("Buffer " + name + " is not available");
				}
				this.bufferCache.h[id] = b;
			}
			var b1 = new h3d_BufferOffset(b.buffer,b.offset);
			b = b1;
			if(prev == null) {
				prev = b;
				buffers = prev;
			} else {
				prev.next = b;
				prev = b;
			}
		}
		this.layouts.h[inputs.id] = buffers;
		return buffers;
	}
	,render: function(engine) {
		if(this.indexes == null || this.indexes.isDisposed()) {
			this.alloc(engine);
		}
		engine.renderMultiBuffers(this.getBuffers(engine),this.indexes);
	}
	,__class__: h3d_prim_MeshPrimitive
});
var h3d_prim_Instanced = function() {
	h3d_prim_MeshPrimitive.call(this);
	this.bounds = new h3d_col_Bounds();
	var _this = this.bounds;
	if(0 < _this.xMin) {
		_this.xMin = 0;
	}
	if(0 > _this.xMax) {
		_this.xMax = 0;
	}
	if(0 < _this.yMin) {
		_this.yMin = 0;
	}
	if(0 > _this.yMax) {
		_this.yMax = 0;
	}
	if(0 < _this.zMin) {
		_this.zMin = 0;
	}
	if(0 > _this.zMax) {
		_this.zMax = 0;
	}
	this.tmpBounds = new h3d_col_Bounds();
};
$hxClasses["h3d.prim.Instanced"] = h3d_prim_Instanced;
h3d_prim_Instanced.__name__ = "h3d.prim.Instanced";
h3d_prim_Instanced.__super__ = h3d_prim_MeshPrimitive;
h3d_prim_Instanced.prototype = $extend(h3d_prim_MeshPrimitive.prototype,{
	setMesh: function(m) {
		if(this.refCount > 0) {
			if(this.primitive != null) {
				this.primitive.decref();
			}
			m.incref();
		}
		this.primitive = m;
		var engine = h3d_Engine.CURRENT;
		var tmp;
		if(m.buffer != null) {
			var _this = m.buffer;
			tmp = _this.buffer == null || _this.buffer.vbuf == null;
		} else {
			tmp = true;
		}
		if(tmp) {
			m.alloc(engine);
		}
		this.buffer = m.buffer;
		this.indexes = m.indexes;
		this.baseBounds = m.getBounds();
		if(this.indexes == null) {
			this.indexes = engine.mem.triIndexes;
		}
		var bid = m.bufferCache.keys();
		while(bid.hasNext()) {
			var bid1 = bid.next();
			var b = m.bufferCache.h[bid1];
			this.addBuffer(hxsl_Globals.getIDName(bid1),b.buffer,b.offset);
		}
	}
	,dispose: function() {
	}
	,incref: function() {
		if(this.refCount == 0 && this.primitive != null) {
			this.primitive.incref();
		}
		h3d_prim_MeshPrimitive.prototype.incref.call(this);
	}
	,decref: function() {
		h3d_prim_MeshPrimitive.prototype.decref.call(this);
		if(this.refCount == 0 && this.primitive != null) {
			this.primitive.decref();
		}
	}
	,getBounds: function() {
		return this.bounds;
	}
	,addBuffer: function(name,buffer,offset) {
		if(offset == null) {
			offset = 0;
		}
		h3d_prim_MeshPrimitive.prototype.addBuffer.call(this,name,buffer,offset);
	}
	,render: function(engine) {
		var _this = this.buffer;
		if(_this.buffer == null || _this.buffer.vbuf == null) {
			this.setMesh(this.primitive);
		}
		engine.renderInstanced(this.getBuffers(engine),this.indexes,this.commands);
	}
	,__class__: h3d_prim_Instanced
});
var h3d_prim_Plane2D = function() {
	h3d_prim_Primitive.call(this);
};
$hxClasses["h3d.prim.Plane2D"] = h3d_prim_Plane2D;
h3d_prim_Plane2D.__name__ = "h3d.prim.Plane2D";
h3d_prim_Plane2D.get = function() {
	var engine = h3d_Engine.CURRENT;
	var inst = engine.resCache.h[h3d_prim_Plane2D.__id__];
	if(inst == null) {
		inst = new h3d_prim_Plane2D();
		engine.resCache.set(h3d_prim_Plane2D,inst);
	}
	return inst;
};
h3d_prim_Plane2D.__super__ = h3d_prim_Primitive;
h3d_prim_Plane2D.prototype = $extend(h3d_prim_Primitive.prototype,{
	alloc: function(engine) {
		var this1 = hxd__$FloatBuffer_Float32Expand._new(0);
		var v = this1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 0;
		this.buffer = h3d_Buffer.ofFloats(v,4,[h3d_BufferFlag.Quads,h3d_BufferFlag.RawFormat]);
	}
	,render: function(engine) {
		var tmp;
		if(this.buffer != null) {
			var _this = this.buffer;
			tmp = _this.buffer == null || _this.buffer.vbuf == null;
		} else {
			tmp = true;
		}
		if(tmp) {
			this.alloc(engine);
		}
		engine.renderBuffer(this.buffer,engine.mem.quadIndexes,2,0,-1);
	}
	,__class__: h3d_prim_Plane2D
});
var h3d_prim_RawPrimitive = function(inf,persist) {
	if(persist == null) {
		persist = false;
	}
	h3d_prim_Primitive.call(this);
	this.onContextLost = function() {
		return inf;
	};
	this.bounds = inf.bounds;
	this.alloc(null);
	if(!persist) {
		this.onContextLost = null;
	}
};
$hxClasses["h3d.prim.RawPrimitive"] = h3d_prim_RawPrimitive;
h3d_prim_RawPrimitive.__name__ = "h3d.prim.RawPrimitive";
h3d_prim_RawPrimitive.__super__ = h3d_prim_Primitive;
h3d_prim_RawPrimitive.prototype = $extend(h3d_prim_Primitive.prototype,{
	alloc: function(engine) {
		if(this.onContextLost == null) {
			throw haxe_Exception.thrown("Cannot realloc " + Std.string(this));
		}
		var inf = this.onContextLost();
		var flags = [];
		if(inf.ibuf == null) {
			flags.push(inf.quads ? h3d_BufferFlag.Quads : h3d_BufferFlag.Triangles);
		}
		if(inf.stride < 8) {
			flags.push(h3d_BufferFlag.RawFormat);
		}
		this.buffer = h3d_Buffer.ofFloats(inf.vbuf,inf.stride,flags);
		this.vcount = this.buffer.vertices;
		this.tcount = inf.ibuf != null ? inf.ibuf.length / 3 | 0 : inf.quads ? this.vcount >> 1 : this.vcount / 3 | 0;
		if(inf.ibuf != null) {
			this.indexes = h3d_Indexes.alloc(inf.ibuf);
		} else if(this.indexes != null) {
			this.indexes.dispose();
			this.indexes = null;
		}
	}
	,getBounds: function() {
		if(this.bounds == null) {
			throw haxe_Exception.thrown("Bounds not defined for " + Std.string(this));
		}
		return this.bounds;
	}
	,__class__: h3d_prim_RawPrimitive
});
var h3d_scene_Mesh = function(primitive,material,parent) {
	h3d_scene_Object.call(this,parent);
	this.set_primitive(primitive);
	if(material == null) {
		material = h3d_mat_MaterialSetup.current.createMaterial();
		material.set_props(material.getDefaultProps());
	}
	this.material = material;
};
$hxClasses["h3d.scene.Mesh"] = h3d_scene_Mesh;
h3d_scene_Mesh.__name__ = "h3d.scene.Mesh";
h3d_scene_Mesh.__super__ = h3d_scene_Object;
h3d_scene_Mesh.prototype = $extend(h3d_scene_Object.prototype,{
	draw: function(ctx) {
		this.primitive.render(ctx.engine);
	}
	,emit: function(ctx) {
		var p = this.material.passes;
		while(p != null) {
			ctx.emitPass(p,this).index = 0;
			p = p.nextPass;
		}
	}
	,onAdd: function() {
		h3d_scene_Object.prototype.onAdd.call(this);
		if(this.primitive != null) {
			this.primitive.incref();
		}
	}
	,onRemove: function() {
		if(this.primitive != null) {
			this.primitive.decref();
		}
		h3d_scene_Object.prototype.onRemove.call(this);
	}
	,set_primitive: function(prim) {
		if(prim != this.primitive && (this.flags & 32) != 0) {
			if(this.primitive != null) {
				this.primitive.decref();
			}
			if(prim != null) {
				prim.incref();
			}
		}
		return this.primitive = prim;
	}
	,__class__: h3d_scene_Mesh
});
var h3d_scene_Interactive = function(shape,parent) {
	this.hitPoint = new h3d_Vector();
	this.lastClickFrame = -1;
	this.mouseDownButton = -1;
	this.allowMultiClick = false;
	this.enableRightButton = false;
	this.propagateEvents = false;
	this.cancelEvents = false;
	h3d_scene_Object.call(this,parent);
	this.shape = shape;
	this.set_cursor(hxd_Cursor.Button);
};
$hxClasses["h3d.scene.Interactive"] = h3d_scene_Interactive;
h3d_scene_Interactive.__name__ = "h3d.scene.Interactive";
h3d_scene_Interactive.__interfaces__ = [hxd_Interactive];
h3d_scene_Interactive.__super__ = h3d_scene_Object;
h3d_scene_Interactive.prototype = $extend(h3d_scene_Object.prototype,{
	onAdd: function() {
		this.scene = this.getScene();
		if(this.scene != null) {
			this.scene.addEventTarget(this);
		}
		h3d_scene_Object.prototype.onAdd.call(this);
	}
	,onRemove: function() {
		if(this.scene != null) {
			this.scene.removeEventTarget(this);
			this.scene = null;
		}
		h3d_scene_Object.prototype.onRemove.call(this);
	}
	,getInteractiveScene: function() {
		return this.scene;
	}
	,handleEvent: function(e) {
		if(this.propagateEvents) {
			e.propagate = true;
		}
		if(this.cancelEvents) {
			e.cancel = true;
		}
		switch(e.kind._hx_index) {
		case 0:
			if(this.enableRightButton || e.button == 0) {
				this.mouseDownButton = e.button;
				this.onPush(e);
				if(e.cancel) {
					this.mouseDownButton = -1;
				}
			}
			break;
		case 1:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				var frame = hxd_Timer.frameCount;
				if(this.mouseDownButton == e.button && (this.lastClickFrame != frame || this.allowMultiClick)) {
					this.onClick(e);
					this.lastClickFrame = frame;
				}
			}
			this.mouseDownButton = -1;
			break;
		case 2:
			this.onMove(e);
			break;
		case 3:
			this.onOver(e);
			break;
		case 4:
			this.onOut(e);
			break;
		case 5:
			this.onWheel(e);
			break;
		case 6:
			this.onFocus(e);
			break;
		case 7:
			this.onFocusLost(e);
			break;
		case 8:
			this.onKeyDown(e);
			break;
		case 9:
			this.onKeyUp(e);
			break;
		case 10:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onReleaseOutside(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 11:
			this.onTextInput(e);
			break;
		case 12:
			this.onCheck(e);
			break;
		}
	}
	,set_cursor: function(c) {
		this.cursor = c;
		if(this.scene != null && this.scene.events != null) {
			this.scene.events.updateCursor(this);
		}
		return c;
	}
	,onOver: function(e) {
	}
	,onOut: function(e) {
	}
	,onPush: function(e) {
	}
	,onRelease: function(e) {
	}
	,onReleaseOutside: function(e) {
	}
	,onClick: function(e) {
	}
	,onMove: function(e) {
	}
	,onWheel: function(e) {
	}
	,onFocus: function(e) {
	}
	,onFocusLost: function(e) {
	}
	,onKeyUp: function(e) {
	}
	,onKeyDown: function(e) {
	}
	,onCheck: function(e) {
	}
	,onTextInput: function(e) {
	}
	,__class__: h3d_scene_Interactive
});
var h3d_scene_Light = function(shader,parent) {
	h3d_scene_Object.call(this,parent);
	this.shader = shader;
};
$hxClasses["h3d.scene.Light"] = h3d_scene_Light;
h3d_scene_Light.__name__ = "h3d.scene.Light";
h3d_scene_Light.__super__ = h3d_scene_Object;
h3d_scene_Light.prototype = $extend(h3d_scene_Object.prototype,{
	emit: function(ctx) {
		ctx.emitLight(this);
	}
	,getShadowDirection: function() {
		return null;
	}
	,__class__: h3d_scene_Light
});
var h3d_scene_LightSystem = function() {
};
$hxClasses["h3d.scene.LightSystem"] = h3d_scene_LightSystem;
h3d_scene_LightSystem.__name__ = "h3d.scene.LightSystem";
h3d_scene_LightSystem.prototype = {
	initGlobals: function(globals) {
	}
	,initLights: function(ctx) {
		this.ctx = ctx;
		if(this.shadowLight == null || (this.shadowLight.flags & 32) == 0) {
			var l = ctx.lights;
			while(l != null) {
				var dir = l.getShadowDirection();
				if(dir != null) {
					this.shadowLight = l;
					break;
				}
				l = l.next;
			}
		}
	}
	,computeLight: function(obj,shaders) {
		return shaders;
	}
	,__class__: h3d_scene_LightSystem
};
var h3d_scene__$RenderContext_SharedGlobal = function(gid,value) {
	this.gid = gid;
	this.value = value;
};
$hxClasses["h3d.scene._RenderContext.SharedGlobal"] = h3d_scene__$RenderContext_SharedGlobal;
h3d_scene__$RenderContext_SharedGlobal.__name__ = "h3d.scene._RenderContext.SharedGlobal";
h3d_scene__$RenderContext_SharedGlobal.prototype = {
	__class__: h3d_scene__$RenderContext_SharedGlobal
};
var h3d_scene_RenderContext = function() {
	h3d_impl_RenderContext.call(this);
	this.cachedShaderList = [];
	this.cachedPassObjects = [];
};
$hxClasses["h3d.scene.RenderContext"] = h3d_scene_RenderContext;
h3d_scene_RenderContext.__name__ = "h3d.scene.RenderContext";
h3d_scene_RenderContext.__super__ = h3d_impl_RenderContext;
h3d_scene_RenderContext.prototype = $extend(h3d_impl_RenderContext.prototype,{
	start: function() {
		this.sharedGlobals = [];
		this.lights = null;
		this.drawPass = null;
		this.passes = [];
		this.lights = null;
		this.cachedPos = 0;
		this.visibleFlag = true;
		this.time += this.elapsedTime;
		this.frame++;
	}
	,setGlobalID: function(gid,value) {
		var _g = 0;
		var _g1 = this.sharedGlobals;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g.gid == gid) {
				g.value = value;
				return;
			}
		}
		this.sharedGlobals.push(new h3d_scene__$RenderContext_SharedGlobal(gid,value));
	}
	,emitPass: function(pass,obj) {
		var o = this.allocPool;
		if(o == null) {
			o = new h3d_pass_PassObject();
			o.nextAlloc = this.allocFirst;
			this.allocFirst = o;
		} else {
			this.allocPool = o.nextAlloc;
		}
		o.pass = pass;
		o.obj = obj;
		if(this.passes.length <= pass.passId) {
			this.passes.length = pass.passId;
		}
		o.next = this.passes[pass.passId];
		this.passes[pass.passId] = o;
		return o;
	}
	,allocShaderList: function(s,next) {
		var sl = this.cachedShaderList[this.cachedPos++];
		if(sl == null) {
			sl = new hxsl_ShaderList(null);
			this.cachedShaderList[this.cachedPos - 1] = sl;
		}
		sl.s = s;
		sl.next = next;
		return sl;
	}
	,emitLight: function(l) {
		l.next = this.lights;
		this.lights = l;
	}
	,done: function() {
		this.drawPass = null;
		var p = this.allocFirst;
		while(p != null && p != this.allocPool) {
			p.obj = null;
			p.pass = null;
			p.shader = null;
			p.shaders = null;
			p.next = null;
			p.index = 0;
			p.texture = 0;
			p = p.nextAlloc;
		}
		if(this.allocPool != null) {
			this.allocFirst = this.allocFirst.nextAlloc;
		}
		this.allocPool = this.allocFirst;
		var _g = 0;
		var _g1 = this.cachedShaderList;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.s = null;
			c.next = null;
		}
		this.passes = [];
		this.lights = null;
	}
	,__class__: h3d_scene_RenderContext
});
var h3d_scene_PassObjects = function() {
	this.passes = new h3d_pass_PassList();
};
$hxClasses["h3d.scene.PassObjects"] = h3d_scene_PassObjects;
h3d_scene_PassObjects.__name__ = "h3d.scene.PassObjects";
h3d_scene_PassObjects.prototype = {
	__class__: h3d_scene_PassObjects
};
var h3d_scene_Renderer = function() {
	this.hasSetTarget = false;
	this.emptyPasses = new h3d_pass_PassList();
	this.allPasses = [];
	this.passObjects = new haxe_ds_StringMap();
	this.set_props(this.getDefaultProps());
	var _g = $bind(this,this.depthSort);
	var frontToBack = true;
	this.frontToBack = function(passes) {
		_g(frontToBack,passes);
	};
	var _g1 = $bind(this,this.depthSort);
	var frontToBack1 = false;
	this.backToFront = function(passes) {
		_g1(frontToBack1,passes);
	};
};
$hxClasses["h3d.scene.Renderer"] = h3d_scene_Renderer;
h3d_scene_Renderer.__name__ = "h3d.scene.Renderer";
h3d_scene_Renderer.__super__ = hxd_impl_AnyProps;
h3d_scene_Renderer.prototype = $extend(hxd_impl_AnyProps.prototype,{
	depthSort: function(frontToBack,passes) {
		var cam = this.ctx.camera.m;
		var _g_o = passes.current;
		while(_g_o != null) {
			var tmp = _g_o;
			_g_o = _g_o.next;
			var p = tmp;
			var z = p.obj.absPos._41 * cam._13 + p.obj.absPos._42 * cam._23 + p.obj.absPos._43 * cam._33 + cam._43;
			var w = p.obj.absPos._41 * cam._14 + p.obj.absPos._42 * cam._24 + p.obj.absPos._43 * cam._34 + cam._44;
			p.depth = z / w;
		}
		if(frontToBack) {
			var list = passes.current;
			var tmp;
			if(list == null) {
				tmp = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p;
				var q;
				var e;
				var tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						var _g = 0;
						var _g1 = insize;
						while(_g < _g1) {
							var i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || (p.pass.layer == q.pass.layer ? p.depth > q.depth ? 1 : -1 : p.pass.layer - q.pass.layer) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			passes.current = tmp;
		} else {
			var list = passes.current;
			var tmp;
			if(list == null) {
				tmp = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p;
				var q;
				var e;
				var tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						var _g = 0;
						var _g1 = insize;
						while(_g < _g1) {
							var i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || (p.pass.layer == q.pass.layer ? p.depth > q.depth ? -1 : 1 : p.pass.layer - q.pass.layer) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			passes.current = tmp;
		}
	}
	,resetTarget: function() {
		if(this.hasSetTarget) {
			this.ctx.engine.popTarget();
			this.hasSetTarget = false;
		}
	}
	,has: function(name) {
		return this.passObjects.h[name] != null;
	}
	,get: function(name) {
		var p = this.passObjects.h[name];
		if(p == null) {
			return this.emptyPasses;
		}
		p.rendered = true;
		return p.passes;
	}
	,render: function() {
		throw haxe_Exception.thrown("Not implemented");
	}
	,computeStatic: function() {
		throw haxe_Exception.thrown("Not implemented");
	}
	,start: function() {
	}
	,process: function(passes) {
		this.hasSetTarget = false;
		var _g = 0;
		var _g1 = this.allPasses;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.setContext(this.ctx);
		}
		var _g = 0;
		while(_g < passes.length) {
			var p = passes[_g];
			++_g;
			this.passObjects.h[p.name] = p;
		}
		this.ctx.textures.begin();
		if(this.ctx.computingStatic) {
			this.computeStatic();
		} else {
			this.render();
		}
		this.resetTarget();
		var _g = 0;
		while(_g < passes.length) {
			var p = passes[_g];
			++_g;
			this.passObjects.h[p.name] = null;
		}
	}
	,__class__: h3d_scene_Renderer
});
var h3d_scene_Scene = function(createRenderer,createLightSystem) {
	if(createLightSystem == null) {
		createLightSystem = true;
	}
	if(createRenderer == null) {
		createRenderer = true;
	}
	h3d_scene_Object.call(this,null);
	this.window = hxd_Window.getInstance();
	this.eventListeners = [];
	this.hitInteractives = [];
	this.interactives = [];
	this.camera = new h3d_Camera();
	var engine = h3d_Engine.CURRENT;
	if(engine != null) {
		this.camera.screenRatio = engine.width / engine.height;
	}
	this.ctx = new h3d_scene_RenderContext();
	if(createRenderer) {
		this.set_renderer(h3d_mat_MaterialSetup.current.createRenderer());
	}
	if(createLightSystem) {
		this.lightSystem = h3d_mat_MaterialSetup.current.createLightSystem();
	}
};
$hxClasses["h3d.scene.Scene"] = h3d_scene_Scene;
h3d_scene_Scene.__name__ = "h3d.scene.Scene";
h3d_scene_Scene.__interfaces__ = [hxd_InteractiveScene,h3d_IDrawable];
h3d_scene_Scene.__super__ = h3d_scene_Object;
h3d_scene_Scene.prototype = $extend(h3d_scene_Object.prototype,{
	setEvents: function(events) {
		this.events = events;
	}
	,dispatchListeners: function(event) {
		var _g = 0;
		var _g1 = this.eventListeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			l(event);
			if(!event.propagate) {
				break;
			}
		}
	}
	,set_renderer: function(r) {
		this.renderer = r;
		if(r != null) {
			r.ctx = this.ctx;
		}
		return r;
	}
	,sortHitPointByCameraDistance: function(i1,i2) {
		var z1 = i1.hitPoint.w;
		var z2 = i2.hitPoint.w;
		if(z1 > z2) {
			return -1;
		}
		return 1;
	}
	,dispatchEvent: function(event,to) {
		var i = to;
		i.handleEvent(event);
	}
	,isInteractiveVisible: function(i) {
		var o = i;
		while(o != this) {
			if(o == null || (o.flags & 2) == 0) {
				return false;
			}
			o = o.parent;
		}
		return true;
	}
	,handleEvent: function(event,last) {
		if(this.interactives.length == 0) {
			return null;
		}
		if(this.hitInteractives.length == 0) {
			var screenX = (event.relX / this.window.get_width() - 0.5) * 2;
			var screenY = -(event.relY / this.window.get_height() - 0.5) * 2;
			var p0 = this.camera.unproject(screenX,screenY,0);
			var p1 = this.camera.unproject(screenX,screenY,1);
			var x = p0.x;
			var y = p0.y;
			var z = p0.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var p1_x = x;
			var p1_y = y;
			var p1_z = z;
			var x = p1.x;
			var y = p1.y;
			var z = p1.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var p2_x = x;
			var p2_y = y;
			var p2_z = z;
			var r = new h3d_col_Ray();
			r.px = p1_x;
			r.py = p1_y;
			r.pz = p1_z;
			r.lx = p2_x - p1_x;
			r.ly = p2_y - p1_y;
			r.lz = p2_z - p1_z;
			r.normalize();
			var r1 = r;
			var saveR_px = r1.px;
			var saveR_py = r1.py;
			var saveR_pz = r1.pz;
			var saveR_lx = r1.lx;
			var saveR_ly = r1.ly;
			var saveR_lz = r1.lz;
			var priority = -2147483648;
			var _g = 0;
			var _g1 = this.interactives;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(i.priority < priority) {
					continue;
				}
				var p = i;
				while(p != null && (p.flags & 2) != 0) p = p.parent;
				if(p != null) {
					continue;
				}
				var minv = i.getInvPos();
				var x = r1.px;
				var y = r1.py;
				var z = r1.pz;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var p_x = x;
				var p_y = y;
				var p_z = z;
				var p_w = 1.;
				var px = p_x * minv._11 + p_y * minv._21 + p_z * minv._31 + p_w * minv._41;
				var py = p_x * minv._12 + p_y * minv._22 + p_z * minv._32 + p_w * minv._42;
				var pz = p_x * minv._13 + p_y * minv._23 + p_z * minv._33 + p_w * minv._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				r1.px = p_x;
				r1.py = p_y;
				r1.pz = p_z;
				var x1 = r1.lx;
				var y1 = r1.ly;
				var z1 = r1.lz;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var l_x = x1;
				var l_y = y1;
				var l_z = z1;
				var l_w = 1.;
				var px1 = l_x * minv._11 + l_y * minv._21 + l_z * minv._31;
				var py1 = l_x * minv._12 + l_y * minv._22 + l_z * minv._32;
				var pz1 = l_x * minv._13 + l_y * minv._23 + l_z * minv._33;
				l_x = px1;
				l_y = py1;
				l_z = pz1;
				r1.lx = l_x;
				r1.ly = l_y;
				r1.lz = l_z;
				r1.normalize();
				if(r1.lx != r1.lx) {
					r1.px = saveR_px;
					r1.py = saveR_py;
					r1.pz = saveR_pz;
					r1.lx = saveR_lx;
					r1.ly = saveR_ly;
					r1.lz = saveR_lz;
					continue;
				}
				var hit = i.shape.rayIntersection(r1,i.bestMatch);
				if(hit < 0) {
					r1.px = saveR_px;
					r1.py = saveR_py;
					r1.pz = saveR_pz;
					r1.lx = saveR_lx;
					r1.ly = saveR_ly;
					r1.lz = saveR_lz;
					continue;
				}
				var x2 = r1.px + hit * r1.lx;
				var y2 = r1.py + hit * r1.ly;
				var z2 = r1.pz + hit * r1.lz;
				if(z2 == null) {
					z2 = 0.;
				}
				if(y2 == null) {
					y2 = 0.;
				}
				if(x2 == null) {
					x2 = 0.;
				}
				var hitPoint_x = x2;
				var hitPoint_y = y2;
				var hitPoint_z = z2;
				r1.px = saveR_px;
				r1.py = saveR_py;
				r1.pz = saveR_pz;
				r1.lx = saveR_lx;
				r1.ly = saveR_ly;
				r1.lz = saveR_lz;
				i.hitPoint.x = hitPoint_x;
				i.hitPoint.y = hitPoint_y;
				i.hitPoint.z = hitPoint_z;
				if(i.priority > priority) {
					while(this.hitInteractives.length > 0) this.hitInteractives.pop();
					priority = i.priority;
				}
				this.hitInteractives.push(i);
			}
			if(this.hitInteractives.length == 0) {
				return null;
			}
			if(this.hitInteractives.length > 1) {
				var _g = 0;
				var _g1 = this.hitInteractives;
				while(_g < _g1.length) {
					var i = _g1[_g];
					++_g;
					var m = i.invPos;
					var wfactor = 0.;
					if(i.preciseShape != null) {
						var x = r1.px;
						var y = r1.py;
						var z = r1.pz;
						if(z == null) {
							z = 0.;
						}
						if(y == null) {
							y = 0.;
						}
						if(x == null) {
							x = 0.;
						}
						var p_x = x;
						var p_y = y;
						var p_z = z;
						var p_w = 1.;
						var px = p_x * m._11 + p_y * m._21 + p_z * m._31 + p_w * m._41;
						var py = p_x * m._12 + p_y * m._22 + p_z * m._32 + p_w * m._42;
						var pz = p_x * m._13 + p_y * m._23 + p_z * m._33 + p_w * m._43;
						p_x = px;
						p_y = py;
						p_z = pz;
						r1.px = p_x;
						r1.py = p_y;
						r1.pz = p_z;
						var x1 = r1.lx;
						var y1 = r1.ly;
						var z1 = r1.lz;
						if(z1 == null) {
							z1 = 0.;
						}
						if(y1 == null) {
							y1 = 0.;
						}
						if(x1 == null) {
							x1 = 0.;
						}
						var l_x = x1;
						var l_y = y1;
						var l_z = z1;
						var l_w = 1.;
						var px1 = l_x * m._11 + l_y * m._21 + l_z * m._31;
						var py1 = l_x * m._12 + l_y * m._22 + l_z * m._32;
						var pz1 = l_x * m._13 + l_y * m._23 + l_z * m._33;
						l_x = px1;
						l_y = py1;
						l_z = pz1;
						r1.lx = l_x;
						r1.ly = l_y;
						r1.lz = l_z;
						r1.normalize();
						var hit = i.preciseShape.rayIntersection(r1,i.bestMatch);
						if(hit > 0) {
							var x2 = r1.px + hit * r1.lx;
							var y2 = r1.py + hit * r1.ly;
							var z2 = r1.pz + hit * r1.lz;
							if(z2 == null) {
								z2 = 0.;
							}
							if(y2 == null) {
								y2 = 0.;
							}
							if(x2 == null) {
								x2 = 0.;
							}
							var hitPoint_x = x2;
							var hitPoint_y = y2;
							var hitPoint_z = z2;
							i.hitPoint.x = hitPoint_x;
							i.hitPoint.y = hitPoint_y;
							i.hitPoint.z = hitPoint_z;
						} else {
							wfactor = 1.;
						}
						r1.px = saveR_px;
						r1.py = saveR_py;
						r1.pz = saveR_pz;
						r1.lx = saveR_lx;
						r1.ly = saveR_ly;
						r1.lz = saveR_lz;
					}
					var _this = i.hitPoint;
					var x3 = _this.x;
					var y3 = _this.y;
					var z3 = _this.z;
					var w = _this.w;
					if(w == null) {
						w = 1.;
					}
					if(z3 == null) {
						z3 = 0.;
					}
					if(y3 == null) {
						y3 = 0.;
					}
					if(x3 == null) {
						x3 = 0.;
					}
					var p_x1 = x3;
					var p_y1 = y3;
					var p_z1 = z3;
					var p_w1 = w;
					p_w1 = 1;
					var m1 = i.absPos;
					var px2 = p_x1 * m1._11 + p_y1 * m1._21 + p_z1 * m1._31 + p_w1 * m1._41;
					var py2 = p_x1 * m1._12 + p_y1 * m1._22 + p_z1 * m1._32 + p_w1 * m1._42;
					var pz2 = p_x1 * m1._13 + p_y1 * m1._23 + p_z1 * m1._33 + p_w1 * m1._43;
					p_x1 = px2;
					p_y1 = py2;
					p_z1 = pz2;
					var m2 = this.camera.m;
					var px3 = p_x1 * m2._11 + p_y1 * m2._21 + p_z1 * m2._31 + p_w1 * m2._41;
					var py3 = p_x1 * m2._12 + p_y1 * m2._22 + p_z1 * m2._32 + p_w1 * m2._42;
					var pz3 = p_x1 * m2._13 + p_y1 * m2._23 + p_z1 * m2._33 + p_w1 * m2._43;
					var iw = 1 / (p_x1 * m2._14 + p_y1 * m2._24 + p_z1 * m2._34 + p_w1 * m2._44);
					p_x1 = px3 * iw;
					p_y1 = py3 * iw;
					p_z1 = pz3 * iw;
					p_w1 = 1;
					i.hitPoint.w = p_z1 + wfactor;
				}
				this.hitInteractives.sort($bind(this,this.sortHitPointByCameraDistance));
			}
			this.hitInteractives.unshift(null);
		}
		while(this.hitInteractives.length > 0) {
			var i = this.hitInteractives.pop();
			if(i == null) {
				return null;
			}
			event.relX = i.hitPoint.x;
			event.relY = i.hitPoint.y;
			event.relZ = i.hitPoint.z;
			i.handleEvent(event);
			if(event.cancel) {
				event.cancel = false;
				event.propagate = false;
				continue;
			}
			if(!event.propagate) {
				while(this.hitInteractives.length > 0) this.hitInteractives.pop();
			}
			return i;
		}
		return null;
	}
	,addEventTarget: function(i) {
		if(this.interactives.indexOf(i) >= 0) {
			throw haxe_Exception.thrown("assert");
		}
		this.interactives.push(i);
	}
	,removeEventTarget: function(i) {
		if(HxOverrides.remove(this.interactives,i)) {
			if(this.events != null) {
				this.events.onRemove(i);
			}
			HxOverrides.remove(this.hitInteractives,i);
		}
	}
	,setElapsedTime: function(elapsedTime) {
		this.ctx.elapsedTime = elapsedTime;
	}
	,onContextLost: function() {
		this.ctx.wasContextLost = true;
	}
	,render: function(engine) {
		if((this.flags & 32) == 0) {
			this.onAdd();
		}
		var t = engine.getCurrentTarget();
		if(t == null) {
			this.camera.screenRatio = engine.width / engine.height;
		} else {
			this.camera.screenRatio = t.width / t.height;
		}
		this.camera.update();
		if(this.camera.rightHanded) {
			engine.driver.setRenderFlag(h3d_impl_RenderFlag.CameraHandness,1);
		}
		this.ctx.camera = this.camera;
		this.ctx.engine = engine;
		this.ctx.scene = this;
		this.ctx.start();
		this.renderer.start();
		this.syncRec(this.ctx);
		this.emitRec(this.ctx);
		var passes = [];
		var passIndex = -1;
		var _g = 0;
		var _g1 = this.ctx.passes.length;
		while(_g < _g1) {
			var passId = _g++;
			var curPass = this.ctx.passes[passId];
			if(curPass == null) {
				continue;
			}
			var pobjs = this.ctx.cachedPassObjects[++passIndex];
			if(pobjs == null) {
				pobjs = new h3d_scene_PassObjects();
				this.ctx.cachedPassObjects[passIndex] = pobjs;
			}
			pobjs.name = curPass.pass.name;
			var _this = pobjs.passes;
			_this.current = curPass;
			_this.discarded = _this.lastDisc = null;
			passes.push(pobjs);
		}
		if(this.lightSystem != null) {
			this.ctx.lightSystem = this.lightSystem;
			this.lightSystem.initLights(this.ctx);
		}
		this.renderer.process(passes);
		if(this.camera.rightHanded) {
			engine.driver.setRenderFlag(h3d_impl_RenderFlag.CameraHandness,0);
		}
		this.ctx.done();
		this.ctx.wasContextLost = false;
		this.ctx.scene = null;
		this.ctx.camera = null;
		this.ctx.engine = null;
		var _g = 0;
		var _g1 = passIndex;
		while(_g < _g1) {
			var i = _g++;
			var p = this.ctx.cachedPassObjects[i];
			p.name = null;
			var _this = p.passes;
			_this.current = null;
			_this.discarded = _this.lastDisc = null;
		}
	}
	,__class__: h3d_scene_Scene
});
var h3d_scene_fwd_Light = function(shader,parent) {
	this.priority = 0;
	this.cullingDistance = -1;
	h3d_scene_Light.call(this,shader,parent);
};
$hxClasses["h3d.scene.fwd.Light"] = h3d_scene_fwd_Light;
h3d_scene_fwd_Light.__name__ = "h3d.scene.fwd.Light";
h3d_scene_fwd_Light.__super__ = h3d_scene_Light;
h3d_scene_fwd_Light.prototype = $extend(h3d_scene_Light.prototype,{
	__class__: h3d_scene_fwd_Light
});
var h3d_scene_fwd_LightSystem = function() {
	this.perPixelLighting = true;
	this.maxLightsPerObject = 6;
	h3d_scene_LightSystem.call(this);
	this.ambientLight = new h3d_Vector(0.5,0.5,0.5);
	this.ambientShader = new h3d_shader_AmbientLight();
	this.set_additiveLighting(true);
};
$hxClasses["h3d.scene.fwd.LightSystem"] = h3d_scene_fwd_LightSystem;
h3d_scene_fwd_LightSystem.__name__ = "h3d.scene.fwd.LightSystem";
h3d_scene_fwd_LightSystem.__super__ = h3d_scene_LightSystem;
h3d_scene_fwd_LightSystem.prototype = $extend(h3d_scene_LightSystem.prototype,{
	set_additiveLighting: function(b) {
		var value = this.ambientShader;
		var _this = ((value) instanceof h3d_shader_AmbientLight) ? value : null;
		_this.constModified = true;
		return _this.additive__ = b;
	}
	,initLights: function(ctx) {
		this.lightCount = 0;
		this.ctx = ctx;
		this.cullLights();
		h3d_scene_LightSystem.prototype.initLights.call(this,ctx);
		if(this.lightCount <= this.maxLightsPerObject) {
			var list = ctx.lights;
			var cmp = $bind(this,this.sortLight);
			var tmp;
			if(list == null) {
				tmp = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p;
				var q;
				var e;
				var tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						var _g = 0;
						var _g1 = insize;
						while(_g < _g1) {
							var i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			ctx.lights = tmp;
		}
	}
	,initGlobals: function(globals) {
		globals.set("global.ambientLight",this.ambientLight);
		globals.set("global.perPixelLighting",this.perPixelLighting);
	}
	,cullLights: function() {
		var ll = this.ctx.lights;
		var prev = null;
		var s = new h3d_col_Sphere();
		while(ll != null) {
			var l = ((ll) instanceof h3d_scene_fwd_Light) ? ll : null;
			if(l != null) {
				s.x = l.absPos._41;
				s.y = l.absPos._42;
				s.z = l.absPos._43;
				s.r = l.cullingDistance;
			}
			if(l == null || l.cullingDistance > 0 && !this.ctx.computingStatic && !this.ctx.camera.frustum.hasSphere(s)) {
				if(prev == null) {
					this.ctx.lights = ll.next;
				} else {
					prev.next = ll.next;
				}
				ll = ll.next;
				continue;
			}
			this.lightCount++;
			l.objectDistance = 0.;
			prev = ll;
			ll = ll.next;
		}
	}
	,sortLight: function(l1,l2) {
		var p = l1.priority - l2.priority;
		if(p != 0) {
			return -p;
		}
		if(l1.objectDistance < l2.objectDistance) {
			return -1;
		} else {
			return 1;
		}
	}
	,computeLight: function(obj,shaders) {
		var _gthis = this;
		if(this.lightCount > this.maxLightsPerObject) {
			var ll = this.ctx.lights;
			while(ll != null) {
				var l = ((ll) instanceof h3d_scene_fwd_Light) ? ll : null;
				if((obj.flags & 16) != 0) {
					var dx = l.absPos._41 - this.ctx.camera.target.x;
					var dy = l.absPos._42 - this.ctx.camera.target.y;
					var dz = l.absPos._43 - this.ctx.camera.target.z;
					if(dz == null) {
						dz = 0.;
					}
					l.objectDistance = dx * dx + dy * dy + dz * dz;
				} else {
					var dx1 = l.absPos._41 - obj.absPos._41;
					var dy1 = l.absPos._42 - obj.absPos._42;
					var dz1 = l.absPos._43 - obj.absPos._43;
					if(dz1 == null) {
						dz1 = 0.;
					}
					l.objectDistance = dx1 * dx1 + dy1 * dy1 + dz1 * dz1;
				}
				ll = ll.next;
			}
			var list = this.ctx.lights;
			var cmp = $bind(this,this.sortLight);
			var tmp;
			if(list == null) {
				tmp = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p;
				var q;
				var e;
				var tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						var _g = 0;
						var _g1 = insize;
						while(_g < _g1) {
							var i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			this.ctx.lights = tmp;
		}
		shaders = _gthis.ctx.allocShaderList(this.ambientShader,shaders);
		var l = this.ctx.lights;
		var i = 0;
		while(l != null) {
			if(i++ == this.maxLightsPerObject) {
				break;
			}
			shaders = _gthis.ctx.allocShaderList(l.shader,shaders);
			l = l.next;
		}
		return shaders;
	}
	,__class__: h3d_scene_fwd_LightSystem
});
var h3d_scene_fwd_DepthPass = function() {
	this.enableSky = false;
	h3d_pass_Default.call(this,"depth");
	this.depthMapId = hxsl_Globals.allocID("depthMap");
};
$hxClasses["h3d.scene.fwd.DepthPass"] = h3d_scene_fwd_DepthPass;
h3d_scene_fwd_DepthPass.__name__ = "h3d.scene.fwd.DepthPass";
h3d_scene_fwd_DepthPass.__super__ = h3d_pass_Default;
h3d_scene_fwd_DepthPass.prototype = $extend(h3d_pass_Default.prototype,{
	getOutputs: function() {
		return [hxsl_Output.PackFloat(hxsl_Output.Value("output.depth"))];
	}
	,draw: function(passes,sort) {
		var texture = this.ctx.textures.allocTarget("depthMap",this.ctx.engine.width,this.ctx.engine.height,true);
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(this.enableSky ? 0 : 16711680,1);
		h3d_pass_Default.prototype.draw.call(this,passes,sort);
		this.ctx.engine.popTarget();
		this.ctx.setGlobalID(this.depthMapId,{ texture : texture});
	}
	,__class__: h3d_scene_fwd_DepthPass
});
var h3d_scene_fwd_NormalPass = function() {
	h3d_pass_Default.call(this,"normal");
	this.normalMapId = hxsl_Globals.allocID("normalMap");
};
$hxClasses["h3d.scene.fwd.NormalPass"] = h3d_scene_fwd_NormalPass;
h3d_scene_fwd_NormalPass.__name__ = "h3d.scene.fwd.NormalPass";
h3d_scene_fwd_NormalPass.__super__ = h3d_pass_Default;
h3d_scene_fwd_NormalPass.prototype = $extend(h3d_pass_Default.prototype,{
	getOutputs: function() {
		return [hxsl_Output.PackNormal(hxsl_Output.Value("output.normal"))];
	}
	,draw: function(passes,sort) {
		var texture = this.ctx.textures.allocTarget("normalMap",this.ctx.engine.width,this.ctx.engine.height);
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(8421504,1);
		h3d_pass_Default.prototype.draw.call(this,passes,sort);
		this.ctx.engine.popTarget();
		this.ctx.setGlobalID(this.normalMapId,texture);
	}
	,__class__: h3d_scene_fwd_NormalPass
});
var h3d_scene_fwd_Renderer = function() {
	this.shadow = new h3d_pass_DefaultShadowMap(1024);
	this.normal = new h3d_scene_fwd_NormalPass();
	this.depth = new h3d_scene_fwd_DepthPass();
	h3d_scene_Renderer.call(this);
	this.defaultPass = new h3d_pass_Default("default");
	this.allPasses = [this.defaultPass,this.depth,this.normal,this.shadow];
};
$hxClasses["h3d.scene.fwd.Renderer"] = h3d_scene_fwd_Renderer;
h3d_scene_fwd_Renderer.__name__ = "h3d.scene.fwd.Renderer";
h3d_scene_fwd_Renderer.__super__ = h3d_scene_Renderer;
h3d_scene_fwd_Renderer.prototype = $extend(h3d_scene_Renderer.prototype,{
	renderPass: function(p,passes,sort) {
		p.draw(passes,sort);
	}
	,render: function() {
		if(this.has("shadow")) {
			this.renderPass(this.shadow,this.get("shadow"));
		}
		if(this.has("depth")) {
			this.renderPass(this.depth,this.get("depth"));
		}
		if(this.has("normal")) {
			this.renderPass(this.normal,this.get("normal"));
		}
		this.renderPass(this.defaultPass,this.get("default"));
		this.renderPass(this.defaultPass,this.get("alpha"),this.backToFront);
		this.renderPass(this.defaultPass,this.get("additive"));
	}
	,__class__: h3d_scene_fwd_Renderer
});
var h3d_shader_AmbientLight = function() {
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.AmbientLight"] = h3d_shader_AmbientLight;
h3d_shader_AmbientLight.__name__ = "h3d.shader.AmbientLight";
h3d_shader_AmbientLight.__super__ = hxsl_Shader;
h3d_shader_AmbientLight.prototype = $extend(hxsl_Shader.prototype,{
	get_additive: function() {
		return this.additive__;
	}
	,set_additive: function(_v) {
		this.constModified = true;
		return this.additive__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 2;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.additive__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_AmbientLight
});
var h3d_shader_Base2d = function() {
	this.viewportB__ = new h3d_Vector();
	this.viewportA__ = new h3d_Vector();
	this.halfPixelInverse__ = new h3d_Vector();
	this.uvPos__ = new h3d_Vector();
	this.filterMatrixB__ = new h3d_Vector();
	this.filterMatrixA__ = new h3d_Vector();
	this.absoluteMatrixB__ = new h3d_Vector();
	this.absoluteMatrixA__ = new h3d_Vector();
	this.color__ = new h3d_Vector();
	this.zValue__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.Base2d"] = h3d_shader_Base2d;
h3d_shader_Base2d.__name__ = "h3d.shader.Base2d";
h3d_shader_Base2d.__super__ = hxsl_Shader;
h3d_shader_Base2d.prototype = $extend(hxsl_Shader.prototype,{
	get_zValue: function() {
		return this.zValue__;
	}
	,set_zValue: function(_v) {
		return this.zValue__ = _v;
	}
	,get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,get_isRelative: function() {
		return this.isRelative__;
	}
	,set_isRelative: function(_v) {
		this.constModified = true;
		return this.isRelative__ = _v;
	}
	,get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,get_absoluteMatrixA: function() {
		return this.absoluteMatrixA__;
	}
	,set_absoluteMatrixA: function(_v) {
		return this.absoluteMatrixA__ = _v;
	}
	,get_absoluteMatrixB: function() {
		return this.absoluteMatrixB__;
	}
	,set_absoluteMatrixB: function(_v) {
		return this.absoluteMatrixB__ = _v;
	}
	,get_filterMatrixA: function() {
		return this.filterMatrixA__;
	}
	,set_filterMatrixA: function(_v) {
		return this.filterMatrixA__ = _v;
	}
	,get_filterMatrixB: function() {
		return this.filterMatrixB__;
	}
	,set_filterMatrixB: function(_v) {
		return this.filterMatrixB__ = _v;
	}
	,get_hasUVPos: function() {
		return this.hasUVPos__;
	}
	,set_hasUVPos: function(_v) {
		this.constModified = true;
		return this.hasUVPos__ = _v;
	}
	,get_uvPos: function() {
		return this.uvPos__;
	}
	,set_uvPos: function(_v) {
		return this.uvPos__ = _v;
	}
	,get_killAlpha: function() {
		return this.killAlpha__;
	}
	,set_killAlpha: function(_v) {
		this.constModified = true;
		return this.killAlpha__ = _v;
	}
	,get_pixelAlign: function() {
		return this.pixelAlign__;
	}
	,set_pixelAlign: function(_v) {
		this.constModified = true;
		return this.pixelAlign__ = _v;
	}
	,get_halfPixelInverse: function() {
		return this.halfPixelInverse__;
	}
	,set_halfPixelInverse: function(_v) {
		return this.halfPixelInverse__ = _v;
	}
	,get_viewportA: function() {
		return this.viewportA__;
	}
	,set_viewportA: function(_v) {
		return this.viewportA__ = _v;
	}
	,get_viewportB: function() {
		return this.viewportB__;
	}
	,set_viewportB: function(_v) {
		return this.viewportB__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isRelative__) {
			this.constBits |= 1;
		}
		if(this.hasUVPos__) {
			this.constBits |= 2;
		}
		if(this.killAlpha__) {
			this.constBits |= 4;
		}
		if(this.pixelAlign__) {
			this.constBits |= 8;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.zValue__;
		case 1:
			return this.texture__;
		case 2:
			return this.isRelative__;
		case 3:
			return this.color__;
		case 4:
			return this.absoluteMatrixA__;
		case 5:
			return this.absoluteMatrixB__;
		case 6:
			return this.filterMatrixA__;
		case 7:
			return this.filterMatrixB__;
		case 8:
			return this.hasUVPos__;
		case 9:
			return this.uvPos__;
		case 10:
			return this.killAlpha__;
		case 11:
			return this.pixelAlign__;
		case 12:
			return this.halfPixelInverse__;
		case 13:
			return this.viewportA__;
		case 14:
			return this.viewportB__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.zValue__;
		}
		return 0.;
	}
	,__class__: h3d_shader_Base2d
});
var h3d_shader_BaseMesh = function() {
	this.specularColor__ = new h3d_Vector();
	this.specularAmount__ = 0;
	this.specularPower__ = 0;
	this.color__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.color__;
	var x = 1;
	var y = 1;
	var z = 1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = 1.;
	var _this = this.specularColor__;
	var x = 1;
	var y = 1;
	var z = 1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = 1.;
	this.specularPower__ = 50;
	this.specularAmount__ = 1;
};
$hxClasses["h3d.shader.BaseMesh"] = h3d_shader_BaseMesh;
h3d_shader_BaseMesh.__name__ = "h3d.shader.BaseMesh";
h3d_shader_BaseMesh.__super__ = hxsl_Shader;
h3d_shader_BaseMesh.prototype = $extend(hxsl_Shader.prototype,{
	get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,get_specularPower: function() {
		return this.specularPower__;
	}
	,set_specularPower: function(_v) {
		return this.specularPower__ = _v;
	}
	,get_specularAmount: function() {
		return this.specularAmount__;
	}
	,set_specularAmount: function(_v) {
		return this.specularAmount__ = _v;
	}
	,get_specularColor: function() {
		return this.specularColor__;
	}
	,set_specularColor: function(_v) {
		return this.specularColor__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.color__;
		case 1:
			return this.specularPower__;
		case 2:
			return this.specularAmount__;
		case 3:
			return this.specularColor__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 1:
			return this.specularPower__;
		case 2:
			return this.specularAmount__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_shader_BaseMesh
});
var h3d_shader_Blur = function() {
	this.cubeDir__ = new h3d_Matrix();
	this.fixedColor__ = new h3d_Vector();
	this.pixel__ = new h3d_Vector();
	this.offsets__ = [];
	this.values__ = [];
	this.Quality__ = 0;
	this.cameraInverseViewProj__ = new h3d_Matrix();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.Blur"] = h3d_shader_Blur;
h3d_shader_Blur.__name__ = "h3d.shader.Blur";
h3d_shader_Blur.__super__ = h3d_shader_ScreenShader;
h3d_shader_Blur.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_cameraInverseViewProj: function() {
		return this.cameraInverseViewProj__;
	}
	,set_cameraInverseViewProj: function(_v) {
		return this.cameraInverseViewProj__ = _v;
	}
	,get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,get_depthTexture: function() {
		return this.depthTexture__;
	}
	,set_depthTexture: function(_v) {
		return this.depthTexture__ = _v;
	}
	,get_Quality: function() {
		return this.Quality__;
	}
	,set_Quality: function(_v) {
		this.constModified = true;
		return this.Quality__ = _v;
	}
	,get_isDepth: function() {
		return this.isDepth__;
	}
	,set_isDepth: function(_v) {
		this.constModified = true;
		return this.isDepth__ = _v;
	}
	,get_values: function() {
		return this.values__;
	}
	,set_values: function(_v) {
		return this.values__ = _v;
	}
	,get_offsets: function() {
		return this.offsets__;
	}
	,set_offsets: function(_v) {
		return this.offsets__ = _v;
	}
	,get_pixel: function() {
		return this.pixel__;
	}
	,set_pixel: function(_v) {
		return this.pixel__ = _v;
	}
	,get_hasFixedColor: function() {
		return this.hasFixedColor__;
	}
	,set_hasFixedColor: function(_v) {
		this.constModified = true;
		return this.hasFixedColor__ = _v;
	}
	,get_smoothFixedColor: function() {
		return this.smoothFixedColor__;
	}
	,set_smoothFixedColor: function(_v) {
		this.constModified = true;
		return this.smoothFixedColor__ = _v;
	}
	,get_fixedColor: function() {
		return this.fixedColor__;
	}
	,set_fixedColor: function(_v) {
		return this.fixedColor__ = _v;
	}
	,get_isDepthDependant: function() {
		return this.isDepthDependant__;
	}
	,set_isDepthDependant: function(_v) {
		this.constModified = true;
		return this.isDepthDependant__ = _v;
	}
	,get_hasNormal: function() {
		return this.hasNormal__;
	}
	,set_hasNormal: function(_v) {
		this.constModified = true;
		return this.hasNormal__ = _v;
	}
	,get_normalTexture: function() {
		return this.normalTexture__;
	}
	,set_normalTexture: function(_v) {
		return this.normalTexture__ = _v;
	}
	,get_isCube: function() {
		return this.isCube__;
	}
	,set_isCube: function(_v) {
		this.constModified = true;
		return this.isCube__ = _v;
	}
	,get_cubeTexture: function() {
		return this.cubeTexture__;
	}
	,set_cubeTexture: function(_v) {
		return this.cubeTexture__ = _v;
	}
	,get_cubeDir: function() {
		return this.cubeDir__;
	}
	,set_cubeDir: function(_v) {
		return this.cubeDir__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.Quality__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("Quality" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		if(this.isDepth__) {
			this.constBits |= 256;
		}
		if(this.hasFixedColor__) {
			this.constBits |= 512;
		}
		if(this.smoothFixedColor__) {
			this.constBits |= 1024;
		}
		if(this.isDepthDependant__) {
			this.constBits |= 2048;
		}
		if(this.hasNormal__) {
			this.constBits |= 4096;
		}
		if(this.isCube__) {
			this.constBits |= 8192;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.cameraInverseViewProj__;
		case 2:
			return this.texture__;
		case 3:
			return this.depthTexture__;
		case 4:
			return this.Quality__;
		case 5:
			return this.isDepth__;
		case 6:
			return this.values__;
		case 7:
			return this.offsets__;
		case 8:
			return this.pixel__;
		case 9:
			return this.hasFixedColor__;
		case 10:
			return this.smoothFixedColor__;
		case 11:
			return this.fixedColor__;
		case 12:
			return this.isDepthDependant__;
		case 13:
			return this.hasNormal__;
		case 14:
			return this.normalTexture__;
		case 15:
			return this.isCube__;
		case 16:
			return this.cubeTexture__;
		case 17:
			return this.cubeDir__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_shader_Blur
});
var h3d_shader_ShaderBuffers = function(s) {
	this.globals = new Float32Array(s.globalsSize << 2);
	this.params = new Float32Array(s.paramsSize << 2);
	var this1 = new Array(s.texturesCount);
	this.tex = this1;
	var tmp;
	if(s.bufferCount > 0) {
		var this1 = new Array(s.bufferCount);
		tmp = this1;
	} else {
		tmp = null;
	}
	this.buffers = tmp;
};
$hxClasses["h3d.shader.ShaderBuffers"] = h3d_shader_ShaderBuffers;
h3d_shader_ShaderBuffers.__name__ = "h3d.shader.ShaderBuffers";
h3d_shader_ShaderBuffers.prototype = {
	grow: function(s) {
		var ng = s.globalsSize << 2;
		var np = s.paramsSize << 2;
		var nt = s.texturesCount;
		var nb = s.bufferCount;
		if(this.globals.length < ng) {
			this.globals = new Float32Array(ng);
		}
		if(this.params.length < np) {
			this.params = new Float32Array(np);
		}
		if(this.tex.length < nt) {
			var this1 = new Array(nt);
			this.tex = this1;
		}
		if(nb > 0 && (this.buffers == null || this.buffers.length < nb)) {
			var this1 = new Array(nb);
			this.buffers = this1;
		}
	}
	,__class__: h3d_shader_ShaderBuffers
};
var h3d_shader_Buffers = function(s) {
	this.vertex = new h3d_shader_ShaderBuffers(s.vertex);
	this.fragment = new h3d_shader_ShaderBuffers(s.fragment);
};
$hxClasses["h3d.shader.Buffers"] = h3d_shader_Buffers;
h3d_shader_Buffers.__name__ = "h3d.shader.Buffers";
h3d_shader_Buffers.prototype = {
	__class__: h3d_shader_Buffers
};
var h3d_shader_ColorAdd = function(color) {
	if(color == null) {
		color = 0;
	}
	this.color__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.color__;
	_this.x = (color >> 16 & 255) / 255;
	_this.y = (color >> 8 & 255) / 255;
	_this.z = (color & 255) / 255;
	_this.w = (color >>> 24) / 255;
};
$hxClasses["h3d.shader.ColorAdd"] = h3d_shader_ColorAdd;
h3d_shader_ColorAdd.__name__ = "h3d.shader.ColorAdd";
h3d_shader_ColorAdd.__super__ = hxsl_Shader;
h3d_shader_ColorAdd.prototype = $extend(hxsl_Shader.prototype,{
	get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.color__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_ColorAdd
});
var h3d_shader_ColorKey = function(v) {
	if(v == null) {
		v = 0;
	}
	this.colorKey__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.colorKey__;
	_this.x = (v >> 16 & 255) / 255;
	_this.y = (v >> 8 & 255) / 255;
	_this.z = (v & 255) / 255;
	_this.w = (v >>> 24) / 255;
};
$hxClasses["h3d.shader.ColorKey"] = h3d_shader_ColorKey;
h3d_shader_ColorKey.__name__ = "h3d.shader.ColorKey";
h3d_shader_ColorKey.__super__ = hxsl_Shader;
h3d_shader_ColorKey.prototype = $extend(hxsl_Shader.prototype,{
	get_colorKey: function() {
		return this.colorKey__;
	}
	,set_colorKey: function(_v) {
		return this.colorKey__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.colorKey__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_ColorKey
});
var h3d_shader_ColorMatrix = function(m) {
	this.matrix__ = new h3d_Matrix();
	hxsl_Shader.call(this);
	if(m != null) {
		this.matrix__.loadValues(m);
	} else {
		this.matrix__.identity();
	}
};
$hxClasses["h3d.shader.ColorMatrix"] = h3d_shader_ColorMatrix;
h3d_shader_ColorMatrix.__name__ = "h3d.shader.ColorMatrix";
h3d_shader_ColorMatrix.__super__ = hxsl_Shader;
h3d_shader_ColorMatrix.prototype = $extend(hxsl_Shader.prototype,{
	get_matrix: function() {
		return this.matrix__;
	}
	,set_matrix: function(_v) {
		return this.matrix__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.matrix__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_ColorMatrix
});
var h3d_shader_DirShadow = function() {
	this.poissonDisk__ = [];
	this.shadowBias__ = 0;
	this.shadowProj__ = new h3d_Matrix();
	this.shadowMapChannel__ = hxsl_Channel.Unknown;
	this.shadowRes__ = new h3d_Vector();
	this.pcfScale__ = 0;
	this.PCF_SAMPLES__ = 0;
	this.shadowPower__ = 0;
	hxsl_Shader.call(this);
	this.set_pcfQuality(1);
};
$hxClasses["h3d.shader.DirShadow"] = h3d_shader_DirShadow;
h3d_shader_DirShadow.__name__ = "h3d.shader.DirShadow";
h3d_shader_DirShadow.__super__ = hxsl_Shader;
h3d_shader_DirShadow.prototype = $extend(hxsl_Shader.prototype,{
	set_pcfQuality: function(q) {
		var _v;
		switch(q) {
		case 2:
			_v = [new h3d_Vector(-0.326,-0.406),new h3d_Vector(-0.840,-0.074),new h3d_Vector(-0.696,0.457),new h3d_Vector(-0.203,0.621),new h3d_Vector(0.962,-0.195),new h3d_Vector(0.473,-0.480),new h3d_Vector(0.519,0.767),new h3d_Vector(0.185,-0.893),new h3d_Vector(0.507,0.064),new h3d_Vector(0.896,0.412),new h3d_Vector(-0.322,-0.933),new h3d_Vector(-0.792,-0.598)];
			break;
		case 3:
			_v = [new h3d_Vector(-0.613392,0.617481),new h3d_Vector(0.170019,-0.040254),new h3d_Vector(-0.299417,0.791925),new h3d_Vector(0.645680,0.493210),new h3d_Vector(-0.651784,0.717887),new h3d_Vector(0.421003,0.027070),new h3d_Vector(-0.817194,-0.271096),new h3d_Vector(-0.705374,-0.668203),new h3d_Vector(0.977050,-0.108615),new h3d_Vector(0.063326,0.142369),new h3d_Vector(0.203528,0.214331),new h3d_Vector(-0.667531,0.326090),new h3d_Vector(-0.098422,-0.295755),new h3d_Vector(-0.885922,0.215369),new h3d_Vector(0.566637,0.605213),new h3d_Vector(0.039766,-0.396100),new h3d_Vector(0.751946,0.453352),new h3d_Vector(0.078707,-0.715323),new h3d_Vector(-0.075838,-0.529344),new h3d_Vector(0.724479,-0.580798),new h3d_Vector(0.222999,-0.215125),new h3d_Vector(-0.467574,-0.405438),new h3d_Vector(-0.248268,-0.814753),new h3d_Vector(0.354411,-0.887570),new h3d_Vector(0.175817,0.382366),new h3d_Vector(0.487472,-0.063082),new h3d_Vector(-0.084078,0.898312),new h3d_Vector(0.488876,-0.783441),new h3d_Vector(0.470016,0.217933),new h3d_Vector(-0.696890,-0.549791),new h3d_Vector(-0.149693,0.605762),new h3d_Vector(0.034211,0.979980),new h3d_Vector(0.503098,-0.308878),new h3d_Vector(-0.016205,-0.872921),new h3d_Vector(0.385784,-0.393902),new h3d_Vector(-0.146886,-0.859249),new h3d_Vector(0.643361,0.164098),new h3d_Vector(0.634388,-0.049471),new h3d_Vector(-0.688894,0.007843),new h3d_Vector(0.464034,-0.188818),new h3d_Vector(-0.440840,0.137486),new h3d_Vector(0.364483,0.511704),new h3d_Vector(0.034028,0.325968),new h3d_Vector(0.099094,-0.308023),new h3d_Vector(0.693960,-0.366253),new h3d_Vector(0.678884,-0.204688),new h3d_Vector(0.001801,0.780328),new h3d_Vector(0.145177,-0.898984),new h3d_Vector(0.062655,-0.611866),new h3d_Vector(0.315226,-0.604297),new h3d_Vector(-0.780145,0.486251),new h3d_Vector(-0.371868,0.882138),new h3d_Vector(0.200476,0.494430),new h3d_Vector(-0.494552,-0.711051),new h3d_Vector(0.612476,0.705252),new h3d_Vector(-0.578845,-0.768792),new h3d_Vector(-0.772454,-0.090976),new h3d_Vector(0.504440,0.372295),new h3d_Vector(0.155736,0.065157),new h3d_Vector(0.391522,0.849605),new h3d_Vector(-0.620106,-0.328104),new h3d_Vector(0.789239,-0.419965),new h3d_Vector(-0.545396,0.538133),new h3d_Vector(-0.178564,-0.596057)];
			break;
		default:
			_v = [new h3d_Vector(-0.942,-0.399),new h3d_Vector(0.945,-0.768),new h3d_Vector(-0.094,-0.929),new h3d_Vector(0.344,0.293)];
		}
		this.poissonDisk__ = _v;
		this.constModified = true;
		this.PCF_SAMPLES__ = this.poissonDisk__.length;
		return q;
	}
	,get_enable: function() {
		return this.enable__;
	}
	,set_enable: function(_v) {
		this.constModified = true;
		return this.enable__ = _v;
	}
	,get_USE_ESM: function() {
		return this.USE_ESM__;
	}
	,set_USE_ESM: function(_v) {
		this.constModified = true;
		return this.USE_ESM__ = _v;
	}
	,get_shadowPower: function() {
		return this.shadowPower__;
	}
	,set_shadowPower: function(_v) {
		return this.shadowPower__ = _v;
	}
	,get_USE_PCF: function() {
		return this.USE_PCF__;
	}
	,set_USE_PCF: function(_v) {
		this.constModified = true;
		return this.USE_PCF__ = _v;
	}
	,get_PCF_SAMPLES: function() {
		return this.PCF_SAMPLES__;
	}
	,set_PCF_SAMPLES: function(_v) {
		this.constModified = true;
		return this.PCF_SAMPLES__ = _v;
	}
	,get_pcfScale: function() {
		return this.pcfScale__;
	}
	,set_pcfScale: function(_v) {
		return this.pcfScale__ = _v;
	}
	,get_shadowRes: function() {
		return this.shadowRes__;
	}
	,set_shadowRes: function(_v) {
		return this.shadowRes__ = _v;
	}
	,get_shadowMap: function() {
		return this.shadowMap__;
	}
	,set_shadowMap: function(_v) {
		this.constModified = true;
		return this.shadowMap__ = _v;
	}
	,get_shadowProj: function() {
		return this.shadowProj__;
	}
	,set_shadowProj: function(_v) {
		return this.shadowProj__ = _v;
	}
	,get_shadowBias: function() {
		return this.shadowBias__;
	}
	,set_shadowBias: function(_v) {
		return this.shadowBias__ = _v;
	}
	,get_poissonDisk: function() {
		return this.poissonDisk__;
	}
	,set_poissonDisk: function(_v) {
		return this.poissonDisk__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.enable__) {
			this.constBits |= 1;
		}
		if(this.USE_ESM__) {
			this.constBits |= 2;
		}
		if(this.USE_PCF__) {
			this.constBits |= 4;
		}
		var v = this.PCF_SAMPLES__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("PCF_SAMPLES" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v << 3;
		if(this.shadowMap__ == null) {
			this.shadowMapChannel__ = hxsl_Channel.Unknown;
		} else if(this.shadowMapChannel__ == hxsl_Channel.Unknown) {
			if(this.shadowMap__.format == h3d_mat_Texture.nativeFormat) {
				this.shadowMapChannel__ = hxsl_Channel.PackedFloat;
			} else {
				throw haxe_Exception.thrown("shadowMap" + "Channel is not set");
			}
		}
		this.constBits |= (globals.allocChannelID(this.shadowMap__) << 3 | this.shadowMapChannel__._hx_index) << 11;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.enable__;
		case 1:
			return this.USE_ESM__;
		case 2:
			return this.shadowPower__;
		case 3:
			return this.USE_PCF__;
		case 4:
			return this.PCF_SAMPLES__;
		case 5:
			return this.pcfScale__;
		case 6:
			return this.shadowRes__;
		case 7:
			return this.shadowMap__;
		case 8:
			return this.shadowProj__;
		case 9:
			return this.shadowBias__;
		case 10:
			return this.poissonDisk__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 2:
			return this.shadowPower__;
		case 5:
			return this.pcfScale__;
		case 9:
			return this.shadowBias__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_shader_DirShadow
});
var h3d_shader_GenTexture = function() {
	this.color__ = new h3d_Vector();
	this.mode__ = 0;
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.GenTexture"] = h3d_shader_GenTexture;
h3d_shader_GenTexture.__name__ = "h3d.shader.GenTexture";
h3d_shader_GenTexture.__super__ = h3d_shader_ScreenShader;
h3d_shader_GenTexture.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_mode: function() {
		return this.mode__;
	}
	,set_mode: function(_v) {
		this.constModified = true;
		return this.mode__ = _v;
	}
	,get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.mode__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("mode" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.mode__;
		case 2:
			return this.color__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_shader_GenTexture
});
var h3d_shader_LineShader = function(width,lengthScale) {
	if(lengthScale == null) {
		lengthScale = 1.;
	}
	if(width == null) {
		width = 1.5;
	}
	this.width__ = 0;
	this.lengthScale__ = 0;
	hxsl_Shader.call(this);
	this.width__ = width;
	this.lengthScale__ = lengthScale;
};
$hxClasses["h3d.shader.LineShader"] = h3d_shader_LineShader;
h3d_shader_LineShader.__name__ = "h3d.shader.LineShader";
h3d_shader_LineShader.__super__ = hxsl_Shader;
h3d_shader_LineShader.prototype = $extend(hxsl_Shader.prototype,{
	get_lengthScale: function() {
		return this.lengthScale__;
	}
	,set_lengthScale: function(_v) {
		return this.lengthScale__ = _v;
	}
	,get_width: function() {
		return this.width__;
	}
	,set_width: function(_v) {
		return this.width__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.lengthScale__;
		case 1:
			return this.width__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.lengthScale__;
		case 1:
			return this.width__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_shader_LineShader
});
var h3d_shader_MinMaxShader = function() {
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.MinMaxShader"] = h3d_shader_MinMaxShader;
h3d_shader_MinMaxShader.__name__ = "h3d.shader.MinMaxShader";
h3d_shader_MinMaxShader.__super__ = h3d_shader_ScreenShader;
h3d_shader_MinMaxShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_texA: function() {
		return this.texA__;
	}
	,set_texA: function(_v) {
		return this.texA__ = _v;
	}
	,get_texB: function() {
		return this.texB__;
	}
	,set_texB: function(_v) {
		return this.texB__ = _v;
	}
	,get_isMax: function() {
		return this.isMax__;
	}
	,set_isMax: function(_v) {
		this.constModified = true;
		return this.isMax__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isMax__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texA__;
		case 2:
			return this.texB__;
		case 3:
			return this.isMax__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_shader_MinMaxShader
});
var h3d_shader_CubeMinMaxShader = function() {
	this.mat__ = new h3d_Matrix();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.CubeMinMaxShader"] = h3d_shader_CubeMinMaxShader;
h3d_shader_CubeMinMaxShader.__name__ = "h3d.shader.CubeMinMaxShader";
h3d_shader_CubeMinMaxShader.__super__ = h3d_shader_ScreenShader;
h3d_shader_CubeMinMaxShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_texA: function() {
		return this.texA__;
	}
	,set_texA: function(_v) {
		return this.texA__ = _v;
	}
	,get_texB: function() {
		return this.texB__;
	}
	,set_texB: function(_v) {
		return this.texB__ = _v;
	}
	,get_isMax: function() {
		return this.isMax__;
	}
	,set_isMax: function(_v) {
		this.constModified = true;
		return this.isMax__ = _v;
	}
	,get_mat: function() {
		return this.mat__;
	}
	,set_mat: function(_v) {
		return this.mat__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isMax__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texA__;
		case 2:
			return this.texB__;
		case 3:
			return this.isMax__;
		case 4:
			return this.mat__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_shader_CubeMinMaxShader
});
var h3d_shader_NormalMap = function(texture) {
	hxsl_Shader.call(this);
	this.texture__ = texture;
};
$hxClasses["h3d.shader.NormalMap"] = h3d_shader_NormalMap;
h3d_shader_NormalMap.__name__ = "h3d.shader.NormalMap";
h3d_shader_NormalMap.__super__ = hxsl_Shader;
h3d_shader_NormalMap.prototype = $extend(hxsl_Shader.prototype,{
	get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.texture__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_NormalMap
});
var h3d_shader_Shadow = function() {
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.Shadow"] = h3d_shader_Shadow;
h3d_shader_Shadow.__name__ = "h3d.shader.Shadow";
h3d_shader_Shadow.__super__ = hxsl_Shader;
h3d_shader_Shadow.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_Shadow
});
var h3d_shader_SignedDistanceField = function() {
	this.smoothing__ = 0.041666666666666664;
	this.alphaCutoff__ = 0.5;
	this.autoSmoothing__ = false;
	this.channel__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.SignedDistanceField"] = h3d_shader_SignedDistanceField;
h3d_shader_SignedDistanceField.__name__ = "h3d.shader.SignedDistanceField";
h3d_shader_SignedDistanceField.__super__ = hxsl_Shader;
h3d_shader_SignedDistanceField.prototype = $extend(hxsl_Shader.prototype,{
	get_channel: function() {
		return this.channel__;
	}
	,set_channel: function(_v) {
		this.constModified = true;
		return this.channel__ = _v;
	}
	,get_autoSmoothing: function() {
		return this.autoSmoothing__;
	}
	,set_autoSmoothing: function(_v) {
		this.constModified = true;
		return this.autoSmoothing__ = _v;
	}
	,get_alphaCutoff: function() {
		return this.alphaCutoff__;
	}
	,set_alphaCutoff: function(_v) {
		return this.alphaCutoff__ = _v;
	}
	,get_smoothing: function() {
		return this.smoothing__;
	}
	,set_smoothing: function(_v) {
		return this.smoothing__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.channel__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("channel" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		if(this.autoSmoothing__) {
			this.constBits |= 256;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.channel__;
		case 1:
			return this.autoSmoothing__;
		case 2:
			return this.alphaCutoff__;
		case 3:
			return this.smoothing__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 2:
			return this.alphaCutoff__;
		case 3:
			return this.smoothing__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_shader_SignedDistanceField
});
var h3d_shader_SkinBase = function() {
	this.bonesMatrixes__ = [];
	this.fourBonesByVertex__ = false;
	this.MaxBones__ = 0;
	hxsl_Shader.call(this);
	this.constModified = true;
	this.MaxBones__ = 34;
};
$hxClasses["h3d.shader.SkinBase"] = h3d_shader_SkinBase;
h3d_shader_SkinBase.__name__ = "h3d.shader.SkinBase";
h3d_shader_SkinBase.__super__ = hxsl_Shader;
h3d_shader_SkinBase.prototype = $extend(hxsl_Shader.prototype,{
	get_MaxBones: function() {
		return this.MaxBones__;
	}
	,set_MaxBones: function(_v) {
		this.constModified = true;
		return this.MaxBones__ = _v;
	}
	,get_fourBonesByVertex: function() {
		return this.fourBonesByVertex__;
	}
	,set_fourBonesByVertex: function(_v) {
		this.constModified = true;
		return this.fourBonesByVertex__ = _v;
	}
	,get_bonesMatrixes: function() {
		return this.bonesMatrixes__;
	}
	,set_bonesMatrixes: function(_v) {
		return this.bonesMatrixes__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.MaxBones__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("MaxBones" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		if(this.fourBonesByVertex__) {
			this.constBits |= 256;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.MaxBones__;
		case 1:
			return this.fourBonesByVertex__;
		case 2:
			return this.bonesMatrixes__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_SkinBase
});
var h3d_shader_Skin = function() {
	h3d_shader_SkinBase.call(this);
};
$hxClasses["h3d.shader.Skin"] = h3d_shader_Skin;
h3d_shader_Skin.__name__ = "h3d.shader.Skin";
h3d_shader_Skin.__super__ = h3d_shader_SkinBase;
h3d_shader_Skin.prototype = $extend(h3d_shader_SkinBase.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.MaxBones__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("MaxBones" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		if(this.fourBonesByVertex__) {
			this.constBits |= 256;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.MaxBones__;
		case 1:
			return this.fourBonesByVertex__;
		case 2:
			return this.bonesMatrixes__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_Skin
});
var h3d_shader_SkinTangent = function() {
	h3d_shader_SkinBase.call(this);
};
$hxClasses["h3d.shader.SkinTangent"] = h3d_shader_SkinTangent;
h3d_shader_SkinTangent.__name__ = "h3d.shader.SkinTangent";
h3d_shader_SkinTangent.__super__ = h3d_shader_SkinBase;
h3d_shader_SkinTangent.prototype = $extend(h3d_shader_SkinBase.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.MaxBones__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("MaxBones" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		if(this.fourBonesByVertex__) {
			this.constBits |= 256;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.MaxBones__;
		case 1:
			return this.fourBonesByVertex__;
		case 2:
			return this.bonesMatrixes__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_SkinTangent
});
var h3d_shader_SpecularTexture = function(tex) {
	hxsl_Shader.call(this);
	this.texture__ = tex;
};
$hxClasses["h3d.shader.SpecularTexture"] = h3d_shader_SpecularTexture;
h3d_shader_SpecularTexture.__name__ = "h3d.shader.SpecularTexture";
h3d_shader_SpecularTexture.__super__ = hxsl_Shader;
h3d_shader_SpecularTexture.prototype = $extend(hxsl_Shader.prototype,{
	get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.texture__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_SpecularTexture
});
var h3d_shader_Texture = function(tex) {
	this.killAlphaThreshold__ = 0;
	hxsl_Shader.call(this);
	this.texture__ = tex;
	this.killAlphaThreshold__ = h3d_mat_Defaults.defaultKillAlphaThreshold;
};
$hxClasses["h3d.shader.Texture"] = h3d_shader_Texture;
h3d_shader_Texture.__name__ = "h3d.shader.Texture";
h3d_shader_Texture.__super__ = hxsl_Shader;
h3d_shader_Texture.prototype = $extend(hxsl_Shader.prototype,{
	get_additive: function() {
		return this.additive__;
	}
	,set_additive: function(_v) {
		this.constModified = true;
		return this.additive__ = _v;
	}
	,get_killAlpha: function() {
		return this.killAlpha__;
	}
	,set_killAlpha: function(_v) {
		this.constModified = true;
		return this.killAlpha__ = _v;
	}
	,get_specularAlpha: function() {
		return this.specularAlpha__;
	}
	,set_specularAlpha: function(_v) {
		this.constModified = true;
		return this.specularAlpha__ = _v;
	}
	,get_killAlphaThreshold: function() {
		return this.killAlphaThreshold__;
	}
	,set_killAlphaThreshold: function(_v) {
		return this.killAlphaThreshold__ = _v;
	}
	,get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 1;
		}
		if(this.killAlpha__) {
			this.constBits |= 2;
		}
		if(this.specularAlpha__) {
			this.constBits |= 4;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.additive__;
		case 1:
			return this.killAlpha__;
		case 2:
			return this.specularAlpha__;
		case 3:
			return this.killAlphaThreshold__;
		case 4:
			return this.texture__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 3) {
			return this.killAlphaThreshold__;
		}
		return 0.;
	}
	,__class__: h3d_shader_Texture
});
var h3d_shader_UVDelta = function(dx,dy,sx,sy) {
	if(sy == null) {
		sy = 1.;
	}
	if(sx == null) {
		sx = 1.;
	}
	if(dy == null) {
		dy = 0.;
	}
	if(dx == null) {
		dx = 0.;
	}
	this.uvScale__ = new h3d_Vector();
	this.uvDelta__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.uvDelta__;
	var x = dx;
	var y = dy;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = 0.;
	_this.w = 1.;
	var _this = this.uvScale__;
	var x = sx;
	var y = sy;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = 0.;
	_this.w = 1.;
};
$hxClasses["h3d.shader.UVDelta"] = h3d_shader_UVDelta;
h3d_shader_UVDelta.__name__ = "h3d.shader.UVDelta";
h3d_shader_UVDelta.__super__ = hxsl_Shader;
h3d_shader_UVDelta.prototype = $extend(hxsl_Shader.prototype,{
	get_uvDelta: function() {
		return this.uvDelta__;
	}
	,set_uvDelta: function(_v) {
		return this.uvDelta__ = _v;
	}
	,get_uvScale: function() {
		return this.uvScale__;
	}
	,set_uvScale: function(_v) {
		return this.uvScale__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.uvDelta__;
		case 1:
			return this.uvScale__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_UVDelta
});
var h3d_shader_VertexColorAlpha = function() {
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.VertexColorAlpha"] = h3d_shader_VertexColorAlpha;
h3d_shader_VertexColorAlpha.__name__ = "h3d.shader.VertexColorAlpha";
h3d_shader_VertexColorAlpha.__super__ = hxsl_Shader;
h3d_shader_VertexColorAlpha.prototype = $extend(hxsl_Shader.prototype,{
	get_additive: function() {
		return this.additive__;
	}
	,set_additive: function(_v) {
		this.constModified = true;
		return this.additive__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.additive__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_VertexColorAlpha
});
var h3d_shader_VolumeDecal = function(objectWidth,objectHeight) {
	this.isCentered__ = true;
	this.tangent__ = new h3d_Vector();
	this.normal__ = new h3d_Vector();
	this.scale__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.normal__;
	var x = 0;
	var y = 0;
	var z = 1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = 1.;
	var _this = this.tangent__;
	var x = 1;
	var y = 0;
	var z = 0;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = 1.;
	var _this = this.scale__;
	var x = 1 / objectWidth;
	var y = 1 / objectHeight;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = 0.;
	_this.w = 1.;
};
$hxClasses["h3d.shader.VolumeDecal"] = h3d_shader_VolumeDecal;
h3d_shader_VolumeDecal.__name__ = "h3d.shader.VolumeDecal";
h3d_shader_VolumeDecal.__super__ = hxsl_Shader;
h3d_shader_VolumeDecal.prototype = $extend(hxsl_Shader.prototype,{
	get_scale: function() {
		return this.scale__;
	}
	,set_scale: function(_v) {
		return this.scale__ = _v;
	}
	,get_normal: function() {
		return this.normal__;
	}
	,set_normal: function(_v) {
		return this.normal__ = _v;
	}
	,get_tangent: function() {
		return this.tangent__;
	}
	,set_tangent: function(_v) {
		return this.tangent__ = _v;
	}
	,get_isCentered: function() {
		return this.isCentered__;
	}
	,set_isCentered: function(_v) {
		this.constModified = true;
		return this.isCentered__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isCentered__) {
			this.constBits |= 64;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.scale__;
		case 1:
			return this.normal__;
		case 2:
			return this.tangent__;
		case 3:
			return this.isCentered__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_VolumeDecal
});
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
var haxe_EntryPoint = function() { };
$hxClasses["haxe.EntryPoint"] = haxe_EntryPoint;
haxe_EntryPoint.__name__ = "haxe.EntryPoint";
haxe_EntryPoint.processEvents = function() {
	while(true) {
		var f = haxe_EntryPoint.pending.shift();
		if(f == null) {
			break;
		}
		f();
	}
	var time = haxe_MainLoop.tick();
	if(!haxe_MainLoop.hasEvents() && haxe_EntryPoint.threadCount == 0) {
		return -1;
	}
	return time;
};
haxe_EntryPoint.run = function() {
	var nextTick = haxe_EntryPoint.processEvents();
	if(typeof(window) != "undefined") {
		var $window = window;
		var rqf = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame;
		if(rqf != null) {
			rqf(haxe_EntryPoint.run);
		} else if(nextTick >= 0) {
			setTimeout(haxe_EntryPoint.run,nextTick * 1000);
		}
	} else if(nextTick >= 0) {
		setTimeout(haxe_EntryPoint.run,nextTick * 1000);
	}
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
$hxClasses["haxe.Exception"] = haxe_Exception;
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,toString: function() {
		return this.get_message();
	}
	,get_message: function() {
		return this.message;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_MainEvent = function(f,p) {
	this.isBlocking = true;
	this.f = f;
	this.priority = p;
	this.nextRun = -Infinity;
};
$hxClasses["haxe.MainEvent"] = haxe_MainEvent;
haxe_MainEvent.__name__ = "haxe.MainEvent";
haxe_MainEvent.prototype = {
	__class__: haxe_MainEvent
};
var haxe_MainLoop = function() { };
$hxClasses["haxe.MainLoop"] = haxe_MainLoop;
haxe_MainLoop.__name__ = "haxe.MainLoop";
haxe_MainLoop.hasEvents = function() {
	var p = haxe_MainLoop.pending;
	while(p != null) {
		if(p.isBlocking) {
			return true;
		}
		p = p.next;
	}
	return false;
};
haxe_MainLoop.add = function(f,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(f == null) {
		throw haxe_Exception.thrown("Event function is null");
	}
	var e = new haxe_MainEvent(f,priority);
	var head = haxe_MainLoop.pending;
	if(head != null) {
		head.prev = e;
	}
	e.next = head;
	haxe_MainLoop.pending = e;
	haxe_MainLoop.injectIntoEventLoop(0);
	return e;
};
haxe_MainLoop.injectIntoEventLoop = function(waitMs) {
};
haxe_MainLoop.sortEvents = function() {
	var list = haxe_MainLoop.pending;
	if(list == null) {
		return;
	}
	var insize = 1;
	var nmerges;
	var psize = 0;
	var qsize = 0;
	var p;
	var q;
	var e;
	var tail;
	while(true) {
		p = list;
		list = null;
		tail = null;
		nmerges = 0;
		while(p != null) {
			++nmerges;
			q = p;
			psize = 0;
			var _g = 0;
			var _g1 = insize;
			while(_g < _g1) {
				var i = _g++;
				++psize;
				q = q.next;
				if(q == null) {
					break;
				}
			}
			qsize = insize;
			while(psize > 0 || qsize > 0 && q != null) {
				if(psize == 0) {
					e = q;
					q = q.next;
					--qsize;
				} else if(qsize == 0 || q == null || (p.priority > q.priority || p.priority == q.priority && p.nextRun <= q.nextRun)) {
					e = p;
					p = p.next;
					--psize;
				} else {
					e = q;
					q = q.next;
					--qsize;
				}
				if(tail != null) {
					tail.next = e;
				} else {
					list = e;
				}
				e.prev = tail;
				tail = e;
			}
			p = q;
		}
		tail.next = null;
		if(nmerges <= 1) {
			break;
		}
		insize *= 2;
	}
	list.prev = null;
	haxe_MainLoop.pending = list;
};
haxe_MainLoop.tick = function() {
	haxe_MainLoop.sortEvents();
	var e = haxe_MainLoop.pending;
	var now = HxOverrides.now() / 1000;
	var wait = 1e9;
	while(e != null) {
		var next = e.next;
		var wt = e.nextRun - now;
		if(wt <= 0) {
			wait = 0;
			if(e.f != null) {
				e.f();
			}
		} else if(wait > wt) {
			wait = wt;
		}
		e = next;
	}
	return wait;
};
var haxe_Resource = function() { };
$hxClasses["haxe.Resource"] = haxe_Resource;
haxe_Resource.__name__ = "haxe.Resource";
haxe_Resource.getBytes = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return haxe_io_Bytes.ofString(x.str);
			}
			return haxe_crypto_Base64.decode(x.data);
		}
	}
	return null;
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = "haxe._Unserializer.DefaultResolver";
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return $hxClasses[name];
	}
	,resolveEnum: function(name) {
		return $hxEnums[name];
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = this.buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = "haxe.Unserializer";
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g = 0;
	var _g1 = haxe_Unserializer.BASE64.length;
	while(_g < _g1) {
		var i = _g++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw haxe_Exception.thrown("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw haxe_Exception.thrown("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw haxe_Exception.thrown("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			return cl;
		case 66:
			var name = this.unserialize();
			var e = this.resolver.resolveEnum(name);
			if(e == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			return e;
		case 67:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw haxe_Exception.thrown("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw haxe_Exception.thrown("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n = this.readDigits();
					a[a.length + n - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h = new haxe_ds_StringMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				var value = this.unserialize();
				h.h[s] = value;
			}
			this.pos++;
			return h;
		case 99:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			this.pos++;
			var index = this.readDigits();
			var _this = edecl.__constructs__;
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = _this[i]._hx_name;
			}
			var tag = result[index];
			if(tag == null) {
				throw haxe_Exception.thrown("Unknown enum index " + name + "@" + index);
			}
			var e = this.unserializeEnum(edecl,tag);
			this.cache.push(e);
			return e;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o = { };
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 112:
			return Infinity;
		case 113:
			var h = new haxe_ds_IntMap();
			this.cache.push(h);
			var buf = this.buf;
			var c = this.buf.charCodeAt(this.pos++);
			while(c == 58) {
				var i = this.readDigits();
				var value = this.unserialize();
				h.h[i] = value;
				c = this.buf.charCodeAt(this.pos++);
			}
			if(c != 104) {
				throw haxe_Exception.thrown("Invalid IntMap format");
			}
			return h;
		case 114:
			var n = this.readDigits();
			if(n < 0 || n >= this.cache.length) {
				throw haxe_Exception.thrown("Invalid reference");
			}
			return this.cache[n];
		case 115:
			var len = this.readDigits();
			var buf = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i < max) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c1 << 2 | c2 >> 4;
				var c3 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				var c4 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c3 << 6 | c4;
			}
			if(rest >= 2) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c1 << 2 | c2 >> 4;
				if(rest == 3) {
					var c3 = codes[buf.charCodeAt(i++)];
					bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			var e = this.unserializeEnum(edecl,this.unserialize());
			this.cache.push(e);
			return e;
		case 120:
			throw haxe_Exception.thrown(this.unserialize());
		case 121:
			var len = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid string length");
			}
			var s = HxOverrides.substr(this.buf,this.pos,len);
			this.pos += len;
			s = decodeURIComponent(s.split("+").join(" "));
			this.scache.push(s);
			return s;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw haxe_Exception.thrown("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
$hxClasses["haxe.ValueException"] = haxe_ValueException;
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
$hxClasses["haxe.crypto.Adler32"] = haxe_crypto_Adler32;
haxe_crypto_Adler32.__name__ = "haxe.crypto.Adler32";
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g = pos;
		var _g1 = pos + len;
		while(_g < _g1) {
			var p = _g++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	,__class__: haxe_crypto_Adler32
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,fill: function(pos,len,value) {
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			this.b[pos++] = value;
		}
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	,getUInt16: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	,setUInt16: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setUint16(pos,v,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:true,__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
haxe_io_Encoding.__empty_constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.prototype = {
	initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g = 0;
		var _g1 = this.base.length;
		while(_g < _g1) {
			var i = _g++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw haxe_Exception.thrown("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_crypto_Md5 = function() {
};
$hxClasses["haxe.crypto.Md5"] = haxe_crypto_Md5;
haxe_crypto_Md5.__name__ = "haxe.crypto.Md5";
haxe_crypto_Md5.encode = function(s) {
	var m = new haxe_crypto_Md5();
	var h = m.doEncode(haxe_crypto_Md5.str2blks(s));
	return m.hex(h);
};
haxe_crypto_Md5.str2blks = function(str) {
	var str1 = haxe_io_Bytes.ofString(str);
	var nblk = (str1.length + 8 >> 6) + 1;
	var blks = [];
	var blksSize = nblk * 16;
	var _g = 0;
	var _g1 = blksSize;
	while(_g < _g1) {
		var i = _g++;
		blks[i] = 0;
	}
	var i = 0;
	var max = str1.length;
	var l = max * 8;
	while(i < max) {
		blks[i >> 2] |= str1.b[i] << (l + i) % 4 * 8;
		++i;
	}
	blks[i >> 2] |= 128 << (l + i) % 4 * 8;
	var k = nblk * 16 - 2;
	blks[k] = l & 255;
	blks[k] |= (l >>> 8 & 255) << 8;
	blks[k] |= (l >>> 16 & 255) << 16;
	blks[k] |= (l >>> 24 & 255) << 24;
	return blks;
};
haxe_crypto_Md5.prototype = {
	bitOR: function(a,b) {
		var lsb = a & 1 | b & 1;
		var msb31 = a >>> 1 | b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitXOR: function(a,b) {
		var lsb = a & 1 ^ b & 1;
		var msb31 = a >>> 1 ^ b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitAND: function(a,b) {
		var lsb = a & 1 & (b & 1);
		var msb31 = a >>> 1 & b >>> 1;
		return msb31 << 1 | lsb;
	}
	,addme: function(x,y) {
		var lsw = (x & 65535) + (y & 65535);
		var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return msw << 16 | lsw & 65535;
	}
	,hex: function(a) {
		var str = "";
		var hex_chr = "0123456789abcdef";
		var _g = 0;
		while(_g < a.length) {
			var num = a[_g];
			++_g;
			str += hex_chr.charAt(num >> 4 & 15) + hex_chr.charAt(num & 15);
			str += hex_chr.charAt(num >> 12 & 15) + hex_chr.charAt(num >> 8 & 15);
			str += hex_chr.charAt(num >> 20 & 15) + hex_chr.charAt(num >> 16 & 15);
			str += hex_chr.charAt(num >> 28 & 15) + hex_chr.charAt(num >> 24 & 15);
		}
		return str;
	}
	,rol: function(num,cnt) {
		return num << cnt | num >>> 32 - cnt;
	}
	,cmn: function(q,a,b,x,s,t) {
		return this.addme(this.rol(this.addme(this.addme(a,q),this.addme(x,t)),s),b);
	}
	,ff: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,c),this.bitAND(~b,d)),a,b,x,s,t);
	}
	,gg: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,d),this.bitAND(c,~d)),a,b,x,s,t);
	}
	,hh: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(this.bitXOR(b,c),d),a,b,x,s,t);
	}
	,ii: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(c,this.bitOR(b,~d)),a,b,x,s,t);
	}
	,doEncode: function(x) {
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var step;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			step = 0;
			a = this.ff(a,b,c,d,x[i],7,-680876936);
			d = this.ff(d,a,b,c,x[i + 1],12,-389564586);
			c = this.ff(c,d,a,b,x[i + 2],17,606105819);
			b = this.ff(b,c,d,a,x[i + 3],22,-1044525330);
			a = this.ff(a,b,c,d,x[i + 4],7,-176418897);
			d = this.ff(d,a,b,c,x[i + 5],12,1200080426);
			c = this.ff(c,d,a,b,x[i + 6],17,-1473231341);
			b = this.ff(b,c,d,a,x[i + 7],22,-45705983);
			a = this.ff(a,b,c,d,x[i + 8],7,1770035416);
			d = this.ff(d,a,b,c,x[i + 9],12,-1958414417);
			c = this.ff(c,d,a,b,x[i + 10],17,-42063);
			b = this.ff(b,c,d,a,x[i + 11],22,-1990404162);
			a = this.ff(a,b,c,d,x[i + 12],7,1804603682);
			d = this.ff(d,a,b,c,x[i + 13],12,-40341101);
			c = this.ff(c,d,a,b,x[i + 14],17,-1502002290);
			b = this.ff(b,c,d,a,x[i + 15],22,1236535329);
			a = this.gg(a,b,c,d,x[i + 1],5,-165796510);
			d = this.gg(d,a,b,c,x[i + 6],9,-1069501632);
			c = this.gg(c,d,a,b,x[i + 11],14,643717713);
			b = this.gg(b,c,d,a,x[i],20,-373897302);
			a = this.gg(a,b,c,d,x[i + 5],5,-701558691);
			d = this.gg(d,a,b,c,x[i + 10],9,38016083);
			c = this.gg(c,d,a,b,x[i + 15],14,-660478335);
			b = this.gg(b,c,d,a,x[i + 4],20,-405537848);
			a = this.gg(a,b,c,d,x[i + 9],5,568446438);
			d = this.gg(d,a,b,c,x[i + 14],9,-1019803690);
			c = this.gg(c,d,a,b,x[i + 3],14,-187363961);
			b = this.gg(b,c,d,a,x[i + 8],20,1163531501);
			a = this.gg(a,b,c,d,x[i + 13],5,-1444681467);
			d = this.gg(d,a,b,c,x[i + 2],9,-51403784);
			c = this.gg(c,d,a,b,x[i + 7],14,1735328473);
			b = this.gg(b,c,d,a,x[i + 12],20,-1926607734);
			a = this.hh(a,b,c,d,x[i + 5],4,-378558);
			d = this.hh(d,a,b,c,x[i + 8],11,-2022574463);
			c = this.hh(c,d,a,b,x[i + 11],16,1839030562);
			b = this.hh(b,c,d,a,x[i + 14],23,-35309556);
			a = this.hh(a,b,c,d,x[i + 1],4,-1530992060);
			d = this.hh(d,a,b,c,x[i + 4],11,1272893353);
			c = this.hh(c,d,a,b,x[i + 7],16,-155497632);
			b = this.hh(b,c,d,a,x[i + 10],23,-1094730640);
			a = this.hh(a,b,c,d,x[i + 13],4,681279174);
			d = this.hh(d,a,b,c,x[i],11,-358537222);
			c = this.hh(c,d,a,b,x[i + 3],16,-722521979);
			b = this.hh(b,c,d,a,x[i + 6],23,76029189);
			a = this.hh(a,b,c,d,x[i + 9],4,-640364487);
			d = this.hh(d,a,b,c,x[i + 12],11,-421815835);
			c = this.hh(c,d,a,b,x[i + 15],16,530742520);
			b = this.hh(b,c,d,a,x[i + 2],23,-995338651);
			a = this.ii(a,b,c,d,x[i],6,-198630844);
			d = this.ii(d,a,b,c,x[i + 7],10,1126891415);
			c = this.ii(c,d,a,b,x[i + 14],15,-1416354905);
			b = this.ii(b,c,d,a,x[i + 5],21,-57434055);
			a = this.ii(a,b,c,d,x[i + 12],6,1700485571);
			d = this.ii(d,a,b,c,x[i + 3],10,-1894986606);
			c = this.ii(c,d,a,b,x[i + 10],15,-1051523);
			b = this.ii(b,c,d,a,x[i + 1],21,-2054922799);
			a = this.ii(a,b,c,d,x[i + 8],6,1873313359);
			d = this.ii(d,a,b,c,x[i + 15],10,-30611744);
			c = this.ii(c,d,a,b,x[i + 6],15,-1560198380);
			b = this.ii(b,c,d,a,x[i + 13],21,1309151649);
			a = this.ii(a,b,c,d,x[i + 4],6,-145523070);
			d = this.ii(d,a,b,c,x[i + 11],10,-1120210379);
			c = this.ii(c,d,a,b,x[i + 2],15,718787259);
			b = this.ii(b,c,d,a,x[i + 9],21,-343485551);
			a = this.addme(a,olda);
			b = this.addme(b,oldb);
			c = this.addme(c,oldc);
			d = this.addme(d,oldd);
			i += 16;
		}
		return [a,b,c,d];
	}
	,__class__: haxe_crypto_Md5
};
var haxe_ds_ArraySort = function() { };
$hxClasses["haxe.ds.ArraySort"] = haxe_ds_ArraySort;
haxe_ds_ArraySort.__name__ = "haxe.ds.ArraySort";
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g = from + 1;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	var new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	if(from == mid || mid == to) {
		return;
	}
	var n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree";
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
haxe_ds_BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this = r.right;
			var _this1 = r.left;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this = this.left;
			tmp = _this == null ? 0 : _this._height;
		} else {
			var _this = this.right;
			tmp = _this == null ? 0 : _this._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode";
haxe_ds_TreeNode.prototype = {
	__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap";
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(+key);
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	__class__: haxe_ds__$List_ListNode
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	iterator: function() {
		return new haxe_ds__$StringMap_StringMapValueIterator(this.h);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_ds__$StringMap_StringMapKeyIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
$hxClasses["haxe.ds._StringMap.StringMapKeyIterator"] = haxe_ds__$StringMap_StringMapKeyIterator;
haxe_ds__$StringMap_StringMapKeyIterator.__name__ = "haxe.ds._StringMap.StringMapKeyIterator";
haxe_ds__$StringMap_StringMapKeyIterator.prototype = {
	hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		return this.keys[this.current++];
	}
	,__class__: haxe_ds__$StringMap_StringMapKeyIterator
};
var haxe_ds__$StringMap_StringMapValueIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
$hxClasses["haxe.ds._StringMap.StringMapValueIterator"] = haxe_ds__$StringMap_StringMapValueIterator;
haxe_ds__$StringMap_StringMapValueIterator.__name__ = "haxe.ds._StringMap.StringMapValueIterator";
haxe_ds__$StringMap_StringMapValueIterator.prototype = {
	hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		return this.h[this.keys[this.current++]];
	}
	,__class__: haxe_ds__$StringMap_StringMapValueIterator
};
var haxe_exceptions_PosException = function(message,previous,pos) {
	haxe_Exception.call(this,message,previous);
	if(pos == null) {
		this.posInfos = { fileName : "(unknown)", lineNumber : 0, className : "(unknown)", methodName : "(unknown)"};
	} else {
		this.posInfos = pos;
	}
};
$hxClasses["haxe.exceptions.PosException"] = haxe_exceptions_PosException;
haxe_exceptions_PosException.__name__ = "haxe.exceptions.PosException";
haxe_exceptions_PosException.__super__ = haxe_Exception;
haxe_exceptions_PosException.prototype = $extend(haxe_Exception.prototype,{
	toString: function() {
		return "" + haxe_Exception.prototype.toString.call(this) + " in " + this.posInfos.className + "." + this.posInfos.methodName + " at " + this.posInfos.fileName + ":" + this.posInfos.lineNumber;
	}
	,__class__: haxe_exceptions_PosException
});
var haxe_exceptions_NotImplementedException = function(message,previous,pos) {
	if(message == null) {
		message = "Not implemented";
	}
	haxe_exceptions_PosException.call(this,message,previous,pos);
};
$hxClasses["haxe.exceptions.NotImplementedException"] = haxe_exceptions_NotImplementedException;
haxe_exceptions_NotImplementedException.__name__ = "haxe.exceptions.NotImplementedException";
haxe_exceptions_NotImplementedException.__super__ = haxe_exceptions_PosException;
haxe_exceptions_NotImplementedException.prototype = $extend(haxe_exceptions_PosException.prototype,{
	__class__: haxe_exceptions_NotImplementedException
});
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,add: function(src) {
		if(this.pos + src.length > this.size) {
			this.grow(src.length);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset,src.length);
		this.u8.set(sub,this.pos);
		this.pos += src.length;
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = "haxe.io.Input";
haxe_io_Input.prototype = {
	readByte: function() {
		throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "haxe/io/Input.hx", lineNumber : 53, className : "haxe.io.Input", methodName : "readByte"});
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( _g ) {
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return len - k;
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readUntil: function(end) {
		var buf = new haxe_io_BytesBuffer();
		var last;
		while(true) {
			last = this.readByte();
			if(!(last != end)) {
				break;
			}
			buf.addByte(last);
		}
		return buf.getBytes().toString();
	}
	,readLine: function() {
		var buf = new haxe_io_BytesBuffer();
		var last;
		var s;
		try {
			while(true) {
				last = this.readByte();
				if(!(last != 10)) {
					break;
				}
				buf.addByte(last);
			}
			s = buf.getBytes().toString();
			if(HxOverrides.cca(s,s.length - 1) == 13) {
				s = HxOverrides.substr(s,0,-1);
			}
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof haxe_io_Eof)) {
				var e = _g1;
				s = buf.getBytes().toString();
				if(s.length == 0) {
					throw haxe_Exception.thrown(e);
				}
			} else {
				throw _g;
			}
		}
		return s;
	}
	,readDouble: function() {
		var i1 = this.readInt32();
		var i2 = this.readInt32();
		if(this.bigEndian) {
			return haxe_io_FPHelper.i64ToDouble(i2,i1);
		} else {
			return haxe_io_FPHelper.i64ToDouble(i1,i2);
		}
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readUInt24: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		if(this.bigEndian) {
			return ch3 | ch2 << 8 | ch1 << 16;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len,encoding) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = "haxe.io.BytesInput";
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	set_position: function(p) {
		if(p < 0) {
			p = 0;
		} else if(p > this.totlen) {
			p = this.totlen;
		}
		this.len = this.totlen - p;
		return this.pos = p;
	}
	,readByte: function() {
		if(this.len == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Output = function() { };
$hxClasses["haxe.io.Output"] = haxe_io_Output;
haxe_io_Output.__name__ = "haxe.io.Output";
haxe_io_Output.prototype = {
	flush: function() {
	}
	,close: function() {
	}
	,__class__: haxe_io_Output
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
$hxClasses["haxe.io.BytesOutput"] = haxe_io_BytesOutput;
haxe_io_BytesOutput.__name__ = "haxe.io.BytesOutput";
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeBytes: function(buf,pos,len) {
		this.b.addBytes(buf,pos,len);
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:true,__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
haxe_io_Error.__empty_constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds];
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = "haxe.io.FPHelper";
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	haxe_io_FPHelper.helper.setInt32(0,low,true);
	haxe_io_FPHelper.helper.setInt32(4,high,true);
	return haxe_io_FPHelper.helper.getFloat64(0,true);
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = "haxe.io.Path";
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.withExtension = function(path,ext) {
	var s = new haxe_io_Path(path);
	s.ext = ext;
	return s.toString();
};
haxe_io_Path.join = function(paths) {
	var _g = [];
	var _g1 = 0;
	var _g2 = paths;
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(v != null && v != "") {
			_g.push(v);
		}
	}
	var paths = _g;
	if(paths.length == 0) {
		return "";
	}
	var path = paths[0];
	var _g = 1;
	var _g1 = paths.length;
	while(_g < _g1) {
		var i = _g++;
		path = haxe_io_Path.addTrailingSlash(path);
		path += paths[i];
	}
	return haxe_io_Path.normalize(path);
};
haxe_io_Path.normalize = function(path) {
	var slash = "/";
	path = path.split("\\").join(slash);
	if(path == slash) {
		return slash;
	}
	var target = [];
	var _g = 0;
	var _g1 = path.split(slash);
	while(_g < _g1.length) {
		var token = _g1[_g];
		++_g;
		if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
			target.pop();
		} else if(token == "") {
			if(target.length > 0 || HxOverrides.cca(path,0) == 47) {
				target.push(token);
			}
		} else if(token != ".") {
			target.push(token);
		}
	}
	var tmp = target.join(slash);
	var acc_b = "";
	var colon = false;
	var slashes = false;
	var _g2_offset = 0;
	var _g2_s = tmp;
	while(_g2_offset < _g2_s.length) {
		var s = _g2_s;
		var index = _g2_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g2_offset;
		}
		var c2 = c1;
		switch(c2) {
		case 47:
			if(!colon) {
				slashes = true;
			} else {
				var i = c2;
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCodePoint(i);
			}
			break;
		case 58:
			acc_b += ":";
			colon = true;
			break;
		default:
			var i1 = c2;
			colon = false;
			if(slashes) {
				acc_b += "/";
				slashes = false;
			}
			acc_b += String.fromCodePoint(i1);
		}
	}
	return acc_b;
};
haxe_io_Path.addTrailingSlash = function(path) {
	if(path.length == 0) {
		return "/";
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		if(c2 != path.length - 1) {
			return path + "\\";
		} else {
			return path;
		}
	} else if(c1 != path.length - 1) {
		return path + "/";
	} else {
		return path;
	}
};
haxe_io_Path.prototype = {
	toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
	,__class__: haxe_io_Path
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
$hxClasses["haxe.iterators.ArrayIterator"] = haxe_iterators_ArrayIterator;
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_macro_Binop = $hxEnums["haxe.macro.Binop"] = { __ename__:true,__constructs__:null
	,OpAdd: {_hx_name:"OpAdd",_hx_index:0,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpMult: {_hx_name:"OpMult",_hx_index:1,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpDiv: {_hx_name:"OpDiv",_hx_index:2,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpSub: {_hx_name:"OpSub",_hx_index:3,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAssign: {_hx_name:"OpAssign",_hx_index:4,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpEq: {_hx_name:"OpEq",_hx_index:5,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpNotEq: {_hx_name:"OpNotEq",_hx_index:6,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpGt: {_hx_name:"OpGt",_hx_index:7,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpGte: {_hx_name:"OpGte",_hx_index:8,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpLt: {_hx_name:"OpLt",_hx_index:9,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpLte: {_hx_name:"OpLte",_hx_index:10,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAnd: {_hx_name:"OpAnd",_hx_index:11,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpOr: {_hx_name:"OpOr",_hx_index:12,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpXor: {_hx_name:"OpXor",_hx_index:13,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpBoolAnd: {_hx_name:"OpBoolAnd",_hx_index:14,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpBoolOr: {_hx_name:"OpBoolOr",_hx_index:15,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpShl: {_hx_name:"OpShl",_hx_index:16,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpShr: {_hx_name:"OpShr",_hx_index:17,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpUShr: {_hx_name:"OpUShr",_hx_index:18,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpMod: {_hx_name:"OpMod",_hx_index:19,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAssignOp: ($_=function(op) { return {_hx_index:20,op:op,__enum__:"haxe.macro.Binop",toString:$estr}; },$_._hx_name="OpAssignOp",$_.__params__ = ["op"],$_)
	,OpInterval: {_hx_name:"OpInterval",_hx_index:21,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpArrow: {_hx_name:"OpArrow",_hx_index:22,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpIn: {_hx_name:"OpIn",_hx_index:23,__enum__:"haxe.macro.Binop",toString:$estr}
};
haxe_macro_Binop.__constructs__ = [haxe_macro_Binop.OpAdd,haxe_macro_Binop.OpMult,haxe_macro_Binop.OpDiv,haxe_macro_Binop.OpSub,haxe_macro_Binop.OpAssign,haxe_macro_Binop.OpEq,haxe_macro_Binop.OpNotEq,haxe_macro_Binop.OpGt,haxe_macro_Binop.OpGte,haxe_macro_Binop.OpLt,haxe_macro_Binop.OpLte,haxe_macro_Binop.OpAnd,haxe_macro_Binop.OpOr,haxe_macro_Binop.OpXor,haxe_macro_Binop.OpBoolAnd,haxe_macro_Binop.OpBoolOr,haxe_macro_Binop.OpShl,haxe_macro_Binop.OpShr,haxe_macro_Binop.OpUShr,haxe_macro_Binop.OpMod,haxe_macro_Binop.OpAssignOp,haxe_macro_Binop.OpInterval,haxe_macro_Binop.OpArrow,haxe_macro_Binop.OpIn];
haxe_macro_Binop.__empty_constructs__ = [haxe_macro_Binop.OpAdd,haxe_macro_Binop.OpMult,haxe_macro_Binop.OpDiv,haxe_macro_Binop.OpSub,haxe_macro_Binop.OpAssign,haxe_macro_Binop.OpEq,haxe_macro_Binop.OpNotEq,haxe_macro_Binop.OpGt,haxe_macro_Binop.OpGte,haxe_macro_Binop.OpLt,haxe_macro_Binop.OpLte,haxe_macro_Binop.OpAnd,haxe_macro_Binop.OpOr,haxe_macro_Binop.OpXor,haxe_macro_Binop.OpBoolAnd,haxe_macro_Binop.OpBoolOr,haxe_macro_Binop.OpShl,haxe_macro_Binop.OpShr,haxe_macro_Binop.OpUShr,haxe_macro_Binop.OpMod,haxe_macro_Binop.OpInterval,haxe_macro_Binop.OpArrow,haxe_macro_Binop.OpIn];
var haxe_macro_Unop = $hxEnums["haxe.macro.Unop"] = { __ename__:true,__constructs__:null
	,OpIncrement: {_hx_name:"OpIncrement",_hx_index:0,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpDecrement: {_hx_name:"OpDecrement",_hx_index:1,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNot: {_hx_name:"OpNot",_hx_index:2,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNeg: {_hx_name:"OpNeg",_hx_index:3,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNegBits: {_hx_name:"OpNegBits",_hx_index:4,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpSpread: {_hx_name:"OpSpread",_hx_index:5,__enum__:"haxe.macro.Unop",toString:$estr}
};
haxe_macro_Unop.__constructs__ = [haxe_macro_Unop.OpIncrement,haxe_macro_Unop.OpDecrement,haxe_macro_Unop.OpNot,haxe_macro_Unop.OpNeg,haxe_macro_Unop.OpNegBits,haxe_macro_Unop.OpSpread];
haxe_macro_Unop.__empty_constructs__ = [haxe_macro_Unop.OpIncrement,haxe_macro_Unop.OpDecrement,haxe_macro_Unop.OpNot,haxe_macro_Unop.OpNeg,haxe_macro_Unop.OpNegBits,haxe_macro_Unop.OpSpread];
var haxe_rtti_Meta = function() { };
$hxClasses["haxe.rtti.Meta"] = haxe_rtti_Meta;
haxe_rtti_Meta.__name__ = "haxe.rtti.Meta";
haxe_rtti_Meta.getType = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.obj == null) {
		return { };
	} else {
		return meta.obj;
	}
};
haxe_rtti_Meta.getMeta = function(t) {
	return t.__meta__;
};
var haxe_xml__$Access_NodeAccess = {};
haxe_xml__$Access_NodeAccess.resolve = function(this1,name) {
	var x = this1.elementsNamed(name).next();
	if(x == null) {
		var xname;
		if(this1.nodeType == Xml.Document) {
			xname = "Document";
		} else {
			if(this1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
			}
			xname = this1.nodeName;
		}
		throw haxe_Exception.thrown(xname + " is missing element " + name);
	}
	if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Invalid nodeType " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
	}
	var this1 = x;
	return this1;
};
var haxe_xml__$Access_AttribAccess = {};
haxe_xml__$Access_AttribAccess.resolve = function(this1,name) {
	if(this1.nodeType == Xml.Document) {
		throw haxe_Exception.thrown("Cannot access document attribute " + name);
	}
	var v = this1.get(name);
	if(v == null) {
		if(this1.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
		}
		throw haxe_Exception.thrown(this1.nodeName + " is missing attribute " + name);
	}
	return v;
};
var haxe_xml__$Access_HasNodeAccess = {};
haxe_xml__$Access_HasNodeAccess.resolve = function(this1,name) {
	return this1.elementsNamed(name).hasNext();
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g = 0;
	var _g1 = position;
	while(_g < _g1) {
		var i = _g++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException";
haxe_xml_XmlParserException.prototype = {
	toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__ + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = "haxe.xml.Parser";
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(p < str.length) {
		var c = str.charCodeAt(p);
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				var tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent == null || parent.nodeType != 0) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
				}
				if(parent.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
					}
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCodePoint(c1);
				} else if(!Object.prototype.hasOwnProperty.call(haxe_xml_Parser.escapes.h,s)) {
					if(strict) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
					}
					buf.b += Std.string("&" + s + ";");
				} else {
					buf.b += Std.string(haxe_xml_Parser.escapes.h[s]);
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
				}
				buf.b += String.fromCodePoint(38);
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				--p;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		++p;
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(parent.nodeType == 0) {
			if(parent.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
			}
			throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unclosed node <" + parent.nodeName + ">",str,p));
		}
		if(p != start || nsubs == 0) {
			var len = p - start;
			buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += String.fromCodePoint(38);
		var len = p - start;
		buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				var _g_current = 0;
				var _g_array = value.children;
				while(_g_current < _g_array.length) {
					var child = _g_array[_g_current++];
					this.writeNode(child,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input = StringTools.trim(commentContent);
			this.output.b += Std.string(input);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var _g_current = 0;
			var _g_array = value.children;
			while(_g_current < _g_array.length) {
				var child = _g_array[_g_current++];
				this.writeNode(child,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
		}
		var _g_current = 0;
		var _g_array = value.children;
		while(_g_current < _g_array.length) {
			var child = _g_array[_g_current++];
			switch(child.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child.nodeType == Xml.Document || child.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				if(StringTools.ltrim(child.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var haxe_zip_Huffman = $hxEnums["haxe.zip.Huffman"] = { __ename__:true,__constructs__:null
	,Found: ($_=function(i) { return {_hx_index:0,i:i,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_._hx_name="Found",$_.__params__ = ["i"],$_)
	,NeedBit: ($_=function(left,right) { return {_hx_index:1,left:left,right:right,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_._hx_name="NeedBit",$_.__params__ = ["left","right"],$_)
	,NeedBits: ($_=function(n,table) { return {_hx_index:2,n:n,table:table,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_._hx_name="NeedBits",$_.__params__ = ["n","table"],$_)
};
haxe_zip_Huffman.__constructs__ = [haxe_zip_Huffman.Found,haxe_zip_Huffman.NeedBit,haxe_zip_Huffman.NeedBits];
haxe_zip_Huffman.__empty_constructs__ = [];
var haxe_zip_HuffTools = function() {
};
$hxClasses["haxe.zip.HuffTools"] = haxe_zip_HuffTools;
haxe_zip_HuffTools.__name__ = "haxe.zip.HuffTools";
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t._hx_index) {
		case 0:
			var _g = t.i;
			return 0;
		case 1:
			var a = t.left;
			var b = t.right;
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db ? da : db);
		case 2:
			var _g = t.n;
			var _g = t.table;
			throw haxe_Exception.thrown("assert");
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t._hx_index == 1) {
				var a = t.left;
				var b = t.right;
				return haxe_zip_Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
			} else {
				throw haxe_Exception.thrown("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g = 0;
		var _g1 = size;
		while(_g < _g1) {
			var i = _g++;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t._hx_index == 1) {
			var a = t.left;
			var b = t.right;
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		if(nlengths == 1) {
			return haxe_zip_Huffman.NeedBit(haxe_zip_Huffman.Found(0),haxe_zip_Huffman.Found(0));
		}
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var _g = 0;
		var _g1 = maxbits;
		while(_g < _g1) {
			var i = _g++;
			counts.push(0);
			tmp.push(0);
		}
		var _g = 0;
		var _g1 = nlengths;
		while(_g < _g1) {
			var i = _g++;
			var p = lengths[i + pos];
			if(p >= maxbits) {
				throw haxe_Exception.thrown("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g = 1;
		var _g1 = maxbits - 1;
		while(_g < _g1) {
			var i = _g++;
			code = code + counts[i] << 1;
			tmp[i] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g = 0;
		var _g1 = nlengths;
		while(_g < _g1) {
			var i = _g++;
			var l = lengths[i + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe_zip_HuffTools
};
var haxe_zip__$InflateImpl_Window = function(hasCrc) {
	this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe_crypto_Adler32();
	}
};
$hxClasses["haxe.zip._InflateImpl.Window"] = haxe_zip__$InflateImpl_Window;
haxe_zip__$InflateImpl_Window.__name__ = "haxe.zip._InflateImpl.Window";
haxe_zip__$InflateImpl_Window.prototype = {
	slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
	,__class__: haxe_zip__$InflateImpl_Window
};
var haxe_zip__$InflateImpl_State = $hxEnums["haxe.zip._InflateImpl.State"] = { __ename__:true,__constructs__:null
	,Head: {_hx_name:"Head",_hx_index:0,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Block: {_hx_name:"Block",_hx_index:1,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,CData: {_hx_name:"CData",_hx_index:2,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Flat: {_hx_name:"Flat",_hx_index:3,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Crc: {_hx_name:"Crc",_hx_index:4,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Dist: {_hx_name:"Dist",_hx_index:5,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,DistOne: {_hx_name:"DistOne",_hx_index:6,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Done: {_hx_name:"Done",_hx_index:7,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
};
haxe_zip__$InflateImpl_State.__constructs__ = [haxe_zip__$InflateImpl_State.Head,haxe_zip__$InflateImpl_State.Block,haxe_zip__$InflateImpl_State.CData,haxe_zip__$InflateImpl_State.Flat,haxe_zip__$InflateImpl_State.Crc,haxe_zip__$InflateImpl_State.Dist,haxe_zip__$InflateImpl_State.DistOne,haxe_zip__$InflateImpl_State.Done];
haxe_zip__$InflateImpl_State.__empty_constructs__ = [haxe_zip__$InflateImpl_State.Head,haxe_zip__$InflateImpl_State.Block,haxe_zip__$InflateImpl_State.CData,haxe_zip__$InflateImpl_State.Flat,haxe_zip__$InflateImpl_State.Crc,haxe_zip__$InflateImpl_State.Dist,haxe_zip__$InflateImpl_State.DistOne,haxe_zip__$InflateImpl_State.Done];
var haxe_zip_InflateImpl = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this.isFinal = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
$hxClasses["haxe.zip.InflateImpl"] = haxe_zip_InflateImpl;
haxe_zip_InflateImpl.__name__ = "haxe.zip.InflateImpl";
haxe_zip_InflateImpl.run = function(i,bufsize) {
	if(bufsize == null) {
		bufsize = 65536;
	}
	var buf = new haxe_io_Bytes(new ArrayBuffer(bufsize));
	var output = new haxe_io_BytesBuffer();
	var inflate = new haxe_zip_InflateImpl(i);
	while(true) {
		var len = inflate.readBytes(buf,0,bufsize);
		output.addBytes(buf,0,len);
		if(len < bufsize) {
			break;
		}
	}
	return output.getBytes();
};
haxe_zip_InflateImpl.prototype = {
	buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h._hx_index) {
		case 0:
			var n = h.i;
			return n;
		case 1:
			var a = h.left;
			var b = h.right;
			return this.applyHuffman(this.getBit() ? b : a);
		case 2:
			var n = h.n;
			var tbl = h.table;
			return this.applyHuffman(tbl[this.getBits(n)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		switch(this.state._hx_index) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8) {
				throw haxe_Exception.thrown("Invalid data");
			}
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) {
				throw haxe_Exception.thrown("Invalid data");
			}
			if(fdict) {
				throw haxe_Exception.thrown("Unsupported dictionary");
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this.isFinal = this.getBit();
			switch(this.getBits(2)) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g = 0;
				var _g1 = hclen;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g = hclen;
				var _g1 = 19;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g = 0;
				var _g1 = hlit + hdist;
				while(_g < _g1) {
					var i = _g++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			var crc = haxe_crypto_Adler32.read(this.input);
			if(!calc.equals(crc)) {
				throw haxe_Exception.thrown("Invalid CRC");
			}
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen);
				this.len -= rlen;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen);
			this.len -= rlen;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	,__class__: haxe_zip_InflateImpl
};
var haxe_zip_Uncompress = function() { };
$hxClasses["haxe.zip.Uncompress"] = haxe_zip_Uncompress;
haxe_zip_Uncompress.__name__ = "haxe.zip.Uncompress";
haxe_zip_Uncompress.run = function(src,bufsize) {
	return haxe_zip_InflateImpl.run(new haxe_io_BytesInput(src),bufsize);
};
var hxd_BitmapData = function(width,height) {
	if(!(width == -101 && height == -102)) {
		var canvas = window.document.createElement("canvas");
		canvas.width = width;
		canvas.height = height;
		this.ctx = canvas.getContext("2d",null);
	}
};
$hxClasses["hxd.BitmapData"] = hxd_BitmapData;
hxd_BitmapData.__name__ = "hxd.BitmapData";
hxd_BitmapData.fromNative = function(data) {
	var b = new hxd_BitmapData(-101,-102);
	b.ctx = data;
	return b;
};
hxd_BitmapData.prototype = {
	fill: function(x,y,width,height,color) {
		this.ctx.fillStyle = "rgba(" + (color >> 16 & 255) + ", " + (color >> 8 & 255) + ", " + (color & 255) + ", " + (color >>> 24) / 255 + ")";
		this.ctx.fillRect(x,y,width,height);
	}
	,clone: function() {
		return this.sub(0,0,this.ctx.canvas.width,this.ctx.canvas.height);
	}
	,sub: function(x,y,w,h) {
		var canvas = window.document.createElement("canvas");
		canvas.width = w;
		canvas.height = h;
		var ctx = canvas.getContext("2d",null);
		ctx.drawImage(this.ctx.canvas,x,y,w,h,0,0,w,h);
		return hxd_BitmapData.fromNative(ctx);
	}
	,getPixels: function() {
		var w = this.ctx.canvas.width;
		var h = this.ctx.canvas.height;
		var data = this.ctx.getImageData(0,0,w,h).data;
		var pixels = data.buffer;
		return new hxd_Pixels(w,h,haxe_io_Bytes.ofData(pixels),hxd_PixelFormat.RGBA);
	}
	,__class__: hxd_BitmapData
};
var hxd_Charset = function() {
	var _gthis = this;
	this.map = new haxe_ds_IntMap();
	var _g = 0;
	while(_g < 94) {
		var i = _g++;
		_gthis.map.h[65281 + i] = 33 + i;
	}
	var _g = 192;
	var _g1 = 199;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 65;
	}
	var _g = 224;
	var _g1 = 231;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 97;
	}
	var _g = 200;
	var _g1 = 204;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 69;
	}
	var _g = 232;
	var _g1 = 236;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 101;
	}
	var _g = 204;
	var _g1 = 208;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 73;
	}
	var _g = 236;
	var _g1 = 240;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 105;
	}
	var _g = 210;
	var _g1 = 215;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 79;
	}
	var _g = 242;
	var _g1 = 247;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 111;
	}
	var _g = 217;
	var _g1 = 221;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 85;
	}
	var _g = 249;
	var _g1 = 253;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 117;
	}
	_gthis.map.h[199] = 67;
	_gthis.map.h[231] = 67;
	_gthis.map.h[208] = 68;
	_gthis.map.h[222] = 100;
	_gthis.map.h[209] = 78;
	_gthis.map.h[241] = 110;
	_gthis.map.h[221] = 89;
	_gthis.map.h[253] = 121;
	_gthis.map.h[255] = 121;
	_gthis.map.h[8364] = 69;
	_gthis.map.h[12288] = 32;
	_gthis.map.h[160] = 32;
	_gthis.map.h[171] = 34;
	_gthis.map.h[187] = 34;
	_gthis.map.h[8220] = 34;
	_gthis.map.h[8221] = 34;
	_gthis.map.h[8222] = 34;
	_gthis.map.h[8216] = 39;
	_gthis.map.h[8217] = 39;
	_gthis.map.h[180] = 39;
	_gthis.map.h[8216] = 39;
	_gthis.map.h[8249] = 60;
	_gthis.map.h[8250] = 62;
	_gthis.map.h[8211] = 45;
};
$hxClasses["hxd.Charset"] = hxd_Charset;
hxd_Charset.__name__ = "hxd.Charset";
hxd_Charset.getDefault = function() {
	if(hxd_Charset.inst == null) {
		hxd_Charset.inst = new hxd_Charset();
	}
	return hxd_Charset.inst;
};
hxd_Charset.prototype = {
	resolveChar: function(code,glyphs) {
		var c = code;
		while(c != null) {
			var g = glyphs.h[c];
			if(g != null) {
				return g;
			}
			c = this.map.h[c];
		}
		return null;
	}
	,isCJK: function(code) {
		if(!(code >= 11904 && code <= 42191 || code >= 63744 && code <= 64255)) {
			if(code >= 131072) {
				return code <= 262141;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,isSpace: function(code) {
		if(code != 32) {
			return code == 12288;
		} else {
			return true;
		}
	}
	,isBreakChar: function(code) {
		if(!this.isSpace(code)) {
			return this.isCJK(code);
		} else {
			return true;
		}
	}
	,isComplementChar: function(code) {
		return hxd_Charset.complementChars.h.hasOwnProperty(code);
	}
	,__class__: hxd_Charset
};
var hxd_Cursor = $hxEnums["hxd.Cursor"] = { __ename__:true,__constructs__:null
	,Default: {_hx_name:"Default",_hx_index:0,__enum__:"hxd.Cursor",toString:$estr}
	,Button: {_hx_name:"Button",_hx_index:1,__enum__:"hxd.Cursor",toString:$estr}
	,Move: {_hx_name:"Move",_hx_index:2,__enum__:"hxd.Cursor",toString:$estr}
	,TextInput: {_hx_name:"TextInput",_hx_index:3,__enum__:"hxd.Cursor",toString:$estr}
	,Hide: {_hx_name:"Hide",_hx_index:4,__enum__:"hxd.Cursor",toString:$estr}
	,Custom: ($_=function(custom) { return {_hx_index:5,custom:custom,__enum__:"hxd.Cursor",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["custom"],$_)
	,Callback: ($_=function(f) { return {_hx_index:6,f:f,__enum__:"hxd.Cursor",toString:$estr}; },$_._hx_name="Callback",$_.__params__ = ["f"],$_)
};
hxd_Cursor.__constructs__ = [hxd_Cursor.Default,hxd_Cursor.Button,hxd_Cursor.Move,hxd_Cursor.TextInput,hxd_Cursor.Hide,hxd_Cursor.Custom,hxd_Cursor.Callback];
hxd_Cursor.__empty_constructs__ = [hxd_Cursor.Default,hxd_Cursor.Button,hxd_Cursor.Move,hxd_Cursor.TextInput,hxd_Cursor.Hide];
var hxd_CustomCursor = function(frames,speed,offsetX,offsetY) {
	this.frames = frames;
	this.speed = speed;
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.frameDelay = 1 / speed;
	this.frameTime = 0;
	this.frameIndex = 0;
};
$hxClasses["hxd.CustomCursor"] = hxd_CustomCursor;
hxd_CustomCursor.__name__ = "hxd.CustomCursor";
hxd_CustomCursor.prototype = {
	reset: function() {
		this.frameTime = 0;
		this.frameIndex = 0;
	}
	,update: function(dt) {
		var newTime = this.frameTime + dt;
		var delay = this.frameDelay;
		var index = this.frameIndex;
		while(newTime >= delay) {
			newTime -= delay;
			++index;
		}
		this.frameTime = newTime;
		if(index >= this.frames.length) {
			index %= this.frames.length;
		}
		if(index != this.frameIndex) {
			this.frameIndex = index;
			return index;
		}
		return -1;
	}
	,__class__: hxd_CustomCursor
};
var hxd_EventKind = $hxEnums["hxd.EventKind"] = { __ename__:true,__constructs__:null
	,EPush: {_hx_name:"EPush",_hx_index:0,__enum__:"hxd.EventKind",toString:$estr}
	,ERelease: {_hx_name:"ERelease",_hx_index:1,__enum__:"hxd.EventKind",toString:$estr}
	,EMove: {_hx_name:"EMove",_hx_index:2,__enum__:"hxd.EventKind",toString:$estr}
	,EOver: {_hx_name:"EOver",_hx_index:3,__enum__:"hxd.EventKind",toString:$estr}
	,EOut: {_hx_name:"EOut",_hx_index:4,__enum__:"hxd.EventKind",toString:$estr}
	,EWheel: {_hx_name:"EWheel",_hx_index:5,__enum__:"hxd.EventKind",toString:$estr}
	,EFocus: {_hx_name:"EFocus",_hx_index:6,__enum__:"hxd.EventKind",toString:$estr}
	,EFocusLost: {_hx_name:"EFocusLost",_hx_index:7,__enum__:"hxd.EventKind",toString:$estr}
	,EKeyDown: {_hx_name:"EKeyDown",_hx_index:8,__enum__:"hxd.EventKind",toString:$estr}
	,EKeyUp: {_hx_name:"EKeyUp",_hx_index:9,__enum__:"hxd.EventKind",toString:$estr}
	,EReleaseOutside: {_hx_name:"EReleaseOutside",_hx_index:10,__enum__:"hxd.EventKind",toString:$estr}
	,ETextInput: {_hx_name:"ETextInput",_hx_index:11,__enum__:"hxd.EventKind",toString:$estr}
	,ECheck: {_hx_name:"ECheck",_hx_index:12,__enum__:"hxd.EventKind",toString:$estr}
};
hxd_EventKind.__constructs__ = [hxd_EventKind.EPush,hxd_EventKind.ERelease,hxd_EventKind.EMove,hxd_EventKind.EOver,hxd_EventKind.EOut,hxd_EventKind.EWheel,hxd_EventKind.EFocus,hxd_EventKind.EFocusLost,hxd_EventKind.EKeyDown,hxd_EventKind.EKeyUp,hxd_EventKind.EReleaseOutside,hxd_EventKind.ETextInput,hxd_EventKind.ECheck];
hxd_EventKind.__empty_constructs__ = [hxd_EventKind.EPush,hxd_EventKind.ERelease,hxd_EventKind.EMove,hxd_EventKind.EOver,hxd_EventKind.EOut,hxd_EventKind.EWheel,hxd_EventKind.EFocus,hxd_EventKind.EFocusLost,hxd_EventKind.EKeyDown,hxd_EventKind.EKeyUp,hxd_EventKind.EReleaseOutside,hxd_EventKind.ETextInput,hxd_EventKind.ECheck];
var hxd_Event = function(k,x,y) {
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.button = 0;
	this.kind = k;
	this.relX = x;
	this.relY = y;
};
$hxClasses["hxd.Event"] = hxd_Event;
hxd_Event.__name__ = "hxd.Event";
hxd_Event.prototype = {
	__class__: hxd_Event
};
var hxd__$FloatBuffer_Float32Expand = {};
hxd__$FloatBuffer_Float32Expand._new = function(length) {
	var this1 = { pos : length, array : new Float32Array(new ArrayBuffer(length << 2))};
	return this1;
};
var hxd_Key = function() { };
$hxClasses["hxd.Key"] = hxd_Key;
hxd_Key.__name__ = "hxd.Key";
hxd_Key.isDown = function(code) {
	return hxd_Key.keyPressed[code] > 0;
};
hxd_Key.isPressed = function(code) {
	return hxd_Key.keyPressed[code] == hxd_Timer.frameCount + 2 - 1;
};
hxd_Key.initialize = function() {
	if(hxd_Key.initDone) {
		hxd_Key.dispose();
	}
	hxd_Key.initDone = true;
	hxd_Key.keyPressed = [];
	hxd_Window.getInstance().addEventTarget(hxd_Key.onEvent);
};
hxd_Key.dispose = function() {
	if(hxd_Key.initDone) {
		hxd_Window.getInstance().removeEventTarget(hxd_Key.onEvent);
		hxd_Key.initDone = false;
		hxd_Key.keyPressed = [];
	}
};
hxd_Key.onEvent = function(e) {
	switch(e.kind._hx_index) {
	case 0:
		if(e.button < 5) {
			hxd_Key.keyPressed[e.button] = hxd_Timer.frameCount + 2;
		}
		break;
	case 1:
		if(e.button < 5) {
			hxd_Key.keyPressed[e.button] = -(hxd_Timer.frameCount + 2);
		}
		break;
	case 5:
		hxd_Key.keyPressed[e.wheelDelta > 0 ? 6 : 5] = hxd_Timer.frameCount + 2;
		break;
	case 8:
		if(!hxd_Key.ALLOW_KEY_REPEAT && hxd_Key.keyPressed[e.keyCode] > 0) {
			return;
		}
		hxd_Key.keyPressed[e.keyCode] = hxd_Timer.frameCount + 2;
		break;
	case 9:
		hxd_Key.keyPressed[e.keyCode] = -(hxd_Timer.frameCount + 2);
		break;
	case 10:
		hxd_Key.keyPressed = [];
		break;
	default:
	}
};
var hxd_Flags = $hxEnums["hxd.Flags"] = { __ename__:true,__constructs__:null
	,ReadOnly: {_hx_name:"ReadOnly",_hx_index:0,__enum__:"hxd.Flags",toString:$estr}
	,AlphaPremultiplied: {_hx_name:"AlphaPremultiplied",_hx_index:1,__enum__:"hxd.Flags",toString:$estr}
	,FlipY: {_hx_name:"FlipY",_hx_index:2,__enum__:"hxd.Flags",toString:$estr}
};
hxd_Flags.__constructs__ = [hxd_Flags.ReadOnly,hxd_Flags.AlphaPremultiplied,hxd_Flags.FlipY];
hxd_Flags.__empty_constructs__ = [hxd_Flags.ReadOnly,hxd_Flags.AlphaPremultiplied,hxd_Flags.FlipY];
var hxd_PixelsARGB = {};
hxd_PixelsARGB.fromPixels = function(p) {
	p.convert(hxd_PixelFormat.ARGB);
	p.setFlip(false);
	return p;
};
var hxd_Pixels = function(width,height,bytes,format,offset) {
	if(offset == null) {
		offset = 0;
	}
	this.width = width;
	this.height = height;
	this.bytes = bytes;
	this.set_innerFormat(format);
	this.offset = offset;
	var i = 0;
	if(i == null) {
		i = 0;
	}
	var this1 = i;
	this.flags = this1;
};
$hxClasses["hxd.Pixels"] = hxd_Pixels;
hxd_Pixels.__name__ = "hxd.Pixels";
hxd_Pixels.calcDataSize = function(width,height,format) {
	if(format._hx_index == 21) {
		var _g = format.v;
		return (height + 3 >> 2 << 2) * hxd_Pixels.calcStride(width,format);
	} else {
		return height * hxd_Pixels.calcStride(width,format);
	}
};
hxd_Pixels.calcStride = function(width,format) {
	var tmp;
	switch(format._hx_index) {
	case 3:case 20:
		tmp = 8;
		break;
	case 4:
		tmp = 16;
		break;
	case 5:
		tmp = 1;
		break;
	case 7:
		tmp = 4;
		break;
	case 8:
		tmp = 2;
		break;
	case 9:
		tmp = 4;
		break;
	case 10:
		tmp = 8;
		break;
	case 11:
		tmp = 3;
		break;
	case 12:case 19:
		tmp = 6;
		break;
	case 13:
		tmp = 12;
		break;
	case 0:case 1:case 2:case 14:case 15:
		tmp = 4;
		break;
	case 16:
		tmp = 4;
		break;
	case 17:
		tmp = 4;
		break;
	case 6:case 18:
		tmp = 2;
		break;
	case 21:
		var n = format.v;
		var blocks = width + 3 >> 2;
		if(n == 1 || n == 4) {
			return blocks << 1;
		}
		return blocks << 2;
	}
	return width * tmp;
};
hxd_Pixels.alloc = function(width,height,format) {
	return new hxd_Pixels(width,height,new haxe_io_Bytes(new ArrayBuffer(hxd_Pixels.calcDataSize(width,height,format))),format);
};
hxd_Pixels.prototype = {
	set_innerFormat: function(fmt) {
		this.innerFormat = fmt;
		this.stride = hxd_Pixels.calcStride(this.width,fmt);
		this.dataSize = hxd_Pixels.calcDataSize(this.width,this.height,fmt);
		this.bytesPerPixel = hxd_Pixels.calcStride(1,fmt);
		return fmt;
	}
	,invalidFormat: function() {
		throw haxe_Exception.thrown("Unsupported format for this operation : " + Std.string(this.innerFormat));
	}
	,copyInner: function() {
		var old = this.bytes;
		this.bytes = new haxe_io_Bytes(new ArrayBuffer(this.dataSize));
		this.bytes.blit(0,old,this.offset,this.dataSize);
		this.offset = 0;
		this.flags &= -1 - (1 << hxd_Flags.ReadOnly._hx_index);
	}
	,setFlip: function(b) {
		if(b == null) {
			b = false;
		}
		if((this.flags & 1 << hxd_Flags.FlipY._hx_index) != 0 == b) {
			return;
		}
		if((this.flags & 1 << hxd_Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
		if(b) {
			this.flags |= 1 << hxd_Flags.FlipY._hx_index;
		} else {
			this.flags &= -1 - (1 << hxd_Flags.FlipY._hx_index);
		}
		if(this.stride % 4 != 0) {
			this.invalidFormat();
		}
		var _g = 0;
		var _g1 = this.height >> 1;
		while(_g < _g1) {
			var y = _g++;
			var p1 = y * this.stride + this.offset;
			var p2 = (this.height - 1 - y) * this.stride + this.offset;
			var _g2 = 0;
			var _g3 = this.stride >> 2;
			while(_g2 < _g3) {
				var x = _g2++;
				var a = this.bytes.getInt32(p1);
				var b = this.bytes.getInt32(p2);
				this.bytes.setInt32(p1,b);
				this.bytes.setInt32(p2,a);
				p1 += 4;
				p2 += 4;
			}
		}
	}
	,convert: function(target) {
		if(this.innerFormat == target || Type.enumEq(this.innerFormat,target)) {
			return;
		}
		if((this.flags & 1 << hxd_Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
		var this1 = this.bytes.b;
		var bytes = this1;
		var _g = this.innerFormat;
		switch(_g._hx_index) {
		case 0:
			switch(target._hx_index) {
			case 1:
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var a = bytes[p];
					var r = bytes[p + 1];
					var g = bytes[p + 2];
					var b = bytes[p + 3];
					bytes[p++] = b;
					bytes[p++] = g;
					bytes[p++] = r;
					bytes[p] = a;
				}
				break;
			case 2:
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var a = bytes[p];
					var v = bytes[p + 1];
					bytes[p] = v;
					var v1 = bytes[p + 2];
					bytes[p + 1] = v1;
					var v2 = bytes[p + 3];
					bytes[p + 2] = v2;
					bytes[p + 3] = a;
				}
				break;
			default:
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 1:
			switch(target._hx_index) {
			case 0:
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var a = bytes[p];
					var r = bytes[p + 1];
					var g = bytes[p + 2];
					var b = bytes[p + 3];
					bytes[p++] = b;
					bytes[p++] = g;
					bytes[p++] = r;
					bytes[p] = a;
				}
				break;
			case 2:
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var b = bytes[p];
					var r = bytes[p + 2];
					bytes[p] = r;
					bytes[p + 2] = b;
				}
				break;
			default:
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 2:
			switch(target._hx_index) {
			case 0:
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var a = bytes[p + 3];
					var v = bytes[p + 2];
					bytes[p + 3] = v;
					var v1 = bytes[p + 1];
					bytes[p + 2] = v1;
					var v2 = bytes[p];
					bytes[p + 1] = v2;
					bytes[p] = a;
				}
				break;
			case 1:
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var b = bytes[p];
					var r = bytes[p + 2];
					bytes[p] = r;
					bytes[p + 2] = b;
				}
				break;
			case 5:
				var nbytes = new haxe_io_Bytes(new ArrayBuffer(this.width * this.height));
				var this1 = nbytes.b;
				var out = this1;
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var v = bytes[i << 2];
					out[i] = v;
				}
				this.bytes = nbytes;
				break;
			default:
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 4:
			if(target._hx_index == 7) {
				var nbytes = new haxe_io_Bytes(new ArrayBuffer(this.height * this.width * 4));
				var this1 = nbytes.b;
				var out = this1;
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					nbytes.setFloat(i << 2,this.bytes.getFloat(i << 4));
				}
				this.bytes = nbytes;
			} else {
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 7:
			switch(target._hx_index) {
			case 1:case 2:
				var fbytes = this.bytes;
				var p = 0;
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var v = fbytes.getFloat(p) * 255 | 0;
					if(v < 0) {
						v = 0;
					} else if(v > 255) {
						v = 255;
					}
					bytes[p++] = v;
					bytes[p++] = v;
					bytes[p++] = v;
					bytes[p++] = 255;
				}
				break;
			default:
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 18:
			if(target._hx_index == 7) {
				var nbytes = new haxe_io_Bytes(new ArrayBuffer(this.width * this.height * 4));
				var fbytes = this.bytes;
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var nv = fbytes.getUInt16(i << 1);
					nbytes.setFloat(i << 2,nv / 65535.0);
				}
				this.bytes = nbytes;
			} else {
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 21:
			if(target._hx_index == 21) {
				var b = target.v;
				var a = _g.v;
				if(a != b) {
					throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
				}
			} else {
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		default:
			throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
		}
		this.set_innerFormat(target);
	}
	,getPixel: function(x,y) {
		var p = (x + ((this.flags & 1 << hxd_Flags.FlipY._hx_index) != 0 ? this.height - 1 - y : y) * this.width) * this.bytesPerPixel + this.offset;
		switch(this.innerFormat._hx_index) {
		case 0:
			var v = this.bytes.getInt32(p);
			return v >>> 24 | v >> 8 & 65280 | v << 8 & 16711680 | v << 24;
		case 1:
			return this.bytes.getInt32(p);
		case 2:
			var v = this.bytes.getInt32(p);
			return v & -16711936 | v << 16 & 16711680 | v >> 16 & 255;
		case 8:
			var b = this.bytes.getUInt16(p);
			return (b & 255) << 8 | b >> 8;
		default:
			this.invalidFormat();
			return 0;
		}
	}
	,dispose: function() {
		this.bytes = null;
	}
	,toString: function() {
		return "Pixels(" + this.width + "x" + this.height + " " + Std.string(this.innerFormat) + ")";
	}
	,__class__: hxd_Pixels
};
var hxd_SceneEvents = function($window) {
	this.defaultCursor = hxd_Cursor.Default;
	this.mouseCheckMove = true;
	this.enablePhysicalMouse = true;
	this.isOut = false;
	this.onOver = new hxd_Event(hxd_EventKind.EOver);
	this.onOut = new hxd_Event(hxd_EventKind.EOut);
	this.checkPos = new hxd_Event(hxd_EventKind.ECheck);
	this.focusLost = new hxd_Event(hxd_EventKind.EFocusLost);
	this.lastTouch = 0;
	this.mouseY = -1.;
	this.mouseX = -1.;
	this.overIndex = -1;
	this.scenes = [];
	this.pendingEvents = [];
	this.pushList = [];
	this.overList = [];
	this.overCandidates = [];
	if($window == null) {
		$window = hxd_Window.getInstance();
	}
	this.window = $window;
	$window.addEventTarget($bind(this,this.onEvent));
};
$hxClasses["hxd.SceneEvents"] = hxd_SceneEvents;
hxd_SceneEvents.__name__ = "hxd.SceneEvents";
hxd_SceneEvents.prototype = {
	onRemove: function(i) {
		if(i == this.currentFocus) {
			this.currentFocus = null;
		}
		if(this.overIndex >= 0) {
			var index = this.overList.indexOf(i);
			if(index >= 0) {
				HxOverrides.remove(this.overList,i);
				if(index < this.overIndex) {
					this.overIndex--;
				}
			}
		} else {
			HxOverrides.remove(this.overList,i);
			this.selectCursor();
		}
		HxOverrides.remove(this.pushList,i);
	}
	,addScene: function(s,index) {
		s.setEvents(this);
		if(index == null) {
			this.scenes.push(s);
		} else {
			this.scenes.splice(index,0,s);
		}
	}
	,blur: function() {
		if(this.currentFocus == null) {
			return;
		}
		this.focusLost.cancel = false;
		this.currentFocus.handleEvent(this.focusLost);
		if(!this.focusLost.cancel) {
			this.currentFocus = null;
		}
	}
	,checkFocus: function() {
		if(this.currentFocus == null) {
			return;
		}
		var s = this.currentFocus.getInteractiveScene();
		if(s == null) {
			this.currentFocus = null;
			return;
		}
		if(!s.isInteractiveVisible(this.currentFocus)) {
			this.blur();
		}
	}
	,emitEvent: function(event) {
		var oldX = event.relX;
		var oldY = event.relY;
		var overCandidateCount = 0;
		var handled = false;
		var checkOver = false;
		var fillOver = false;
		var checkPush = false;
		var cancelFocus = false;
		var updateCursor = false;
		this.overIndex = 0;
		switch(event.kind._hx_index) {
		case 0:
			cancelFocus = true;
			checkPush = true;
			break;
		case 1:
			checkPush = true;
			break;
		case 2:case 12:
			checkOver = true;
			fillOver = true;
			break;
		case 5:case 8:case 9:case 11:
			if(this.currentFocus != null) {
				event.relX = event.relY = 0;
				this.currentFocus.handleEvent(event);
				event.relX = oldX;
				event.relY = oldY;
				if(!event.propagate) {
					return;
				}
			}
			break;
		default:
		}
		var _g = 0;
		var _g1 = this.scenes;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var last = null;
			while(true) {
				var i = s.handleEvent(event,last);
				if(i == null) {
					event.relX = oldX;
					event.relY = oldY;
					break;
				}
				if(checkOver) {
					if(fillOver) {
						var idx = this.overList.indexOf(i);
						if(idx == -1) {
							if(this.overCandidates.length == overCandidateCount) {
								this.overCandidates[overCandidateCount] = { i : i, s : s, x : event.relX, y : event.relY, z : event.relZ};
							} else {
								var info = this.overCandidates[overCandidateCount];
								info.i = i;
								info.s = s;
								info.x = event.relX;
								info.y = event.relY;
								info.z = event.relZ;
							}
							++overCandidateCount;
							this.overList.splice(this.overIndex++,0,i);
							updateCursor = true;
						} else {
							if(idx < this.overIndex) {
								while(true) {
									this.overList[idx] = this.overList[idx + 1];
									++idx;
									if(!(idx < this.overIndex)) {
										break;
									}
								}
								this.overList[this.overIndex] = i;
								updateCursor = true;
							} else if(idx > this.overIndex) {
								while(true) {
									this.overList[idx] = this.overList[idx - 1];
									--idx;
									if(!(idx > this.overIndex)) {
										break;
									}
								}
								this.overList[this.overIndex] = i;
								updateCursor = true;
							}
							this.overIndex++;
						}
						fillOver = event.propagate;
					}
				} else {
					if(checkPush) {
						if(event.kind == hxd_EventKind.EPush) {
							this.pushList.push(i);
						} else {
							HxOverrides.remove(this.pushList,i);
						}
					}
					if(cancelFocus && i == this.currentFocus) {
						cancelFocus = false;
					}
				}
				event.relX = oldX;
				event.relY = oldY;
				if(!event.propagate) {
					handled = true;
					break;
				}
				last = i;
				event.propagate = false;
			}
			if(handled) {
				break;
			}
		}
		if(cancelFocus && this.currentFocus != null) {
			this.blur();
		}
		if(checkOver) {
			if(this.overIndex < this.overList.length) {
				while(this.overIndex < this.overList.length) {
					var e = this.overList.pop();
					e.handleEvent(this.onOut);
				}
				updateCursor = true;
			}
			if(overCandidateCount != 0) {
				var i = 0;
				var ev = this.onOver;
				while(true) {
					var info = this.overCandidates[i++];
					ev.relX = info.x;
					ev.relY = info.y;
					ev.relZ = info.z;
					if(info.s.isInteractiveVisible(info.i)) {
						info.i.handleEvent(ev);
					} else {
						HxOverrides.remove(this.overList,info.i);
					}
					info.i = null;
					info.s = null;
					if(!(i < overCandidateCount)) {
						break;
					}
				}
			}
		}
		this.overIndex = -1;
		if(updateCursor) {
			this.selectCursor();
		}
		if(!handled && event != this.checkPos) {
			if(event.kind == hxd_EventKind.EPush) {
				this.pushList.push(null);
			} else if(event.kind == hxd_EventKind.ERelease) {
				HxOverrides.remove(this.pushList,null);
			}
			this.dispatchListeners(event);
		}
		if(event.kind == hxd_EventKind.ERelease && this.pushList.length > 0) {
			var _g = 0;
			var _g1 = this.pushList;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(i == null) {
					event.kind = hxd_EventKind.EReleaseOutside;
					this.dispatchListeners(event);
					event.kind = hxd_EventKind.ERelease;
				} else {
					var s = i.getInteractiveScene();
					if(s == null) {
						continue;
					}
					event.kind = hxd_EventKind.EReleaseOutside;
					s.dispatchEvent(event,i);
					event.kind = hxd_EventKind.ERelease;
					event.relX = oldX;
					event.relY = oldY;
				}
			}
			this.pushList = [];
		}
	}
	,checkEvents: function() {
		var old = this.pendingEvents;
		var checkMoved = !this.mouseCheckMove;
		var checkFocused = this.currentFocus == null;
		if(old.length > 0) {
			this.pendingEvents = [];
			var _g = 0;
			while(_g < old.length) {
				var e = old[_g];
				++_g;
				var ox = e.relX;
				var oy = e.relY;
				switch(e.kind._hx_index) {
				case 0:case 1:
					this.mouseX = e.relX;
					this.mouseY = e.relY;
					this.lastTouch = e.touchId;
					break;
				case 2:
					checkMoved = true;
					this.mouseX = e.relX;
					this.mouseY = e.relY;
					this.lastTouch = e.touchId;
					break;
				case 3:
					this.isOut = false;
					this.selectCursor();
					continue;
				case 4:
					this.isOut = true;
					if(this.overList.length > 0) {
						var i = this.overList.length - 1;
						while(i >= 0) {
							this.onOut.cancel = false;
							this.overList[i].handleEvent(this.onOut);
							HxOverrides.remove(this.overList,this.overList[i]);
							--i;
						}
						this.selectCursor();
					}
					continue;
				case 5:case 8:case 9:case 11:
					if(!checkFocused) {
						checkFocused = true;
						this.checkFocus();
					}
					break;
				default:
				}
				if(this.currentDrag != null && (this.currentDrag.ref == null || this.currentDrag.ref == e.touchId)) {
					e.propagate = true;
					e.cancel = false;
					this.currentDrag.f(e);
					e.relX = ox;
					e.relY = oy;
					if(!e.propagate) {
						continue;
					}
				}
				this.emitEvent(e);
			}
		}
		if(!checkFocused) {
			this.checkFocus();
		}
		if(!checkMoved && !this.isOut && this.currentDrag == null) {
			this.checkPos.relX = this.mouseX;
			this.checkPos.relY = this.mouseY;
			this.checkPos.touchId = this.lastTouch;
			this.checkPos.cancel = false;
			this.checkPos.propagate = false;
			this.emitEvent(this.checkPos);
		}
	}
	,updateCursor: function(i) {
		if(this.overList.indexOf(i) != -1) {
			this.selectCursor();
		}
	}
	,selectCursor: function() {
		var cur = this.defaultCursor;
		var _g = 0;
		var _g1 = this.overList;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o.cursor != null) {
				cur = o.cursor;
				break;
			}
		}
		if(cur._hx_index == 6) {
			var f = cur.f;
			f();
		} else {
			hxd_System.setCursor(cur);
		}
	}
	,onEvent: function(e) {
		if(!this.enablePhysicalMouse && e.kind == hxd_EventKind.EMove) {
			return;
		}
		this.pendingEvents.push(e);
	}
	,dispatchListeners: function(event) {
		var ox = event.relX;
		var oy = event.relY;
		event.propagate = true;
		var _g = 0;
		var _g1 = this.scenes;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			event.cancel = false;
			s.dispatchListeners(event);
			event.relX = ox;
			event.relY = oy;
			if(!event.propagate) {
				break;
			}
		}
	}
	,__class__: hxd_SceneEvents
};
var hxd_Platform = $hxEnums["hxd.Platform"] = { __ename__:true,__constructs__:null
	,IOS: {_hx_name:"IOS",_hx_index:0,__enum__:"hxd.Platform",toString:$estr}
	,Android: {_hx_name:"Android",_hx_index:1,__enum__:"hxd.Platform",toString:$estr}
	,WebGL: {_hx_name:"WebGL",_hx_index:2,__enum__:"hxd.Platform",toString:$estr}
	,PC: {_hx_name:"PC",_hx_index:3,__enum__:"hxd.Platform",toString:$estr}
	,Console: {_hx_name:"Console",_hx_index:4,__enum__:"hxd.Platform",toString:$estr}
	,FlashPlayer: {_hx_name:"FlashPlayer",_hx_index:5,__enum__:"hxd.Platform",toString:$estr}
};
hxd_Platform.__constructs__ = [hxd_Platform.IOS,hxd_Platform.Android,hxd_Platform.WebGL,hxd_Platform.PC,hxd_Platform.Console,hxd_Platform.FlashPlayer];
hxd_Platform.__empty_constructs__ = [hxd_Platform.IOS,hxd_Platform.Android,hxd_Platform.WebGL,hxd_Platform.PC,hxd_Platform.Console,hxd_Platform.FlashPlayer];
var hxd_SystemValue = $hxEnums["hxd.SystemValue"] = { __ename__:true,__constructs__:null
	,IsTouch: {_hx_name:"IsTouch",_hx_index:0,__enum__:"hxd.SystemValue",toString:$estr}
	,IsWindowed: {_hx_name:"IsWindowed",_hx_index:1,__enum__:"hxd.SystemValue",toString:$estr}
	,IsMobile: {_hx_name:"IsMobile",_hx_index:2,__enum__:"hxd.SystemValue",toString:$estr}
};
hxd_SystemValue.__constructs__ = [hxd_SystemValue.IsTouch,hxd_SystemValue.IsWindowed,hxd_SystemValue.IsMobile];
hxd_SystemValue.__empty_constructs__ = [hxd_SystemValue.IsTouch,hxd_SystemValue.IsWindowed,hxd_SystemValue.IsMobile];
var hxd_Timer = function() { };
$hxClasses["hxd.Timer"] = hxd_Timer;
hxd_Timer.__name__ = "hxd.Timer";
hxd_Timer.update = function() {
	hxd_Timer.frameCount++;
	var newTime = HxOverrides.now() / 1000;
	hxd_Timer.elapsedTime = newTime - hxd_Timer.lastTimeStamp;
	hxd_Timer.lastTimeStamp = newTime;
	if(hxd_Timer.elapsedTime < hxd_Timer.maxDeltaTime) {
		var a = hxd_Timer.elapsedTime;
		hxd_Timer.currentDT = a + hxd_Timer.smoothFactor * (hxd_Timer.currentDT - a);
	} else {
		hxd_Timer.elapsedTime = 1 / hxd_Timer.wantedFPS;
	}
	hxd_Timer.dt = hxd_Timer.currentDT;
};
hxd_Timer.skip = function() {
	hxd_Timer.lastTimeStamp = HxOverrides.now() / 1000;
};
var hxd_Window = function(canvas,globalEvents) {
	this.useScreenPixels = js_Browser.get_supported();
	this._mouseLock = false;
	this.curMouseY = 0.;
	this.curMouseX = 0.;
	var _gthis = this;
	var customCanvas = canvas != null;
	this.eventTargets = new haxe_ds_List();
	this.resizeEvents = new haxe_ds_List();
	if(!js_Browser.get_supported()) {
		this.canvasPos = { "width" : 0, "top" : 0, "left" : 0, "height" : 0};
		return;
	}
	if(canvas == null) {
		canvas = window.document.getElementById("webgl");
		if(canvas == null) {
			throw haxe_Exception.thrown("Missing canvas #webgl");
		}
		if(canvas.getAttribute("globalEvents") == "1") {
			globalEvents = true;
		}
	}
	this.canvas = canvas;
	this.propagateKeyEvents = globalEvents;
	var propagate = canvas.getAttribute("propagateKeyEvents");
	if(propagate != null) {
		this.propagateKeyEvents = propagate != "0" && propagate != "false";
	}
	this.focused = globalEvents;
	this.element = globalEvents ? window : canvas;
	this.canvasPos = canvas.getBoundingClientRect();
	if(customCanvas) {
		canvas.addEventListener("mousemove",$bind(this,this.onMouseMove));
	} else {
		window.addEventListener("mousemove",$bind(this,this.onMouseMove));
	}
	this.element.addEventListener("mousedown",$bind(this,this.onMouseDown));
	this.element.addEventListener("mouseup",$bind(this,this.onMouseUp));
	this.element.addEventListener("mouseenter",$bind(this,this.onMouseEnter));
	this.element.addEventListener("mouseleave",$bind(this,this.onMouseLeave));
	this.element.addEventListener("wheel",$bind(this,this.onMouseWheel));
	this.element.addEventListener("touchstart",$bind(this,this.onTouchStart));
	this.element.addEventListener("touchmove",$bind(this,this.onTouchMove));
	this.element.addEventListener("touchend",$bind(this,this.onTouchEnd));
	this.element.addEventListener("keydown",$bind(this,this.onKeyDown));
	this.element.addEventListener("keyup",$bind(this,this.onKeyUp));
	this.element.addEventListener("keypress",$bind(this,this.onKeyPress));
	var _g = $bind(this,this.onFocus);
	var b = false;
	var tmp = function() {
		_g(b);
	};
	this.element.addEventListener("blur",tmp);
	var _g1 = $bind(this,this.onFocus);
	var b1 = true;
	var tmp = function() {
		_g1(b1);
	};
	this.element.addEventListener("focus",tmp);
	if(window.ResizeObserver != null) {
		this.observer = new ResizeObserver(function(e) {
			_gthis.checkResize();
		});
		this.observer.observe(canvas);
	} else {
		window.addEventListener("resize",$bind(this,this.checkResize));
	}
	canvas.addEventListener("contextmenu",function(e) {
		e.stopPropagation();
		if(e.button == 2) {
			e.preventDefault();
		}
		return false;
	});
	if(globalEvents) {
		canvas.addEventListener("mousedown",function(e) {
			_gthis.onMouseDown(e);
			e.stopPropagation();
			e.preventDefault();
		});
		this.element.addEventListener("contextmenu",function(e) {
			e.stopPropagation();
			e.preventDefault();
			return false;
		});
	} else {
		if(canvas.getAttribute("tabindex") == null) {
			canvas.setAttribute("tabindex","1");
		}
		canvas.style.outline = "none";
	}
	this.curW = this.get_width();
	this.curH = this.get_height();
};
$hxClasses["hxd.Window"] = hxd_Window;
hxd_Window.__name__ = "hxd.Window";
hxd_Window.getInstance = function() {
	if(hxd_Window.inst == null) {
		hxd_Window.inst = new hxd_Window();
	}
	return hxd_Window.inst;
};
hxd_Window.prototype = {
	checkResize: function() {
		this.canvasPos = this.canvas.getBoundingClientRect();
		var cw = this.get_width();
		var ch = this.get_height();
		if(this.curW != cw || this.curH != ch) {
			this.curW = cw;
			this.curH = ch;
			this.onResize(null);
		}
	}
	,event: function(e) {
		var _g_head = this.eventTargets.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var et = val;
			et(e);
		}
	}
	,addEventTarget: function(et) {
		this.eventTargets.add(et);
	}
	,removeEventTarget: function(et) {
		var _g_head = this.eventTargets.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			if(Reflect.compareMethods(e,et)) {
				this.eventTargets.remove(e);
				break;
			}
		}
	}
	,addResizeEvent: function(f) {
		this.resizeEvents.push(f);
	}
	,removeResizeEvent: function(f) {
		var _g_head = this.resizeEvents.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			if(Reflect.compareMethods(e,f)) {
				this.resizeEvents.remove(f);
				break;
			}
		}
	}
	,onResize: function(e) {
		var _g_head = this.resizeEvents.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var r = val;
			r();
		}
	}
	,getPixelRatio: function() {
		if(this.useScreenPixels) {
			return window.devicePixelRatio;
		} else {
			return 1;
		}
	}
	,get_width: function() {
		return Math.round(this.canvasPos.width * this.getPixelRatio());
	}
	,get_height: function() {
		return Math.round(this.canvasPos.height * this.getPixelRatio());
	}
	,get_mouseX: function() {
		return Math.round((this.curMouseX - this.canvasPos.left) * this.getPixelRatio());
	}
	,get_mouseY: function() {
		return Math.round((this.curMouseY - this.canvasPos.top) * this.getPixelRatio());
	}
	,get_mouseLock: function() {
		return this._mouseLock;
	}
	,onMouseDown: function(e) {
		if(this.get_mouseLock()) {
			if(e.movementX != 0 || e.movementY != 0) {
				this.onMouseMove(e);
			}
		} else if(e.clientX != this.curMouseX || e.clientY != this.curMouseY) {
			this.onMouseMove(e);
		}
		var ev = new hxd_Event(hxd_EventKind.EPush,this.get_mouseX(),this.get_mouseY());
		var _g = e.button;
		var tmp;
		switch(_g) {
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 1;
			break;
		default:
			var x = _g;
			tmp = x;
		}
		ev.button = tmp;
		this.event(ev);
	}
	,onMouseUp: function(e) {
		if(this.get_mouseLock()) {
			if(e.movementX != 0 || e.movementY != 0) {
				this.onMouseMove(e);
			}
		} else if(e.clientX != this.curMouseX || e.clientY != this.curMouseY) {
			this.onMouseMove(e);
		}
		var ev = new hxd_Event(hxd_EventKind.ERelease,this.get_mouseX(),this.get_mouseY());
		var _g = e.button;
		var tmp;
		switch(_g) {
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 1;
			break;
		default:
			var x = _g;
			tmp = x;
		}
		ev.button = tmp;
		this.event(ev);
	}
	,onMouseEnter: function(e) {
		var ev = new hxd_Event(hxd_EventKind.EOver,this.get_mouseX(),this.get_mouseY());
		this.event(ev);
	}
	,onMouseLeave: function(e) {
		var ev = new hxd_Event(hxd_EventKind.EOut,this.get_mouseX(),this.get_mouseY());
		this.event(ev);
	}
	,onMouseMove: function(e) {
		if(this.get_mouseLock()) {
			this.curMouseX += e.movementX;
			this.curMouseY += e.movementY;
		} else {
			this.curMouseX = e.clientX;
			this.curMouseY = e.clientY;
		}
		this.event(new hxd_Event(hxd_EventKind.EMove,this.get_mouseX(),this.get_mouseY()));
	}
	,onMouseWheel: function(e) {
		e.preventDefault();
		var ev = new hxd_Event(hxd_EventKind.EWheel,this.get_mouseX(),this.get_mouseY());
		ev.wheelDelta = e.deltaY / 120;
		this.event(ev);
	}
	,onTouchStart: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * this.getPixelRatio());
			y = Math.round((touch.clientY - this.canvasPos.top) * this.getPixelRatio());
			ev = new hxd_Event(hxd_EventKind.EPush,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onTouchMove: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * this.getPixelRatio());
			y = Math.round((touch.clientY - this.canvasPos.top) * this.getPixelRatio());
			ev = new hxd_Event(hxd_EventKind.EMove,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onTouchEnd: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * this.getPixelRatio());
			y = Math.round((touch.clientY - this.canvasPos.top) * this.getPixelRatio());
			ev = new hxd_Event(hxd_EventKind.ERelease,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onKeyUp: function(e) {
		var ev = new hxd_Event(hxd_EventKind.EKeyUp,this.get_mouseX(),this.get_mouseY());
		ev.keyCode = e.keyCode;
		this.event(ev);
		if(!this.propagateKeyEvents) {
			e.preventDefault();
			e.stopPropagation();
		}
	}
	,onKeyDown: function(e) {
		var ev = new hxd_Event(hxd_EventKind.EKeyDown,this.get_mouseX(),this.get_mouseY());
		ev.keyCode = e.keyCode;
		this.event(ev);
		if(!this.propagateKeyEvents) {
			switch(ev.keyCode) {
			case 8:case 9:case 16:case 17:case 33:case 34:case 35:case 36:case 37:case 38:case 39:case 40:
				e.preventDefault();
				break;
			default:
			}
			e.stopPropagation();
		}
	}
	,onKeyPress: function(e) {
		var ev = new hxd_Event(hxd_EventKind.ETextInput,this.get_mouseX(),this.get_mouseY());
		ev.charCode = e.charCode;
		this.event(ev);
		if(!this.propagateKeyEvents) {
			e.preventDefault();
			e.stopPropagation();
		}
	}
	,onFocus: function(b) {
		this.event(new hxd_Event(b ? hxd_EventKind.EFocus : hxd_EventKind.EFocusLost));
		this.focused = b;
	}
	,get_isFocused: function() {
		return this.focused;
	}
	,set_displayMode: function(m) {
		if(!js_Browser.get_supported()) {
			return m;
		}
		var doc = window.document;
		var elt = doc.documentElement;
		var fullscreen = m != hxd_DisplayMode.Windowed;
		if(doc.fullscreenElement == elt == fullscreen) {
			return hxd_DisplayMode.Windowed;
		}
		if(m != hxd_DisplayMode.Windowed) {
			elt.requestFullscreen();
		} else {
			doc.exitFullscreen();
		}
		return m;
	}
	,__class__: hxd_Window
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = "js.Browser";
js_Browser.get_supported = function() {
	if(typeof(window) != "undefined" && typeof(window.location) != "undefined") {
		return typeof(window.location.protocol) == "string";
	} else {
		return false;
	}
};
var hxd_System = function() { };
$hxClasses["hxd.System"] = hxd_System;
hxd_System.__name__ = "hxd.System";
hxd_System.setLoop = function(f) {
	if(!hxd_System.loopInit) {
		hxd_System.loopInit = true;
		hxd_System.browserLoop();
	}
	hxd_System.loopFunc = f;
};
hxd_System.browserLoop = function() {
	if(js_Browser.get_supported()) {
		var $window = window;
		var rqf = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame;
		if(hxd_System.fpsLimit > 0) {
			window.setTimeout(function() {
				return rqf(hxd_System.browserLoop);
			},1000 / hxd_System.fpsLimit);
		} else {
			rqf(hxd_System.browserLoop);
		}
	} else {
		throw haxe_Exception.thrown("Cannot use browserLoop without Browser support nor defining nodejs + hxnodejs");
	}
	if(hxd_System.loopFunc != null) {
		hxd_System.loopFunc();
	}
};
hxd_System.start = function(callb) {
	callb();
};
hxd_System.setNativeCursor = function(c) {
	if(hxd_System.currentNativeCursor != null && Type.enumEq(c,hxd_System.currentNativeCursor)) {
		return;
	}
	hxd_System.currentNativeCursor = c;
	hxd_System.currentCustomCursor = null;
	var canvas = hxd_Window.getInstance().canvas;
	if(canvas != null) {
		var tmp;
		switch(c._hx_index) {
		case 0:
			tmp = "default";
			break;
		case 1:
			tmp = "pointer";
			break;
		case 2:
			tmp = "move";
			break;
		case 3:
			tmp = "text";
			break;
		case 4:
			tmp = "none";
			break;
		case 5:
			var cur = c.custom;
			if(cur.alloc == null) {
				cur.alloc = [];
				var _g = 0;
				var _g1 = cur.frames;
				while(_g < _g1.length) {
					var frame = _g1[_g];
					++_g;
					cur.alloc.push("url(\"" + frame.ctx.canvas.toDataURL("image/png") + "\") " + cur.offsetX + " " + cur.offsetY + ", default");
				}
			}
			if(cur.frames.length > 1) {
				hxd_System.currentCustomCursor = cur;
				cur.reset();
			}
			tmp = cur.alloc[cur.frameIndex];
			break;
		case 6:
			var _g = c.f;
			throw haxe_Exception.thrown("assert");
		}
		canvas.style.cursor = tmp;
	}
};
hxd_System.getDefaultFrameRate = function() {
	return 60.;
};
hxd_System.getValue = function(s) {
	switch(s._hx_index) {
	case 0:
		if(hxd_System.get_platform() != hxd_Platform.Android) {
			return hxd_System.get_platform() == hxd_Platform.IOS;
		} else {
			return true;
		}
		break;
	case 1:
		return true;
	case 2:
		if(hxd_System.get_platform() != hxd_Platform.Android) {
			return hxd_System.get_platform() == hxd_Platform.IOS;
		} else {
			return true;
		}
		break;
	}
};
hxd_System.updateCursor = function() {
	if(hxd_System.currentCustomCursor != null) {
		var change = hxd_System.currentCustomCursor.update(hxd_Timer.elapsedTime);
		if(change != -1) {
			var canvas = hxd_Window.getInstance().canvas;
			if(canvas != null) {
				canvas.style.cursor = hxd_System.currentCustomCursor.alloc[change];
			}
		}
	}
};
hxd_System.get_platform = function() {
	var ua = $global.navigator.userAgent.toLowerCase();
	if(ua.indexOf("android") >= 0) {
		return hxd_Platform.Android;
	} else if(ua.indexOf("ipad") >= 0 || ua.indexOf("iphone") >= 0 || ua.indexOf("ipod") >= 0) {
		return hxd_Platform.IOS;
	} else {
		return hxd_Platform.PC;
	}
};
var hxd_DisplayMode = $hxEnums["hxd.DisplayMode"] = { __ename__:true,__constructs__:null
	,Windowed: {_hx_name:"Windowed",_hx_index:0,__enum__:"hxd.DisplayMode",toString:$estr}
	,Borderless: {_hx_name:"Borderless",_hx_index:1,__enum__:"hxd.DisplayMode",toString:$estr}
	,Fullscreen: {_hx_name:"Fullscreen",_hx_index:2,__enum__:"hxd.DisplayMode",toString:$estr}
	,FullscreenResize: {_hx_name:"FullscreenResize",_hx_index:3,__enum__:"hxd.DisplayMode",toString:$estr}
};
hxd_DisplayMode.__constructs__ = [hxd_DisplayMode.Windowed,hxd_DisplayMode.Borderless,hxd_DisplayMode.Fullscreen,hxd_DisplayMode.FullscreenResize];
hxd_DisplayMode.__empty_constructs__ = [hxd_DisplayMode.Windowed,hxd_DisplayMode.Borderless,hxd_DisplayMode.Fullscreen,hxd_DisplayMode.FullscreenResize];
var hxd_fmt_bfnt_FontParser = function() { };
$hxClasses["hxd.fmt.bfnt.FontParser"] = hxd_fmt_bfnt_FontParser;
hxd_fmt_bfnt_FontParser.__name__ = "hxd.fmt.bfnt.FontParser";
hxd_fmt_bfnt_FontParser.parse = function(bytes,path,resolveTile) {
	var tile = null;
	var font = new h2d_Font(null,0);
	var glyphs = font.glyphs;
	font.baseLine = 0;
	var _g = bytes.getInt32(0);
	switch(_g) {
	case 54938946:
		var bytes1 = new haxe_io_BytesInput(bytes);
		bytes1.set_position(bytes1.pos + 4);
		var pageCount = 0;
		while(bytes1.pos < bytes1.totlen) {
			var id = bytes1.readByte();
			var length = bytes1.readInt32();
			var pos = bytes1.pos;
			switch(id) {
			case 1:
				font.size = font.initSize = bytes1.readInt16();
				bytes1.set_position(bytes1.pos + 12);
				font.name = bytes1.readUntil(0);
				break;
			case 2:
				font.lineHeight = bytes1.readUInt16();
				font.baseLine = bytes1.readUInt16();
				bytes1.set_position(bytes1.pos + 4);
				pageCount = bytes1.readUInt16();
				if(pageCount != 1) {
					haxe_Log.trace("Warning: BMF format only supports one page at the moment.",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 224, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
				}
				break;
			case 3:
				var name = bytes1.readUntil(0);
				try {
					font.tilePath = name;
					tile = resolveTile(haxe_io_Path.join([haxe_io_Path.directory(path),name]));
				} catch( _g1 ) {
					haxe_Log.trace("Warning: Could not find referenced font texture at \"" + name + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 30, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
					font.tilePath = new haxe_io_Path(path).file + ".png";
					tile = resolveTile(haxe_io_Path.withExtension(path,"png"));
				}
				break;
			case 4:
				var count = length / 20 | 0;
				while(count > 0) {
					var cid = bytes1.readInt32();
					var t = tile.sub(bytes1.readUInt16(),bytes1.readUInt16(),bytes1.readUInt16(),bytes1.readUInt16(),bytes1.readInt16(),bytes1.readInt16());
					var fc = new h2d_FontChar(t,bytes1.readInt16());
					glyphs.h[cid] = fc;
					bytes1.set_position(bytes1.pos + 2);
					--count;
				}
				break;
			case 5:
				var count1 = length / 10 | 0;
				while(count1 > 0) {
					var first = bytes1.readInt32();
					var key = bytes1.readInt32();
					var fc1 = glyphs.h[key];
					if(fc1 != null) {
						fc1.addKerning(first,bytes1.readInt16());
					} else {
						bytes1.set_position(bytes1.pos + 2);
					}
					--count1;
				}
				break;
			}
			bytes1.set_position(pos + length);
		}
		break;
	case 1414415938:
		return new hxd_fmt_bfnt_Reader(new haxe_io_BytesInput(bytes)).read(function(tp) {
			try {
				font.tilePath = tp;
				tile = resolveTile(haxe_io_Path.join([haxe_io_Path.directory(path),tp]));
			} catch( _g ) {
				haxe_Log.trace("Warning: Could not find referenced font texture at \"" + tp + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 30, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
				font.tilePath = new haxe_io_Path(path).file + ".png";
				tile = resolveTile(haxe_io_Path.withExtension(path,"png"));
			}
			return tile;
		});
	case 1836597052:case 1852794428:
		var xml = Xml.parse(bytes.toString());
		var x = xml.firstElement();
		if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Invalid nodeType " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
		}
		var this1 = x;
		var xml = this1;
		if(haxe_xml__$Access_HasNodeAccess.resolve(xml,"info")) {
			var tmp = haxe_xml__$Access_NodeAccess.resolve(xml,"info");
			font.name = haxe_xml__$Access_AttribAccess.resolve(tmp,"face");
			var tmp = haxe_xml__$Access_AttribAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(xml,"info"),"size");
			font.size = font.initSize = Std.parseInt(tmp);
			var tmp = haxe_xml__$Access_AttribAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(xml,"common"),"lineHeight");
			font.lineHeight = Std.parseInt(tmp);
			var tmp = haxe_xml__$Access_AttribAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(xml,"common"),"base");
			font.baseLine = Std.parseInt(tmp);
			var p = haxe_xml__$Access_NodeAccess.resolve(xml,"pages").elements();
			while(p.hasNext()) {
				var p1 = p.next();
				if(haxe_xml__$Access_AttribAccess.resolve(p1,"id") == "0") {
					var tilePath = haxe_xml__$Access_AttribAccess.resolve(p1,"file");
					try {
						font.tilePath = tilePath;
						tile = resolveTile(haxe_io_Path.join([haxe_io_Path.directory(path),tilePath]));
					} catch( _g1 ) {
						haxe_Log.trace("Warning: Could not find referenced font texture at \"" + tilePath + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 30, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
						font.tilePath = new haxe_io_Path(path).file + ".png";
						tile = resolveTile(haxe_io_Path.withExtension(path,"png"));
					}
				} else {
					haxe_Log.trace("Warning: BMF format only supports one page at the moment.",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 66, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
				}
			}
			var chars = haxe_xml__$Access_NodeAccess.resolve(xml,"chars").elements();
			var c = chars;
			while(c.hasNext()) {
				var c1 = c.next();
				var t = tile.sub(Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"x")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"y")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"width")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"height")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"xoffset")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"yoffset")));
				var fc = new h2d_FontChar(t,Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"xadvance")));
				var kerns = haxe_xml__$Access_NodeAccess.resolve(xml,"kernings").elements();
				var k = kerns;
				while(k.hasNext()) {
					var k1 = k.next();
					if(haxe_xml__$Access_AttribAccess.resolve(k1,"second") == haxe_xml__$Access_AttribAccess.resolve(c1,"id")) {
						fc.addKerning(Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(k1,"first")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(k1,"amount")));
					}
				}
				var key = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"id"));
				glyphs.h[key] = fc;
			}
		} else {
			font.tilePath = new haxe_io_Path(path).file + ".png";
			tile = resolveTile(haxe_io_Path.withExtension(path,"png"));
			font.name = haxe_xml__$Access_AttribAccess.resolve(xml,"family");
			var tmp = haxe_xml__$Access_AttribAccess.resolve(xml,"size");
			font.size = font.initSize = Std.parseInt(tmp);
			var tmp = haxe_xml__$Access_AttribAccess.resolve(xml,"height");
			font.lineHeight = Std.parseInt(tmp);
			var kernings = [];
			var c = xml.elements();
			while(c.hasNext()) {
				var c1 = c.next();
				var r = haxe_xml__$Access_AttribAccess.resolve(c1,"rect").split(" ");
				var o = haxe_xml__$Access_AttribAccess.resolve(c1,"offset").split(" ");
				var t = tile.sub(Std.parseInt(r[0]),Std.parseInt(r[1]),Std.parseInt(r[2]),Std.parseInt(r[3]),Std.parseInt(o[0]),Std.parseInt(o[1]));
				var fc = new h2d_FontChar(t,Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"width")));
				var code = haxe_xml__$Access_AttribAccess.resolve(c1,"code");
				var code1 = StringTools.startsWith(code,"&#") ? Std.parseInt(HxOverrides.substr(code,2,code.length - 3)) : HxOverrides.cca(code,0);
				var k = c1.elements();
				while(k.hasNext()) {
					var k1 = k.next();
					var code2 = haxe_xml__$Access_AttribAccess.resolve(k1,"id");
					var next = StringTools.startsWith(code2,"&#") ? Std.parseInt(HxOverrides.substr(code2,2,code2.length - 3)) : HxOverrides.cca(code2,0);
					var adv = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(k1,"advance"));
					if(glyphs.h.hasOwnProperty(next)) {
						glyphs.h[next].addKerning(code1,adv);
					} else {
						kernings.push({ prev : code1, next : next, adv : adv});
					}
				}
				glyphs.h[code1] = fc;
			}
			var _g1 = 0;
			while(_g1 < kernings.length) {
				var k = kernings[_g1];
				++_g1;
				var g = glyphs.h[k.next];
				if(g == null) {
					continue;
				}
				g.addKerning(k.prev,k.adv);
			}
		}
		break;
	case 1868983913:
		var lines = bytes.toString().split("\n");
		var reg = new EReg(" *?([0-9a-zA-Z]+)=(\"[^\"]+\"|.+?)(?:[ \r]|$)","");
		var idx;
		var pageCount = 0;
		var _g1 = 0;
		while(_g1 < lines.length) {
			var line = lines[_g1];
			++_g1;
			idx = line.indexOf(" ");
			switch(HxOverrides.substr(line,0,idx)) {
			case "char":
				var id = 0;
				var x = 0;
				var y = 0;
				var width = 0;
				var height = 0;
				var xoffset = 0;
				var yoffset = 0;
				var xadvance = 0;
				while(idx < line.length && reg.matchSub(line,idx)) {
					switch(reg.matched(1)) {
					case "height":
						var v = reg.matched(2);
						height = Std.parseInt(HxOverrides.cca(v,0) == 34 ? v.substring(1,v.length - 1) : v);
						break;
					case "id":
						var v1 = reg.matched(2);
						id = Std.parseInt(HxOverrides.cca(v1,0) == 34 ? v1.substring(1,v1.length - 1) : v1);
						break;
					case "width":
						var v2 = reg.matched(2);
						width = Std.parseInt(HxOverrides.cca(v2,0) == 34 ? v2.substring(1,v2.length - 1) : v2);
						break;
					case "x":
						var v3 = reg.matched(2);
						x = Std.parseInt(HxOverrides.cca(v3,0) == 34 ? v3.substring(1,v3.length - 1) : v3);
						break;
					case "xadvance":
						var v4 = reg.matched(2);
						xadvance = Std.parseInt(HxOverrides.cca(v4,0) == 34 ? v4.substring(1,v4.length - 1) : v4);
						break;
					case "xoffset":
						var v5 = reg.matched(2);
						xoffset = Std.parseInt(HxOverrides.cca(v5,0) == 34 ? v5.substring(1,v5.length - 1) : v5);
						break;
					case "y":
						var v6 = reg.matched(2);
						y = Std.parseInt(HxOverrides.cca(v6,0) == 34 ? v6.substring(1,v6.length - 1) : v6);
						break;
					case "yoffset":
						var v7 = reg.matched(2);
						yoffset = Std.parseInt(HxOverrides.cca(v7,0) == 34 ? v7.substring(1,v7.length - 1) : v7);
						break;
					}
					var pos = reg.matchedPos();
					idx = pos.pos + pos.len;
				}
				var t = tile.sub(x,y,width,height,xoffset,yoffset);
				var fc = new h2d_FontChar(t,xadvance);
				glyphs.h[id] = fc;
				break;
			case "common":
				while(idx < line.length && reg.matchSub(line,idx)) {
					switch(reg.matched(1)) {
					case "base":
						var v8 = reg.matched(2);
						font.baseLine = Std.parseInt(HxOverrides.cca(v8,0) == 34 ? v8.substring(1,v8.length - 1) : v8);
						break;
					case "lineHeight":
						var v9 = reg.matched(2);
						font.lineHeight = Std.parseInt(HxOverrides.cca(v9,0) == 34 ? v9.substring(1,v9.length - 1) : v9);
						break;
					case "pages":
						var v10 = reg.matched(2);
						pageCount = Std.parseInt(HxOverrides.cca(v10,0) == 34 ? v10.substring(1,v10.length - 1) : v10);
						if(pageCount != 1) {
							haxe_Log.trace("Warning: BMF format only supports one page at the moment.",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 157, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
						}
						break;
					}
					var pos1 = reg.matchedPos();
					idx = pos1.pos + pos1.len;
				}
				break;
			case "info":
				while(idx < line.length && reg.matchSub(line,idx)) {
					switch(reg.matched(1)) {
					case "face":
						var v11 = reg.matched(2);
						font.name = HxOverrides.cca(v11,0) == 34 ? v11.substring(1,v11.length - 1) : v11;
						break;
					case "size":
						var v12 = reg.matched(2);
						font.size = font.initSize = Std.parseInt(HxOverrides.cca(v12,0) == 34 ? v12.substring(1,v12.length - 1) : v12);
						break;
					}
					var pos2 = reg.matchedPos();
					idx = pos2.pos + pos2.len;
				}
				break;
			case "kerning":
				var first = 0;
				var second = 0;
				var advance = 0;
				while(idx < line.length && reg.matchSub(line,idx)) {
					switch(reg.matched(1)) {
					case "amount":
						var v13 = reg.matched(2);
						advance = Std.parseInt(HxOverrides.cca(v13,0) == 34 ? v13.substring(1,v13.length - 1) : v13);
						break;
					case "first":
						var v14 = reg.matched(2);
						first = Std.parseInt(HxOverrides.cca(v14,0) == 34 ? v14.substring(1,v14.length - 1) : v14);
						break;
					case "second":
						var v15 = reg.matched(2);
						second = Std.parseInt(HxOverrides.cca(v15,0) == 34 ? v15.substring(1,v15.length - 1) : v15);
						break;
					}
					var pos3 = reg.matchedPos();
					idx = pos3.pos + pos3.len;
				}
				var fc1 = glyphs.h[second];
				if(fc1 != null) {
					fc1.addKerning(first,advance);
				}
				break;
			case "page":
				while(idx < line.length && reg.matchSub(line,idx)) {
					if(reg.matched(1) == "file") {
						var v16 = reg.matched(2);
						var tilePath = HxOverrides.cca(v16,0) == 34 ? v16.substring(1,v16.length - 1) : v16;
						try {
							font.tilePath = tilePath;
							tile = resolveTile(haxe_io_Path.join([haxe_io_Path.directory(path),tilePath]));
						} catch( _g2 ) {
							haxe_Log.trace("Warning: Could not find referenced font texture at \"" + tilePath + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 30, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
							font.tilePath = new haxe_io_Path(path).file + ".png";
							tile = resolveTile(haxe_io_Path.withExtension(path,"png"));
						}
					}
					var pos4 = reg.matchedPos();
					idx = pos4.pos + pos4.len;
				}
				break;
			}
		}
		break;
	default:
		var sign = _g;
		throw haxe_Exception.thrown("Unknown font signature " + StringTools.hex(sign,8));
	}
	if(glyphs.h[32] == null) {
		var value = new h2d_FontChar(tile.sub(0,0,0,0),font.size >> 1);
		glyphs.h[32] = value;
	}
	font.tile = tile;
	if(font.baseLine == 0) {
		var padding = 0;
		var space = glyphs.h[32];
		if(space != null) {
			padding = space.t.height * .5;
		}
		var a = glyphs.h[65];
		if(a == null) {
			a = glyphs.h[97];
		}
		if(a == null) {
			a = glyphs.h[48];
		}
		if(a == null) {
			font.baseLine = font.lineHeight - 2 - padding;
		} else {
			font.baseLine = a.t.dy + a.t.height - padding;
		}
	}
	var fallback = glyphs.h[65533];
	if(fallback == null) {
		fallback = glyphs.h[9633];
	}
	if(fallback == null) {
		fallback = glyphs.h[63];
	}
	if(fallback != null) {
		font.defaultChar = fallback;
	}
	return font;
};
var hxd_fmt_bfnt_Reader = function(i) {
	this.i = i;
};
$hxClasses["hxd.fmt.bfnt.Reader"] = hxd_fmt_bfnt_Reader;
hxd_fmt_bfnt_Reader.__name__ = "hxd.fmt.bfnt.Reader";
hxd_fmt_bfnt_Reader.prototype = {
	read: function(resolveTile) {
		if(this.i.readString(4) != "BFNT" || this.i.readByte() != 0) {
			throw haxe_Exception.thrown("Not a BFNT file!");
		}
		var font = null;
		var _g = this.i.readByte();
		if(_g == 1) {
			font = new h2d_Font(this.i.readString(this.i.readUInt16()),this.i.readInt16());
			font.tilePath = this.i.readString(this.i.readUInt16());
			var tile = font.tile = resolveTile(font.tilePath);
			font.lineHeight = this.i.readInt16();
			font.baseLine = this.i.readInt16();
			var defaultChar = this.i.readInt32();
			var id;
			while(true) {
				id = this.i.readInt32();
				if(!(id != 0)) {
					break;
				}
				var t = tile.sub(this.i.readUInt16(),this.i.readUInt16(),this.i.readUInt16(),this.i.readUInt16(),this.i.readInt16(),this.i.readInt16());
				var glyph = new h2d_FontChar(t,this.i.readInt16());
				font.glyphs.h[id] = glyph;
				if(id == defaultChar) {
					font.defaultChar = glyph;
				}
				var prevChar;
				while(true) {
					prevChar = this.i.readInt32();
					if(!(prevChar != 0)) {
						break;
					}
					glyph.addKerning(prevChar,this.i.readInt16());
				}
			}
		} else {
			var ver = _g;
			throw haxe_Exception.thrown("Unknown BFNT version: " + ver);
		}
		return font;
	}
	,__class__: hxd_fmt_bfnt_Reader
};
var hxd_fmt_hdr_Reader = function() { };
$hxClasses["hxd.fmt.hdr.Reader"] = hxd_fmt_hdr_Reader;
hxd_fmt_hdr_Reader.__name__ = "hxd.fmt.hdr.Reader";
hxd_fmt_hdr_Reader.decode = function(bytes,sRGB) {
	var f = new haxe_io_BytesInput(bytes);
	var width = 0;
	var height = 0;
	var keys_h = Object.create(null);
	while(true) {
		var line = f.readLine();
		if(line == "") {
			break;
		}
		if(HxOverrides.cca(line,0) == 35) {
			continue;
		}
		var nameValue = line.split("=");
		if(nameValue.length > 1) {
			keys_h[nameValue.shift()] = nameValue.join("=");
		}
	}
	var parts = f.readLine().split(" ");
	height = Std.parseInt(parts[1]);
	width = Std.parseInt(parts[3]);
	var gamma = keys_h["GAMMA"] == "1";
	var data = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 * 4));
	var exposure = 1.0;
	var exp = keys_h["EXPOSURE"];
	if(exp != null) {
		var exp1 = parseFloat(exp);
		if(exp1 < 1e-12 || exp1 < 1e12) {
			exposure = exp1;
		}
	}
	var gammaCorrect = sRGB ? 1 : 0.45454545454545453;
	var _g = [];
	var _g1 = 0;
	while(_g1 < 256) {
		var e = _g1++;
		_g.push(Math.pow(e,gammaCorrect));
	}
	var gammaVals = _g;
	var _g = [];
	var _g1 = 0;
	while(_g1 < 256) {
		var e = _g1++;
		_g.push(Math.pow(Math.pow(2,e - 128) / (256 * exposure),gammaCorrect));
	}
	var exps = _g;
	var _g = keys_h["FORMAT"];
	if(_g == null) {
		var fmt = _g;
		throw haxe_Exception.thrown("Unsupported HDR format " + fmt);
	} else if(_g == "32-bit_rle_rgbe") {
		var dataPos = f.pos;
		var scanLen = width * 4;
		var scanLine = new haxe_io_Bytes(new ArrayBuffer(scanLen));
		var widthBE = width >> 8 | (width & 255) << 8;
		var _g1 = 0;
		var _g2 = height;
		while(_g1 < _g2) {
			var y = _g1++;
			var h = bytes.getInt32(dataPos);
			if((h & 65535) != 514 || h >>> 16 != widthBE) {
				scanLine.blit(0,bytes,dataPos,width * 4);
				dataPos += width * 4;
			} else {
				dataPos += 4;
				var p = 0;
				var end = width * 4;
				while(p < end) {
					var len = bytes.b[dataPos++];
					if(len > 128) {
						len -= 128;
						scanLine.fill(p,len,bytes.b[dataPos++]);
					} else {
						scanLine.blit(p,bytes,dataPos,len);
						dataPos += len;
					}
					p += len;
				}
			}
			var pos = y * width * 16;
			var _g3 = 0;
			var _g4 = width;
			while(_g3 < _g4) {
				var x = _g3++;
				var e = exps[scanLine.b[x + width * 3]];
				data.setFloat(pos,gammaVals[scanLine.b[x]] * e);
				pos += 4;
				data.setFloat(pos,gammaVals[scanLine.b[x + width]] * e);
				pos += 4;
				data.setFloat(pos,gammaVals[scanLine.b[x + (width << 1)]] * e);
				pos += 4;
				data.setFloat(pos,1.0);
				pos += 4;
			}
		}
	} else {
		var fmt = _g;
		throw haxe_Exception.thrown("Unsupported HDR format " + fmt);
	}
	return { width : width, height : height, bytes : data, gamma : gamma};
};
var hxd_fs_FileEntry = function() { };
$hxClasses["hxd.fs.FileEntry"] = hxd_fs_FileEntry;
hxd_fs_FileEntry.__name__ = "hxd.fs.FileEntry";
hxd_fs_FileEntry.prototype = {
	getBytes: function() {
		return null;
	}
	,readBytes: function(out,outPos,pos,len) {
		throw haxe_Exception.thrown("readBytes() not implemented");
	}
	,fetchBytes: function(pos,len) {
		var bytes = hxd_fs_FileEntry.TMP_BYTES;
		if(bytes == null || bytes.length < len) {
			var allocSize = len + 65535 & -65536;
			bytes = new haxe_io_Bytes(new ArrayBuffer(allocSize));
			hxd_fs_FileEntry.TMP_BYTES = bytes;
		}
		this.readFull(bytes,pos,len);
		return bytes;
	}
	,readFull: function(bytes,pos,len) {
		if(this.readBytes(bytes,0,pos,len) < len) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
	}
	,getText: function() {
		return this.getBytes().toString();
	}
	,open: function() {
		return new hxd_fs_FileInput(this);
	}
	,load: function(onReady) {
		if(!this.get_isAvailable()) {
			throw haxe_Exception.thrown("load() not implemented");
		} else if(onReady != null) {
			onReady();
		}
	}
	,loadBitmap: function(onLoaded) {
		throw haxe_Exception.thrown("loadBitmap() not implemented");
	}
	,watch: function(onChanged) {
	}
	,get_isAvailable: function() {
		return true;
	}
	,get_size: function() {
		return 0;
	}
	,get_path: function() {
		throw haxe_Exception.thrown("path() not implemented");
	}
	,get_extension: function() {
		var idx = this.name.lastIndexOf(".");
		if(idx < 0) {
			return "";
		}
		return HxOverrides.substr(this.name,idx + 1,null).toLowerCase();
	}
	,__class__: hxd_fs_FileEntry
};
var hxd_fs_FileSystem = function() { };
$hxClasses["hxd.fs.FileSystem"] = hxd_fs_FileSystem;
hxd_fs_FileSystem.__name__ = "hxd.fs.FileSystem";
hxd_fs_FileSystem.__isInterface__ = true;
hxd_fs_FileSystem.prototype = {
	__class__: hxd_fs_FileSystem
};
var hxd_fs__$EmbedFileSystem_EmbedEntry = function(fs,name,relPath,data) {
	this.fs = fs;
	this.name = name;
	this.relPath = relPath;
	this.data = data;
};
$hxClasses["hxd.fs._EmbedFileSystem.EmbedEntry"] = hxd_fs__$EmbedFileSystem_EmbedEntry;
hxd_fs__$EmbedFileSystem_EmbedEntry.__name__ = "hxd.fs._EmbedFileSystem.EmbedEntry";
hxd_fs__$EmbedFileSystem_EmbedEntry.__super__ = hxd_fs_FileEntry;
hxd_fs__$EmbedFileSystem_EmbedEntry.prototype = $extend(hxd_fs_FileEntry.prototype,{
	init: function() {
		if(this.bytes == null) {
			this.bytes = haxe_Resource.getBytes(this.data);
			if(this.bytes == null) {
				throw haxe_Exception.thrown("Missing resource " + this.data);
			}
		}
	}
	,getBytes: function() {
		if(this.bytes == null) {
			this.init();
		}
		return this.bytes;
	}
	,readBytes: function(out,outPos,pos,len) {
		if(this.bytes == null) {
			this.init();
		}
		if(pos + len > this.bytes.length) {
			len = this.bytes.length - pos;
		}
		if(len < 0) {
			len = 0;
		}
		out.blit(outPos,this.bytes,pos,len);
		return len;
	}
	,load: function(onReady) {
		if(onReady != null) {
			haxe_Timer.delay(onReady,1);
		}
	}
	,loadBitmap: function(onLoaded) {
		var rawData = null;
		var _g = 0;
		var _g1 = haxe_Resource.content;
		while(_g < _g1.length) {
			var res = _g1[_g];
			++_g;
			if(res.name == this.data) {
				rawData = res.data;
				break;
			}
		}
		if(rawData == null) {
			throw haxe_Exception.thrown("Missing resource " + this.data);
		}
		var image = new Image();
		image.onload = function(_) {
			var this1 = image;
			onLoaded(this1);
		};
		var extra = "";
		var bytes = rawData.length * 6 >> 3;
		var _g = 0;
		var _g1 = (3 - bytes * 4 % 3) % 3;
		while(_g < _g1) {
			var i = _g++;
			extra += "=";
		}
		var tmp = "data:image/" + this.get_extension() + ";base64," + rawData;
		image.src = tmp + extra;
	}
	,get_path: function() {
		if(this.relPath == ".") {
			return "<root>";
		} else {
			return this.relPath;
		}
	}
	,get_size: function() {
		this.init();
		return this.bytes.length;
	}
	,__class__: hxd_fs__$EmbedFileSystem_EmbedEntry
});
var hxd_fs_EmbedFileSystem = function(root) {
	this.root = root;
};
$hxClasses["hxd.fs.EmbedFileSystem"] = hxd_fs_EmbedFileSystem;
hxd_fs_EmbedFileSystem.__name__ = "hxd.fs.EmbedFileSystem";
hxd_fs_EmbedFileSystem.__interfaces__ = [hxd_fs_FileSystem];
hxd_fs_EmbedFileSystem.resolve = function(path) {
	return "R_" + path.replace(hxd_fs_EmbedFileSystem.invalidChars.r,"_");
};
hxd_fs_EmbedFileSystem.prototype = {
	splitPath: function(path) {
		if(path == ".") {
			return [];
		} else {
			return path.split("/");
		}
	}
	,exists: function(path) {
		var r = this.root;
		var _g = 0;
		var _g1 = this.splitPath(path);
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			r = Reflect.field(r,p);
			if(r == null) {
				return false;
			}
		}
		return true;
	}
	,get: function(path) {
		if(!this.exists(path)) {
			throw haxe_Exception.thrown(new hxd_fs_NotFound(path));
		}
		var id = hxd_fs_EmbedFileSystem.resolve(path);
		return new hxd_fs__$EmbedFileSystem_EmbedEntry(this,path.split("/").pop(),path,id);
	}
	,__class__: hxd_fs_EmbedFileSystem
};
var hxd_fs_FileInput = function(entry) {
	this.nextReadPos = 0;
	this.cacheLen = 0;
	this.cachePos = 0;
	this.entry = entry;
};
$hxClasses["hxd.fs.FileInput"] = hxd_fs_FileInput;
hxd_fs_FileInput.__name__ = "hxd.fs.FileInput";
hxd_fs_FileInput.__super__ = haxe_io_Input;
hxd_fs_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	fetch: function(dataSize) {
		if(dataSize == null) {
			dataSize = 256;
		}
		var prev = this.cache;
		if(this.cache == null || this.cache.length < dataSize) {
			this.cache = hxd_fs_FileInput.PREFETCH_CACHE;
			if(this.cache != null && this.cache.length >= dataSize) {
				hxd_fs_FileInput.PREFETCH_CACHE = null;
			} else {
				this.cache = new haxe_io_Bytes(new ArrayBuffer(dataSize));
			}
		}
		var startPos = 0;
		if(this.cacheLen > 0) {
			startPos = this.cacheLen;
			dataSize -= this.cacheLen;
			this.cache.blit(0,prev,this.cachePos,this.cacheLen);
		}
		var read = this.entry.readBytes(this.cache,startPos,this.nextReadPos,dataSize);
		this.cachePos = 0;
		this.cacheLen = startPos + read;
		this.nextReadPos += read;
		if(this.cacheLen == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
	}
	,skip: function(nbytes) {
		if(this.cacheLen > 0) {
			var a = this.cacheLen;
			var k = a > nbytes ? nbytes : a;
			this.cachePos += k;
			this.cacheLen -= k;
			nbytes -= k;
		}
		this.nextReadPos += nbytes;
	}
	,readByte: function() {
		if(this.cacheLen == 0) {
			this.fetch();
		}
		var b = this.cache.b[this.cachePos++];
		this.cacheLen--;
		return b;
	}
	,readBytes: function(b,pos,len) {
		var tot = 0;
		if(len < 256 && this.cacheLen < len) {
			this.fetch();
		}
		if(this.cacheLen > 0) {
			var b1 = this.cacheLen;
			var k = len > b1 ? b1 : len;
			b.blit(pos,this.cache,this.cachePos,k);
			this.cachePos += k;
			this.cacheLen -= k;
			len -= k;
			if(len == 0) {
				return k;
			}
			pos += k;
			tot += k;
		}
		if(len > 0) {
			var k = this.entry.readBytes(b,pos,this.nextReadPos,len);
			this.nextReadPos += k;
			tot += k;
		}
		return tot;
	}
	,close: function() {
		if(this.cache != null && (hxd_fs_FileInput.PREFETCH_CACHE == null || hxd_fs_FileInput.PREFETCH_CACHE.length < this.cache.length)) {
			hxd_fs_FileInput.PREFETCH_CACHE = this.cache;
		}
		this.cache = null;
		this.cacheLen = 0;
	}
	,__class__: hxd_fs_FileInput
});
var hxd_fs_LoadedBitmap = {};
hxd_fs_LoadedBitmap.toBitmap = function(this1) {
	var bmp = new hxd_BitmapData(this1.width,this1.height);
	bmp.ctx.drawImage(this1,0,0);
	return bmp;
};
var hxd_fs_NotFound = function(path) {
	this.path = path;
};
$hxClasses["hxd.fs.NotFound"] = hxd_fs_NotFound;
hxd_fs_NotFound.__name__ = "hxd.fs.NotFound";
hxd_fs_NotFound.prototype = {
	toString: function() {
		return "Resource file not found '" + this.path + "'";
	}
	,__class__: hxd_fs_NotFound
};
var hxd_impl_Allocator = function() {
};
$hxClasses["hxd.impl.Allocator"] = hxd_impl_Allocator;
hxd_impl_Allocator.__name__ = "hxd.impl.Allocator";
hxd_impl_Allocator.get = function() {
	if(hxd_impl_Allocator.inst == null) {
		hxd_impl_Allocator.inst = new hxd_impl_Allocator();
	}
	return hxd_impl_Allocator.inst;
};
hxd_impl_Allocator.prototype = {
	allocBuffer: function(vertices,stride,flags) {
		var tmp;
		switch(flags) {
		case 0:
			tmp = [h3d_BufferFlag.Dynamic];
			break;
		case 1:
			tmp = [h3d_BufferFlag.UniformBuffer,h3d_BufferFlag.Dynamic];
			break;
		case 2:
			tmp = [h3d_BufferFlag.RawFormat];
			break;
		case 3:
			tmp = [h3d_BufferFlag.Quads,h3d_BufferFlag.RawFormat];
			break;
		}
		return new h3d_Buffer(vertices,stride,tmp);
	}
	,ofFloats: function(v,stride,flags) {
		var nvert = v.pos / stride | 0;
		return this.ofSubFloats(v,stride,nvert,flags);
	}
	,ofSubFloats: function(v,stride,vertices,flags) {
		var b = this.allocBuffer(vertices,stride,flags);
		b.uploadVector(v,0,vertices);
		return b;
	}
	,disposeBuffer: function(b) {
		b.dispose();
	}
	,onContextLost: function() {
	}
	,__class__: hxd_impl_Allocator
};
var hxd_impl_ArrayIterator_$hxd_$snd_$Channel = function(a) {
	this.i = 0;
	this.a = a;
	this.l = this.a.length;
};
$hxClasses["hxd.impl.ArrayIterator_hxd_snd_Channel"] = hxd_impl_ArrayIterator_$hxd_$snd_$Channel;
hxd_impl_ArrayIterator_$hxd_$snd_$Channel.__name__ = "hxd.impl.ArrayIterator_hxd_snd_Channel";
hxd_impl_ArrayIterator_$hxd_$snd_$Channel.prototype = {
	hasNext: function() {
		return this.i < this.l;
	}
	,next: function() {
		return this.a[this.i++];
	}
	,__class__: hxd_impl_ArrayIterator_$hxd_$snd_$Channel
};
var hxd_impl_AsyncLoader = function() { };
$hxClasses["hxd.impl.AsyncLoader"] = hxd_impl_AsyncLoader;
hxd_impl_AsyncLoader.__name__ = "hxd.impl.AsyncLoader";
hxd_impl_AsyncLoader.__isInterface__ = true;
hxd_impl_AsyncLoader.prototype = {
	__class__: hxd_impl_AsyncLoader
};
var hxd_res_Resource = function(entry) {
	this.entry = entry;
};
$hxClasses["hxd.res.Resource"] = hxd_res_Resource;
hxd_res_Resource.__name__ = "hxd.res.Resource";
hxd_res_Resource.prototype = {
	toString: function() {
		return this.entry.get_path();
	}
	,watch: function(onChanged) {
		if(hxd_res_Resource.LIVE_UPDATE) {
			this.entry.watch(onChanged);
		}
	}
	,__class__: hxd_res_Resource
};
var hxd_res_Any = function(loader,entry) {
	hxd_res_Resource.call(this,entry);
	this.loader = loader;
};
$hxClasses["hxd.res.Any"] = hxd_res_Any;
hxd_res_Any.__name__ = "hxd.res.Any";
hxd_res_Any.__super__ = hxd_res_Resource;
hxd_res_Any.prototype = $extend(hxd_res_Resource.prototype,{
	toTexture: function() {
		return this.toImage().toTexture();
	}
	,toTile: function() {
		return this.toImage().toTile();
	}
	,toImage: function() {
		return this.loader.loadCache(this.entry.get_path(),hxd_res_Image);
	}
	,toSound: function() {
		return this.loader.loadCache(this.entry.get_path(),hxd_res_Sound);
	}
	,to: function(c) {
		return this.loader.loadCache(this.entry.get_path(),c);
	}
	,__class__: hxd_res_Any
});
var hxd_res_Atlas = function(entry) {
	hxd_res_Resource.call(this,entry);
};
$hxClasses["hxd.res.Atlas"] = hxd_res_Atlas;
hxd_res_Atlas.__name__ = "hxd.res.Atlas";
hxd_res_Atlas.__super__ = hxd_res_Resource;
hxd_res_Atlas.prototype = $extend(hxd_res_Resource.prototype,{
	getContents: function() {
		if(this.contents != null) {
			return this.contents;
		}
		this.contents = new haxe_ds_StringMap();
		var lines = this.entry.getText().split("\n");
		var basePath = this.entry.get_path().split("/");
		basePath.pop();
		var basePath1 = basePath.join("/");
		if(basePath1.length > 0) {
			basePath1 += "/";
		}
		while(lines.length > 0) {
			var line = StringTools.trim(lines.shift());
			if(line == "") {
				continue;
			}
			var scale = 1.;
			var file = hxd_res_Loader.currentInstance.load(basePath1 + line).toTile();
			while(lines.length > 0) {
				if(lines[0].indexOf(":") < 0) {
					break;
				}
				var line1 = StringTools.trim(lines.shift()).split(": ");
				if(line1[0] == "size") {
					var wh = line1[1].split(",");
					var w = Std.parseInt(wh[0]);
					scale = file.width / w;
				}
			}
			while(lines.length > 0) {
				var line2 = StringTools.trim(lines.shift());
				if(line2 == "") {
					break;
				}
				var prop = line2.split(": ");
				if(prop.length > 1) {
					continue;
				}
				var key = line2;
				var tileX = 0;
				var tileY = 0;
				var tileW = 0;
				var tileH = 0;
				var tileDX = 0;
				var tileDY = 0;
				var origW = 0;
				var origH = 0;
				var index = 0;
				while(lines.length > 0) {
					var line3 = StringTools.trim(lines.shift());
					var prop1 = line3.split(": ");
					if(prop1.length == 1) {
						lines.unshift(line3);
						break;
					}
					var v = prop1[1];
					switch(prop1[0]) {
					case "index":
						index = Std.parseInt(v);
						if(index < 0) {
							index = 0;
						}
						break;
					case "offset":
						var vals = v.split(", ");
						tileDX = Std.parseInt(vals[0]);
						tileDY = Std.parseInt(vals[1]);
						break;
					case "orig":
						var vals1 = v.split(", ");
						origW = Std.parseInt(vals1[0]);
						origH = Std.parseInt(vals1[1]);
						break;
					case "rotate":
						if(v == "true") {
							throw haxe_Exception.thrown("Rotation not supported in atlas");
						}
						break;
					case "size":
						var vals2 = v.split(", ");
						tileW = Std.parseInt(vals2[0]);
						tileH = Std.parseInt(vals2[1]);
						break;
					case "xy":
						var vals3 = v.split(", ");
						tileX = Std.parseInt(vals3[0]);
						tileY = Std.parseInt(vals3[1]);
						break;
					default:
						haxe_Log.trace("Unknown prop " + prop1[0],{ fileName : "hxd/res/Atlas.hx", lineNumber : 116, className : "hxd.res.Atlas", methodName : "getContents"});
					}
				}
				tileDY = origH - (tileH + tileDY);
				var t = file.sub(tileX * scale | 0,tileY * scale | 0,tileW * scale | 0,tileH * scale | 0,tileDX,tileDY);
				if(scale != 1) {
					t.scaleToSize(tileW,tileH);
				}
				var tl = this.contents.h[key];
				if(tl == null) {
					tl = [];
					this.contents.h[key] = tl;
				}
				tl[index] = { t : t, width : origW, height : origH};
			}
		}
		var h = this.contents.h;
		var tl_h = h;
		var tl_keys = Object.keys(h);
		var tl_length = tl_keys.length;
		var tl_current = 0;
		while(tl_current < tl_length) {
			var tl = tl_h[tl_keys[tl_current++]];
			if(tl.length > 1 && tl[0] == null) {
				tl.shift();
			}
		}
		return this.contents;
	}
	,__class__: hxd_res_Atlas
});
var hxd_res_BitmapFont = function(entry) {
	hxd_res_Resource.call(this,entry);
	this.loader = hxd_res_Loader.currentInstance;
};
$hxClasses["hxd.res.BitmapFont"] = hxd_res_BitmapFont;
hxd_res_BitmapFont.__name__ = "hxd.res.BitmapFont";
hxd_res_BitmapFont.__super__ = hxd_res_Resource;
hxd_res_BitmapFont.prototype = $extend(hxd_res_Resource.prototype,{
	toFont: function() {
		if(this.font == null) {
			this.font = hxd_fmt_bfnt_FontParser.parse(this.entry.getBytes(),this.entry.get_path(),$bind(this,this.resolveTile));
		}
		return this.font;
	}
	,resolveTile: function(path) {
		return this.loader.load(path).toTile();
	}
	,__class__: hxd_res_BitmapFont
});
var hxd_res_ImageFormat = {};
hxd_res_ImageFormat.getName = function(this1) {
	switch(this1) {
	case 0:
		return "JPG";
	case 1:
		return "PNG";
	case 2:
		return "GIF";
	case 3:
		return "TGA";
	case 4:
		return "DDS";
	case 5:
		return "RAW";
	case 6:
		return "HDR";
	}
};
var hxd_res_ImageInfoFlag = $hxEnums["hxd.res.ImageInfoFlag"] = { __ename__:true,__constructs__:null
	,IsCube: {_hx_name:"IsCube",_hx_index:0,__enum__:"hxd.res.ImageInfoFlag",toString:$estr}
	,Dxt10Header: {_hx_name:"Dxt10Header",_hx_index:1,__enum__:"hxd.res.ImageInfoFlag",toString:$estr}
};
hxd_res_ImageInfoFlag.__constructs__ = [hxd_res_ImageInfoFlag.IsCube,hxd_res_ImageInfoFlag.Dxt10Header];
hxd_res_ImageInfoFlag.__empty_constructs__ = [hxd_res_ImageInfoFlag.IsCube,hxd_res_ImageInfoFlag.Dxt10Header];
var hxd_res_ImageInfo = function() {
	this.layerCount = 1;
	this.mipLevels = 1;
	this.height = 0;
	this.width = 0;
	var this1 = 0;
	this.flags = this1;
};
$hxClasses["hxd.res.ImageInfo"] = hxd_res_ImageInfo;
hxd_res_ImageInfo.__name__ = "hxd.res.ImageInfo";
hxd_res_ImageInfo.prototype = {
	__class__: hxd_res_ImageInfo
};
var hxd_res_Image = function(entry) {
	hxd_res_Resource.call(this,entry);
};
$hxClasses["hxd.res.Image"] = hxd_res_Image;
hxd_res_Image.__name__ = "hxd.res.Image";
hxd_res_Image.setupTextureFlags = function(tex) {
};
hxd_res_Image.__super__ = hxd_res_Resource;
hxd_res_Image.prototype = $extend(hxd_res_Resource.prototype,{
	getInfo: function() {
		if(this.inf != null) {
			return this.inf;
		}
		this.inf = new hxd_res_ImageInfo();
		var f = this.entry.open();
		f.fetch(256);
		var head;
		try {
			head = f.readUInt16();
		} catch( _g ) {
			if(((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				head = 0;
			} else {
				throw _g;
			}
		}
		switch(head) {
		case 16163:
			this.inf.dataFormat = 6;
			while(f.readLine() != "") {
			}
			var parts = f.readLine().split(" ");
			this.inf.pixelFormat = hxd_PixelFormat.RGBA32F;
			this.inf.height = Std.parseInt(parts[1]);
			this.inf.width = Std.parseInt(parts[3]);
			break;
		case 17476:
			this.inf.dataFormat = 4;
			f.skip(10);
			this.inf.height = f.readInt32();
			this.inf.width = f.readInt32();
			f.skip(8);
			this.inf.mipLevels = f.readInt32();
			f.skip(48);
			var caps = f.readInt32();
			var fourCC = f.readInt32();
			var bpp = f.readInt32();
			var rMask = f.readInt32();
			var gMask = f.readInt32();
			var bMask = f.readInt32();
			var aMask = f.readInt32();
			var caps2 = f.readInt32();
			var cubes = f.readInt32();
			if((cubes & 65024) == 65024) {
				this.inf.flags |= 1 << hxd_res_ImageInfoFlag.IsCube._hx_index;
			}
			switch(fourCC & 16777215) {
			case 0:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd_PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd_PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd_PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd_PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					var imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else if((caps & 64) != 0) {
					if(bpp == 32) {
						switch(rMask) {
						case 255:
							if(gMask == 65280) {
								if(bMask == 16711680) {
									if(aMask == -16777216) {
										this.inf.pixelFormat = hxd_PixelFormat.RGBA;
									} else {
										throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
									}
								} else {
									throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
								}
							} else {
								throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
							}
							break;
						case 16711680:
							if(gMask == 65280) {
								if(bMask == 255) {
									if(aMask == -16777216) {
										this.inf.pixelFormat = hxd_PixelFormat.BGRA;
									} else {
										throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
									}
								} else {
									throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
								}
							} else {
								throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
							}
							break;
						default:
							throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
						}
					} else {
						throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
					}
				}
				break;
			case 111:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd_PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd_PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd_PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd_PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					var imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else {
					this.inf.pixelFormat = hxd_PixelFormat.R16F;
				}
				break;
			case 112:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd_PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd_PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd_PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd_PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					var imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else {
					this.inf.pixelFormat = hxd_PixelFormat.RG16F;
				}
				break;
			case 113:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd_PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd_PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd_PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd_PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					var imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else {
					this.inf.pixelFormat = hxd_PixelFormat.RGBA16F;
				}
				break;
			case 114:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd_PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd_PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd_PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd_PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					var imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else {
					this.inf.pixelFormat = hxd_PixelFormat.R32F;
				}
				break;
			case 115:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd_PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd_PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd_PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd_PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					var imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else {
					this.inf.pixelFormat = hxd_PixelFormat.RG32F;
				}
				break;
			case 116:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd_PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd_PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd_PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd_PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					var imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else {
					this.inf.pixelFormat = hxd_PixelFormat.RGBA32F;
				}
				break;
			case 4805697:
				var v = (fourCC >>> 24) - 48;
				var tmp;
				switch(v) {
				case 1:
					tmp = hxd_PixelFormat.S3TC(4);
					break;
				case 2:
					tmp = hxd_PixelFormat.S3TC(5);
					break;
				default:
					tmp = null;
				}
				this.inf.pixelFormat = tmp;
				break;
			case 5527620:
				var dxt = (fourCC >>> 24) - 48;
				var tmp;
				switch(dxt) {
				case 1:
					tmp = hxd_PixelFormat.S3TC(1);
					break;
				case 2:case 3:
					tmp = hxd_PixelFormat.S3TC(2);
					break;
				case 4:case 5:
					tmp = hxd_PixelFormat.S3TC(3);
					break;
				default:
					tmp = null;
				}
				this.inf.pixelFormat = tmp;
				break;
			default:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd_PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd_PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd_PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd_PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					var imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				}
			}
			if(this.inf.pixelFormat == null) {
				var fid = String.fromCodePoint((fourCC & 255)) + String.fromCodePoint((fourCC >> 8 & 255)) + String.fromCodePoint((fourCC >> 16 & 255)) + String.fromCodePoint((fourCC >>> 24));
				if((fourCC & 255) == fourCC) {
					fid = "0x" + fourCC;
				}
				throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported 4CC " + fid);
			}
			break;
		case 18759:
			this.inf.dataFormat = 2;
			this.inf.pixelFormat = hxd_PixelFormat.BGRA;
			f.readInt32();
			this.inf.width = f.readUInt16();
			this.inf.height = f.readUInt16();
			break;
		case 20617:
			this.inf.dataFormat = 1;
			f.set_bigEndian(true);
			f.skip(6);
			while(true) {
				var dataLen = f.readInt32();
				if(f.readInt32() == 1229472850) {
					this.inf.width = f.readInt32();
					this.inf.height = f.readInt32();
					var colbits = f.readByte();
					var tmp;
					switch(colbits) {
					case 8:
						tmp = hxd_PixelFormat.BGRA;
						break;
					case 16:
						tmp = hxd_PixelFormat.R16U;
						break;
					case 48:
						tmp = hxd_PixelFormat.RGB16U;
						break;
					case 64:
						tmp = hxd_PixelFormat.RGBA16U;
						break;
					default:
						throw haxe_Exception.thrown("Unsupported png format " + colbits + "(" + this.entry.get_path() + ")");
					}
					this.inf.pixelFormat = tmp;
					break;
				}
				f.skip(dataLen + 4);
			}
			break;
		case 55551:
			this.inf.dataFormat = 0;
			this.inf.pixelFormat = hxd_PixelFormat.BGRA;
			f.set_bigEndian(true);
			_hx_loop3: while(true) switch(f.readUInt16()) {
			case 65472:case 65473:case 65474:
				var len = f.readUInt16();
				var prec = f.readByte();
				this.inf.height = f.readUInt16();
				this.inf.width = f.readUInt16();
				break _hx_loop3;
			default:
				f.skip(f.readUInt16() - 2);
			}
			break;
		default:
			if(this.entry.get_extension() == "tga") {
				this.inf.dataFormat = 3;
				this.inf.pixelFormat = hxd_PixelFormat.ARGB;
				f.skip(10);
				this.inf.width = f.readUInt16();
				this.inf.height = f.readUInt16();
			} else if(this.entry.get_extension() == "raw") {
				this.inf.dataFormat = 5;
				this.inf.pixelFormat = hxd_PixelFormat.R32F;
				var size = Math.sqrt(this.entry.get_size() >> 2) | 0;
				if(this.entry.get_size() != size * size * 4) {
					var size2 = Math.sqrt(this.entry.get_size() >> 1) | 0;
					if(this.entry.get_size() == size2 * size2 * 2) {
						this.inf.pixelFormat = hxd_PixelFormat.R16F;
						size = size2;
					} else {
						throw haxe_Exception.thrown("RAW format does not match 32 bit per components on " + size + "x" + size);
					}
				}
				this.inf.width = this.inf.height = size;
			} else {
				throw haxe_Exception.thrown("Unsupported texture format " + this.entry.get_path());
			}
		}
		f.close();
		if(this.inf.pixelFormat == null) {
			throw haxe_Exception.thrown("Unsupported internal format (" + this.entry.get_path() + ")");
		}
		return this.inf;
	}
	,getPixels: function(fmt,flipY,index) {
		var pixels;
		if(index == null) {
			index = 0;
		}
		switch(this.getInfo().dataFormat) {
		case 0:
			var bytes = this.entry.getBytes();
			if(this.inf.pixelFormat != hxd_PixelFormat.BGRA) {
				throw haxe_Exception.thrown("No support to decode " + Std.string(this.inf.pixelFormat) + " on this platform (" + this.entry.get_path() + ")");
			}
			var p;
			try {
				p = hxd_res_NanoJpeg.decode(bytes);
			} catch( _g ) {
				var e = haxe_Exception.caught(_g).unwrap();
				throw haxe_Exception.thrown("Failed to decode JPG " + this.entry.get_path() + " (" + Std.string(e) + ")");
			}
			pixels = new hxd_Pixels(p.width,p.height,p.pixels,hxd_PixelFormat.BGRA);
			break;
		case 1:
			var bytes = this.entry.getBytes();
			if(this.inf.pixelFormat != hxd_PixelFormat.BGRA) {
				throw haxe_Exception.thrown("No support to decode " + Std.string(this.inf.pixelFormat) + " on this platform (" + this.entry.get_path() + ")");
			}
			var png = new format_png_Reader(new haxe_io_BytesInput(bytes));
			png.checkCRC = false;
			pixels = hxd_Pixels.alloc(this.inf.width,this.inf.height,hxd_PixelFormat.BGRA);
			var pdata = png.read();
			format_png_Tools.extract32(pdata,pixels.bytes,flipY);
			if(flipY) {
				pixels.flags |= 1 << hxd_Flags.FlipY._hx_index;
			}
			break;
		case 2:
			var bytes = this.entry.getBytes();
			var gif = new format_gif_Reader(new haxe_io_BytesInput(bytes)).read();
			if(fmt == hxd_PixelFormat.RGBA) {
				pixels = new hxd_Pixels(this.inf.width,this.inf.height,format_gif_Tools.extractFullRGBA(gif,0),hxd_PixelFormat.RGBA);
			} else {
				pixels = new hxd_Pixels(this.inf.width,this.inf.height,format_gif_Tools.extractFullBGRA(gif,0),hxd_PixelFormat.BGRA);
			}
			break;
		case 3:
			var bytes = this.entry.getBytes();
			var r = new format_tga_Reader(new haxe_io_BytesInput(bytes)).read();
			if(r.header.imageType != format_tga_ImageType.UncompressedTrueColor || r.header.bitsPerPixel != 32) {
				throw haxe_Exception.thrown("Not supported TGA " + Std.string(r.header.imageType) + "/" + r.header.bitsPerPixel);
			}
			var w = r.header.width;
			var h = r.header.height;
			if(fmt == hxd_PixelFormat.RGBA) {
				pixels = hxd_Pixels.alloc(w,h,hxd_PixelFormat.RGBA);
				var bytes = pixels.bytes;
				var _g = 0;
				var _g1 = w * h;
				while(_g < _g1) {
					var i = _g++;
					var c = r.imageData[i];
					c = c >>> 24 | c << 8;
					bytes.setInt32(i << 2,c);
				}
			} else {
				pixels = hxd_Pixels.alloc(w,h,hxd_PixelFormat.ARGB);
				var access = hxd_PixelsARGB.fromPixels(pixels);
				var p = 0;
				var _g = 0;
				var _g1 = h;
				while(_g < _g1) {
					var y = _g++;
					var _g2 = 0;
					var _g3 = w;
					while(_g2 < _g3) {
						var x = _g2++;
						var c = r.imageData[p++];
						access.bytes.setInt32((x + y * access.width << 2) + access.offset,c >>> 24 | c >> 8 & 65280 | c << 8 & 16711680 | c << 24);
					}
				}
			}
			switch(r.header.imageOrigin._hx_index) {
			case 0:
				pixels.flags |= 1 << hxd_Flags.FlipY._hx_index;
				break;
			case 2:
				break;
			default:
				throw haxe_Exception.thrown("Not supported " + Std.string(r.header.imageOrigin));
			}
			break;
		case 4:
			var pos = 128;
			var mipLevel = 0;
			if((this.inf.flags & 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index) != 0) {
				pos += 20;
			}
			if(index > 0) {
				var bpp = hxd_Pixels.calcStride(1,this.inf.pixelFormat);
				var layer = index / this.inf.mipLevels | 0;
				mipLevel = index % this.inf.mipLevels;
				var totSize = 0;
				var _g = 0;
				var _g1 = this.inf.mipLevels;
				while(_g < _g1) {
					var i = _g++;
					var w = this.inf.width >> i;
					var h = this.inf.height >> i;
					if(w == 0) {
						w = 1;
					}
					if(h == 0) {
						h = 1;
					}
					var size = hxd_Pixels.calcDataSize(w,h,this.inf.pixelFormat);
					totSize += size;
					if(i < mipLevel) {
						pos += size;
					} else if(layer == 0) {
						break;
					}
				}
				pos += totSize * layer;
			}
			var bytes;
			var w = this.inf.width >> mipLevel;
			var h = this.inf.height >> mipLevel;
			if(w == 0) {
				w = 1;
			}
			if(h == 0) {
				h = 1;
			}
			if(this.inf.mipLevels == 1 && (this.inf.flags & 1 << hxd_res_ImageInfoFlag.IsCube._hx_index) == 0) {
				bytes = this.entry.getBytes();
			} else {
				var size = hxd_Pixels.calcDataSize(w,h,this.inf.pixelFormat);
				bytes = new haxe_io_Bytes(new ArrayBuffer(size));
				this.entry.readFull(bytes,pos,size);
				pos = 0;
			}
			pixels = new hxd_Pixels(w,h,bytes,this.inf.pixelFormat,pos);
			break;
		case 5:
			var bytes = this.entry.getBytes();
			pixels = new hxd_Pixels(this.inf.width,this.inf.height,bytes,this.inf.pixelFormat);
			break;
		case 6:
			var data = hxd_fmt_hdr_Reader.decode(this.entry.getBytes(),false);
			pixels = new hxd_Pixels(data.width,data.height,data.bytes,this.inf.pixelFormat);
			break;
		}
		if(fmt != null) {
			pixels.convert(fmt);
		}
		if(flipY != null) {
			pixels.setFlip(flipY);
		}
		return pixels;
	}
	,watchCallb: function() {
		var w = this.inf.width;
		var h = this.inf.height;
		this.inf = null;
		var s = this.getInfo();
		if(w != s.width || h != s.height) {
			this.tex.resize(s.width,s.height);
		}
		this.tex.realloc = null;
		this.loadTexture();
	}
	,loadTexture: function(asyncData) {
		var _gthis = this;
		if(this.getInfo().dataFormat == 0) {
			this.tex.flags |= 1 << h3d_mat_TextureFlags.Loading._hx_index;
			this.entry.loadBitmap(function(bmp) {
				var bmp1 = hxd_fs_LoadedBitmap.toBitmap(bmp);
				_gthis.tex.alloc();
				_gthis.tex.uploadBitmap(bmp1);
				bmp1.ctx = null;
				bmp1.pixel = null;
				_gthis.tex.realloc = function() {
					_gthis.loadTexture();
				};
				_gthis.tex.flags &= -1 - (1 << h3d_mat_TextureFlags.Loading._hx_index);
				if(_gthis.tex.waitLoads != null) {
					var arr = _gthis.tex.waitLoads;
					_gthis.tex.waitLoads = null;
					var _g = 0;
					while(_g < arr.length) {
						var f = arr[_g];
						++_g;
						f();
					}
				}
				if(hxd_res_Image.ENABLE_AUTO_WATCH) {
					_gthis.watch($bind(_gthis,_gthis.watchCallb));
				}
			});
			return;
		}
		var load = function() {
			if((_gthis.enableAsyncLoading || (_gthis.tex.flags & 1 << h3d_mat_TextureFlags.AsyncLoading._hx_index) != 0) && asyncData == null && hxd_res_Image.ASYNC_LOADER.isSupported(_gthis)) {
				_gthis.tex.dispose();
				_gthis.tex.format = hxd_PixelFormat.RGBA;
				_gthis.tex.width = 1;
				_gthis.tex.height = 1;
				_gthis.tex.customMipLevels = 1;
				_gthis.tex.flags |= 1 << h3d_mat_TextureFlags.Loading._hx_index;
				_gthis.tex.alloc();
				_gthis.tex.uploadPixels(hxd_res_Image.BLACK_1x1);
				_gthis.tex.width = _gthis.inf.width;
				_gthis.tex.height = _gthis.inf.height;
				hxd_res_Image.ASYNC_LOADER.load(_gthis);
				_gthis.tex.realloc = function() {
					_gthis.loadTexture();
				};
				return;
			}
			var t0 = HxOverrides.now() / 1000;
			_gthis.tex.customMipLevels = _gthis.inf.mipLevels;
			_gthis.tex.alloc();
			if(_gthis.inf.dataFormat == 4) {
				var pos = 128;
				if((_gthis.inf.flags & 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index) != 0) {
					pos += 20;
				}
				var _g = 0;
				var _g1 = _gthis.tex.get_layerCount();
				while(_g < _g1) {
					var layer = _g++;
					var _g2 = 0;
					var _g3 = _gthis.inf.mipLevels;
					while(_g2 < _g3) {
						var mip = _g2++;
						var w = _gthis.inf.width >> mip;
						var h = _gthis.inf.height >> mip;
						if(w == 0) {
							w = 1;
						}
						if(h == 0) {
							h = 1;
						}
						var size = hxd_Pixels.calcDataSize(w,h,_gthis.inf.pixelFormat);
						var bytes = asyncData == null ? _gthis.entry.fetchBytes(pos,size) : asyncData;
						_gthis.tex.uploadPixels(new hxd_Pixels(w,h,bytes,_gthis.inf.pixelFormat,asyncData == null ? 0 : pos),mip,layer);
						pos += size;
					}
				}
			} else {
				var _g = 0;
				var _g1 = _gthis.tex.get_layerCount();
				while(_g < _g1) {
					var layer = _g++;
					var _g2 = 0;
					var _g3 = _gthis.inf.mipLevels;
					while(_g2 < _g3) {
						var mip = _g2++;
						var pixels = _gthis.getPixels(_gthis.tex.format,null,layer * _gthis.inf.mipLevels + mip);
						_gthis.tex.uploadPixels(pixels,mip,layer);
						pixels.dispose();
					}
				}
			}
			if(hxd_res_Image.LOG_TEXTURE_LOAD && asyncData == null) {
				var time = (HxOverrides.now() / 1000 - t0) * 1000.0;
				var _g = _gthis.inf.pixelFormat;
				var fmtStr;
				if(_g._hx_index == 21) {
					var _g1 = _g.v;
					fmtStr = true;
				} else {
					fmtStr = false;
				}
				var fmtStr1 = fmtStr ? "DXT" : hxd_res_ImageFormat.getName(_gthis.inf.dataFormat);
				haxe_Log.trace(fmtStr1 + " " + (time | 0) + "." + (time * 10 | 0) % 10 + "ms " + _gthis.inf.width + "x" + _gthis.inf.height + " " + _gthis.entry.get_path(),{ fileName : "hxd/res/Image.hx", lineNumber : 558, className : "hxd.res.Image", methodName : "loadTexture"});
			}
			_gthis.tex.realloc = function() {
				_gthis.loadTexture();
			};
			if(hxd_res_Image.ENABLE_AUTO_WATCH) {
				_gthis.watch($bind(_gthis,_gthis.watchCallb));
			}
		};
		if(this.entry.get_isAvailable()) {
			load();
		} else {
			this.entry.load(load);
		}
	}
	,toTexture: function() {
		if(this.tex != null) {
			return this.tex;
		}
		this.getInfo();
		var flags = [h3d_mat_TextureFlags.NoAlloc];
		var fmt = this.inf.pixelFormat;
		if(fmt == hxd_PixelFormat.BGRA || fmt == hxd_PixelFormat.ARGB || fmt == hxd_PixelFormat.RGBA) {
			fmt = h3d_mat_Texture.nativeFormat;
		}
		if((this.inf.flags & 1 << hxd_res_ImageInfoFlag.IsCube._hx_index) != 0) {
			flags.push(h3d_mat_TextureFlags.Cube);
		}
		if(this.inf.mipLevels > 1) {
			flags.push(h3d_mat_TextureFlags.MipMapped);
			flags.push(h3d_mat_TextureFlags.ManualMipMapGen);
		}
		if(fmt == hxd_PixelFormat.R16U) {
			throw haxe_Exception.thrown("Unsupported texture format " + Std.string(fmt) + " for " + this.entry.get_path());
		}
		if(this.inf.layerCount > 1) {
			this.tex = new h3d_mat_TextureArray(this.inf.width,this.inf.height,this.inf.layerCount,flags,fmt);
		} else {
			this.tex = new h3d_mat_Texture(this.inf.width,this.inf.height,flags,fmt);
		}
		if(hxd_res_Image.DEFAULT_FILTER != h3d_mat_Filter.Linear) {
			this.tex.set_filter(hxd_res_Image.DEFAULT_FILTER);
		}
		this.tex.setName(this.entry.get_path());
		hxd_res_Image.setupTextureFlags(this.tex);
		this.loadTexture();
		return this.tex;
	}
	,toTile: function() {
		this.getInfo();
		return h2d_Tile.fromTexture(this.toTexture()).sub(0,0,this.inf.width,this.inf.height);
	}
	,__class__: hxd_res_Image
});
var hxd_res_Filter = $hxEnums["hxd.res.Filter"] = { __ename__:true,__constructs__:null
	,Fast: {_hx_name:"Fast",_hx_index:0,__enum__:"hxd.res.Filter",toString:$estr}
	,Chromatic: {_hx_name:"Chromatic",_hx_index:1,__enum__:"hxd.res.Filter",toString:$estr}
};
hxd_res_Filter.__constructs__ = [hxd_res_Filter.Fast,hxd_res_Filter.Chromatic];
hxd_res_Filter.__empty_constructs__ = [hxd_res_Filter.Fast,hxd_res_Filter.Chromatic];
var hxd_res__$NanoJpeg_Component = function() {
};
$hxClasses["hxd.res._NanoJpeg.Component"] = hxd_res__$NanoJpeg_Component;
hxd_res__$NanoJpeg_Component.__name__ = "hxd.res._NanoJpeg.Component";
hxd_res__$NanoJpeg_Component.prototype = {
	__class__: hxd_res__$NanoJpeg_Component
};
var hxd_res_NanoJpeg = function() {
	this.comps = [new hxd_res__$NanoJpeg_Component(),new hxd_res__$NanoJpeg_Component(),new hxd_res__$NanoJpeg_Component()].slice(0);
	var this1 = new Array(64);
	var this2 = new Array(64);
	var this3 = new Array(64);
	var this4 = new Array(64);
	this.qtab = [this1,this2,this3,this4].slice(0);
	var this1 = new Array(16);
	this.counts = this1;
	var this1 = new Array(64);
	this.block = this1;
	this.njZZ = [0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63].slice(0);
	this.vlctab = [null,null,null,null,null,null,null,null].slice(0);
};
$hxClasses["hxd.res.NanoJpeg"] = hxd_res_NanoJpeg;
hxd_res_NanoJpeg.__name__ = "hxd.res.NanoJpeg";
hxd_res_NanoJpeg.decode = function(bytes,filter,position,size) {
	if(size == null) {
		size = -1;
	}
	if(position == null) {
		position = 0;
	}
	if(hxd_res_NanoJpeg.inst == null) {
		hxd_res_NanoJpeg.inst = new hxd_res_NanoJpeg();
	}
	hxd_res_NanoJpeg.inst.njInit(bytes,position,size,filter);
	return hxd_res_NanoJpeg.inst.njDecode();
};
hxd_res_NanoJpeg.prototype = {
	njInit: function(bytes,pos,size,filter) {
		this.bytes = bytes;
		this.pos = pos;
		this.filter = filter == null ? hxd_res_Filter.Chromatic : filter;
		if(size < 0) {
			size = bytes.length - pos;
		}
		if(this.vlctab[0] == null) {
			this.vlctab[0] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		if(this.vlctab[1] == null) {
			this.vlctab[1] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		if(this.vlctab[2] == null) {
			this.vlctab[2] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		if(this.vlctab[3] == null) {
			this.vlctab[3] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		this.size = size;
		this.qtused = 0;
		this.qtavail = 0;
		this.rstinterval = 0;
		this.length = 0;
		this.buf = 0;
		this.bufbits = 0;
		this.progressive = false;
		this.comps[0].dcpred = 0;
		this.comps[1].dcpred = 0;
		this.comps[2].dcpred = 0;
	}
	,cleanup: function() {
		this.bytes = null;
		var _g = 0;
		var _g1 = this.comps;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.pixels != null) {
				c.pixels = null;
			}
		}
		if(this.vlctab[0] != null) {
			this.vlctab[0] = null;
		}
		if(this.vlctab[1] != null) {
			this.vlctab[1] = null;
		}
		if(this.vlctab[2] != null) {
			this.vlctab[2] = null;
		}
		if(this.vlctab[3] != null) {
			this.vlctab[3] = null;
		}
		if(this.vlctab[4] != null) {
			this.vlctab[4] = null;
		}
		if(this.vlctab[5] != null) {
			this.vlctab[5] = null;
		}
		if(this.vlctab[6] != null) {
			this.vlctab[6] = null;
		}
		if(this.vlctab[7] != null) {
			this.vlctab[7] = null;
		}
	}
	,njShowBits: function(bits) {
		if(bits == 0) {
			return 0;
		}
		while(this.bufbits < bits) {
			if(this.size <= 0) {
				this.buf = this.buf << 8 | 255;
				this.bufbits += 8;
				continue;
			}
			var newbyte = this.bytes.b[this.pos];
			this.pos++;
			this.size--;
			this.bufbits += 8;
			this.buf = this.buf << 8 | newbyte;
			if(newbyte == 255) {
				var marker = this.bytes.b[this.pos];
				this.pos++;
				this.size--;
				switch(marker) {
				case 217:
					this.size = 0;
					break;
				case 0:case 255:
					break;
				default:
					this.buf = this.buf << 8 | marker;
					this.bufbits += 8;
				}
			}
		}
		return this.buf >> this.bufbits - bits & (1 << bits) - 1;
	}
	,njDecodeSOF: function() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.bytes.b[this.pos] != 8) {
			this.notSupported();
		}
		this.height = this.bytes.b[this.pos + 1] << 8 | this.bytes.b[this.pos + 2];
		this.width = this.bytes.b[this.pos + 3] << 8 | this.bytes.b[this.pos + 4];
		this.ncomp = this.bytes.b[this.pos + 5];
		this.pos += 6;
		this.size -= 6;
		this.length -= 6;
		switch(this.ncomp) {
		case 1:case 3:
			break;
		default:
			this.notSupported();
		}
		var ssxmax = 0;
		var ssymax = 0;
		var _g = 0;
		var _g1 = this.ncomp;
		while(_g < _g1) {
			var i = _g++;
			var c = this.comps[i];
			c.cid = this.bytes.b[this.pos];
			c.ssx = this.bytes.b[this.pos + 1] >> 4;
			if((c.ssx & c.ssx - 1) != 0) {
				this.notSupported();
			}
			c.ssy = this.bytes.b[this.pos + 1] & 15;
			if((c.ssy & c.ssy - 1) != 0) {
				this.notSupported();
			}
			c.qtsel = this.bytes.b[this.pos + 2];
			this.pos += 3;
			this.size -= 3;
			this.length -= 3;
			this.qtused |= 1 << c.qtsel;
			if(c.ssx > ssxmax) {
				ssxmax = c.ssx;
			}
			if(c.ssy > ssymax) {
				ssymax = c.ssy;
			}
		}
		if(this.ncomp == 1) {
			var c = this.comps[0];
			ssymax = 1;
			ssxmax = ssymax;
			c.ssx = c.ssy = ssxmax;
		}
		this.mbsizex = ssxmax << 3;
		this.mbsizey = ssymax << 3;
		this.mbwidth = (this.width + this.mbsizex - 1) / this.mbsizex | 0;
		this.mbheight = (this.height + this.mbsizey - 1) / this.mbsizey | 0;
		var _g = 0;
		var _g1 = this.ncomp;
		while(_g < _g1) {
			var i = _g++;
			var c = this.comps[i];
			c.width = (this.width * c.ssx + ssxmax - 1) / ssxmax | 0;
			c.stride = c.width + 7 & 2147483640;
			c.height = (this.height * c.ssy + ssymax - 1) / ssymax | 0;
			c.stride = this.mbwidth * this.mbsizex * c.ssx / ssxmax | 0;
			if(c.width < 3 && c.ssx != ssxmax || c.height < 3 && c.ssy != ssymax) {
				this.notSupported();
			}
			c.pixels = new haxe_io_Bytes(new ArrayBuffer(c.stride * (this.mbheight * this.mbsizey * c.ssy / ssymax | 0)));
		}
		var count = this.length;
		this.pos += count;
		this.size -= count;
		this.length -= count;
	}
	,njDecodeDQT: function() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		while(this.length >= 65) {
			var i = this.bytes.b[this.pos];
			this.qtavail |= 1 << i;
			var t = this.qtab[i];
			var _g = 0;
			while(_g < 64) {
				var k = _g++;
				t[k] = this.bytes.b[this.pos + (k + 1)];
			}
			this.pos += 65;
			this.size -= 65;
			this.length -= 65;
		}
	}
	,njDecodeDHT: function() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		while(this.length >= 17) {
			var i = this.bytes.b[this.pos];
			i = i >> 4 & 1 | (i & 3) << 1;
			this.counts[0] = this.bytes.b[this.pos + 1];
			this.counts[1] = this.bytes.b[this.pos + 2];
			this.counts[2] = this.bytes.b[this.pos + 3];
			this.counts[3] = this.bytes.b[this.pos + 4];
			this.counts[4] = this.bytes.b[this.pos + 5];
			this.counts[5] = this.bytes.b[this.pos + 6];
			this.counts[6] = this.bytes.b[this.pos + 7];
			this.counts[7] = this.bytes.b[this.pos + 8];
			this.counts[8] = this.bytes.b[this.pos + 9];
			this.counts[9] = this.bytes.b[this.pos + 10];
			this.counts[10] = this.bytes.b[this.pos + 11];
			this.counts[11] = this.bytes.b[this.pos + 12];
			this.counts[12] = this.bytes.b[this.pos + 13];
			this.counts[13] = this.bytes.b[this.pos + 14];
			this.counts[14] = this.bytes.b[this.pos + 15];
			this.counts[15] = this.bytes.b[this.pos + 16];
			this.pos += 17;
			this.size -= 17;
			this.length -= 17;
			var vlc = this.vlctab[i];
			var vpos = 0;
			var remain = 65536;
			var spread = 65536;
			var _g = 1;
			while(_g < 17) {
				var codelen = _g++;
				spread >>= 1;
				var currcnt = this.counts[codelen - 1];
				if(currcnt == 0) {
					continue;
				}
				remain -= currcnt << 16 - codelen;
				var _g1 = 0;
				var _g2 = currcnt;
				while(_g1 < _g2) {
					var i1 = _g1++;
					var code = this.bytes.b[this.pos + i1];
					var _g3 = 0;
					var _g4 = spread;
					while(_g3 < _g4) {
						var j = _g3++;
						vlc.b[vpos++] = codelen;
						vlc.b[vpos++] = code;
					}
				}
				this.pos += currcnt;
				this.size -= currcnt;
				this.length -= currcnt;
			}
			while(remain-- != 0) {
				vlc.b[vpos] = 0;
				vpos += 2;
			}
		}
	}
	,njDecodeDRI: function() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		this.rstinterval = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		var count = this.length;
		this.pos += count;
		this.size -= count;
		this.length -= count;
	}
	,njDecodeBlock: function(c,po) {
		var this1 = c.pixels;
		var out = this1;
		var value;
		var coef = 0;
		var _g = 0;
		while(_g < 64) {
			var i = _g++;
			this.block[i] = 0;
		}
		var c1 = c;
		var c2 = c1.dcpred;
		var vlc = this.vlctab[c.dctabsel];
		var value1 = this.njShowBits(16);
		var bits = vlc.b[value1 << 1];
		if(this.bufbits < bits) {
			this.njShowBits(bits);
		}
		this.bufbits -= bits;
		value1 = vlc.b[value1 << 1 | 1];
		this.vlcCode = value1;
		bits = value1 & 15;
		var tmp;
		if(bits == 0) {
			tmp = 0;
		} else {
			var r = this.njShowBits(bits);
			this.bufbits -= bits;
			value1 = r;
			if(value1 < 1 << bits - 1) {
				value1 += (-1 << bits) + 1;
			}
			tmp = value1;
		}
		c1.dcpred = c2 + tmp;
		var qt = this.qtab[c.qtsel];
		var at = this.vlctab[c.actabsel];
		this.block[0] = c.dcpred * qt[0];
		while(true) {
			var value1 = this.njShowBits(16);
			var bits = at.b[value1 << 1];
			if(this.bufbits < bits) {
				this.njShowBits(bits);
			}
			this.bufbits -= bits;
			value1 = at.b[value1 << 1 | 1];
			this.vlcCode = value1;
			bits = value1 & 15;
			if(bits == 0) {
				value = 0;
			} else {
				var r = this.njShowBits(bits);
				this.bufbits -= bits;
				value1 = r;
				if(value1 < 1 << bits - 1) {
					value1 += (-1 << bits) + 1;
				}
				value = value1;
			}
			if(this.vlcCode == 0) {
				break;
			}
			coef += (this.vlcCode >> 4) + 1;
			this.block[this.njZZ[coef]] = value * qt[coef];
			if(!(coef < 63)) {
				break;
			}
		}
		var bp = 0;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 8;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 16;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 24;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 32;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 40;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 48;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 56;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var po1 = po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[32] << 8;
		var x2 = this.block[48];
		var x3 = this.block[16];
		var x4 = this.block[8];
		var x5 = this.block[56];
		var x6 = this.block[40];
		var x7 = this.block[24];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[0] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[0] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 1 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[33] << 8;
		var x2 = this.block[49];
		var x3 = this.block[17];
		var x4 = this.block[9];
		var x5 = this.block[57];
		var x6 = this.block[41];
		var x7 = this.block[25];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[1] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[1] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 2 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[34] << 8;
		var x2 = this.block[50];
		var x3 = this.block[18];
		var x4 = this.block[10];
		var x5 = this.block[58];
		var x6 = this.block[42];
		var x7 = this.block[26];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[2] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[2] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 3 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[35] << 8;
		var x2 = this.block[51];
		var x3 = this.block[19];
		var x4 = this.block[11];
		var x5 = this.block[59];
		var x6 = this.block[43];
		var x7 = this.block[27];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[3] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[3] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 4 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[36] << 8;
		var x2 = this.block[52];
		var x3 = this.block[20];
		var x4 = this.block[12];
		var x5 = this.block[60];
		var x6 = this.block[44];
		var x7 = this.block[28];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[4] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[4] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 5 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[37] << 8;
		var x2 = this.block[53];
		var x3 = this.block[21];
		var x4 = this.block[13];
		var x5 = this.block[61];
		var x6 = this.block[45];
		var x7 = this.block[29];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[5] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[5] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 6 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[38] << 8;
		var x2 = this.block[54];
		var x3 = this.block[22];
		var x4 = this.block[14];
		var x5 = this.block[62];
		var x6 = this.block[46];
		var x7 = this.block[30];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[6] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[6] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 7 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[39] << 8;
		var x2 = this.block[55];
		var x3 = this.block[23];
		var x4 = this.block[15];
		var x5 = this.block[63];
		var x6 = this.block[47];
		var x7 = this.block[31];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[7] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[7] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
	}
	,notSupported: function() {
		throw haxe_Exception.thrown("This JPG file is not supported");
	}
	,njDecodeScan: function() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.bytes.b[this.pos] != this.ncomp) {
			this.notSupported();
		}
		this.pos += 1;
		this.size -= 1;
		this.length -= 1;
		var _g = 0;
		var _g1 = this.ncomp;
		while(_g < _g1) {
			var i = _g++;
			var c = this.comps[i];
			c.dctabsel = this.bytes.b[this.pos + 1] >> 4 << 1;
			c.actabsel = (this.bytes.b[this.pos + 1] & 3) << 1 | 1;
			this.pos += 2;
			this.size -= 2;
			this.length -= 2;
		}
		var start = this.bytes.b[this.pos];
		var count = this.bytes.b[this.pos + 1];
		var other = this.bytes.b[this.pos + 2];
		if(!this.progressive && start != 0 || count != 63 - start || other != 0) {
			this.notSupported();
		}
		var count = this.length;
		this.pos += count;
		this.size -= count;
		this.length -= count;
		var mbx = 0;
		var mby = 0;
		var rstcount = this.rstinterval;
		var nextrst = 0;
		while(true) {
			var _g = 0;
			var _g1 = this.ncomp;
			while(_g < _g1) {
				var i = _g++;
				var c = this.comps[i];
				var _g2 = 0;
				var _g3 = c.ssy;
				while(_g2 < _g3) {
					var sby = _g2++;
					var _g4 = 0;
					var _g5 = c.ssx;
					while(_g4 < _g5) {
						var sbx = _g4++;
						this.njDecodeBlock(c,(mby * c.ssy + sby) * c.stride + mbx * c.ssx + sbx << 3);
					}
				}
			}
			if(++mbx >= this.mbwidth) {
				mbx = 0;
				if(++mby >= this.mbheight) {
					break;
				}
			}
			if(this.rstinterval != 0 && --rstcount == 0) {
				this.bufbits &= 248;
				var r = this.njShowBits(16);
				this.bufbits -= 16;
				var i1 = r;
				nextrst = nextrst + 1 & 7;
				rstcount = this.rstinterval;
				this.comps[0].dcpred = 0;
				this.comps[1].dcpred = 0;
				this.comps[2].dcpred = 0;
			}
		}
	}
	,njUpsampleH: function(c) {
		var xmax = c.width - 3;
		var cout = new haxe_io_Bytes(new ArrayBuffer(c.width * c.height << 1));
		var this1 = cout;
		var lout = this1;
		var this1 = c.pixels;
		var lin = this1;
		var pi = 0;
		var po = 0;
		var _g = 0;
		var _g1 = c.height;
		while(_g < _g1) {
			var y = _g++;
			var x = 139 * lin.b[pi] + -11 * lin.b[pi + 1] + 64 >> 7;
			lout.b[po] = x < 0 ? 0 : x > 255 ? 255 : x;
			var x1 = 104 * lin.b[pi] + 27 * lin.b[pi + 1] + -3 * lin.b[pi + 2] + 64 >> 7;
			lout.b[po + 1] = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
			var x2 = 28 * lin.b[pi] + 109 * lin.b[pi + 1] + -9 * lin.b[pi + 2] + 64 >> 7;
			lout.b[po + 2] = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
			var _g2 = 0;
			var _g3 = xmax;
			while(_g2 < _g3) {
				var x3 = _g2++;
				var x4 = -9 * lin.b[pi + x3] + 111 * lin.b[pi + x3 + 1] + 29 * lin.b[pi + x3 + 2] + -3 * lin.b[pi + x3 + 3] + 64 >> 7;
				lout.b[po + (x3 << 1) + 3] = x4 < 0 ? 0 : x4 > 255 ? 255 : x4;
				var x5 = -3 * lin.b[pi + x3] + 29 * lin.b[pi + x3 + 1] + 111 * lin.b[pi + x3 + 2] + -9 * lin.b[pi + x3 + 3] + 64 >> 7;
				lout.b[po + (x3 << 1) + 4] = x5 < 0 ? 0 : x5 > 255 ? 255 : x5;
			}
			pi += c.stride;
			po += c.width << 1;
			var x6 = 28 * lin.b[pi - 1] + 109 * lin.b[pi - 2] + -9 * lin.b[pi - 3] + 64 >> 7;
			lout.b[po - 3] = x6 < 0 ? 0 : x6 > 255 ? 255 : x6;
			var x7 = 104 * lin.b[pi - 1] + 27 * lin.b[pi - 2] + -3 * lin.b[pi - 3] + 64 >> 7;
			lout.b[po - 2] = x7 < 0 ? 0 : x7 > 255 ? 255 : x7;
			var x8 = 139 * lin.b[pi - 1] + -11 * lin.b[pi - 2] + 64 >> 7;
			lout.b[po - 1] = x8 < 0 ? 0 : x8 > 255 ? 255 : x8;
		}
		c.width <<= 1;
		c.stride = c.width;
		c.pixels = cout;
	}
	,njUpsampleV: function(c) {
		var w = c.width;
		var s1 = c.stride;
		var s2 = s1 + s1;
		var out = new haxe_io_Bytes(new ArrayBuffer(c.width * c.height << 1));
		var pi = 0;
		var po = 0;
		var this1 = out;
		var cout = this1;
		var this1 = c.pixels;
		var cin = this1;
		var _g = 0;
		var _g1 = w;
		while(_g < _g1) {
			var x = _g++;
			po = x;
			pi = po;
			var x1 = 139 * cin.b[pi] + -11 * cin.b[pi + s1] + 64 >> 7;
			cout.b[po] = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
			po += w;
			var x2 = 104 * cin.b[pi] + 27 * cin.b[pi + s1] + -3 * cin.b[pi + s2] + 64 >> 7;
			cout.b[po] = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
			po += w;
			var x3 = 28 * cin.b[pi] + 109 * cin.b[pi + s1] + -9 * cin.b[pi + s2] + 64 >> 7;
			cout.b[po] = x3 < 0 ? 0 : x3 > 255 ? 255 : x3;
			po += w;
			pi += s1;
			var _g2 = 0;
			var _g3 = c.height - 2;
			while(_g2 < _g3) {
				var y = _g2++;
				var x4 = -9 * cin.b[pi - s1] + 111 * cin.b[pi] + 29 * cin.b[pi + s1] + -3 * cin.b[pi + s2] + 64 >> 7;
				cout.b[po] = x4 < 0 ? 0 : x4 > 255 ? 255 : x4;
				po += w;
				var x5 = -3 * cin.b[pi - s1] + 29 * cin.b[pi] + 111 * cin.b[pi + s1] + -9 * cin.b[pi + s2] + 64 >> 7;
				cout.b[po] = x5 < 0 ? 0 : x5 > 255 ? 255 : x5;
				po += w;
				pi += s1;
			}
			pi += s1;
			var x6 = 28 * cin.b[pi] + 109 * cin.b[pi - s1] + -9 * cin.b[pi - s2] + 64 >> 7;
			cout.b[po] = x6 < 0 ? 0 : x6 > 255 ? 255 : x6;
			po += w;
			var x7 = 104 * cin.b[pi] + 27 * cin.b[pi - s1] + -3 * cin.b[pi - s2] + 64 >> 7;
			cout.b[po] = x7 < 0 ? 0 : x7 > 255 ? 255 : x7;
			po += w;
			var x8 = 139 * cin.b[pi] + -11 * cin.b[pi - s1] + 64 >> 7;
			cout.b[po] = x8 < 0 ? 0 : x8 > 255 ? 255 : x8;
		}
		c.height <<= 1;
		c.stride = c.width;
		c.pixels = out;
	}
	,njUpsample: function(c) {
		var xshift = 0;
		var yshift = 0;
		while(c.width < this.width) {
			c.width <<= 1;
			++xshift;
		}
		while(c.height < this.height) {
			c.height <<= 1;
			++yshift;
		}
		var out = new haxe_io_Bytes(new ArrayBuffer(c.width * c.height));
		var this1 = c.pixels;
		var lin = this1;
		var pout = 0;
		var this1 = out;
		var lout = this1;
		var _g = 0;
		var _g1 = c.height;
		while(_g < _g1) {
			var y = _g++;
			var pin = (y >> yshift) * c.stride;
			var _g2 = 0;
			var _g3 = c.width;
			while(_g2 < _g3) {
				var x = _g2++;
				lout.b[pout++] = lin.b[(x >> xshift) + pin];
			}
		}
		c.stride = c.width;
		c.pixels = out;
	}
	,njConvert: function() {
		var _g = 0;
		var _g1 = this.ncomp;
		while(_g < _g1) {
			var i = _g++;
			var c = this.comps[i];
			switch(this.filter._hx_index) {
			case 0:
				if(c.width < this.width || c.height < this.height) {
					this.njUpsample(c);
				}
				break;
			case 1:
				while(c.width < this.width || c.height < this.height) {
					if(c.width < this.width) {
						this.njUpsampleH(c);
					}
					if(c.height < this.height) {
						this.njUpsampleV(c);
					}
				}
				break;
			}
			if(c.width < this.width || c.height < this.height) {
				throw haxe_Exception.thrown("assert");
			}
		}
		var pixels = new haxe_io_Bytes(new ArrayBuffer(this.width * this.height * 4));
		if(this.ncomp == 3) {
			var this1 = this.comps[0].pixels;
			var py = this1;
			var this1 = this.comps[1].pixels;
			var pcb = this1;
			var this1 = this.comps[2].pixels;
			var pcr = this1;
			var this1 = pixels;
			var pix = this1;
			var k1 = 0;
			var k2 = 0;
			var k3 = 0;
			var out = 0;
			var _g = 0;
			var _g1 = this.height;
			while(_g < _g1) {
				var yy = _g++;
				var _g2 = 0;
				var _g3 = this.width;
				while(_g2 < _g3) {
					var x = _g2++;
					var y = py.b[k1++] << 8;
					var cb = pcb.b[k2++] - 128;
					var cr = pcr.b[k3++] - 128;
					var x1 = y + 359 * cr + 128 >> 8;
					var r = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
					var x2 = y - 88 * cb - 183 * cr + 128 >> 8;
					var g = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
					var x3 = y + 454 * cb + 128 >> 8;
					var b = x3 < 0 ? 0 : x3 > 255 ? 255 : x3;
					pix.b[out++] = b;
					pix.b[out++] = g;
					pix.b[out++] = r;
					pix.b[out++] = 255;
				}
				k1 += this.comps[0].stride - this.width;
				k2 += this.comps[1].stride - this.width;
				k3 += this.comps[2].stride - this.width;
			}
		} else {
			throw haxe_Exception.thrown("TODO");
		}
		return pixels;
	}
	,njDecode: function() {
		if(this.size < 2 || this.bytes.b[this.pos] != 255 || this.bytes.b[this.pos + 1] != 216) {
			throw haxe_Exception.thrown("This file is not a JPEG");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		_hx_loop1: while(true) {
			this.pos += 2;
			this.size -= 2;
			this.length -= 2;
			switch(this.bytes.b[this.pos + (-1)]) {
			case 192:
				this.njDecodeSOF();
				break;
			case 194:
				this.progressive = true;
				if(this.progressive) {
					throw haxe_Exception.thrown("Unsupported progressive JPG");
				}
				if(this.vlctab[4] == null) {
					this.vlctab[4] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				if(this.vlctab[5] == null) {
					this.vlctab[5] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				if(this.vlctab[6] == null) {
					this.vlctab[6] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				if(this.vlctab[7] == null) {
					this.vlctab[7] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				this.njDecodeSOF();
				break;
			case 195:
				throw haxe_Exception.thrown("Unsupported lossless JPG");
			case 196:
				this.njDecodeDHT();
				break;
			case 218:
				this.njDecodeScan();
				break _hx_loop1;
			case 219:
				this.njDecodeDQT();
				break;
			case 221:
				this.njDecodeDRI();
				break;
			case 254:
				this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
				this.pos += 2;
				this.size -= 2;
				this.length -= 2;
				var count = this.length;
				this.pos += count;
				this.size -= count;
				this.length -= count;
				break;
			default:
				switch(this.bytes.b[this.pos + (-1)] & 240) {
				case 192:
					throw haxe_Exception.thrown("Unsupported jpeg type " + (this.bytes.b[this.pos + (-1)] & 15));
				case 224:
					this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
					this.pos += 2;
					this.size -= 2;
					this.length -= 2;
					var count1 = this.length;
					this.pos += count1;
					this.size -= count1;
					this.length -= count1;
					break;
				default:
					throw haxe_Exception.thrown("Unsupported jpeg tag 0x" + StringTools.hex(this.bytes.b[this.pos + (-1)],2));
				}
			}
		}
		var pixels = this.njConvert();
		this.cleanup();
		return { pixels : pixels, width : this.width, height : this.height};
	}
	,__class__: hxd_res_NanoJpeg
};
var hxd_res_Sound = function(entry) {
	this.lastPlay = 0.;
	hxd_res_Resource.call(this,entry);
};
$hxClasses["hxd.res.Sound"] = hxd_res_Sound;
hxd_res_Sound.__name__ = "hxd.res.Sound";
hxd_res_Sound.__super__ = hxd_res_Resource;
hxd_res_Sound.prototype = $extend(hxd_res_Resource.prototype,{
	getData: function() {
		if(this.data != null) {
			return this.data;
		}
		var bytes = this.entry.getBytes();
		switch(bytes.b[0]) {
		case 73:case 255:
			this.data = new hxd_snd_Mp3Data(bytes);
			break;
		case 79:
			throw haxe_Exception.thrown("OGG format requires -lib stb_ogg_sound (for " + this.entry.get_path() + ")");
		case 82:
			this.data = new hxd_snd_WavData(bytes);
			break;
		default:
		}
		if(this.data == null) {
			throw haxe_Exception.thrown("Unsupported sound format " + this.entry.get_path());
		}
		if(hxd_res_Sound.ENABLE_AUTO_WATCH) {
			this.watch($bind(this,this.watchCallb));
		}
		return this.data;
	}
	,play: function(loop,volume,channelGroup,soundGroup) {
		if(volume == null) {
			volume = 1.;
		}
		if(loop == null) {
			loop = false;
		}
		this.lastPlay = HxOverrides.now() / 1000;
		this.channel = hxd_snd_Manager.get().play(this,channelGroup,soundGroup);
		this.channel.loop = loop;
		this.channel.set_volume(volume);
		return this.channel;
	}
	,watchCallb: function() {
		var old = this.data;
		this.data = null;
		var data = this.getData();
		if(old != null) {
			if(old.channels != data.channels || old.samples != data.samples || old.sampleFormat != data.sampleFormat || old.samplingRate != data.samplingRate) {
				var manager = hxd_snd_Manager.get();
				var ch = manager.getAll(this);
				while(ch.hasNext()) {
					var ch1 = ch.next();
					ch1.duration = data.get_duration();
					ch1.set_position(ch1.position);
				}
			}
		}
	}
	,__class__: hxd_res_Sound
});
var hxd_snd_ChannelBase = function() {
	this.volume = 1.;
	this.bindedEffects = [];
	this.effects = [];
	this.mute = false;
	this.priority = 0.;
};
$hxClasses["hxd.snd.ChannelBase"] = hxd_snd_ChannelBase;
hxd_snd_ChannelBase.__name__ = "hxd.snd.ChannelBase";
hxd_snd_ChannelBase.prototype = {
	set_volume: function(v) {
		this.currentFade = null;
		return this.volume = v;
	}
	,updateCurrentVolume: function(now) {
		if(this.currentFade != null) {
			var f = this.currentFade;
			var dt = now - f.start;
			if(dt >= f.duration) {
				this.set_volume(f.targetVolume);
				if(f.onEnd != null) {
					f.onEnd();
				}
			} else {
				this.set_volume(f.startVolume + dt / f.duration * (f.targetVolume - f.startVolume));
				this.currentFade = f;
			}
		}
		this.currentVolume = this.volume;
	}
	,removeEffect: function(e) {
		HxOverrides.remove(this.effects,e);
	}
	,__class__: hxd_snd_ChannelBase
};
var hxd_snd_Channel = function() {
	this.queue = [];
	this.positionChanged = false;
	this.isLoading = false;
	this.isVirtual = false;
	this.lastStamp = 0.0;
	this.audibleVolume = 1.0;
	this.allowVirtual = true;
	this.loop = false;
	this.pause = false;
	this.position = 0.0;
	hxd_snd_ChannelBase.call(this);
	this.id = hxd_snd_Channel.ID++;
};
$hxClasses["hxd.snd.Channel"] = hxd_snd_Channel;
hxd_snd_Channel.__name__ = "hxd.snd.Channel";
hxd_snd_Channel.__super__ = hxd_snd_ChannelBase;
hxd_snd_Channel.prototype = $extend(hxd_snd_ChannelBase.prototype,{
	onEnd: function() {
	}
	,set_position: function(v) {
		this.lastStamp = HxOverrides.now() / 1000;
		this.positionChanged = true;
		if(v > this.duration) {
			v = this.duration;
		} else if(v < 0) {
			v = 0;
		}
		return this.position = v;
	}
	,set_pause: function(v) {
		if(!v) {
			this.lastStamp = HxOverrides.now() / 1000;
		}
		return this.pause = v;
	}
	,updateCurrentVolume: function(now) {
		if(this.pause && this.currentFade != null) {
			var f = this.currentFade;
			this.currentFade = null;
			this.updateCurrentVolume(now);
			this.currentFade = f;
		}
		hxd_snd_ChannelBase.prototype.updateCurrentVolume.call(this,now);
		this.channelGroup.updateCurrentVolume(now);
		this.currentVolume *= this.channelGroup.currentVolume * this.soundGroup.volume;
		if(this.manager != null) {
			var _g = 0;
			var _g1 = this.channelGroup.effects;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				this.currentVolume *= e.getVolumeModifier();
			}
			var _g = 0;
			var _g1 = this.effects;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				this.currentVolume *= e.getVolumeModifier();
			}
		}
	}
	,calcAudibleVolume: function(now) {
		this.updateCurrentVolume(now);
		this.audibleVolume = this.currentVolume;
		if(this.manager != null) {
			var _g = 0;
			var _g1 = this.channelGroup.effects;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				this.audibleVolume = e.applyAudibleVolumeModifier(this.audibleVolume);
			}
			var _g = 0;
			var _g1 = this.effects;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				this.audibleVolume = e.applyAudibleVolumeModifier(this.audibleVolume);
			}
		}
	}
	,stop: function() {
		if(this.manager != null) {
			this.manager.releaseChannel(this);
		}
	}
	,isReleased: function() {
		return this.manager == null;
	}
	,__class__: hxd_snd_Channel
});
var hxd_snd_ChannelGroup = function(name) {
	hxd_snd_ChannelBase.call(this);
	this.name = name;
};
$hxClasses["hxd.snd.ChannelGroup"] = hxd_snd_ChannelGroup;
hxd_snd_ChannelGroup.__name__ = "hxd.snd.ChannelGroup";
hxd_snd_ChannelGroup.__super__ = hxd_snd_ChannelBase;
hxd_snd_ChannelGroup.prototype = $extend(hxd_snd_ChannelBase.prototype,{
	__class__: hxd_snd_ChannelGroup
});
var hxd_snd_SampleFormat = $hxEnums["hxd.snd.SampleFormat"] = { __ename__:true,__constructs__:null
	,UI8: {_hx_name:"UI8",_hx_index:0,__enum__:"hxd.snd.SampleFormat",toString:$estr}
	,I16: {_hx_name:"I16",_hx_index:1,__enum__:"hxd.snd.SampleFormat",toString:$estr}
	,F32: {_hx_name:"F32",_hx_index:2,__enum__:"hxd.snd.SampleFormat",toString:$estr}
};
hxd_snd_SampleFormat.__constructs__ = [hxd_snd_SampleFormat.UI8,hxd_snd_SampleFormat.I16,hxd_snd_SampleFormat.F32];
hxd_snd_SampleFormat.__empty_constructs__ = [hxd_snd_SampleFormat.UI8,hxd_snd_SampleFormat.I16,hxd_snd_SampleFormat.F32];
var hxd_snd_Data = function() { };
$hxClasses["hxd.snd.Data"] = hxd_snd_Data;
hxd_snd_Data.__name__ = "hxd.snd.Data";
hxd_snd_Data.prototype = {
	isLoading: function() {
		return false;
	}
	,decode: function(out,outPos,sampleStart,sampleCount) {
		var bpp = this.getBytesPerSample();
		if(sampleStart < 0 || sampleCount < 0 || outPos < 0 || outPos + sampleCount * bpp > out.length) {
			var s = "sampleStart = " + sampleStart;
			s += " sampleCount = " + sampleCount;
			s += " outPos = " + outPos;
			s += " bpp = " + bpp;
			s += " out.length = " + out.length;
			throw haxe_Exception.thrown(s);
		}
		if(sampleStart + sampleCount >= this.samples) {
			var count = 0;
			if(sampleStart < this.samples) {
				count = this.samples - sampleStart;
				this.decodeBuffer(out,outPos,sampleStart,count);
			}
			out.fill(outPos + count * bpp,(sampleCount - count) * bpp,0);
			return;
		}
		this.decodeBuffer(out,outPos,sampleStart,sampleCount);
	}
	,resample: function(rate,format,channels) {
		if(this.sampleFormat == format && this.samplingRate == rate && this.channels == channels) {
			return this;
		}
		var newSamples = Math.ceil(this.samples * (rate / this.samplingRate));
		var bpp = this.getBytesPerSample();
		var data = new haxe_io_Bytes(new ArrayBuffer(bpp * this.samples));
		this.decodeBuffer(data,0,0,this.samples);
		var out = channels * newSamples;
		var out1;
		switch(format._hx_index) {
		case 0:
			out1 = 1;
			break;
		case 1:
			out1 = 2;
			break;
		case 2:
			out1 = 4;
			break;
		}
		var out2 = new haxe_io_Bytes(new ArrayBuffer(out * out1));
		this.resampleBuffer(out2,0,data,0,rate,format,channels,this.samples);
		var data = new hxd_snd_WavData(null);
		data.channels = channels;
		data.samples = newSamples;
		data.sampleFormat = format;
		data.samplingRate = rate;
		data.rawData = out2;
		return data;
	}
	,resampleBuffer: function(out,outPos,input,inPos,rate,format,channels,samples) {
		var bpp = this.getBytesPerSample();
		var newSamples = Math.ceil(samples * (rate / this.samplingRate));
		var resample = samples != newSamples;
		if(!resample && this.sampleFormat == hxd_snd_SampleFormat.I16 && format == hxd_snd_SampleFormat.I16 && channels == 1 && this.channels == 2) {
			var r = inPos;
			var w = outPos;
			var _g = 0;
			var _g1 = samples;
			while(_g < _g1) {
				var i = _g++;
				var sl = input.getUInt16(r);
				r += 2;
				var sr = input.getUInt16(r);
				r += 2;
				var s;
				if((sl ^ sr) >= 32768) {
					if((sl & 32768) != 0) {
						sl |= -65536;
					}
					if((sr & 32768) != 0) {
						sr |= -65536;
					}
					s = sl + sr >> 1 & 65535;
				} else {
					s = sl + sr >> 1;
				}
				out.setUInt16(w,s);
				w += 2;
			}
			return;
		}
		var srcChannels = this.channels;
		var commonChannels = channels < srcChannels ? channels : srcChannels;
		var extraChannels = channels - commonChannels;
		var sval = 0.;
		var ival = 0;
		var _g = 0;
		var _g1 = newSamples;
		while(_g < _g1) {
			var i = _g++;
			var targetSample = i / (newSamples - 1) * (samples - 1);
			var isample = targetSample | 0;
			var offset = targetSample - isample;
			var srcPos = inPos + isample * bpp;
			if(isample == samples - 1) {
				resample = false;
			}
			var _g2 = 0;
			var _g3 = commonChannels;
			while(_g2 < _g3) {
				var k = _g2++;
				var sval1;
				var sval2 = 0.;
				switch(this.sampleFormat._hx_index) {
				case 0:
					sval1 = input.b[srcPos] / 255;
					if(resample) {
						sval2 = input.b[srcPos + bpp] / 255;
					}
					++srcPos;
					break;
				case 1:
					var v = input.getUInt16(srcPos);
					sval1 = ((v & 32768) == 0 ? v : v | -65536) / 32768;
					if(resample) {
						var v1 = input.getUInt16(srcPos + bpp);
						sval2 = ((v1 & 32768) == 0 ? v1 : v1 | -65536) / 32768;
					}
					srcPos += 2;
					break;
				case 2:
					sval1 = input.getFloat(srcPos);
					if(resample) {
						sval2 = input.getFloat(srcPos + bpp);
					}
					srcPos += 4;
					break;
				}
				sval = resample ? sval1 + offset * (sval2 - sval1) : sval1;
				switch(format._hx_index) {
				case 0:
					ival = (sval + 1) * 128 | 0;
					if(ival > 255) {
						ival = 255;
					}
					out.b[outPos++] = ival;
					break;
				case 1:
					ival = sval * 32768 | 0;
					if(ival > 32767) {
						ival = 32767;
					}
					ival &= 65535;
					out.setUInt16(outPos,ival);
					outPos += 2;
					break;
				case 2:
					out.setFloat(outPos,sval);
					outPos += 4;
					break;
				}
			}
			var _g4 = 0;
			var _g5 = extraChannels;
			while(_g4 < _g5) {
				var i1 = _g4++;
				switch(format._hx_index) {
				case 0:
					out.b[outPos++] = ival;
					break;
				case 1:
					out.setUInt16(outPos,ival);
					outPos += 2;
					break;
				case 2:
					out.setFloat(outPos,sval);
					outPos += 4;
					break;
				}
			}
		}
	}
	,decodeBuffer: function(out,outPos,sampleStart,sampleCount) {
		throw haxe_Exception.thrown("Not implemented");
	}
	,getBytesPerSample: function() {
		var tmp;
		switch(this.sampleFormat._hx_index) {
		case 0:
			tmp = 1;
			break;
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 4;
			break;
		}
		return this.channels * tmp;
	}
	,load: function(onEnd) {
		onEnd();
	}
	,get_duration: function() {
		return this.samples / this.samplingRate;
	}
	,__class__: hxd_snd_Data
};
var hxd_snd_EffectDriver = function() {
};
$hxClasses["hxd.snd.EffectDriver"] = hxd_snd_EffectDriver;
hxd_snd_EffectDriver.__name__ = "hxd.snd.EffectDriver";
hxd_snd_EffectDriver.prototype = {
	acquire: function() {
	}
	,release: function() {
	}
	,update: function(e) {
	}
	,bind: function(e,source) {
	}
	,apply: function(e,source) {
	}
	,unbind: function(e,source) {
	}
	,__class__: hxd_snd_EffectDriver
};
var hxd_snd_DriverFeature = $hxEnums["hxd.snd.DriverFeature"] = { __ename__:true,__constructs__:null
	,MasterVolume: {_hx_name:"MasterVolume",_hx_index:0,__enum__:"hxd.snd.DriverFeature",toString:$estr}
};
hxd_snd_DriverFeature.__constructs__ = [hxd_snd_DriverFeature.MasterVolume];
hxd_snd_DriverFeature.__empty_constructs__ = [hxd_snd_DriverFeature.MasterVolume];
var hxd_snd_Driver = function() { };
$hxClasses["hxd.snd.Driver"] = hxd_snd_Driver;
hxd_snd_Driver.__name__ = "hxd.snd.Driver";
hxd_snd_Driver.__isInterface__ = true;
hxd_snd_Driver.prototype = {
	__class__: hxd_snd_Driver
};
var hxd_snd_Effect = function(type) {
	this.refs = 0;
	this.priority = 0;
	this.retainTime = 0.0;
	this.lastStamp = 0.0;
	var managerDriver = hxd_snd_Manager.get().driver;
	if(managerDriver != null) {
		this.driver = managerDriver.getEffectDriver(type);
	}
};
$hxClasses["hxd.snd.Effect"] = hxd_snd_Effect;
hxd_snd_Effect.__name__ = "hxd.snd.Effect";
hxd_snd_Effect.prototype = {
	applyAudibleVolumeModifier: function(v) {
		return v;
	}
	,getVolumeModifier: function() {
		return 1;
	}
	,__class__: hxd_snd_Effect
};
var hxd_snd_Listener = function() {
	this.position = new h3d_Vector();
	this.velocity = new h3d_Vector();
	this.direction = new h3d_Vector(1,0,0);
	this.up = new h3d_Vector(0,0,1);
};
$hxClasses["hxd.snd.Listener"] = hxd_snd_Listener;
hxd_snd_Listener.__name__ = "hxd.snd.Listener";
hxd_snd_Listener.prototype = {
	__class__: hxd_snd_Listener
};
var hxd_snd_Source = function(driver) {
	this.start = 0;
	this.playing = false;
	this.volume = -1.0;
	this.id = hxd_snd_Source.ID++;
	this.handle = driver.createSource();
	this.buffers = [];
};
$hxClasses["hxd.snd.Source"] = hxd_snd_Source;
hxd_snd_Source.__name__ = "hxd.snd.Source";
hxd_snd_Source.prototype = {
	__class__: hxd_snd_Source
};
var hxd_snd_Buffer = function(driver) {
	this.handle = driver.createBuffer();
	this.refs = 0;
	this.lastStop = HxOverrides.now() / 1000;
};
$hxClasses["hxd.snd.Buffer"] = hxd_snd_Buffer;
hxd_snd_Buffer.__name__ = "hxd.snd.Buffer";
hxd_snd_Buffer.prototype = {
	dispose: function() {
		hxd_snd_Manager.get().driver.destroyBuffer(this.handle);
	}
	,__class__: hxd_snd_Buffer
};
var hxd_snd_Manager = function() {
	this.suspended = false;
	this.timeOffset = 0.;
	try {
		this.driver = new hxd_snd_webaudio_Driver();
	} catch( _g ) {
		if(typeof(haxe_Exception.caught(_g).unwrap()) == "string") {
			this.driver = null;
		} else {
			throw _g;
		}
	}
	this.masterVolume = 1.0;
	this.hasMasterVolume = this.driver == null ? true : this.driver.hasFeature(hxd_snd_DriverFeature.MasterVolume);
	this.masterSoundGroup = new hxd_snd_SoundGroup("master");
	this.masterChannelGroup = new hxd_snd_ChannelGroup("master");
	this.listener = new hxd_snd_Listener();
	this.soundBufferMap = new haxe_ds_StringMap();
	this.soundBufferKeys = [];
	this.freeStreamBuffers = [];
	this.effectGC = [];
	this.soundBufferCount = 0;
	if(this.driver != null) {
		this.sources = [];
		var _g = 0;
		var _g1 = hxd_snd_Manager.MAX_SOURCES;
		while(_g < _g1) {
			var i = _g++;
			this.sources.push(new hxd_snd_Source(this.driver));
		}
	}
	this.cachedBytes = new haxe_io_Bytes(new ArrayBuffer(24));
	this.resampleBytes = new haxe_io_Bytes(new ArrayBuffer(hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT * 2));
};
$hxClasses["hxd.snd.Manager"] = hxd_snd_Manager;
hxd_snd_Manager.__name__ = "hxd.snd.Manager";
hxd_snd_Manager.get = function() {
	if(hxd_snd_Manager.instance == null) {
		hxd_snd_Manager.instance = new hxd_snd_Manager();
		hxd_snd_Manager.instance.updateEvent = haxe_MainLoop.add(($_=hxd_snd_Manager.instance,$bind($_,$_.update)));
		hxd_snd_Manager.instance.updateEvent.isBlocking = false;
	}
	return hxd_snd_Manager.instance;
};
hxd_snd_Manager.regEffect = function(list,e) {
	var l = list;
	while(l != null) {
		if(l == e) {
			return list;
		}
		l = l.next;
	}
	e.next = list;
	return e;
};
hxd_snd_Manager.prototype = {
	getTmpBytes: function(size) {
		if(this.cachedBytes.length < size) {
			this.cachedBytes = new haxe_io_Bytes(new ArrayBuffer(size));
		}
		return this.cachedBytes;
	}
	,getResampleBytes: function(size) {
		if(this.resampleBytes.length < size) {
			this.resampleBytes = new haxe_io_Bytes(new ArrayBuffer(size));
		}
		return this.resampleBytes;
	}
	,getAll: function(sound) {
		var ch = this.channels;
		var result = [];
		while(ch != null) {
			if(ch.sound == sound) {
				result.push(ch);
			}
			ch = ch.next;
		}
		return new hxd_impl_ArrayIterator_$hxd_$snd_$Channel(result);
	}
	,play: function(sound,channelGroup,soundGroup) {
		if(soundGroup == null) {
			soundGroup = this.masterSoundGroup;
		}
		if(channelGroup == null) {
			channelGroup = this.masterChannelGroup;
		}
		var sdat = sound.getData();
		if(sdat.samples == 0) {
			throw haxe_Exception.thrown(Std.string(sound) + " has no samples");
		}
		var c = new hxd_snd_Channel();
		c.sound = sound;
		c.duration = sdat.get_duration();
		c.manager = this;
		c.soundGroup = soundGroup;
		c.channelGroup = channelGroup;
		c.next = this.channels;
		c.isLoading = sdat.isLoading();
		c.isVirtual = this.driver == null;
		c.lastStamp = HxOverrides.now() / 1000;
		this.channels = c;
		return c;
	}
	,updateVirtualChannels: function(now) {
		var c = this.channels;
		while(c != null) {
			if(c.pause || !c.isVirtual || c.isLoading) {
				c = c.next;
				continue;
			}
			var a = now - c.lastStamp;
			c.set_position(c.position + (a < 0.0 ? 0.0 : a));
			c.lastStamp = now;
			var next = c.next;
			while(c.position >= c.duration) {
				c.set_position(c.position - c.duration);
				c.onEnd();
				if(next != null && next.manager == null) {
					next = null;
				}
				if(c.queue.length > 0) {
					c.sound = c.queue.shift();
					c.duration = c.sound.getData().get_duration();
				} else if(!c.loop) {
					this.releaseChannel(c);
					break;
				}
			}
			c = next;
		}
	}
	,update: function() {
		if(this.timeOffset != 0) {
			var c = this.channels;
			while(c != null) {
				c.lastStamp += this.timeOffset;
				if(c.currentFade != null) {
					c.currentFade.start += this.timeOffset;
				}
				c = c.next;
			}
			var _g = 0;
			var _g1 = this.sources;
			while(_g < _g1.length) {
				var s = _g1[_g];
				++_g;
				var _g2 = 0;
				var _g3 = s.buffers;
				while(_g2 < _g3.length) {
					var b = _g3[_g2];
					++_g2;
					b.lastStop += this.timeOffset;
				}
			}
			this.timeOffset = 0;
		}
		this.now = HxOverrides.now() / 1000;
		if(this.driver == null) {
			this.updateVirtualChannels(this.now);
			return;
		}
		var _g = 0;
		var _g1 = this.sources;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var c = s.channel;
			if(c == null) {
				continue;
			}
			if(c.positionChanged) {
				this.releaseSource(s);
				continue;
			}
			var lastBuffer = null;
			var count = this.driver.getProcessedBuffers(s.handle);
			var _g2 = 0;
			var _g3 = count;
			while(_g2 < _g3) {
				var i = _g2++;
				var b = this.unqueueBuffer(s);
				if(b == null) {
					continue;
				}
				lastBuffer = b;
				if(b.isEnd) {
					c.sound = b.sound;
					c.duration = b.sound.getData().get_duration();
					c.set_position(c.duration);
					c.positionChanged = false;
					c.onEnd();
					s.start = 0;
				}
			}
			if(s.buffers.length == 0) {
				if(!lastBuffer.isEnd) {
					c.set_position((lastBuffer.start + lastBuffer.samples) / lastBuffer.sampleRate);
					this.releaseSource(s);
				} else if(c.queue.length > 0) {
					c.sound = c.queue.shift();
					c.duration = c.sound.getData().get_duration();
					c.set_position(0);
					this.releaseSource(s);
				} else if(c.loop) {
					c.set_position(0);
					this.releaseSource(s);
				} else {
					this.releaseChannel(c);
				}
				continue;
			}
			c.sound = s.buffers[0].sound;
			c.duration = c.sound.getData().get_duration();
			var playedSamples = this.driver.getPlayedSampleCount(s.handle);
			if(playedSamples < 0) {
				playedSamples = 0;
			}
			c.set_position(s.start / this.targetRate + playedSamples / s.buffers[0].sampleRate);
			c.positionChanged = false;
			if(s.buffers.length < hxd_snd_Manager.BUFFER_QUEUE_LENGTH) {
				var b1 = s.buffers[s.buffers.length - 1];
				if(!b1.isEnd) {
					this.queueBuffer(s,b1.sound,b1.start + b1.samples);
				} else if(c.queue.length > 0) {
					var snd = c.queue[0];
					if(this.queueBuffer(s,snd,0)) {
						c.queue.shift();
					}
				} else if(c.loop) {
					this.queueBuffer(s,b1.sound,0);
				}
			}
		}
		var c = this.channels;
		while(c != null) {
			c.calcAudibleVolume(this.now);
			if(c.isLoading && !c.sound.getData().isLoading()) {
				c.isLoading = false;
			}
			c.isVirtual = this.suspended || c.pause || c.mute || c.channelGroup.mute || c.allowVirtual && c.audibleVolume < hxd_snd_Manager.VIRTUAL_VOLUME_THRESHOLD || c.isLoading;
			c = c.next;
		}
		var list = this.channels;
		var cmp = $bind(this,this.sortChannel);
		var tmp;
		if(list == null) {
			tmp = null;
		} else {
			var insize = 1;
			var nmerges;
			var psize = 0;
			var qsize = 0;
			var p;
			var q;
			var e;
			var tail;
			while(true) {
				p = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p != null) {
					++nmerges;
					q = p;
					psize = 0;
					var _g = 0;
					var _g1 = insize;
					while(_g < _g1) {
						var i = _g++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
							e = p;
							p = p.next;
							--psize;
						} else {
							e = q;
							q = q.next;
							--qsize;
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			tmp = list;
		}
		this.channels = tmp;
		var audibleCount = 0;
		var c = this.channels;
		while(c != null && !c.isVirtual) {
			if(++audibleCount > this.sources.length) {
				c.isVirtual = true;
			} else if(c.soundGroup.maxAudible >= 0) {
				if(c.soundGroup.lastUpdate != this.now) {
					c.soundGroup.lastUpdate = this.now;
					c.soundGroup.numAudible = 0;
				}
				if(++c.soundGroup.numAudible > c.soundGroup.maxAudible) {
					c.isVirtual = true;
					--audibleCount;
				}
			}
			c = c.next;
		}
		var _g = 0;
		var _g1 = this.sources;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.channel == null || !s.channel.isVirtual) {
				continue;
			}
			this.releaseSource(s);
		}
		var c = this.channels;
		while(c != null) {
			if(c.source != null || c.isVirtual) {
				c = c.next;
				continue;
			}
			var s = null;
			var _g = 0;
			var _g1 = this.sources;
			while(_g < _g1.length) {
				var s2 = _g1[_g];
				++_g;
				if(s2.channel == null) {
					s = s2;
					break;
				}
			}
			if(s == null) {
				throw haxe_Exception.thrown("could not get a source");
			}
			s.channel = c;
			c.source = s;
			this.checkTargetFormat(c.sound.getData(),c.soundGroup.mono);
			s.start = Math.floor(c.position * this.targetRate);
			if(s.start < 0) {
				s.start = 0;
			}
			this.queueBuffer(s,c.sound,s.start);
			c.positionChanged = false;
			c = c.next;
		}
		var usedEffects = null;
		var volume = this.hasMasterVolume ? 1. : this.masterVolume;
		var _g = 0;
		var _g1 = this.sources;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var c = s.channel;
			if(c == null) {
				continue;
			}
			var v = c.currentVolume * volume;
			if(s.volume != v) {
				if(v < 0) {
					v = 0;
				}
				s.volume = v;
				this.driver.setSourceVolume(s.handle,v);
			}
			if(!s.playing) {
				this.driver.playSource(s.handle);
				s.playing = true;
			}
			var i = c.bindedEffects.length;
			while(--i >= 0) {
				var e = c.bindedEffects[i];
				if(c.effects.indexOf(e) < 0 && c.channelGroup.effects.indexOf(e) < 0) {
					this.unbindEffect(c,s,e);
				}
			}
			var _g2 = 0;
			var _g3 = c.channelGroup.effects;
			while(_g2 < _g3.length) {
				var e1 = _g3[_g2];
				++_g2;
				if(c.bindedEffects.indexOf(e1) < 0) {
					this.bindEffect(c,s,e1);
				}
			}
			var _g4 = 0;
			var _g5 = c.effects;
			while(_g4 < _g5.length) {
				var e2 = _g5[_g4];
				++_g4;
				if(c.bindedEffects.indexOf(e2) < 0) {
					this.bindEffect(c,s,e2);
				}
			}
			var _g6 = 0;
			var _g7 = c.bindedEffects;
			while(_g6 < _g7.length) {
				var e3 = _g7[_g6];
				++_g6;
				usedEffects = hxd_snd_Manager.regEffect(usedEffects,e3);
			}
		}
		var list = usedEffects;
		var cmp = $bind(this,this.sortEffect);
		if(list == null) {
			usedEffects = null;
		} else {
			var insize = 1;
			var nmerges;
			var psize = 0;
			var qsize = 0;
			var p;
			var q;
			var e;
			var tail;
			while(true) {
				p = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p != null) {
					++nmerges;
					q = p;
					psize = 0;
					var _g = 0;
					var _g1 = insize;
					while(_g < _g1) {
						var i = _g++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
							e = p;
							p = p.next;
							--psize;
						} else {
							e = q;
							q = q.next;
							--qsize;
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			usedEffects = list;
		}
		var e = usedEffects;
		while(e != null) {
			e.driver.update(e);
			e = e.next;
		}
		var _g = 0;
		var _g1 = this.sources;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var c = s.channel;
			if(c == null) {
				continue;
			}
			var _g2 = 0;
			var _g3 = c.bindedEffects;
			while(_g2 < _g3.length) {
				var e = _g3[_g2];
				++_g2;
				e.driver.apply(e,s.handle);
			}
		}
		var _g = 0;
		var _g1 = this.effectGC;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(this.now - e.lastStamp > e.retainTime) {
				e.driver.release();
				HxOverrides.remove(this.effectGC,e);
				break;
			}
		}
		this.updateVirtualChannels(this.now);
		var _this = this.listener.direction;
		var k = _this.x * _this.x + _this.y * _this.y + _this.z * _this.z;
		if(k < 1e-10) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		_this.x *= k;
		_this.y *= k;
		_this.z *= k;
		var _this = this.listener.up;
		var k = _this.x * _this.x + _this.y * _this.y + _this.z * _this.z;
		if(k < 1e-10) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		_this.x *= k;
		_this.y *= k;
		_this.z *= k;
		if(this.hasMasterVolume) {
			this.driver.setMasterVolume(this.masterVolume);
		}
		this.driver.setListenerParams(this.listener.position,this.listener.direction,this.listener.up,this.listener.velocity);
		this.driver.update();
		if(this.soundBufferCount >= hxd_snd_Manager.SOUND_BUFFER_CACHE_SIZE) {
			var now = HxOverrides.now() / 1000;
			var i = 0;
			while(i < this.soundBufferKeys.length) {
				var k = this.soundBufferKeys[i];
				var b = this.soundBufferMap.h[k];
				++i;
				if(b.refs > 0 || b.lastStop + 60.0 > now) {
					continue;
				}
				var _this = this.soundBufferMap;
				if(Object.prototype.hasOwnProperty.call(_this.h,k)) {
					delete(_this.h[k]);
				}
				HxOverrides.remove(this.soundBufferKeys,k);
				--i;
				b.dispose();
				--this.soundBufferCount;
			}
		}
	}
	,progressiveDecodeBuffer: function(s,snd,start) {
		var data = snd.getData();
		var samples = Math.ceil(hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT / hxd_snd_Manager.BUFFER_STREAM_SPLIT);
		if(s.streamStart != start || s.streamSound != snd) {
			s.streamSound = snd;
			s.streamStart = start;
			s.streamPos = start;
		}
		var end = start + hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT;
		if(s.streamPos == end) {
			return true;
		}
		var bpp = data.getBytesPerSample();
		var reqSize = hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT * bpp;
		if(s.streamBuffer == null || s.streamBuffer.length < reqSize) {
			s.streamBuffer = new haxe_io_Bytes(new ArrayBuffer(reqSize));
			s.streamPos = start;
		}
		var remain = end - s.streamPos;
		if(remain > samples) {
			remain = samples;
		}
		data.decode(s.streamBuffer,(s.streamPos - start) * bpp,s.streamPos,remain);
		s.streamPos += remain;
		return s.streamPos == end;
	}
	,queueBuffer: function(s,snd,start) {
		var data = snd.getData();
		var sgroup = s.channel.soundGroup;
		var b = null;
		if(data.get_duration() <= hxd_snd_Manager.STREAM_DURATION) {
			b = this.getSoundBuffer(snd,sgroup);
			this.driver.queueBuffer(s.handle,b.handle,start,true);
		} else {
			if(s.buffers.length > 0 && hxd_snd_Manager.BUFFER_STREAM_SPLIT > 1 && !this.progressiveDecodeBuffer(s,snd,start)) {
				return false;
			}
			b = this.getStreamBuffer(s,snd,sgroup,start);
			this.driver.queueBuffer(s.handle,b.handle,0,b.isEnd);
		}
		s.buffers.push(b);
		return true;
	}
	,unqueueBuffer: function(s) {
		var b = s.buffers.shift();
		if(b == null) {
			return null;
		}
		this.driver.unqueueBuffer(s.handle,b.handle);
		if(b.isStream) {
			this.freeStreamBuffers.unshift(b);
		} else if(--b.refs == 0) {
			b.lastStop = HxOverrides.now() / 1000;
		}
		return b;
	}
	,bindEffect: function(c,s,e) {
		if(e.refs == 0 && !HxOverrides.remove(this.effectGC,e)) {
			e.driver.acquire();
		}
		++e.refs;
		e.driver.bind(e,s.handle);
		c.bindedEffects.push(e);
	}
	,unbindEffect: function(c,s,e) {
		e.driver.unbind(e,s.handle);
		HxOverrides.remove(c.bindedEffects,e);
		if(--e.refs == 0) {
			e.lastStamp = this.now;
			this.effectGC.push(e);
		}
	}
	,releaseSource: function(s) {
		if(s.channel != null) {
			var _g = 0;
			var _g1 = s.channel.bindedEffects.slice();
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				this.unbindEffect(s.channel,s,e);
			}
			s.channel.bindedEffects = [];
			s.channel.source = null;
			s.channel = null;
		}
		if(s.playing) {
			s.playing = false;
			this.driver.stopSource(s.handle);
			s.volume = -1.0;
		}
		while(s.buffers.length > 0) this.unqueueBuffer(s);
	}
	,checkTargetFormat: function(dat,forceMono) {
		if(forceMono == null) {
			forceMono = false;
		}
		this.targetRate = dat.samplingRate;
		this.targetChannels = forceMono || dat.channels == 1 ? 1 : 2;
		var tmp;
		switch(dat.sampleFormat._hx_index) {
		case 0:
			tmp = hxd_snd_SampleFormat.UI8;
			break;
		case 1:
			tmp = hxd_snd_SampleFormat.I16;
			break;
		case 2:
			tmp = hxd_snd_SampleFormat.F32;
			break;
		}
		this.targetFormat = tmp;
		if(this.targetChannels == dat.channels && this.targetFormat == dat.sampleFormat) {
			return this.targetRate == dat.samplingRate;
		} else {
			return false;
		}
	}
	,getSoundBuffer: function(snd,grp) {
		var _gthis = this;
		var data = snd.getData();
		var mono = grp.mono;
		var key = snd.entry.get_path();
		if(mono && data.channels != 1) {
			key += "mono";
		}
		var b = this.soundBufferMap.h[key];
		if(b == null) {
			b = new hxd_snd_Buffer(this.driver);
			b.isStream = false;
			b.isEnd = true;
			b.sound = snd;
			data.load(function() {
				_gthis.fillSoundBuffer(b,data,mono);
			});
			this.soundBufferMap.h[key] = b;
			this.soundBufferKeys.push(key);
			++this.soundBufferCount;
		}
		++b.refs;
		return b;
	}
	,fillSoundBuffer: function(buf,dat,forceMono) {
		if(forceMono == null) {
			forceMono = false;
		}
		if(!this.checkTargetFormat(dat,forceMono)) {
			dat = dat.resample(this.targetRate,this.targetFormat,this.targetChannels);
		}
		var length = dat.samples * dat.getBytesPerSample();
		var bytes = this.getTmpBytes(length);
		dat.decode(bytes,0,0,dat.samples);
		this.driver.setBufferData(buf.handle,bytes,length,this.targetFormat,this.targetChannels,this.targetRate);
		buf.sampleRate = this.targetRate;
		buf.samples = dat.samples;
	}
	,getStreamBuffer: function(src,snd,grp,start) {
		var data = snd.getData();
		var b = this.freeStreamBuffers.shift();
		if(b == null) {
			b = new hxd_snd_Buffer(this.driver);
			b.isStream = true;
		}
		var samples = hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT;
		if(start + samples >= data.samples) {
			samples = data.samples - start;
			b.isEnd = true;
		} else {
			b.isEnd = false;
		}
		b.sound = snd;
		b.samples = samples;
		b.start = start;
		var size = samples * data.getBytesPerSample();
		var bytes;
		if(src.streamSound == snd && src.streamStart == start) {
			while(!this.progressiveDecodeBuffer(src,snd,start)) {
			}
			bytes = src.streamBuffer;
		} else {
			bytes = this.getTmpBytes(size);
			data.decode(bytes,0,start,samples);
		}
		if(!this.checkTargetFormat(data,grp.mono)) {
			var size1 = Math.ceil(samples * (this.targetRate / data.samplingRate)) * this.targetChannels;
			var size2;
			switch(this.targetFormat._hx_index) {
			case 0:
				size2 = 1;
				break;
			case 1:
				size2 = 2;
				break;
			case 2:
				size2 = 4;
				break;
			}
			size = size1 * size2;
			var resampleBytes = this.getResampleBytes(size);
			data.resampleBuffer(resampleBytes,0,bytes,0,this.targetRate,this.targetFormat,this.targetChannels,samples);
			bytes = resampleBytes;
		}
		this.driver.setBufferData(b.handle,bytes,size,this.targetFormat,this.targetChannels,this.targetRate);
		b.sampleRate = this.targetRate;
		return b;
	}
	,sortChannel: function(a,b) {
		if(a.isVirtual != b.isVirtual) {
			if(a.isVirtual) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.channelGroup.priority != b.channelGroup.priority) {
			if(a.channelGroup.priority < b.channelGroup.priority) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.priority != b.priority) {
			if(a.priority < b.priority) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.audibleVolume != b.audibleVolume) {
			if(a.audibleVolume < b.audibleVolume) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.id < b.id) {
			return 1;
		} else {
			return -1;
		}
	}
	,sortEffect: function(a,b) {
		return b.priority - a.priority;
	}
	,releaseChannel: function(c) {
		if(c.manager == null) {
			return;
		}
		if(this.channels == c) {
			this.channels = c.next;
		} else {
			var prev = this.channels;
			while(prev.next != c) prev = prev.next;
			prev.next = c.next;
		}
		var _g = 0;
		var _g1 = c.effects;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			c.removeEffect(e);
		}
		if(c.source != null) {
			this.releaseSource(c.source);
		}
		c.next = null;
		c.manager = null;
		c.effects = null;
		c.bindedEffects = null;
		c.currentFade = null;
		var snd = c.sound;
		if(snd != null && snd.channel == c) {
			snd.channel = null;
		}
	}
	,__class__: hxd_snd_Manager
};
var hxd_snd_Mp3Data = function(bytes) {
	var mp = new format_mp3_Reader(new haxe_io_BytesInput(bytes)).read();
	this.samples = mp.sampleCount;
	var frame = mp.frames[0].data;
	var lame = -1;
	var _g = 0;
	var _g1 = frame.length - 24;
	while(_g < _g1) {
		var i = _g++;
		if(frame.b[i] == 76 && frame.b[i + 1] == 65 && frame.b[i + 2] == 77 && frame.b[i + 3] == 69) {
			lame = i;
			break;
		}
	}
	if(lame >= 0) {
		var startEnd = frame.b[lame + 21] << 16 | frame.b[lame + 22] << 8 | frame.b[lame + 23];
		var start = startEnd >> 12;
		var end = startEnd & 4095;
		this.samples -= start + end + 1152;
	}
	var header = mp.frames[0].header;
	this.sampleFormat = hxd_snd_SampleFormat.F32;
	this.samplingRate = format_mp3_MPEG.srEnum2Num(header.samplingRate);
	this.channels = header.channelMode == format_mp3_ChannelMode.Mono ? 1 : 2;
	var ctx = hxd_snd_webaudio_Context.get();
	if(ctx == null) {
		return;
	}
	ctx.decodeAudioData(bytes.b.bufferValue,$bind(this,this.processBuffer));
	var decodedRate = ctx.sampleRate | 0;
	this.samples = Math.ceil(this.samples * decodedRate / this.samplingRate);
	this.samplingRate = decodedRate;
};
$hxClasses["hxd.snd.Mp3Data"] = hxd_snd_Mp3Data;
hxd_snd_Mp3Data.__name__ = "hxd.snd.Mp3Data";
hxd_snd_Mp3Data.__super__ = hxd_snd_Data;
hxd_snd_Mp3Data.prototype = $extend(hxd_snd_Data.prototype,{
	isLoading: function() {
		return this.buffer == null;
	}
	,load: function(onEnd) {
		if(this.buffer != null) {
			onEnd();
		} else {
			this.onEnd = onEnd;
		}
	}
	,processBuffer: function(buf) {
		var left = buf.getChannelData(0);
		this.samples = buf.length;
		if(this.channels == 1) {
			this.buffer = haxe_io_Bytes.ofData(left.buffer);
			return;
		}
		var right = buf.numberOfChannels < 2 ? left : buf.getChannelData(1);
		var join = new Float32Array(left.length * 2);
		var w = 0;
		var _g = 0;
		var _g1 = buf.length;
		while(_g < _g1) {
			var i = _g++;
			join[w++] = left[i];
			join[w++] = right[i];
		}
		this.buffer = haxe_io_Bytes.ofData(join.buffer);
		if(this.onEnd != null) {
			this.onEnd();
			this.onEnd = null;
		}
	}
	,decodeBuffer: function(out,outPos,sampleStart,sampleCount) {
		if(this.buffer == null) {
			out.fill(outPos,sampleCount * 4 * this.channels,0);
		} else {
			out.blit(outPos,this.buffer,sampleStart * 4 * this.channels,sampleCount * 4 * this.channels);
		}
	}
	,__class__: hxd_snd_Mp3Data
});
var hxd_snd_SoundGroup = function(name) {
	this.name = name;
	this.maxAudible = -1;
	this.volume = 1;
	this.mono = false;
};
$hxClasses["hxd.snd.SoundGroup"] = hxd_snd_SoundGroup;
hxd_snd_SoundGroup.__name__ = "hxd.snd.SoundGroup";
hxd_snd_SoundGroup.prototype = {
	__class__: hxd_snd_SoundGroup
};
var hxd_snd_WavData = function(bytes) {
	if(bytes != null) {
		this.init(new format_wav_Reader(new haxe_io_BytesInput(bytes)).read());
	}
};
$hxClasses["hxd.snd.WavData"] = hxd_snd_WavData;
hxd_snd_WavData.__name__ = "hxd.snd.WavData";
hxd_snd_WavData.__super__ = hxd_snd_Data;
hxd_snd_WavData.prototype = $extend(hxd_snd_Data.prototype,{
	init: function(d) {
		var h = d.header;
		this.samplingRate = h.samplingRate;
		this.channels = h.channels;
		var tmp;
		switch(h.bitsPerSample) {
		case 8:
			tmp = hxd_snd_SampleFormat.UI8;
			break;
		case 16:
			tmp = hxd_snd_SampleFormat.I16;
			break;
		default:
			throw haxe_Exception.thrown("Unsupported WAV " + h.bitsPerSample + " bits");
		}
		this.sampleFormat = tmp;
		this.rawData = d.data;
		this.samples = this.rawData.length / this.getBytesPerSample() | 0;
	}
	,decodeBuffer: function(out,outPos,sampleStart,sampleCount) {
		var bpp = this.getBytesPerSample();
		out.blit(outPos,this.rawData,sampleStart * bpp,sampleCount * bpp);
	}
	,__class__: hxd_snd_WavData
});
var hxd_snd_effect_LowPass = function() {
	hxd_snd_Effect.call(this,"lowpass");
	this.priority = 100;
	this.gainHF = 1.0;
};
$hxClasses["hxd.snd.effect.LowPass"] = hxd_snd_effect_LowPass;
hxd_snd_effect_LowPass.__name__ = "hxd.snd.effect.LowPass";
hxd_snd_effect_LowPass.__super__ = hxd_snd_Effect;
hxd_snd_effect_LowPass.prototype = $extend(hxd_snd_Effect.prototype,{
	__class__: hxd_snd_effect_LowPass
});
var hxd_snd_effect_Pitch = function(value) {
	if(value == null) {
		value = 1.0;
	}
	hxd_snd_Effect.call(this,"pitch");
	this.value = value;
};
$hxClasses["hxd.snd.effect.Pitch"] = hxd_snd_effect_Pitch;
hxd_snd_effect_Pitch.__name__ = "hxd.snd.effect.Pitch";
hxd_snd_effect_Pitch.__super__ = hxd_snd_Effect;
hxd_snd_effect_Pitch.prototype = $extend(hxd_snd_Effect.prototype,{
	__class__: hxd_snd_effect_Pitch
});
var hxd_snd_effect_Spatialization = function() {
	hxd_snd_Effect.call(this,"spatialization");
	this.position = new h3d_Vector();
	this.velocity = new h3d_Vector();
	this.direction = new h3d_Vector();
	this.referenceDistance = 1.0;
	this.rollOffFactor = 1.0;
};
$hxClasses["hxd.snd.effect.Spatialization"] = hxd_snd_effect_Spatialization;
hxd_snd_effect_Spatialization.__name__ = "hxd.snd.effect.Spatialization";
hxd_snd_effect_Spatialization.__super__ = hxd_snd_Effect;
hxd_snd_effect_Spatialization.prototype = $extend(hxd_snd_Effect.prototype,{
	getVolumeModifier: function() {
		if(this.fadeDistance == null) {
			return 1.;
		}
		var _this = hxd_snd_Manager.get().listener.position;
		var v = this.position;
		var dx = v.x - _this.x;
		var dy = v.y - _this.y;
		var dz = v.z - _this.z;
		var dist = Math.sqrt(dx * dx + dy * dy + dz * dz);
		if(this.maxDistance != null) {
			dist -= this.maxDistance;
		} else {
			dist -= this.referenceDistance;
		}
		var volume = 1 - dist / this.fadeDistance;
		if(volume > 1) {
			volume = 1;
		}
		if(volume < 0) {
			volume = 0;
		}
		return volume;
	}
	,applyAudibleVolumeModifier: function(v) {
		var _this = hxd_snd_Manager.get().listener.position;
		var v1 = this.position;
		var dx = v1.x - _this.x;
		var dy = v1.y - _this.y;
		var dz = v1.z - _this.z;
		var dist = Math.sqrt(dx * dx + dy * dy + dz * dz);
		var b = this.referenceDistance;
		if(dist < b) {
			dist = b;
		}
		if(this.maxDistance != null) {
			var b = this.maxDistance;
			if(dist > b) {
				dist = b;
			}
		}
		var volume = this.referenceDistance / (this.referenceDistance + this.rollOffFactor * (dist - this.referenceDistance));
		return v * volume;
	}
	,__class__: hxd_snd_effect_Spatialization
});
var hxd_snd_webaudio_BufferHandle = function() {
};
$hxClasses["hxd.snd.webaudio.BufferHandle"] = hxd_snd_webaudio_BufferHandle;
hxd_snd_webaudio_BufferHandle.__name__ = "hxd.snd.webaudio.BufferHandle";
hxd_snd_webaudio_BufferHandle.prototype = {
	__class__: hxd_snd_webaudio_BufferHandle
};
var hxd_snd_webaudio_SourceHandle = function() {
	this.buffers = [];
	this.sampleOffset = 0;
	this.pitch = 1;
	this.firstPlay = true;
};
$hxClasses["hxd.snd.webaudio.SourceHandle"] = hxd_snd_webaudio_SourceHandle;
hxd_snd_webaudio_SourceHandle.__name__ = "hxd.snd.webaudio.SourceHandle";
hxd_snd_webaudio_SourceHandle.prototype = {
	updateDestination: function() {
		this.destination = this.gain;
		if(this.lowPass != null) {
			this.lowPass.connect(this.destination);
			this.destination = this.lowPass;
		}
		if(this.panner != null) {
			this.panner.connect(this.destination);
			this.destination = this.panner;
		}
		this.gain.connect(hxd_snd_webaudio_Context.destination);
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.node != null) {
				b.restart(this);
			}
		}
	}
	,applyPitch: function() {
		var t = 0.;
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			t = b.readjust(t,this);
		}
	}
	,__class__: hxd_snd_webaudio_SourceHandle
};
var hxd_snd_webaudio_BufferPlayback = function() {
};
$hxClasses["hxd.snd.webaudio.BufferPlayback"] = hxd_snd_webaudio_BufferPlayback;
hxd_snd_webaudio_BufferPlayback.__name__ = "hxd.snd.webaudio.BufferPlayback";
hxd_snd_webaudio_BufferPlayback.prototype = {
	get_currentSample: function() {
		if(this.consumed) {
			return this.buffer.samples;
		}
		if(this.node == null || !this.dirty || this.node.context.currentTime < this.lastTime) {
			return 0;
		}
		this.lastSamples += Math.floor((this.node.context.currentTime - this.lastTime) * this.buffer.inst.sampleRate * this.node.playbackRate.value);
		this.lastTime = this.node.context.currentTime;
		return this.lastSamples;
	}
	,set: function(buf,grainOffset) {
		this.buffer = buf;
		this.offset = isNaN(grainOffset) ? 0 : grainOffset;
		this.dirty = false;
		this.consumed = false;
		this.starts = 0;
		this.ends = 0;
	}
	,start: function(ctx,source,time) {
		this.dirty = true;
		this.consumed = false;
		if(this.node != null) {
			this.stop();
		}
		if(source.firstPlay && this.buffer.samples > 10) {
			source.firstPlay = false;
			var _g = [];
			var _g1 = 0;
			var _g2 = this.buffer.inst.numberOfChannels;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(this.buffer.inst.getChannelData(i));
			}
			var channels = _g;
			var j = 0;
			var fade = 0.;
			while(j < 10) {
				var i = 0;
				while(i < channels.length) {
					channels[i][j] *= fade;
					++i;
				}
				++j;
				fade += 0.1;
				if(fade > 1) {
					fade = 1;
				}
			}
		}
		this.node = ctx.createBufferSource();
		this.node.buffer = this.buffer.inst;
		this.node.addEventListener("ended",$bind(this,this.onBufferConsumed));
		this.node.connect(source.destination);
		this.node.playbackRate.value = source.pitch;
		this.node.start(time,this.offset);
		this.lastSamples = 0;
		this.lastTime = time;
		this.starts = time;
		return this.ends = time + (this.buffer.inst.duration - this.offset) / source.pitch;
	}
	,readjust: function(time,source) {
		if(this.consumed || this.node == null) {
			return this.ends;
		}
		var ctx = source.driver.ctx;
		var shiftTime = ctx.currentTime;
		this.node.playbackRate.setValueAtTime(source.pitch,shiftTime);
		var elapsed = shiftTime - this.starts;
		if(elapsed < 0) {
			return this.start(ctx,source,time == 0 ? shiftTime : time);
		}
		this.starts = shiftTime - elapsed / source.pitch;
		return this.ends = this.starts + (this.buffer.inst.duration - this.offset) / source.pitch;
	}
	,restart: function(source) {
		if(this.consumed || this.node == null) {
			return;
		}
		var ctx = hxd_snd_webaudio_Context.get();
		if(ctx.currentTime > this.starts) {
			this.offset += (ctx.currentTime - this.starts) * source.pitch;
			this.start(ctx,source,ctx.currentTime);
		} else {
			this.start(ctx,source,this.starts);
		}
	}
	,stop: function(immediate) {
		if(immediate == null) {
			immediate = true;
		}
		if(this.node != null) {
			this.node.removeEventListener("ended",$bind(this,this.onBufferConsumed));
			if(immediate) {
				this.node.disconnect();
			} else {
				this.node.stop();
			}
			this.node = null;
		}
	}
	,onBufferConsumed: function(e) {
		this.node.removeEventListener("ended",$bind(this,this.onBufferConsumed));
		this.node.disconnect();
		this.node = null;
		this.consumed = true;
	}
	,clear: function() {
		this.buffer = null;
		this.node = null;
	}
	,__class__: hxd_snd_webaudio_BufferPlayback
};
var hxd_snd_webaudio_Context = function() { };
$hxClasses["hxd.snd.webaudio.Context"] = hxd_snd_webaudio_Context;
hxd_snd_webaudio_Context.__name__ = "hxd.snd.webaudio.Context";
hxd_snd_webaudio_Context.get = function() {
	if(hxd_snd_webaudio_Context.ctx == null) {
		try {
			hxd_snd_webaudio_Context.ctx = new AudioContext();
		} catch( _g ) {
			try {
				hxd_snd_webaudio_Context.ctx = new window.webkitAudioContext();
			} catch( _g1 ) {
				hxd_snd_webaudio_Context.ctx = null;
			}
		}
		if(hxd_snd_webaudio_Context.ctx == null) {
			throw haxe_Exception.thrown("WebAudio API not available in this browser!");
		}
		if(hxd_snd_webaudio_Context.ctx.state == "suspended") {
			hxd_snd_webaudio_Context.waitForPageInput();
		}
		hxd_snd_webaudio_Context.ctx.addEventListener("statechange",function(_) {
			if(hxd_snd_webaudio_Context.ctx.state == "suspended") {
				hxd_snd_webaudio_Context.waitForPageInput();
			}
		});
		hxd_snd_webaudio_Context.bufferPool = [];
		hxd_snd_webaudio_Context.gainPool = [];
		hxd_snd_webaudio_Context.masterGain = hxd_snd_webaudio_Context.ctx.createGain();
		hxd_snd_webaudio_Context.masterGain.connect(hxd_snd_webaudio_Context.ctx.destination);
		hxd_snd_webaudio_Context.destination = hxd_snd_webaudio_Context.masterGain;
	}
	return hxd_snd_webaudio_Context.ctx;
};
hxd_snd_webaudio_Context.waitForPageInput = function() {
	if(!hxd_snd_webaudio_Context.suspended) {
		window.document.addEventListener("click",hxd_snd_webaudio_Context.resumeContext);
		window.document.addEventListener("keydown",hxd_snd_webaudio_Context.resumeContext);
		window.document.body.addEventListener("keydown",hxd_snd_webaudio_Context.resumeContext);
		window.document.body.addEventListener("touchend",hxd_snd_webaudio_Context.resumeContext);
		hxd_snd_webaudio_Context.suspended = true;
	}
};
hxd_snd_webaudio_Context.resumeContext = function(_) {
	if(hxd_snd_webaudio_Context.suspended) {
		if(hxd_snd_webaudio_Context.ctx != null) {
			hxd_snd_webaudio_Context.ctx.resume();
		}
		window.document.removeEventListener("click",hxd_snd_webaudio_Context.resumeContext);
		window.document.removeEventListener("keydown",hxd_snd_webaudio_Context.resumeContext);
		window.document.body.removeEventListener("keydown",hxd_snd_webaudio_Context.resumeContext);
		window.document.body.removeEventListener("touchend",hxd_snd_webaudio_Context.resumeContext);
		hxd_snd_webaudio_Context.suspended = false;
	}
};
hxd_snd_webaudio_Context.getBuffer = function(channels,sampleCount,rate) {
	var _g = 0;
	var _g1 = hxd_snd_webaudio_Context.bufferPool;
	while(_g < _g1.length) {
		var pool = _g1[_g];
		++_g;
		if(pool.channels == channels && pool.samples == sampleCount && pool.rate == rate) {
			if(pool.pool.length != 0) {
				return pool.pool.pop();
			} else {
				return hxd_snd_webaudio_Context.ctx.createBuffer(channels,sampleCount,rate);
			}
		}
	}
	var pool = new hxd_snd_webaudio__$Context_BufferPool(channels,sampleCount,rate);
	hxd_snd_webaudio_Context.bufferPool.push(pool);
	return hxd_snd_webaudio_Context.ctx.createBuffer(channels,sampleCount,rate);
};
hxd_snd_webaudio_Context.putBuffer = function(buf) {
	var rate = buf.sampleRate | 0;
	var _g = 0;
	var _g1 = hxd_snd_webaudio_Context.bufferPool;
	while(_g < _g1.length) {
		var pool = _g1[_g];
		++_g;
		if(pool.channels == buf.numberOfChannels && pool.samples == buf.length && pool.rate == rate) {
			pool.pool.push(buf);
			break;
		}
	}
};
var hxd_snd_webaudio__$Context_BufferPool = function(channels,samples,rate) {
	this.pool = [];
	this.channels = channels;
	this.samples = samples;
	this.rate = rate;
};
$hxClasses["hxd.snd.webaudio._Context.BufferPool"] = hxd_snd_webaudio__$Context_BufferPool;
hxd_snd_webaudio__$Context_BufferPool.__name__ = "hxd.snd.webaudio._Context.BufferPool";
hxd_snd_webaudio__$Context_BufferPool.prototype = {
	__class__: hxd_snd_webaudio__$Context_BufferPool
};
var hxd_snd_webaudio_Driver = function() {
	this.playbackPool = [];
	this.ctx = hxd_snd_webaudio_Context.get();
};
$hxClasses["hxd.snd.webaudio.Driver"] = hxd_snd_webaudio_Driver;
hxd_snd_webaudio_Driver.__name__ = "hxd.snd.webaudio.Driver";
hxd_snd_webaudio_Driver.__interfaces__ = [hxd_snd_Driver];
hxd_snd_webaudio_Driver.prototype = {
	hasFeature: function(d) {
		return true;
	}
	,setMasterVolume: function(value) {
		hxd_snd_webaudio_Context.masterGain.gain.value = value;
	}
	,setListenerParams: function(position,direction,up,velocity) {
		this.ctx.listener.setPosition(-position.x,position.y,position.z);
		this.ctx.listener.setOrientation(-direction.x,direction.y,direction.z,-up.x,up.y,up.z);
	}
	,createSource: function() {
		var s = new hxd_snd_webaudio_SourceHandle();
		s.driver = this;
		s.gain = hxd_snd_webaudio_Context.gainPool.length != 0 ? hxd_snd_webaudio_Context.gainPool.pop() : hxd_snd_webaudio_Context.ctx.createGain();
		s.updateDestination();
		return s;
	}
	,playSource: function(source) {
		if(!source.playing) {
			source.playing = true;
			if(source.buffers.length != 0) {
				var time = this.ctx.currentTime;
				var _g = 0;
				var _g1 = source.buffers;
				while(_g < _g1.length) {
					var b = _g1[_g];
					++_g;
					if(b.consumed) {
						continue;
					}
					time = b.start(this.ctx,source,time);
				}
			}
		}
	}
	,stopSource: function(source) {
		source.playing = false;
		source.sampleOffset = 0;
	}
	,setSourceVolume: function(source,value) {
		source.gain.gain.value = value;
	}
	,createBuffer: function() {
		var b = new hxd_snd_webaudio_BufferHandle();
		b.samples = 0;
		return b;
	}
	,setBufferData: function(buffer,data,size,format,channelCount,samplingRate) {
		var sampleCount;
		switch(format._hx_index) {
		case 0:
			sampleCount = 1;
			break;
		case 1:
			sampleCount = 2;
			break;
		case 2:
			sampleCount = 4;
			break;
		}
		var sampleCount1 = size / sampleCount / channelCount | 0;
		buffer.samples = sampleCount1;
		if(sampleCount1 == 0) {
			return;
		}
		if(buffer.inst == null) {
			buffer.inst = hxd_snd_webaudio_Context.getBuffer(channelCount,sampleCount1,samplingRate);
		} else if(buffer.inst.sampleRate != samplingRate || buffer.inst.numberOfChannels != channelCount || buffer.inst.length != sampleCount1) {
			hxd_snd_webaudio_Context.putBuffer(buffer.inst);
			buffer.inst = hxd_snd_webaudio_Context.getBuffer(channelCount,sampleCount1,samplingRate);
		}
		switch(format._hx_index) {
		case 0:
			var ui8 = new Uint8Array(data.b.bufferValue);
			if(channelCount == 1) {
				var chn = buffer.inst.getChannelData(0);
				var _g = 0;
				var _g1 = sampleCount1;
				while(_g < _g1) {
					var i = _g++;
					chn[i] = ui8[i] / 255;
				}
			} else {
				var left = buffer.inst.getChannelData(0);
				var right = buffer.inst.getChannelData(1);
				var r = 0;
				var _g = 0;
				var _g1 = sampleCount1;
				while(_g < _g1) {
					var i = _g++;
					left[i] = ui8[r] / 255;
					right[i] = ui8[r + 1] / 255;
					r += channelCount;
				}
			}
			break;
		case 1:
			var i16 = new Int16Array(data.b.bufferValue);
			if(channelCount == 1) {
				var chn = buffer.inst.getChannelData(0);
				var _g = 0;
				var _g1 = sampleCount1;
				while(_g < _g1) {
					var i = _g++;
					chn[i] = i16[i] / 32768;
				}
			} else {
				var left = buffer.inst.getChannelData(0);
				var right = buffer.inst.getChannelData(1);
				var r = 0;
				var _g = 0;
				var _g1 = sampleCount1;
				while(_g < _g1) {
					var i = _g++;
					left[i] = i16[r] / 32768;
					right[i] = i16[r + 1] / 32768;
					r += channelCount;
				}
			}
			break;
		case 2:
			var f32 = new Float32Array(data.b.bufferValue);
			if(channelCount == 1) {
				var chn = buffer.inst.getChannelData(0);
				var _g = 0;
				var _g1 = sampleCount1;
				while(_g < _g1) {
					var i = _g++;
					chn[i] = f32[i];
				}
			} else {
				var left = buffer.inst.getChannelData(0);
				var right = buffer.inst.getChannelData(1);
				var r = 0;
				var _g = 0;
				var _g1 = sampleCount1;
				while(_g < _g1) {
					var i = _g++;
					left[i] = f32[r];
					right[i] = f32[r + 1];
					r += channelCount;
				}
			}
			break;
		}
	}
	,destroyBuffer: function(buffer) {
		if(buffer.inst != null) {
			hxd_snd_webaudio_Context.putBuffer(buffer.inst);
		}
		buffer.inst = null;
	}
	,queueBuffer: function(source,buffer,sampleStart,endOfStream) {
		var buf = this.playbackPool.length != 0 ? this.playbackPool.pop() : new hxd_snd_webaudio_BufferPlayback();
		if(buffer.inst == null) {
			return;
		}
		buf.set(buffer,sampleStart / buffer.inst.length * buffer.inst.duration);
		buffer.isEnd = endOfStream;
		source.buffers.push(buf);
		if(source.playing) {
			if(source.buffers.length != 1) {
				var t = source.buffers[source.buffers.length - 2].ends;
				var tmp = this.ctx;
				var tmp1;
				if(isFinite(t)) {
					var b = this.ctx.currentTime;
					tmp1 = t < b ? b : t;
				} else {
					tmp1 = this.ctx.currentTime;
				}
				buf.start(tmp,source,tmp1);
			} else {
				buf.start(this.ctx,source,this.ctx.currentTime);
			}
		}
	}
	,unqueueBuffer: function(source,buffer) {
		var i = 0;
		while(i < source.buffers.length) {
			var b = source.buffers[i];
			if(b.buffer == buffer) {
				source.buffers.splice(i,1);
				b.stop(!buffer.isEnd);
				b.clear();
				this.playbackPool.push(b);
				break;
			}
		}
		if(buffer.isEnd || !source.playing) {
			source.sampleOffset = 0;
		} else {
			source.sampleOffset += buffer.samples;
		}
	}
	,getProcessedBuffers: function(source) {
		var cnt = 0;
		var _g = 0;
		var _g1 = source.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.consumed) {
				++cnt;
			}
		}
		return cnt;
	}
	,getPlayedSampleCount: function(source) {
		var consumed = 0;
		var buf = null;
		var _g = 0;
		var _g1 = source.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.consumed) {
				consumed += b.buffer.samples;
			} else if(b.dirty) {
				buf = b;
				break;
			}
		}
		if(buf != null) {
			return source.sampleOffset + consumed + buf.get_currentSample();
		}
		return source.sampleOffset + consumed;
	}
	,update: function() {
	}
	,getEffectDriver: function(type) {
		switch(type) {
		case "lowpass":
			return new hxd_snd_webaudio_LowPassDriver();
		case "pitch":
			return new hxd_snd_webaudio_PitchDriver();
		case "spatialization":
			return new hxd_snd_webaudio_SpatializationDriver();
		default:
			return new hxd_snd_EffectDriver();
		}
	}
	,__class__: hxd_snd_webaudio_Driver
};
var hxd_snd_webaudio_LowPassDriver = function() {
	this.pool = [];
	hxd_snd_EffectDriver.call(this);
};
$hxClasses["hxd.snd.webaudio.LowPassDriver"] = hxd_snd_webaudio_LowPassDriver;
hxd_snd_webaudio_LowPassDriver.__name__ = "hxd.snd.webaudio.LowPassDriver";
hxd_snd_webaudio_LowPassDriver.__super__ = hxd_snd_EffectDriver;
hxd_snd_webaudio_LowPassDriver.prototype = $extend(hxd_snd_EffectDriver.prototype,{
	get: function(ctx) {
		if(this.pool.length != 0) {
			return this.pool.pop();
		}
		var node = ctx.createBiquadFilter();
		node.type = "lowpass";
		return node;
	}
	,bind: function(e,source) {
		source.lowPass = this.get(source.driver.ctx);
		source.updateDestination();
		this.apply(e,source);
	}
	,apply: function(e,source) {
		var min = 40;
		var max = source.driver.ctx.sampleRate / 2;
		var octaves = Math.log(max / min) / Math.LN2;
		source.lowPass.frequency.value = max * Math.pow(2,octaves * (e.gainHF - 1));
	}
	,unbind: function(e,source) {
		this.pool.push(source.lowPass);
		source.lowPass.disconnect();
		source.lowPass = null;
		if(source.driver != null) {
			source.updateDestination();
		}
	}
	,__class__: hxd_snd_webaudio_LowPassDriver
});
var hxd_snd_webaudio_PitchDriver = function() {
	hxd_snd_EffectDriver.call(this);
};
$hxClasses["hxd.snd.webaudio.PitchDriver"] = hxd_snd_webaudio_PitchDriver;
hxd_snd_webaudio_PitchDriver.__name__ = "hxd.snd.webaudio.PitchDriver";
hxd_snd_webaudio_PitchDriver.__super__ = hxd_snd_EffectDriver;
hxd_snd_webaudio_PitchDriver.prototype = $extend(hxd_snd_EffectDriver.prototype,{
	apply: function(e,source) {
		if(source.pitch != e.value) {
			source.pitch = e.value;
			source.applyPitch();
		}
	}
	,unbind: function(e,source) {
		source.pitch = 1;
		source.applyPitch();
	}
	,__class__: hxd_snd_webaudio_PitchDriver
});
var hxd_snd_webaudio_SpatializationDriver = function() {
	this.pool = [];
	hxd_snd_EffectDriver.call(this);
};
$hxClasses["hxd.snd.webaudio.SpatializationDriver"] = hxd_snd_webaudio_SpatializationDriver;
hxd_snd_webaudio_SpatializationDriver.__name__ = "hxd.snd.webaudio.SpatializationDriver";
hxd_snd_webaudio_SpatializationDriver.__super__ = hxd_snd_EffectDriver;
hxd_snd_webaudio_SpatializationDriver.prototype = $extend(hxd_snd_EffectDriver.prototype,{
	get: function(ctx) {
		if(this.pool.length != 0) {
			return this.pool.pop();
		}
		var node = ctx.createPanner();
		return node;
	}
	,bind: function(e,source) {
		source.panner = this.get(source.driver.ctx);
		source.updateDestination();
		this.apply(e,source);
	}
	,apply: function(e,source) {
		source.panner.setPosition(-e.position.x,e.position.y,e.position.z);
		source.panner.setOrientation(-e.direction.x,e.direction.y,e.direction.z);
		source.panner.rolloffFactor = e.rollOffFactor;
		source.panner.refDistance = e.referenceDistance;
		var maxDist = e.maxDistance == null ? 3.40282347e38 : e.maxDistance;
		source.panner.maxDistance = maxDist;
	}
	,unbind: function(e,source) {
		this.pool.push(source.panner);
		source.panner.disconnect();
		source.panner = null;
		if(source.driver != null) {
			source.updateDestination();
		}
	}
	,__class__: hxd_snd_webaudio_SpatializationDriver
});
var hxsl_Type = $hxEnums["hxsl.Type"] = { __ename__:true,__constructs__:null
	,TVoid: {_hx_name:"TVoid",_hx_index:0,__enum__:"hxsl.Type",toString:$estr}
	,TInt: {_hx_name:"TInt",_hx_index:1,__enum__:"hxsl.Type",toString:$estr}
	,TBool: {_hx_name:"TBool",_hx_index:2,__enum__:"hxsl.Type",toString:$estr}
	,TFloat: {_hx_name:"TFloat",_hx_index:3,__enum__:"hxsl.Type",toString:$estr}
	,TString: {_hx_name:"TString",_hx_index:4,__enum__:"hxsl.Type",toString:$estr}
	,TVec: ($_=function(size,t) { return {_hx_index:5,size:size,t:t,__enum__:"hxsl.Type",toString:$estr}; },$_._hx_name="TVec",$_.__params__ = ["size","t"],$_)
	,TMat3: {_hx_name:"TMat3",_hx_index:6,__enum__:"hxsl.Type",toString:$estr}
	,TMat4: {_hx_name:"TMat4",_hx_index:7,__enum__:"hxsl.Type",toString:$estr}
	,TMat3x4: {_hx_name:"TMat3x4",_hx_index:8,__enum__:"hxsl.Type",toString:$estr}
	,TBytes: ($_=function(size) { return {_hx_index:9,size:size,__enum__:"hxsl.Type",toString:$estr}; },$_._hx_name="TBytes",$_.__params__ = ["size"],$_)
	,TSampler2D: {_hx_name:"TSampler2D",_hx_index:10,__enum__:"hxsl.Type",toString:$estr}
	,TSampler2DArray: {_hx_name:"TSampler2DArray",_hx_index:11,__enum__:"hxsl.Type",toString:$estr}
	,TSamplerCube: {_hx_name:"TSamplerCube",_hx_index:12,__enum__:"hxsl.Type",toString:$estr}
	,TStruct: ($_=function(vl) { return {_hx_index:13,vl:vl,__enum__:"hxsl.Type",toString:$estr}; },$_._hx_name="TStruct",$_.__params__ = ["vl"],$_)
	,TFun: ($_=function(variants) { return {_hx_index:14,variants:variants,__enum__:"hxsl.Type",toString:$estr}; },$_._hx_name="TFun",$_.__params__ = ["variants"],$_)
	,TArray: ($_=function(t,size) { return {_hx_index:15,t:t,size:size,__enum__:"hxsl.Type",toString:$estr}; },$_._hx_name="TArray",$_.__params__ = ["t","size"],$_)
	,TBuffer: ($_=function(t,size) { return {_hx_index:16,t:t,size:size,__enum__:"hxsl.Type",toString:$estr}; },$_._hx_name="TBuffer",$_.__params__ = ["t","size"],$_)
	,TChannel: ($_=function(size) { return {_hx_index:17,size:size,__enum__:"hxsl.Type",toString:$estr}; },$_._hx_name="TChannel",$_.__params__ = ["size"],$_)
	,TMat2: {_hx_name:"TMat2",_hx_index:18,__enum__:"hxsl.Type",toString:$estr}
};
hxsl_Type.__constructs__ = [hxsl_Type.TVoid,hxsl_Type.TInt,hxsl_Type.TBool,hxsl_Type.TFloat,hxsl_Type.TString,hxsl_Type.TVec,hxsl_Type.TMat3,hxsl_Type.TMat4,hxsl_Type.TMat3x4,hxsl_Type.TBytes,hxsl_Type.TSampler2D,hxsl_Type.TSampler2DArray,hxsl_Type.TSamplerCube,hxsl_Type.TStruct,hxsl_Type.TFun,hxsl_Type.TArray,hxsl_Type.TBuffer,hxsl_Type.TChannel,hxsl_Type.TMat2];
hxsl_Type.__empty_constructs__ = [hxsl_Type.TVoid,hxsl_Type.TInt,hxsl_Type.TBool,hxsl_Type.TFloat,hxsl_Type.TString,hxsl_Type.TMat3,hxsl_Type.TMat4,hxsl_Type.TMat3x4,hxsl_Type.TSampler2D,hxsl_Type.TSampler2DArray,hxsl_Type.TSamplerCube,hxsl_Type.TMat2];
var hxsl_VecType = $hxEnums["hxsl.VecType"] = { __ename__:true,__constructs__:null
	,VInt: {_hx_name:"VInt",_hx_index:0,__enum__:"hxsl.VecType",toString:$estr}
	,VFloat: {_hx_name:"VFloat",_hx_index:1,__enum__:"hxsl.VecType",toString:$estr}
	,VBool: {_hx_name:"VBool",_hx_index:2,__enum__:"hxsl.VecType",toString:$estr}
};
hxsl_VecType.__constructs__ = [hxsl_VecType.VInt,hxsl_VecType.VFloat,hxsl_VecType.VBool];
hxsl_VecType.__empty_constructs__ = [hxsl_VecType.VInt,hxsl_VecType.VFloat,hxsl_VecType.VBool];
var hxsl_SizeDecl = $hxEnums["hxsl.SizeDecl"] = { __ename__:true,__constructs__:null
	,SConst: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"hxsl.SizeDecl",toString:$estr}; },$_._hx_name="SConst",$_.__params__ = ["v"],$_)
	,SVar: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hxsl.SizeDecl",toString:$estr}; },$_._hx_name="SVar",$_.__params__ = ["v"],$_)
};
hxsl_SizeDecl.__constructs__ = [hxsl_SizeDecl.SConst,hxsl_SizeDecl.SVar];
hxsl_SizeDecl.__empty_constructs__ = [];
var hxsl_Error = function(msg,pos) {
	this.msg = msg;
	this.pos = pos;
};
$hxClasses["hxsl.Error"] = hxsl_Error;
hxsl_Error.__name__ = "hxsl.Error";
hxsl_Error.t = function(msg,pos) {
	throw haxe_Exception.thrown(new hxsl_Error(msg,pos));
};
hxsl_Error.prototype = {
	toString: function() {
		return "Error(" + this.msg + ")@" + Std.string(this.pos);
	}
	,__class__: hxsl_Error
};
var hxsl_VarKind = $hxEnums["hxsl.VarKind"] = { __ename__:true,__constructs__:null
	,Global: {_hx_name:"Global",_hx_index:0,__enum__:"hxsl.VarKind",toString:$estr}
	,Input: {_hx_name:"Input",_hx_index:1,__enum__:"hxsl.VarKind",toString:$estr}
	,Param: {_hx_name:"Param",_hx_index:2,__enum__:"hxsl.VarKind",toString:$estr}
	,Var: {_hx_name:"Var",_hx_index:3,__enum__:"hxsl.VarKind",toString:$estr}
	,Local: {_hx_name:"Local",_hx_index:4,__enum__:"hxsl.VarKind",toString:$estr}
	,Output: {_hx_name:"Output",_hx_index:5,__enum__:"hxsl.VarKind",toString:$estr}
	,Function: {_hx_name:"Function",_hx_index:6,__enum__:"hxsl.VarKind",toString:$estr}
};
hxsl_VarKind.__constructs__ = [hxsl_VarKind.Global,hxsl_VarKind.Input,hxsl_VarKind.Param,hxsl_VarKind.Var,hxsl_VarKind.Local,hxsl_VarKind.Output,hxsl_VarKind.Function];
hxsl_VarKind.__empty_constructs__ = [hxsl_VarKind.Global,hxsl_VarKind.Input,hxsl_VarKind.Param,hxsl_VarKind.Var,hxsl_VarKind.Local,hxsl_VarKind.Output,hxsl_VarKind.Function];
var hxsl_VarQualifier = $hxEnums["hxsl.VarQualifier"] = { __ename__:true,__constructs__:null
	,Const: ($_=function(max) { return {_hx_index:0,max:max,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_._hx_name="Const",$_.__params__ = ["max"],$_)
	,Private: {_hx_name:"Private",_hx_index:1,__enum__:"hxsl.VarQualifier",toString:$estr}
	,Nullable: {_hx_name:"Nullable",_hx_index:2,__enum__:"hxsl.VarQualifier",toString:$estr}
	,PerObject: {_hx_name:"PerObject",_hx_index:3,__enum__:"hxsl.VarQualifier",toString:$estr}
	,Name: ($_=function(n) { return {_hx_index:4,n:n,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_._hx_name="Name",$_.__params__ = ["n"],$_)
	,Shared: {_hx_name:"Shared",_hx_index:5,__enum__:"hxsl.VarQualifier",toString:$estr}
	,Precision: ($_=function(p) { return {_hx_index:6,p:p,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_._hx_name="Precision",$_.__params__ = ["p"],$_)
	,Range: ($_=function(min,max) { return {_hx_index:7,min:min,max:max,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_._hx_name="Range",$_.__params__ = ["min","max"],$_)
	,Ignore: {_hx_name:"Ignore",_hx_index:8,__enum__:"hxsl.VarQualifier",toString:$estr}
	,PerInstance: ($_=function(v) { return {_hx_index:9,v:v,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_._hx_name="PerInstance",$_.__params__ = ["v"],$_)
	,Doc: ($_=function(s) { return {_hx_index:10,s:s,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_._hx_name="Doc",$_.__params__ = ["s"],$_)
	,Borrow: ($_=function(source) { return {_hx_index:11,source:source,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_._hx_name="Borrow",$_.__params__ = ["source"],$_)
	,Sampler: ($_=function(name) { return {_hx_index:12,name:name,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_._hx_name="Sampler",$_.__params__ = ["name"],$_)
};
hxsl_VarQualifier.__constructs__ = [hxsl_VarQualifier.Const,hxsl_VarQualifier.Private,hxsl_VarQualifier.Nullable,hxsl_VarQualifier.PerObject,hxsl_VarQualifier.Name,hxsl_VarQualifier.Shared,hxsl_VarQualifier.Precision,hxsl_VarQualifier.Range,hxsl_VarQualifier.Ignore,hxsl_VarQualifier.PerInstance,hxsl_VarQualifier.Doc,hxsl_VarQualifier.Borrow,hxsl_VarQualifier.Sampler];
hxsl_VarQualifier.__empty_constructs__ = [hxsl_VarQualifier.Private,hxsl_VarQualifier.Nullable,hxsl_VarQualifier.PerObject,hxsl_VarQualifier.Shared,hxsl_VarQualifier.Ignore];
var hxsl_Prec = $hxEnums["hxsl.Prec"] = { __ename__:true,__constructs__:null
	,Low: {_hx_name:"Low",_hx_index:0,__enum__:"hxsl.Prec",toString:$estr}
	,Medium: {_hx_name:"Medium",_hx_index:1,__enum__:"hxsl.Prec",toString:$estr}
	,High: {_hx_name:"High",_hx_index:2,__enum__:"hxsl.Prec",toString:$estr}
};
hxsl_Prec.__constructs__ = [hxsl_Prec.Low,hxsl_Prec.Medium,hxsl_Prec.High];
hxsl_Prec.__empty_constructs__ = [hxsl_Prec.Low,hxsl_Prec.Medium,hxsl_Prec.High];
var hxsl_Const = $hxEnums["hxsl.Const"] = { __ename__:true,__constructs__:null
	,CNull: {_hx_name:"CNull",_hx_index:0,__enum__:"hxsl.Const",toString:$estr}
	,CBool: ($_=function(b) { return {_hx_index:1,b:b,__enum__:"hxsl.Const",toString:$estr}; },$_._hx_name="CBool",$_.__params__ = ["b"],$_)
	,CInt: ($_=function(v) { return {_hx_index:2,v:v,__enum__:"hxsl.Const",toString:$estr}; },$_._hx_name="CInt",$_.__params__ = ["v"],$_)
	,CFloat: ($_=function(v) { return {_hx_index:3,v:v,__enum__:"hxsl.Const",toString:$estr}; },$_._hx_name="CFloat",$_.__params__ = ["v"],$_)
	,CString: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"hxsl.Const",toString:$estr}; },$_._hx_name="CString",$_.__params__ = ["v"],$_)
};
hxsl_Const.__constructs__ = [hxsl_Const.CNull,hxsl_Const.CBool,hxsl_Const.CInt,hxsl_Const.CFloat,hxsl_Const.CString];
hxsl_Const.__empty_constructs__ = [hxsl_Const.CNull];
var hxsl_FunctionKind = $hxEnums["hxsl.FunctionKind"] = { __ename__:true,__constructs__:null
	,Vertex: {_hx_name:"Vertex",_hx_index:0,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Fragment: {_hx_name:"Fragment",_hx_index:1,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Init: {_hx_name:"Init",_hx_index:2,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Helper: {_hx_name:"Helper",_hx_index:3,__enum__:"hxsl.FunctionKind",toString:$estr}
};
hxsl_FunctionKind.__constructs__ = [hxsl_FunctionKind.Vertex,hxsl_FunctionKind.Fragment,hxsl_FunctionKind.Init,hxsl_FunctionKind.Helper];
hxsl_FunctionKind.__empty_constructs__ = [hxsl_FunctionKind.Vertex,hxsl_FunctionKind.Fragment,hxsl_FunctionKind.Init,hxsl_FunctionKind.Helper];
var hxsl_TGlobal = $hxEnums["hxsl.TGlobal"] = { __ename__:true,__constructs__:null
	,Radians: {_hx_name:"Radians",_hx_index:0,__enum__:"hxsl.TGlobal",toString:$estr}
	,Degrees: {_hx_name:"Degrees",_hx_index:1,__enum__:"hxsl.TGlobal",toString:$estr}
	,Sin: {_hx_name:"Sin",_hx_index:2,__enum__:"hxsl.TGlobal",toString:$estr}
	,Cos: {_hx_name:"Cos",_hx_index:3,__enum__:"hxsl.TGlobal",toString:$estr}
	,Tan: {_hx_name:"Tan",_hx_index:4,__enum__:"hxsl.TGlobal",toString:$estr}
	,Asin: {_hx_name:"Asin",_hx_index:5,__enum__:"hxsl.TGlobal",toString:$estr}
	,Acos: {_hx_name:"Acos",_hx_index:6,__enum__:"hxsl.TGlobal",toString:$estr}
	,Atan: {_hx_name:"Atan",_hx_index:7,__enum__:"hxsl.TGlobal",toString:$estr}
	,Pow: {_hx_name:"Pow",_hx_index:8,__enum__:"hxsl.TGlobal",toString:$estr}
	,Exp: {_hx_name:"Exp",_hx_index:9,__enum__:"hxsl.TGlobal",toString:$estr}
	,Log: {_hx_name:"Log",_hx_index:10,__enum__:"hxsl.TGlobal",toString:$estr}
	,Exp2: {_hx_name:"Exp2",_hx_index:11,__enum__:"hxsl.TGlobal",toString:$estr}
	,Log2: {_hx_name:"Log2",_hx_index:12,__enum__:"hxsl.TGlobal",toString:$estr}
	,Sqrt: {_hx_name:"Sqrt",_hx_index:13,__enum__:"hxsl.TGlobal",toString:$estr}
	,Inversesqrt: {_hx_name:"Inversesqrt",_hx_index:14,__enum__:"hxsl.TGlobal",toString:$estr}
	,Abs: {_hx_name:"Abs",_hx_index:15,__enum__:"hxsl.TGlobal",toString:$estr}
	,Sign: {_hx_name:"Sign",_hx_index:16,__enum__:"hxsl.TGlobal",toString:$estr}
	,Floor: {_hx_name:"Floor",_hx_index:17,__enum__:"hxsl.TGlobal",toString:$estr}
	,Ceil: {_hx_name:"Ceil",_hx_index:18,__enum__:"hxsl.TGlobal",toString:$estr}
	,Fract: {_hx_name:"Fract",_hx_index:19,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mod: {_hx_name:"Mod",_hx_index:20,__enum__:"hxsl.TGlobal",toString:$estr}
	,Min: {_hx_name:"Min",_hx_index:21,__enum__:"hxsl.TGlobal",toString:$estr}
	,Max: {_hx_name:"Max",_hx_index:22,__enum__:"hxsl.TGlobal",toString:$estr}
	,Clamp: {_hx_name:"Clamp",_hx_index:23,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mix: {_hx_name:"Mix",_hx_index:24,__enum__:"hxsl.TGlobal",toString:$estr}
	,Step: {_hx_name:"Step",_hx_index:25,__enum__:"hxsl.TGlobal",toString:$estr}
	,Smoothstep: {_hx_name:"Smoothstep",_hx_index:26,__enum__:"hxsl.TGlobal",toString:$estr}
	,Length: {_hx_name:"Length",_hx_index:27,__enum__:"hxsl.TGlobal",toString:$estr}
	,Distance: {_hx_name:"Distance",_hx_index:28,__enum__:"hxsl.TGlobal",toString:$estr}
	,Dot: {_hx_name:"Dot",_hx_index:29,__enum__:"hxsl.TGlobal",toString:$estr}
	,Cross: {_hx_name:"Cross",_hx_index:30,__enum__:"hxsl.TGlobal",toString:$estr}
	,Normalize: {_hx_name:"Normalize",_hx_index:31,__enum__:"hxsl.TGlobal",toString:$estr}
	,LReflect: {_hx_name:"LReflect",_hx_index:32,__enum__:"hxsl.TGlobal",toString:$estr}
	,Texture: {_hx_name:"Texture",_hx_index:33,__enum__:"hxsl.TGlobal",toString:$estr}
	,TextureLod: {_hx_name:"TextureLod",_hx_index:34,__enum__:"hxsl.TGlobal",toString:$estr}
	,Texel: {_hx_name:"Texel",_hx_index:35,__enum__:"hxsl.TGlobal",toString:$estr}
	,TextureSize: {_hx_name:"TextureSize",_hx_index:36,__enum__:"hxsl.TGlobal",toString:$estr}
	,ToInt: {_hx_name:"ToInt",_hx_index:37,__enum__:"hxsl.TGlobal",toString:$estr}
	,ToFloat: {_hx_name:"ToFloat",_hx_index:38,__enum__:"hxsl.TGlobal",toString:$estr}
	,ToBool: {_hx_name:"ToBool",_hx_index:39,__enum__:"hxsl.TGlobal",toString:$estr}
	,Vec2: {_hx_name:"Vec2",_hx_index:40,__enum__:"hxsl.TGlobal",toString:$estr}
	,Vec3: {_hx_name:"Vec3",_hx_index:41,__enum__:"hxsl.TGlobal",toString:$estr}
	,Vec4: {_hx_name:"Vec4",_hx_index:42,__enum__:"hxsl.TGlobal",toString:$estr}
	,IVec2: {_hx_name:"IVec2",_hx_index:43,__enum__:"hxsl.TGlobal",toString:$estr}
	,IVec3: {_hx_name:"IVec3",_hx_index:44,__enum__:"hxsl.TGlobal",toString:$estr}
	,IVec4: {_hx_name:"IVec4",_hx_index:45,__enum__:"hxsl.TGlobal",toString:$estr}
	,BVec2: {_hx_name:"BVec2",_hx_index:46,__enum__:"hxsl.TGlobal",toString:$estr}
	,BVec3: {_hx_name:"BVec3",_hx_index:47,__enum__:"hxsl.TGlobal",toString:$estr}
	,BVec4: {_hx_name:"BVec4",_hx_index:48,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat2: {_hx_name:"Mat2",_hx_index:49,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat3: {_hx_name:"Mat3",_hx_index:50,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat4: {_hx_name:"Mat4",_hx_index:51,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat3x4: {_hx_name:"Mat3x4",_hx_index:52,__enum__:"hxsl.TGlobal",toString:$estr}
	,Saturate: {_hx_name:"Saturate",_hx_index:53,__enum__:"hxsl.TGlobal",toString:$estr}
	,Pack: {_hx_name:"Pack",_hx_index:54,__enum__:"hxsl.TGlobal",toString:$estr}
	,Unpack: {_hx_name:"Unpack",_hx_index:55,__enum__:"hxsl.TGlobal",toString:$estr}
	,PackNormal: {_hx_name:"PackNormal",_hx_index:56,__enum__:"hxsl.TGlobal",toString:$estr}
	,UnpackNormal: {_hx_name:"UnpackNormal",_hx_index:57,__enum__:"hxsl.TGlobal",toString:$estr}
	,ScreenToUv: {_hx_name:"ScreenToUv",_hx_index:58,__enum__:"hxsl.TGlobal",toString:$estr}
	,UvToScreen: {_hx_name:"UvToScreen",_hx_index:59,__enum__:"hxsl.TGlobal",toString:$estr}
	,DFdx: {_hx_name:"DFdx",_hx_index:60,__enum__:"hxsl.TGlobal",toString:$estr}
	,DFdy: {_hx_name:"DFdy",_hx_index:61,__enum__:"hxsl.TGlobal",toString:$estr}
	,Fwidth: {_hx_name:"Fwidth",_hx_index:62,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelRead: {_hx_name:"ChannelRead",_hx_index:63,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelReadLod: {_hx_name:"ChannelReadLod",_hx_index:64,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelFetch: {_hx_name:"ChannelFetch",_hx_index:65,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelTextureSize: {_hx_name:"ChannelTextureSize",_hx_index:66,__enum__:"hxsl.TGlobal",toString:$estr}
	,Trace: {_hx_name:"Trace",_hx_index:67,__enum__:"hxsl.TGlobal",toString:$estr}
	,VertexID: {_hx_name:"VertexID",_hx_index:68,__enum__:"hxsl.TGlobal",toString:$estr}
	,InstanceID: {_hx_name:"InstanceID",_hx_index:69,__enum__:"hxsl.TGlobal",toString:$estr}
	,FragCoord: {_hx_name:"FragCoord",_hx_index:70,__enum__:"hxsl.TGlobal",toString:$estr}
	,FrontFacing: {_hx_name:"FrontFacing",_hx_index:71,__enum__:"hxsl.TGlobal",toString:$estr}
};
hxsl_TGlobal.__constructs__ = [hxsl_TGlobal.Radians,hxsl_TGlobal.Degrees,hxsl_TGlobal.Sin,hxsl_TGlobal.Cos,hxsl_TGlobal.Tan,hxsl_TGlobal.Asin,hxsl_TGlobal.Acos,hxsl_TGlobal.Atan,hxsl_TGlobal.Pow,hxsl_TGlobal.Exp,hxsl_TGlobal.Log,hxsl_TGlobal.Exp2,hxsl_TGlobal.Log2,hxsl_TGlobal.Sqrt,hxsl_TGlobal.Inversesqrt,hxsl_TGlobal.Abs,hxsl_TGlobal.Sign,hxsl_TGlobal.Floor,hxsl_TGlobal.Ceil,hxsl_TGlobal.Fract,hxsl_TGlobal.Mod,hxsl_TGlobal.Min,hxsl_TGlobal.Max,hxsl_TGlobal.Clamp,hxsl_TGlobal.Mix,hxsl_TGlobal.Step,hxsl_TGlobal.Smoothstep,hxsl_TGlobal.Length,hxsl_TGlobal.Distance,hxsl_TGlobal.Dot,hxsl_TGlobal.Cross,hxsl_TGlobal.Normalize,hxsl_TGlobal.LReflect,hxsl_TGlobal.Texture,hxsl_TGlobal.TextureLod,hxsl_TGlobal.Texel,hxsl_TGlobal.TextureSize,hxsl_TGlobal.ToInt,hxsl_TGlobal.ToFloat,hxsl_TGlobal.ToBool,hxsl_TGlobal.Vec2,hxsl_TGlobal.Vec3,hxsl_TGlobal.Vec4,hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4,hxsl_TGlobal.BVec2,hxsl_TGlobal.BVec3,hxsl_TGlobal.BVec4,hxsl_TGlobal.Mat2,hxsl_TGlobal.Mat3,hxsl_TGlobal.Mat4,hxsl_TGlobal.Mat3x4,hxsl_TGlobal.Saturate,hxsl_TGlobal.Pack,hxsl_TGlobal.Unpack,hxsl_TGlobal.PackNormal,hxsl_TGlobal.UnpackNormal,hxsl_TGlobal.ScreenToUv,hxsl_TGlobal.UvToScreen,hxsl_TGlobal.DFdx,hxsl_TGlobal.DFdy,hxsl_TGlobal.Fwidth,hxsl_TGlobal.ChannelRead,hxsl_TGlobal.ChannelReadLod,hxsl_TGlobal.ChannelFetch,hxsl_TGlobal.ChannelTextureSize,hxsl_TGlobal.Trace,hxsl_TGlobal.VertexID,hxsl_TGlobal.InstanceID,hxsl_TGlobal.FragCoord,hxsl_TGlobal.FrontFacing];
hxsl_TGlobal.__empty_constructs__ = [hxsl_TGlobal.Radians,hxsl_TGlobal.Degrees,hxsl_TGlobal.Sin,hxsl_TGlobal.Cos,hxsl_TGlobal.Tan,hxsl_TGlobal.Asin,hxsl_TGlobal.Acos,hxsl_TGlobal.Atan,hxsl_TGlobal.Pow,hxsl_TGlobal.Exp,hxsl_TGlobal.Log,hxsl_TGlobal.Exp2,hxsl_TGlobal.Log2,hxsl_TGlobal.Sqrt,hxsl_TGlobal.Inversesqrt,hxsl_TGlobal.Abs,hxsl_TGlobal.Sign,hxsl_TGlobal.Floor,hxsl_TGlobal.Ceil,hxsl_TGlobal.Fract,hxsl_TGlobal.Mod,hxsl_TGlobal.Min,hxsl_TGlobal.Max,hxsl_TGlobal.Clamp,hxsl_TGlobal.Mix,hxsl_TGlobal.Step,hxsl_TGlobal.Smoothstep,hxsl_TGlobal.Length,hxsl_TGlobal.Distance,hxsl_TGlobal.Dot,hxsl_TGlobal.Cross,hxsl_TGlobal.Normalize,hxsl_TGlobal.LReflect,hxsl_TGlobal.Texture,hxsl_TGlobal.TextureLod,hxsl_TGlobal.Texel,hxsl_TGlobal.TextureSize,hxsl_TGlobal.ToInt,hxsl_TGlobal.ToFloat,hxsl_TGlobal.ToBool,hxsl_TGlobal.Vec2,hxsl_TGlobal.Vec3,hxsl_TGlobal.Vec4,hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4,hxsl_TGlobal.BVec2,hxsl_TGlobal.BVec3,hxsl_TGlobal.BVec4,hxsl_TGlobal.Mat2,hxsl_TGlobal.Mat3,hxsl_TGlobal.Mat4,hxsl_TGlobal.Mat3x4,hxsl_TGlobal.Saturate,hxsl_TGlobal.Pack,hxsl_TGlobal.Unpack,hxsl_TGlobal.PackNormal,hxsl_TGlobal.UnpackNormal,hxsl_TGlobal.ScreenToUv,hxsl_TGlobal.UvToScreen,hxsl_TGlobal.DFdx,hxsl_TGlobal.DFdy,hxsl_TGlobal.Fwidth,hxsl_TGlobal.ChannelRead,hxsl_TGlobal.ChannelReadLod,hxsl_TGlobal.ChannelFetch,hxsl_TGlobal.ChannelTextureSize,hxsl_TGlobal.Trace,hxsl_TGlobal.VertexID,hxsl_TGlobal.InstanceID,hxsl_TGlobal.FragCoord,hxsl_TGlobal.FrontFacing];
var hxsl_Component = $hxEnums["hxsl.Component"] = { __ename__:true,__constructs__:null
	,X: {_hx_name:"X",_hx_index:0,__enum__:"hxsl.Component",toString:$estr}
	,Y: {_hx_name:"Y",_hx_index:1,__enum__:"hxsl.Component",toString:$estr}
	,Z: {_hx_name:"Z",_hx_index:2,__enum__:"hxsl.Component",toString:$estr}
	,W: {_hx_name:"W",_hx_index:3,__enum__:"hxsl.Component",toString:$estr}
};
hxsl_Component.__constructs__ = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
hxsl_Component.__empty_constructs__ = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
var hxsl_TExprDef = $hxEnums["hxsl.TExprDef"] = { __ename__:true,__constructs__:null
	,TConst: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TConst",$_.__params__ = ["c"],$_)
	,TVar: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TVar",$_.__params__ = ["v"],$_)
	,TGlobal: ($_=function(g) { return {_hx_index:2,g:g,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TGlobal",$_.__params__ = ["g"],$_)
	,TParenthesis: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TParenthesis",$_.__params__ = ["e"],$_)
	,TBlock: ($_=function(el) { return {_hx_index:4,el:el,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TBlock",$_.__params__ = ["el"],$_)
	,TBinop: ($_=function(op,e1,e2) { return {_hx_index:5,op:op,e1:e1,e2:e2,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TBinop",$_.__params__ = ["op","e1","e2"],$_)
	,TUnop: ($_=function(op,e1) { return {_hx_index:6,op:op,e1:e1,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TUnop",$_.__params__ = ["op","e1"],$_)
	,TVarDecl: ($_=function(v,init) { return {_hx_index:7,v:v,init:init,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TVarDecl",$_.__params__ = ["v","init"],$_)
	,TCall: ($_=function(e,args) { return {_hx_index:8,e:e,args:args,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TCall",$_.__params__ = ["e","args"],$_)
	,TSwiz: ($_=function(e,regs) { return {_hx_index:9,e:e,regs:regs,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TSwiz",$_.__params__ = ["e","regs"],$_)
	,TIf: ($_=function(econd,eif,eelse) { return {_hx_index:10,econd:econd,eif:eif,eelse:eelse,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TIf",$_.__params__ = ["econd","eif","eelse"],$_)
	,TDiscard: {_hx_name:"TDiscard",_hx_index:11,__enum__:"hxsl.TExprDef",toString:$estr}
	,TReturn: ($_=function(e) { return {_hx_index:12,e:e,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TReturn",$_.__params__ = ["e"],$_)
	,TFor: ($_=function(v,it,loop) { return {_hx_index:13,v:v,it:it,loop:loop,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TFor",$_.__params__ = ["v","it","loop"],$_)
	,TContinue: {_hx_name:"TContinue",_hx_index:14,__enum__:"hxsl.TExprDef",toString:$estr}
	,TBreak: {_hx_name:"TBreak",_hx_index:15,__enum__:"hxsl.TExprDef",toString:$estr}
	,TArray: ($_=function(e,index) { return {_hx_index:16,e:e,index:index,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TArray",$_.__params__ = ["e","index"],$_)
	,TArrayDecl: ($_=function(el) { return {_hx_index:17,el:el,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TArrayDecl",$_.__params__ = ["el"],$_)
	,TSwitch: ($_=function(e,cases,def) { return {_hx_index:18,e:e,cases:cases,def:def,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TSwitch",$_.__params__ = ["e","cases","def"],$_)
	,TWhile: ($_=function(e,loop,normalWhile) { return {_hx_index:19,e:e,loop:loop,normalWhile:normalWhile,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TWhile",$_.__params__ = ["e","loop","normalWhile"],$_)
	,TMeta: ($_=function(m,args,e) { return {_hx_index:20,m:m,args:args,e:e,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TMeta",$_.__params__ = ["m","args","e"],$_)
};
hxsl_TExprDef.__constructs__ = [hxsl_TExprDef.TConst,hxsl_TExprDef.TVar,hxsl_TExprDef.TGlobal,hxsl_TExprDef.TParenthesis,hxsl_TExprDef.TBlock,hxsl_TExprDef.TBinop,hxsl_TExprDef.TUnop,hxsl_TExprDef.TVarDecl,hxsl_TExprDef.TCall,hxsl_TExprDef.TSwiz,hxsl_TExprDef.TIf,hxsl_TExprDef.TDiscard,hxsl_TExprDef.TReturn,hxsl_TExprDef.TFor,hxsl_TExprDef.TContinue,hxsl_TExprDef.TBreak,hxsl_TExprDef.TArray,hxsl_TExprDef.TArrayDecl,hxsl_TExprDef.TSwitch,hxsl_TExprDef.TWhile,hxsl_TExprDef.TMeta];
hxsl_TExprDef.__empty_constructs__ = [hxsl_TExprDef.TDiscard,hxsl_TExprDef.TContinue,hxsl_TExprDef.TBreak];
var hxsl_Tools = function() { };
$hxClasses["hxsl.Tools"] = hxsl_Tools;
hxsl_Tools.__name__ = "hxsl.Tools";
hxsl_Tools.allocVarId = function() {
	return ++hxsl_Tools.UID;
};
hxsl_Tools.getName = function(v) {
	if(v.qualifiers == null) {
		return v.name;
	}
	var _g = 0;
	var _g1 = v.qualifiers;
	while(_g < _g1.length) {
		var q = _g1[_g];
		++_g;
		if(q._hx_index == 4) {
			var n = q.n;
			return n;
		}
	}
	return v.name;
};
hxsl_Tools.getConstBits = function(v) {
	var _g = v.type;
	switch(_g._hx_index) {
	case 1:
		var _g1 = 0;
		var _g2 = v.qualifiers;
		while(_g1 < _g2.length) {
			var q = _g2[_g1];
			++_g1;
			if(q._hx_index == 0) {
				var n = q.max;
				if(n != null) {
					var bits = 0;
					while(n >= 1 << bits) ++bits;
					return bits;
				}
				return 8;
			}
		}
		break;
	case 2:
		return 1;
	case 17:
		var _g1 = _g.size;
		return 3 + hxsl_Tools.MAX_CHANNELS_BITS;
	default:
	}
	return 0;
};
hxsl_Tools.isConst = function(v) {
	var _g = v.type;
	var tmp;
	if(_g._hx_index == 17) {
		var _g1 = _g.size;
		tmp = true;
	} else {
		tmp = false;
	}
	if(tmp) {
		return true;
	}
	if(v.qualifiers != null) {
		var _g = 0;
		var _g1 = v.qualifiers;
		while(_g < _g1.length) {
			var q = _g1[_g];
			++_g;
			if(q._hx_index == 0) {
				var _g2 = q.max;
				return true;
			}
		}
	}
	return false;
};
hxsl_Tools.hasQualifier = function(v,q) {
	if(v.qualifiers != null) {
		var _g = 0;
		var _g1 = v.qualifiers;
		while(_g < _g1.length) {
			var q2 = _g1[_g];
			++_g;
			if(q2 == q) {
				return true;
			}
		}
	}
	return false;
};
hxsl_Tools.hasBorrowQualifier = function(v,path) {
	if(v.qualifiers != null) {
		var _g = 0;
		var _g1 = v.qualifiers;
		while(_g < _g1.length) {
			var q = _g1[_g];
			++_g;
			if(q._hx_index == 11) {
				var s = q.source;
				return path == s;
			}
		}
	}
	return false;
};
hxsl_Tools.isSampler = function(t) {
	switch(t._hx_index) {
	case 10:case 11:case 12:
		return true;
	case 17:
		var _g = t.size;
		return true;
	default:
		return false;
	}
};
hxsl_Tools.toString = function(t) {
	switch(t._hx_index) {
	case 5:
		var size = t.size;
		var t1 = t.t;
		var prefix;
		switch(t1._hx_index) {
		case 0:
			prefix = "I";
			break;
		case 1:
			prefix = "";
			break;
		case 2:
			prefix = "B";
			break;
		}
		return prefix + "Vec" + size;
	case 9:
		var n = t.size;
		return "Bytes" + n;
	case 13:
		var vl = t.vl;
		var _g = [];
		var _g1 = 0;
		while(_g1 < vl.length) {
			var v = vl[_g1];
			++_g1;
			_g.push(v.name + " : " + hxsl_Tools.toString(v.type));
		}
		return "{" + _g.join(",") + "}";
	case 15:
		var t1 = t.t;
		var s = t.size;
		var tmp = hxsl_Tools.toString(t1) + "[";
		var tmp1;
		switch(s._hx_index) {
		case 0:
			var i = s.v;
			tmp1 = "" + i;
			break;
		case 1:
			var v = s.v;
			tmp1 = v.name;
			break;
		}
		return tmp + tmp1 + "]";
	case 16:
		var t1 = t.t;
		var s = t.size;
		var tmp = "buffer " + hxsl_Tools.toString(t1) + "[";
		var tmp1;
		switch(s._hx_index) {
		case 0:
			var i = s.v;
			tmp1 = "" + i;
			break;
		case 1:
			var v = s.v;
			tmp1 = v.name;
			break;
		}
		return tmp + tmp1 + "]";
	default:
		return HxOverrides.substr($hxEnums[t.__enum__].__constructs__[t._hx_index]._hx_name,1,null);
	}
};
hxsl_Tools.hasSideEffect = function(e) {
	var _g = e.e;
	switch(_g._hx_index) {
	case 0:
		var _g1 = _g.c;
		return false;
	case 1:
		var _g1 = _g.v;
		return false;
	case 2:
		var _g1 = _g.g;
		return false;
	case 3:
		var e = _g.e;
		return hxsl_Tools.hasSideEffect(e);
	case 4:
		var el = _g.el;
		var _g1 = 0;
		while(_g1 < el.length) {
			var e = el[_g1];
			++_g1;
			if(hxsl_Tools.hasSideEffect(e)) {
				return true;
			}
		}
		return false;
	case 5:
		var _g1 = _g.op;
		var _g2 = _g.e1;
		var _g3 = _g.e2;
		switch(_g1._hx_index) {
		case 4:
			return true;
		case 20:
			var _g4 = _g1.op;
			return true;
		default:
			var e1 = _g2;
			var e2 = _g3;
			if(!hxsl_Tools.hasSideEffect(e1)) {
				return hxsl_Tools.hasSideEffect(e2);
			} else {
				return true;
			}
		}
		break;
	case 6:
		var _g1 = _g.op;
		var e1 = _g.e1;
		return hxsl_Tools.hasSideEffect(e1);
	case 7:
		var _g1 = _g.v;
		var _g1 = _g.init;
		return true;
	case 8:
		var e = _g.e;
		var pl = _g.args;
		var _g1 = e.e;
		var tmp;
		if(_g1._hx_index == 2) {
			var _g2 = _g1.g;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			return true;
		}
		var _g1 = 0;
		while(_g1 < pl.length) {
			var p = pl[_g1];
			++_g1;
			if(hxsl_Tools.hasSideEffect(p)) {
				return true;
			}
		}
		return false;
	case 9:
		var _g1 = _g.regs;
		var e = _g.e;
		return hxsl_Tools.hasSideEffect(e);
	case 10:
		var econd = _g.econd;
		var eif = _g.eif;
		var eelse = _g.eelse;
		if(!(hxsl_Tools.hasSideEffect(econd) || hxsl_Tools.hasSideEffect(eif))) {
			if(eelse != null) {
				return hxsl_Tools.hasSideEffect(eelse);
			} else {
				return false;
			}
		} else {
			return true;
		}
		break;
	case 11:case 14:case 15:
		return true;
	case 12:
		var _g1 = _g.e;
		return true;
	case 13:
		var _g1 = _g.v;
		var it = _g.it;
		var loop = _g.loop;
		if(!hxsl_Tools.hasSideEffect(it)) {
			return hxsl_Tools.hasSideEffect(loop);
		} else {
			return true;
		}
		break;
	case 16:
		var e = _g.e;
		var index = _g.index;
		if(!hxsl_Tools.hasSideEffect(e)) {
			return hxsl_Tools.hasSideEffect(index);
		} else {
			return true;
		}
		break;
	case 17:
		var el = _g.el;
		var _g1 = 0;
		while(_g1 < el.length) {
			var e = el[_g1];
			++_g1;
			if(hxsl_Tools.hasSideEffect(e)) {
				return true;
			}
		}
		return false;
	case 18:
		var e = _g.e;
		var cases = _g.cases;
		var def = _g.def;
		var _g1 = 0;
		while(_g1 < cases.length) {
			var c = cases[_g1];
			++_g1;
			var _g2 = 0;
			var _g3 = c.values;
			while(_g2 < _g3.length) {
				var v = _g3[_g2];
				++_g2;
				if(hxsl_Tools.hasSideEffect(v)) {
					return true;
				}
			}
			if(hxsl_Tools.hasSideEffect(c.expr)) {
				return true;
			}
		}
		if(!hxsl_Tools.hasSideEffect(e)) {
			if(def != null) {
				return hxsl_Tools.hasSideEffect(def);
			} else {
				return false;
			}
		} else {
			return true;
		}
		break;
	case 19:
		var _g1 = _g.normalWhile;
		var e = _g.e;
		var loop = _g.loop;
		if(!hxsl_Tools.hasSideEffect(e)) {
			return hxsl_Tools.hasSideEffect(loop);
		} else {
			return true;
		}
		break;
	case 20:
		var _g1 = _g.m;
		var _g1 = _g.args;
		var e = _g.e;
		return hxsl_Tools.hasSideEffect(e);
	}
};
hxsl_Tools.iter = function(e,f) {
	var _g = e.e;
	switch(_g._hx_index) {
	case 0:
		var _g1 = _g.c;
		break;
	case 1:
		var _g1 = _g.v;
		break;
	case 2:
		var _g1 = _g.g;
		break;
	case 3:
		var e = _g.e;
		f(e);
		break;
	case 4:
		var el = _g.el;
		var _g1 = 0;
		while(_g1 < el.length) {
			var e = el[_g1];
			++_g1;
			f(e);
		}
		break;
	case 5:
		var _g1 = _g.op;
		var e1 = _g.e1;
		var e2 = _g.e2;
		f(e1);
		f(e2);
		break;
	case 6:
		var _g1 = _g.op;
		var e1 = _g.e1;
		f(e1);
		break;
	case 7:
		var _g1 = _g.v;
		var init = _g.init;
		if(init != null) {
			f(init);
		}
		break;
	case 8:
		var e = _g.e;
		var args = _g.args;
		f(e);
		var _g1 = 0;
		while(_g1 < args.length) {
			var a = args[_g1];
			++_g1;
			f(a);
		}
		break;
	case 9:
		var _g1 = _g.regs;
		var e = _g.e;
		f(e);
		break;
	case 10:
		var econd = _g.econd;
		var eif = _g.eif;
		var eelse = _g.eelse;
		f(econd);
		f(eif);
		if(eelse != null) {
			f(eelse);
		}
		break;
	case 11:case 14:case 15:
		break;
	case 12:
		var e = _g.e;
		if(e != null) {
			f(e);
		}
		break;
	case 13:
		var _g1 = _g.v;
		var it = _g.it;
		var loop = _g.loop;
		f(it);
		f(loop);
		break;
	case 16:
		var e = _g.e;
		var index = _g.index;
		f(e);
		f(index);
		break;
	case 17:
		var el = _g.el;
		var _g1 = 0;
		while(_g1 < el.length) {
			var e = el[_g1];
			++_g1;
			f(e);
		}
		break;
	case 18:
		var e = _g.e;
		var cases = _g.cases;
		var def = _g.def;
		f(e);
		var _g1 = 0;
		while(_g1 < cases.length) {
			var c = cases[_g1];
			++_g1;
			var _g2 = 0;
			var _g3 = c.values;
			while(_g2 < _g3.length) {
				var v = _g3[_g2];
				++_g2;
				f(v);
			}
			f(c.expr);
		}
		if(def != null) {
			f(def);
		}
		break;
	case 19:
		var _g1 = _g.normalWhile;
		var e = _g.e;
		var loop = _g.loop;
		f(e);
		f(loop);
		break;
	case 20:
		var _g1 = _g.m;
		var _g1 = _g.args;
		var e = _g.e;
		f(e);
		break;
	}
};
hxsl_Tools.map = function(e,f) {
	var ed;
	var _g = e.e;
	switch(_g._hx_index) {
	case 0:
		var _g1 = _g.c;
		ed = e.e;
		break;
	case 1:
		var _g1 = _g.v;
		ed = e.e;
		break;
	case 2:
		var _g1 = _g.g;
		ed = e.e;
		break;
	case 3:
		var e1 = _g.e;
		ed = hxsl_TExprDef.TParenthesis(f(e1));
		break;
	case 4:
		var el = _g.el;
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < el.length) {
			var e1 = el[_g2];
			++_g2;
			_g1.push(f(e1));
		}
		ed = hxsl_TExprDef.TBlock(_g1);
		break;
	case 5:
		var op = _g.op;
		var e1 = _g.e1;
		var e2 = _g.e2;
		ed = hxsl_TExprDef.TBinop(op,f(e1),f(e2));
		break;
	case 6:
		var op = _g.op;
		var e1 = _g.e1;
		ed = hxsl_TExprDef.TUnop(op,f(e1));
		break;
	case 7:
		var v = _g.v;
		var init = _g.init;
		ed = hxsl_TExprDef.TVarDecl(v,init != null ? f(init) : null);
		break;
	case 8:
		var e1 = _g.e;
		var args = _g.args;
		var ed1 = f(e1);
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < args.length) {
			var a = args[_g2];
			++_g2;
			_g1.push(f(a));
		}
		ed = hxsl_TExprDef.TCall(ed1,_g1);
		break;
	case 9:
		var e1 = _g.e;
		var c = _g.regs;
		ed = hxsl_TExprDef.TSwiz(f(e1),c);
		break;
	case 10:
		var econd = _g.econd;
		var eif = _g.eif;
		var eelse = _g.eelse;
		ed = hxsl_TExprDef.TIf(f(econd),f(eif),eelse != null ? f(eelse) : null);
		break;
	case 11:case 14:case 15:
		ed = e.e;
		break;
	case 12:
		var e1 = _g.e;
		ed = hxsl_TExprDef.TReturn(e1 != null ? f(e1) : null);
		break;
	case 13:
		var v = _g.v;
		var it = _g.it;
		var loop = _g.loop;
		ed = hxsl_TExprDef.TFor(v,f(it),f(loop));
		break;
	case 16:
		var e1 = _g.e;
		var index = _g.index;
		ed = hxsl_TExprDef.TArray(f(e1),f(index));
		break;
	case 17:
		var el = _g.el;
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < el.length) {
			var e1 = el[_g2];
			++_g2;
			_g1.push(f(e1));
		}
		ed = hxsl_TExprDef.TArrayDecl(_g1);
		break;
	case 18:
		var e1 = _g.e;
		var cases = _g.cases;
		var def = _g.def;
		var ed1 = f(e1);
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < cases.length) {
			var c = cases[_g2];
			++_g2;
			var _g3 = [];
			var _g4 = 0;
			var _g5 = c.values;
			while(_g4 < _g5.length) {
				var v = _g5[_g4];
				++_g4;
				_g3.push(f(v));
			}
			_g1.push({ values : _g3, expr : f(c.expr)});
		}
		ed = hxsl_TExprDef.TSwitch(ed1,_g1,def == null ? null : f(def));
		break;
	case 19:
		var e1 = _g.e;
		var loop = _g.loop;
		var normalWhile = _g.normalWhile;
		ed = hxsl_TExprDef.TWhile(f(e1),f(loop),normalWhile);
		break;
	case 20:
		var m = _g.m;
		var args = _g.args;
		var e1 = _g.e;
		ed = hxsl_TExprDef.TMeta(m,args,f(e1));
		break;
	}
	return { e : ed, t : e.t, p : e.p};
};
hxsl_Tools.size = function(t) {
	switch(t._hx_index) {
	case 0:
		return 0;
	case 1:case 3:
		return 1;
	case 2:case 4:case 10:case 11:case 12:
		return 0;
	case 5:
		var _g = t.t;
		var n = t.size;
		return n;
	case 6:
		return 9;
	case 7:
		return 16;
	case 8:
		return 12;
	case 9:
		var s = t.size;
		return s;
	case 13:
		var vl = t.vl;
		var s = 0;
		var _g = 0;
		while(_g < vl.length) {
			var v = vl[_g];
			++_g;
			s += hxsl_Tools.size(v.type);
		}
		return s;
	case 14:
		var _g = t.variants;
		return 0;
	case 15:
		var _g = t.t;
		var _g1 = t.size;
		switch(_g1._hx_index) {
		case 0:
			var v = _g1.v;
			var t1 = _g;
			return hxsl_Tools.size(t1) * v;
		case 1:
			var _g = _g1.v;
			return 0;
		}
		break;
	case 16:
		var _g = t.size;
		if(_g._hx_index == 0) {
			var v = _g.v;
			var t1 = t.t;
			return hxsl_Tools.size(t1) * v;
		} else {
			return 0;
		}
		break;
	case 17:
		var n = t.size;
		return n;
	case 18:
		return 4;
	}
};
var hxsl_Tools2 = function() { };
$hxClasses["hxsl.Tools2"] = hxsl_Tools2;
hxsl_Tools2.__name__ = "hxsl.Tools2";
hxsl_Tools2.toString = function(g) {
	var n = $hxEnums[g.__enum__].__constructs__[g._hx_index]._hx_name;
	return n.charAt(0).toLowerCase() + HxOverrides.substr(n,1,null);
};
var hxsl_BatchShader = function() {
	this.Batch_Count__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["hxsl.BatchShader"] = hxsl_BatchShader;
hxsl_BatchShader.__name__ = "hxsl.BatchShader";
hxsl_BatchShader.__super__ = hxsl_Shader;
hxsl_BatchShader.prototype = $extend(hxsl_Shader.prototype,{
	get_Batch_HasOffset: function() {
		return this.Batch_HasOffset__;
	}
	,set_Batch_HasOffset: function(_v) {
		this.constModified = true;
		return this.Batch_HasOffset__ = _v;
	}
	,get_Batch_Count: function() {
		return this.Batch_Count__;
	}
	,set_Batch_Count: function(_v) {
		this.constModified = true;
		return this.Batch_Count__ = _v;
	}
	,get_Batch_Buffer: function() {
		return this.Batch_Buffer__;
	}
	,set_Batch_Buffer: function(_v) {
		return this.Batch_Buffer__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.Batch_HasOffset__) {
			this.constBits |= 1;
		}
		var v = this.Batch_Count__;
		if(v >>> 17 != 0) {
			throw haxe_Exception.thrown("Batch_Count" + " is out of range " + v + ">" + 131071);
		}
		this.constBits |= v << 1;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.Batch_HasOffset__;
		case 1:
			return this.Batch_Count__;
		case 2:
			return this.Batch_Buffer__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: hxsl_BatchShader
});
var hxsl_SearchMap = function() {
	this.minId = 0;
	this.nexts = [];
};
$hxClasses["hxsl.SearchMap"] = hxsl_SearchMap;
hxsl_SearchMap.__name__ = "hxsl.SearchMap";
hxsl_SearchMap.prototype = {
	set: function(id,s) {
		if(this.minId == 0) {
			this.minId = id;
			this.nexts = [s];
			return;
		}
		var offset = id - this.minId;
		if(offset < 0) {
			var n = [];
			var _g = 0;
			var _g1 = this.nexts.length;
			while(_g < _g1) {
				var i = _g++;
				n[i - offset] = this.nexts[i];
			}
			this.nexts = n;
			this.minId += offset;
			offset = 0;
		}
		this.nexts[offset] = s;
	}
	,__class__: hxsl_SearchMap
};
var hxsl_Cache = function() {
	this.constsToGlobal = false;
	this.linkCache = new hxsl_SearchMap();
	this.linkShaders = new haxe_ds_StringMap();
	this.batchShaders = new haxe_ds_ObjectMap();
	this.byID = new haxe_ds_StringMap();
};
$hxClasses["hxsl.Cache"] = hxsl_Cache;
hxsl_Cache.__name__ = "hxsl.Cache";
hxsl_Cache.get = function() {
	var c = hxsl_Cache.INST;
	if(c == null) {
		c = new hxsl_Cache();
		hxsl_Cache.INST = c;
	}
	return c;
};
hxsl_Cache.prototype = {
	getLinkShader: function(vars) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < vars.length) {
			var v = vars[_g1];
			++_g1;
			_g.push(Std.string(v));
		}
		var key = _g.join(",");
		var shader = this.linkShaders.h[key];
		if(shader != null) {
			return shader;
		}
		var s = new hxsl_SharedShader("");
		var id = HxOverrides.substr(haxe_crypto_Md5.encode(key),0,8);
		s.data = { name : "shaderLinker_" + id, vars : [], funs : []};
		var pos = null;
		var outVars_h = Object.create(null);
		var outputCount = 0;
		var tvec4 = hxsl_Type.TVec(4,hxsl_VecType.VFloat);
		var makeVec = function(g,size,args,makeOutExpr) {
			var out = [];
			var rem = size;
			var _g = 0;
			var _g1 = args.length;
			while(_g < _g1) {
				var i = _g++;
				var e = makeOutExpr(args[args.length - 1 - i],rem - (args.length - 1 - i));
				rem -= hxsl_Tools.size(e.t);
				out.unshift(e);
			}
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(g), t : hxsl_Type.TVoid, p : pos},out), t : hxsl_Type.TVec(size,hxsl_VecType.VFloat), p : pos};
		};
		var makeVar = function(name,t,parent) {
			var path = parent == null ? name : hxsl_Tools.getName(parent) + "." + name;
			var v = outVars_h[path];
			if(v != null) {
				return v;
			}
			v = { id : hxsl_Tools.allocVarId(), name : name, type : t, kind : hxsl_VarKind.Var, parent : parent};
			if(parent == null) {
				s.data.vars.push(v);
			} else {
				var _g = parent.type;
				if(_g._hx_index == 13) {
					var vl = _g.vl;
					vl.push(v);
				} else {
					throw haxe_Exception.thrown("assert");
				}
			}
			outVars_h[path] = v;
			return v;
		};
		var makeOutExpr = null;
		makeOutExpr = function(v,rem) {
			switch(v._hx_index) {
			case 0:
				var v1 = v.v;
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CFloat(v1)), t : hxsl_Type.TFloat, p : pos};
			case 1:
				var vname = v.v;
				var size = v.size;
				var v1 = outVars_h[vname];
				if(v1 != null) {
					return { e : hxsl_TExprDef.TVar(v1), t : v1.type, p : pos};
				}
				var path = vname.split(".");
				var parent = null;
				while(path.length > 1) parent = makeVar(path.shift(),hxsl_Type.TStruct([]),parent);
				if(size != null) {
					rem = size;
				}
				v1 = makeVar(path.shift(),rem == 1 ? hxsl_Type.TFloat : hxsl_Type.TVec(rem,hxsl_VecType.VFloat),parent);
				return { e : hxsl_TExprDef.TVar(v1), t : v1.type, p : pos};
			case 2:
				var v1 = v.v;
				return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.PackNormal), t : hxsl_Type.TVoid, p : pos},[makeOutExpr(v1,3)]), t : tvec4, p : pos};
			case 3:
				var v1 = v.v;
				return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Pack), t : hxsl_Type.TVoid, p : pos},[makeOutExpr(v1,1)]), t : tvec4, p : pos};
			case 4:
				var args = v.a;
				return makeVec(hxsl_TGlobal.Vec2,2,args,makeOutExpr);
			case 5:
				var args = v.a;
				return makeVec(hxsl_TGlobal.Vec3,3,args,makeOutExpr);
			case 6:
				var args = v.a;
				return makeVec(hxsl_TGlobal.Vec4,4,args,makeOutExpr);
			case 7:
				var v1 = v.a;
				var comps = v.swiz;
				return { e : hxsl_TExprDef.TSwiz(makeOutExpr(v1,4),comps), t : hxsl_Type.TVec(comps.length,hxsl_VecType.VFloat), p : pos};
			}
		};
		var makeOutput = function(v) {
			outputCount += 1;
			var ov = { id : hxsl_Tools.allocVarId(), type : tvec4, name : "OUTPUT" + (outputCount - 1), kind : hxsl_VarKind.Output};
			s.data.vars.push(ov);
			return { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(ov), t : tvec4, p : pos},makeOutExpr(v,4)), t : hxsl_Type.TVoid, p : pos};
		};
		var defineFun = function(kind,vars) {
			var fv = { id : hxsl_Tools.allocVarId(), type : hxsl_Type.TFun([]), name : ("" + Std.string(kind)).toLowerCase(), kind : hxsl_VarKind.Function};
			var _g = [];
			var _g1 = 0;
			while(_g1 < vars.length) {
				var v = vars[_g1];
				++_g1;
				_g.push(makeOutput(v));
			}
			var f = { kind : kind, ref : fv, args : [], ret : hxsl_Type.TVoid, expr : { e : hxsl_TExprDef.TBlock(_g), p : pos, t : hxsl_Type.TVoid}};
			s.data.funs.push(f);
		};
		defineFun(hxsl_FunctionKind.Vertex,[hxsl_Output.Value("output.position")]);
		defineFun(hxsl_FunctionKind.Fragment,vars);
		shader = Object.create(hxsl_Shader.prototype);
		shader.shader = s;
		this.linkShaders.h[key] = shader;
		shader.updateConstantsFinal(null);
		return shader;
	}
	,link: function(shaders,batchMode) {
		var c = this.linkCache;
		var _g_l = shaders;
		var _g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			var i = s1.instance;
			var cs = c.nexts[i.id - c.minId];
			if(cs == null) {
				cs = new hxsl_SearchMap();
				c.set(i.id,cs);
			}
			c = cs;
		}
		if(c.linked == null) {
			c.linked = this.compileRuntimeShader(shaders,batchMode);
		}
		return c.linked;
	}
	,compileRuntimeShader: function(shaders,batchMode) {
		var shaderDatas = [];
		var index = 0;
		var _g_l = shaders;
		var _g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			var i = s1.instance;
			shaderDatas.push({ inst : i, p : s1.priority, index : index++});
		}
		shaderDatas.reverse();
		haxe_ds_ArraySort.sort(shaderDatas,function(s1,s2) {
			return s2.p - s1.p;
		});
		var linker = new hxsl_Linker(batchMode);
		var s;
		try {
			var _g = [];
			var _g1 = 0;
			while(_g1 < shaderDatas.length) {
				var s1 = shaderDatas[_g1];
				++_g1;
				_g.push(s1.inst.shader);
			}
			s = linker.link(_g);
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof hxsl_Error)) {
				var e = _g1;
				var _g1 = [];
				var _g2 = 0;
				while(_g2 < shaderDatas.length) {
					var s1 = shaderDatas[_g2];
					++_g2;
					_g1.push(hxsl_Printer.shaderToString(s1.inst.shader));
				}
				var shaders1 = _g1;
				e.msg += "\n\nin\n\n" + shaders1.join("\n-----\n");
				throw haxe_Exception.thrown(e);
			} else {
				throw _g;
			}
		}
		if(batchMode) {
			var checkRec = null;
			checkRec = function(v) {
				if(v.qualifiers != null && v.qualifiers.indexOf(hxsl_VarQualifier.PerObject) >= 0) {
					if(v.qualifiers.length == 1) {
						v.qualifiers = null;
					} else {
						v.qualifiers = v.qualifiers.slice();
						HxOverrides.remove(v.qualifiers,hxsl_VarQualifier.PerObject);
					}
					if(v.kind != hxsl_VarKind.Var) {
						v.kind = hxsl_VarKind.Local;
					}
				}
				var _g = v.type;
				if(_g._hx_index == 13) {
					var vl = _g.vl;
					var _g = 0;
					while(_g < vl.length) {
						var v = vl[_g];
						++_g;
						checkRec(v);
					}
				}
			};
			var _g = 0;
			var _g1 = s.vars;
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				checkRec(v);
			}
		}
		var paramVars = new haxe_ds_IntMap();
		var _g = 0;
		var _g1 = linker.allVars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			if(v.v.kind == hxsl_VarKind.Param) {
				var _g2 = v.v.type;
				if(_g2._hx_index == 13) {
					var _g3 = _g2.vl;
					continue;
				}
				var inf = shaderDatas[v.instanceIndex];
				paramVars.h[v.id] = { instance : inf.index, index : inf.inst.params.h[v.merged[0].id]};
			}
		}
		var prev = s;
		var s1;
		try {
			s1 = new hxsl_Splitter().split(s);
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof hxsl_Error)) {
				var e = _g1;
				e.msg += "\n\nin\n\n" + hxsl_Printer.shaderToString(s);
				throw haxe_Exception.thrown(e);
			} else {
				throw _g;
			}
		}
		var prev = s1;
		var s = new hxsl_Dce().dce(s1.vertex,s1.fragment);
		var r = this.buildRuntimeShader(s.vertex,s.fragment,paramVars);
		var _g = [];
		var _g4_l = shaders;
		var _g4_last = null;
		while(_g4_l != _g4_last) {
			var s = _g4_l.s;
			_g4_l = _g4_l.next;
			var s1 = s;
			_g.push(new hxsl_ShaderInstanceDesc(s1.shader,s1.constBits));
		}
		r.spec = { instances : _g, signature : null};
		var _g = 0;
		var _g1 = shaderDatas.length;
		while(_g < _g1) {
			var i = _g++;
			var s = shaderDatas[shaderDatas.length - 1 - i];
			r.spec.instances[s.index].index = i;
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = r.spec.instances;
		while(_g1 < _g2.length) {
			var i = _g2[_g1];
			++_g1;
			_g.push(i.shader.data.name + "_" + i.bits + "_" + i.index);
		}
		var signParts = _g;
		var tmp = signParts.join(":");
		r.spec.signature = haxe_crypto_Md5.encode(tmp);
		r.signature = haxe_crypto_Md5.encode(hxsl_Printer.shaderToString(r.vertex.data) + hxsl_Printer.shaderToString(r.fragment.data));
		r.batchMode = batchMode;
		var r2 = this.byID.h[r.signature];
		if(r2 != null) {
			r.id = r2.id;
		} else {
			this.byID.h[r.signature] = r;
		}
		return r;
	}
	,buildRuntimeShader: function(vertex,fragment,paramVars) {
		var r = new hxsl_RuntimeShader();
		r.vertex = this.flattenShader(vertex,hxsl_FunctionKind.Vertex,paramVars);
		r.vertex.vertex = true;
		r.fragment = this.flattenShader(fragment,hxsl_FunctionKind.Fragment,paramVars);
		r.globals = new haxe_ds_IntMap();
		this.initGlobals(r,r.vertex);
		this.initGlobals(r,r.fragment);
		return r;
	}
	,initGlobals: function(r,s) {
		var p = s.globals;
		while(p != null) {
			r.globals.h[p.gid] = true;
			p = p.next;
		}
		var p = s.params;
		while(p != null) {
			if(p.perObjectGlobal != null) {
				r.globals.h[p.perObjectGlobal.gid] = true;
			}
			p = p.next;
		}
	}
	,getPath: function(v) {
		if(v.parent == null) {
			return v.name;
		}
		return this.getPath(v.parent) + "." + v.name;
	}
	,flattenShader: function(s,kind,params) {
		var flat = new hxsl_Flatten();
		var c = new hxsl_RuntimeShaderData();
		var data = flat.flatten(s,kind,this.constsToGlobal);
		var textures = [];
		c.consts = flat.consts;
		c.texturesCount = 0;
		var g = flat.allocData.keys();
		while(g.hasNext()) {
			var g1 = g.next();
			var alloc = flat.allocData.h[g1.__id__];
			switch(g1.kind._hx_index) {
			case 0:
				var _g = [];
				var _g1 = 0;
				while(_g1 < alloc.length) {
					var a = alloc[_g1];
					++_g1;
					if(a.v != null) {
						_g.push(new hxsl_AllocGlobal(a.pos,this.getPath(a.v),a.v.type));
					}
				}
				var out = _g;
				var _g2 = 0;
				var _g3 = out.length - 1;
				while(_g2 < _g3) {
					var i = _g2++;
					out[i].next = out[i + 1];
				}
				var _g4 = g1.type;
				if(_g4._hx_index == 15) {
					var _g5 = _g4.t;
					var _g6 = _g4.size;
					if(_g5._hx_index == 5) {
						if(_g5.size == 4) {
							if(_g5.t._hx_index == 1) {
								if(_g6._hx_index == 0) {
									var size = _g6.v;
									c.globals = out[0];
									c.globalsSize = size;
								} else {
									throw haxe_Exception.thrown("assert");
								}
							} else {
								throw haxe_Exception.thrown("assert");
							}
						} else {
							throw haxe_Exception.thrown("assert");
						}
					} else {
						throw haxe_Exception.thrown("assert");
					}
				} else {
					throw haxe_Exception.thrown("assert");
				}
				break;
			case 2:
				var out1 = [];
				var count = 0;
				var _g7 = 0;
				while(_g7 < alloc.length) {
					var a1 = alloc[_g7];
					++_g7;
					if(a1.v == null) {
						continue;
					}
					var p = params.h[a1.v.id];
					if(p == null) {
						var ap = new hxsl_AllocParam(a1.v.name,a1.pos,-1,-1,a1.v.type);
						ap.perObjectGlobal = new hxsl_AllocGlobal(-1,this.getPath(a1.v),a1.v.type);
						out1.push(ap);
						++count;
						continue;
					}
					var ap1 = new hxsl_AllocParam(a1.v.name,a1.pos,p.instance,p.index,a1.v.type);
					var _g8 = a1.v.type;
					if(_g8._hx_index == 15) {
						var _g9 = _g8.size;
						var t = _g8.t;
						if(hxsl_Tools.isSampler(t)) {
							ap1.pos = -a1.size;
							count += a1.size;
						} else {
							++count;
						}
					} else {
						++count;
					}
					out1.push(ap1);
				}
				var _g10 = 0;
				var _g11 = out1.length - 1;
				while(_g10 < _g11) {
					var i1 = _g10++;
					out1[i1].next = out1[i1 + 1];
				}
				var _g12 = g1.type;
				if(_g12._hx_index == 15) {
					var _g13 = _g12.t;
					var _g14 = _g12.size;
					var t1 = _g13;
					if(hxsl_Tools.isSampler(t1)) {
						textures.push({ t : t1, all : out1});
						c.texturesCount += count;
					} else {
						switch(_g13._hx_index) {
						case 5:
							if(_g13.size == 4) {
								if(_g13.t._hx_index == 1) {
									if(_g14._hx_index == 0) {
										var size1 = _g14.v;
										c.params = out1[0];
										c.paramsSize = size1;
									} else {
										throw haxe_Exception.thrown("assert");
									}
								} else {
									throw haxe_Exception.thrown("assert");
								}
							} else {
								throw haxe_Exception.thrown("assert");
							}
							break;
						case 16:
							var _g15 = _g13.t;
							var _g16 = _g13.size;
							c.buffers = out1[0];
							c.bufferCount = out1.length;
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
					}
				} else {
					throw haxe_Exception.thrown("assert");
				}
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
		}
		if(textures.length > 0) {
			textures.sort(function(t1,t2) {
				return t1.t._hx_index - t2.t._hx_index;
			});
			c.textures = textures[0].all[0];
			var _g = 1;
			var _g1 = textures.length;
			while(_g < _g1) {
				var i = _g++;
				var prevAll = textures[i - 1].all;
				var prev = prevAll[prevAll.length - 1];
				prev.next = textures[i].all[0];
			}
		}
		if(c.globals == null) {
			c.globalsSize = 0;
		}
		if(c.params == null) {
			c.paramsSize = 0;
		}
		if(c.buffers == null) {
			c.bufferCount = 0;
		}
		c.data = data;
		return c;
	}
	,__class__: hxsl_Cache
};
var hxsl_Channel = $hxEnums["hxsl.Channel"] = { __ename__:true,__constructs__:null
	,Unknown: {_hx_name:"Unknown",_hx_index:0,__enum__:"hxsl.Channel",toString:$estr}
	,R: {_hx_name:"R",_hx_index:1,__enum__:"hxsl.Channel",toString:$estr}
	,G: {_hx_name:"G",_hx_index:2,__enum__:"hxsl.Channel",toString:$estr}
	,B: {_hx_name:"B",_hx_index:3,__enum__:"hxsl.Channel",toString:$estr}
	,A: {_hx_name:"A",_hx_index:4,__enum__:"hxsl.Channel",toString:$estr}
	,PackedFloat: {_hx_name:"PackedFloat",_hx_index:5,__enum__:"hxsl.Channel",toString:$estr}
	,PackedNormal: {_hx_name:"PackedNormal",_hx_index:6,__enum__:"hxsl.Channel",toString:$estr}
};
hxsl_Channel.__constructs__ = [hxsl_Channel.Unknown,hxsl_Channel.R,hxsl_Channel.G,hxsl_Channel.B,hxsl_Channel.A,hxsl_Channel.PackedFloat,hxsl_Channel.PackedNormal];
hxsl_Channel.__empty_constructs__ = [hxsl_Channel.Unknown,hxsl_Channel.R,hxsl_Channel.G,hxsl_Channel.B,hxsl_Channel.A,hxsl_Channel.PackedFloat,hxsl_Channel.PackedNormal];
var hxsl_Clone = function() {
	this.varMap = new haxe_ds_IntMap();
};
$hxClasses["hxsl.Clone"] = hxsl_Clone;
hxsl_Clone.__name__ = "hxsl.Clone";
hxsl_Clone.shaderData = function(s) {
	return new hxsl_Clone().shader(s);
};
hxsl_Clone.prototype = {
	tvar: function(v) {
		var v2 = this.varMap.h[v.id];
		if(v2 != null) {
			return v2;
		}
		v2 = { id : hxsl_Tools.allocVarId(), type : v.type, name : v.name, kind : v.kind};
		this.varMap.h[v.id] = v2;
		if(v.parent != null) {
			v2.parent = this.tvar(v.parent);
		}
		if(v.qualifiers != null) {
			v2.qualifiers = v.qualifiers.slice();
		}
		v2.type = this.ttype(v.type);
		return v2;
	}
	,tfun: function(f) {
		var tmp = this.ttype(f.ret);
		var f1 = f.kind;
		var tmp1 = this.tvar(f.ref);
		var _g = [];
		var _g1 = 0;
		var _g2 = f.args;
		while(_g1 < _g2.length) {
			var a = _g2[_g1];
			++_g1;
			_g.push(this.tvar(a));
		}
		return { ret : tmp, kind : f1, ref : tmp1, args : _g, expr : this.texpr(f.expr)};
	}
	,ttype: function(t) {
		switch(t._hx_index) {
		case 13:
			var vl = t.vl;
			var _g = [];
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v = vl[_g1];
				++_g1;
				_g.push(this.tvar(v));
			}
			return hxsl_Type.TStruct(_g);
		case 14:
			var vars = t.variants;
			return hxsl_Type.TFun(vars);
		case 15:
			var t1 = t.t;
			var size = t.size;
			var tmp = this.ttype(t1);
			var tmp1;
			switch(size._hx_index) {
			case 0:
				var _g = size.v;
				tmp1 = size;
				break;
			case 1:
				var v = size.v;
				tmp1 = hxsl_SizeDecl.SVar(this.tvar(v));
				break;
			}
			return hxsl_Type.TArray(tmp,tmp1);
		default:
			return t;
		}
	}
	,texpr: function(e) {
		var e2 = hxsl_Tools.map(e,$bind(this,this.texpr));
		e2.t = this.ttype(e.t);
		var _g = e2.e;
		var tmp;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			tmp = hxsl_TExprDef.TVar(this.tvar(v));
			break;
		case 7:
			var v = _g.v;
			var init = _g.init;
			tmp = hxsl_TExprDef.TVarDecl(this.tvar(v),init);
			break;
		case 13:
			var v = _g.v;
			var it = _g.it;
			var loop = _g.loop;
			tmp = hxsl_TExprDef.TFor(this.tvar(v),it,loop);
			break;
		default:
			tmp = e2.e;
		}
		e2.e = tmp;
		return e2;
	}
	,shader: function(s) {
		var s1 = s.name;
		var _g = [];
		var _g1 = 0;
		var _g2 = s.vars;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			_g.push(this.tvar(v));
		}
		var tmp = _g;
		var _g = [];
		var _g1 = 0;
		var _g2 = s.funs;
		while(_g1 < _g2.length) {
			var f = _g2[_g1];
			++_g1;
			_g.push(this.tfun(f));
		}
		return { name : s1, vars : tmp, funs : _g};
	}
	,__class__: hxsl_Clone
};
var hxsl__$Dce_VarDeps = function(v) {
	this.v = v;
	this.used = false;
	this.deps = new haxe_ds_IntMap();
};
$hxClasses["hxsl._Dce.VarDeps"] = hxsl__$Dce_VarDeps;
hxsl__$Dce_VarDeps.__name__ = "hxsl._Dce.VarDeps";
hxsl__$Dce_VarDeps.prototype = {
	__class__: hxsl__$Dce_VarDeps
};
var hxsl_Dce = function() {
};
$hxClasses["hxsl.Dce"] = hxsl_Dce;
hxsl_Dce.__name__ = "hxsl.Dce";
hxsl_Dce.prototype = {
	dce: function(vertex,fragment) {
		this.used = new haxe_ds_IntMap();
		this.channelVars = [];
		var inputs = [];
		var _g = 0;
		var _g1 = vertex.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			var i = this.get(v);
			if(v.kind == hxsl_VarKind.Input) {
				inputs.push(i);
			}
			if(v.kind == hxsl_VarKind.Output) {
				i.keep = true;
			}
		}
		var _g = 0;
		var _g1 = fragment.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			var i = this.get(v);
			if(v.kind == hxsl_VarKind.Output) {
				i.keep = true;
			}
		}
		var _g = 0;
		var _g1 = vertex.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.check(f.expr,[],[]);
		}
		var _g = 0;
		var _g1 = fragment.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.check(f.expr,[],[]);
		}
		var outExprs = [];
		while(true) {
			var v = this.used.iterator();
			while(v.hasNext()) {
				var v1 = v.next();
				if(v1.keep) {
					this.markRec(v1);
				}
			}
			while(inputs.length > 1 && !inputs[inputs.length - 1].used) inputs.pop();
			var _g = 0;
			while(_g < inputs.length) {
				var v2 = inputs[_g];
				++_g;
				this.markRec(v2);
			}
			outExprs = [];
			var _g1 = 0;
			var _g2 = vertex.funs;
			while(_g1 < _g2.length) {
				var f = _g2[_g1];
				++_g1;
				outExprs.push(this.mapExpr(f.expr,false));
			}
			var _g3 = 0;
			var _g4 = fragment.funs;
			while(_g3 < _g4.length) {
				var f1 = _g4[_g3];
				++_g3;
				outExprs.push(this.mapExpr(f1.expr,false));
			}
			this.markAsKeep = false;
			var _g5 = 0;
			while(_g5 < outExprs.length) {
				var e = outExprs[_g5];
				++_g5;
				this.checkBranches(e);
			}
			if(!this.markAsKeep) {
				break;
			}
		}
		var _g = 0;
		var _g1 = vertex.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f.expr = outExprs.shift();
		}
		var _g = 0;
		var _g1 = fragment.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f.expr = outExprs.shift();
		}
		var v = this.used.iterator();
		while(v.hasNext()) {
			var v1 = v.next();
			if(v1.used) {
				continue;
			}
			if(v1.v.kind == hxsl_VarKind.Input) {
				continue;
			}
			HxOverrides.remove(vertex.vars,v1.v);
			HxOverrides.remove(fragment.vars,v1.v);
		}
		return { fragment : fragment, vertex : vertex};
	}
	,get: function(v) {
		var vd = this.used.h[v.id];
		if(vd == null) {
			vd = new hxsl__$Dce_VarDeps(v);
			this.used.h[v.id] = vd;
		}
		return vd;
	}
	,markRec: function(v) {
		if(v.used) {
			return;
		}
		v.used = true;
		var d = v.deps.iterator();
		while(d.hasNext()) {
			var d1 = d.next();
			this.markRec(d1);
		}
	}
	,link: function(v,writeTo) {
		var vd = this.get(v);
		var _g = 0;
		while(_g < writeTo.length) {
			var w = writeTo[_g];
			++_g;
			if(w == null) {
				if(!vd.keep) {
					vd.keep = true;
					this.markAsKeep = true;
				}
				continue;
			}
			w.deps.h[v.id] = vd;
		}
	}
	,check: function(e,writeTo,isAffected) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			this.link(v,writeTo);
			break;
		case 4:
			var el = _g.el;
			var noWrite = [];
			var _g1 = 0;
			var _g2 = el.length;
			while(_g1 < _g2) {
				var i = _g1++;
				this.check(el[i],i < el.length - 1 ? noWrite : writeTo,isAffected);
			}
			break;
		case 5:
			var _g1 = _g.op;
			var _g2 = _g.e1;
			var _g3 = _g.e2;
			switch(_g1._hx_index) {
			case 4:
				var _g4 = _g2.e;
				var _g5 = _g2.p;
				var _g5 = _g2.t;
				switch(_g4._hx_index) {
				case 1:
					var v = _g4.v;
					var e1 = _g3;
					var v1 = this.get(v);
					writeTo.push(v1);
					this.check(e1,writeTo,isAffected);
					writeTo.pop();
					if(isAffected.indexOf(v1) < 0) {
						isAffected.push(v1);
					}
					break;
				case 9:
					var _g5 = _g4.e;
					var _g6 = _g4.regs;
					var _g4 = _g5.e;
					var _g6 = _g5.p;
					var _g6 = _g5.t;
					if(_g4._hx_index == 1) {
						var v = _g4.v;
						var e1 = _g3;
						var v1 = this.get(v);
						writeTo.push(v1);
						this.check(e1,writeTo,isAffected);
						writeTo.pop();
						if(isAffected.indexOf(v1) < 0) {
							isAffected.push(v1);
						}
					} else {
						var _g4 = $bind(this,this.check);
						var writeTo1 = writeTo;
						var isAffected1 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g4(e,writeTo1,isAffected1);
						});
					}
					break;
				default:
					var _g5 = $bind(this,this.check);
					var writeTo2 = writeTo;
					var isAffected2 = isAffected;
					hxsl_Tools.iter(e,function(e) {
						_g5(e,writeTo2,isAffected2);
					});
				}
				break;
			case 20:
				var _g6 = _g1.op;
				var _g1 = _g2.e;
				var _g6 = _g2.p;
				var _g6 = _g2.t;
				switch(_g1._hx_index) {
				case 1:
					var v = _g1.v;
					var e1 = _g3;
					var v1 = this.get(v);
					writeTo.push(v1);
					this.check(e1,writeTo,isAffected);
					writeTo.pop();
					if(isAffected.indexOf(v1) < 0) {
						isAffected.push(v1);
					}
					break;
				case 9:
					var _g2 = _g1.e;
					var _g6 = _g1.regs;
					var _g1 = _g2.e;
					var _g6 = _g2.p;
					var _g6 = _g2.t;
					if(_g1._hx_index == 1) {
						var v = _g1.v;
						var e1 = _g3;
						var v1 = this.get(v);
						writeTo.push(v1);
						this.check(e1,writeTo,isAffected);
						writeTo.pop();
						if(isAffected.indexOf(v1) < 0) {
							isAffected.push(v1);
						}
					} else {
						var _g1 = $bind(this,this.check);
						var writeTo3 = writeTo;
						var isAffected3 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g1(e,writeTo3,isAffected3);
						});
					}
					break;
				default:
					var _g2 = $bind(this,this.check);
					var writeTo4 = writeTo;
					var isAffected4 = isAffected;
					hxsl_Tools.iter(e,function(e) {
						_g2(e,writeTo4,isAffected4);
					});
				}
				break;
			default:
				var _g3 = $bind(this,this.check);
				var writeTo5 = writeTo;
				var isAffected5 = isAffected;
				hxsl_Tools.iter(e,function(e) {
					_g3(e,writeTo5,isAffected5);
				});
			}
			break;
		case 7:
			var v = _g.v;
			var init = _g.init;
			if(init != null) {
				writeTo.push(this.get(v));
				this.check(init,writeTo,isAffected);
				writeTo.pop();
			} else {
				var _g6 = $bind(this,this.check);
				var writeTo6 = writeTo;
				var isAffected6 = isAffected;
				hxsl_Tools.iter(e,function(e) {
					_g6(e,writeTo6,isAffected6);
				});
			}
			break;
		case 8:
			var _g7 = _g.e;
			var _g8 = _g.args;
			var _g9 = _g7.e;
			var _g10 = _g7.p;
			var _g10 = _g7.t;
			if(_g9._hx_index == 2) {
				switch(_g9.g._hx_index) {
				case 63:
					if(_g8.length == 3) {
						var _g7 = _g8[0];
						var _g9 = _g8[2];
						var _g10 = _g7.e;
						var _g11 = _g7.p;
						var _g11 = _g7.t;
						if(_g10._hx_index == 1) {
							var _g7 = _g9.e;
							var _g11 = _g9.p;
							var _g11 = _g9.t;
							if(_g7._hx_index == 0) {
								var _g9 = _g7.c;
								if(_g9._hx_index == 2) {
									var cid = _g9.v;
									var uv = _g8[1];
									var c = _g10.v;
									this.check(uv,writeTo,isAffected);
									if(this.channelVars[cid] == null) {
										this.channelVars[cid] = c;
										this.link(c,writeTo);
									} else {
										this.link(this.channelVars[cid],writeTo);
									}
								} else {
									var _g7 = $bind(this,this.check);
									var writeTo7 = writeTo;
									var isAffected7 = isAffected;
									hxsl_Tools.iter(e,function(e) {
										_g7(e,writeTo7,isAffected7);
									});
								}
							} else {
								var _g9 = $bind(this,this.check);
								var writeTo8 = writeTo;
								var isAffected8 = isAffected;
								hxsl_Tools.iter(e,function(e) {
									_g9(e,writeTo8,isAffected8);
								});
							}
						} else {
							var _g10 = $bind(this,this.check);
							var writeTo9 = writeTo;
							var isAffected9 = isAffected;
							hxsl_Tools.iter(e,function(e) {
								_g10(e,writeTo9,isAffected9);
							});
						}
					} else {
						var _g11 = $bind(this,this.check);
						var writeTo10 = writeTo;
						var isAffected10 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g11(e,writeTo10,isAffected10);
						});
					}
					break;
				case 64:
					if(_g8.length == 4) {
						var _g12 = _g8[0];
						var _g13 = _g8[3];
						var _g14 = _g12.e;
						var _g15 = _g12.p;
						var _g15 = _g12.t;
						if(_g14._hx_index == 1) {
							var _g12 = _g13.e;
							var _g15 = _g13.p;
							var _g15 = _g13.t;
							if(_g12._hx_index == 0) {
								var _g13 = _g12.c;
								if(_g13._hx_index == 2) {
									var cid = _g13.v;
									var lod = _g8[2];
									var uv = _g8[1];
									var c = _g14.v;
									this.check(uv,writeTo,isAffected);
									this.check(lod,writeTo,isAffected);
									if(this.channelVars[cid] == null) {
										this.channelVars[cid] = c;
										this.link(c,writeTo);
									} else {
										this.link(this.channelVars[cid],writeTo);
									}
								} else {
									var _g8 = $bind(this,this.check);
									var writeTo11 = writeTo;
									var isAffected11 = isAffected;
									hxsl_Tools.iter(e,function(e) {
										_g8(e,writeTo11,isAffected11);
									});
								}
							} else {
								var _g12 = $bind(this,this.check);
								var writeTo12 = writeTo;
								var isAffected12 = isAffected;
								hxsl_Tools.iter(e,function(e) {
									_g12(e,writeTo12,isAffected12);
								});
							}
						} else {
							var _g13 = $bind(this,this.check);
							var writeTo13 = writeTo;
							var isAffected13 = isAffected;
							hxsl_Tools.iter(e,function(e) {
								_g13(e,writeTo13,isAffected13);
							});
						}
					} else {
						var _g14 = $bind(this,this.check);
						var writeTo14 = writeTo;
						var isAffected14 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g14(e,writeTo14,isAffected14);
						});
					}
					break;
				default:
					var _g15 = $bind(this,this.check);
					var writeTo15 = writeTo;
					var isAffected15 = isAffected;
					hxsl_Tools.iter(e,function(e) {
						_g15(e,writeTo15,isAffected15);
					});
				}
			} else {
				var _g16 = $bind(this,this.check);
				var writeTo16 = writeTo;
				var isAffected16 = isAffected;
				hxsl_Tools.iter(e,function(e) {
					_g16(e,writeTo16,isAffected16);
				});
			}
			break;
		case 10:
			var e1 = _g.econd;
			var eif = _g.eif;
			var eelse = _g.eelse;
			var affect = [];
			this.check(eif,writeTo,affect);
			if(eelse != null) {
				this.check(eelse,writeTo,affect);
			}
			var len = affect.length;
			var _g17 = 0;
			while(_g17 < writeTo.length) {
				var v = writeTo[_g17];
				++_g17;
				if(affect.indexOf(v) < 0) {
					affect.push(v);
				}
			}
			this.check(e1,affect,isAffected);
			var _g17 = 0;
			var _g18 = len;
			while(_g17 < _g18) {
				var i = _g17++;
				var v = affect[i];
				if(isAffected.indexOf(v) < 0) {
					isAffected.push(v);
				}
			}
			break;
		case 13:
			var v = _g.v;
			var it = _g.it;
			var loop = _g.loop;
			var affect = [];
			this.check(loop,writeTo,affect);
			this.check(it,affect,isAffected);
			var _g = 0;
			while(_g < affect.length) {
				var v = affect[_g];
				++_g;
				if(isAffected.indexOf(v) < 0) {
					isAffected.push(v);
				}
			}
			break;
		default:
			var _g = $bind(this,this.check);
			var writeTo17 = writeTo;
			var isAffected17 = isAffected;
			hxsl_Tools.iter(e,function(e) {
				_g(e,writeTo17,isAffected17);
			});
		}
	}
	,checkBranches: function(e) {
		var _g = e.e;
		if(_g._hx_index == 10) {
			var _g1 = _g.eif;
			var _g1 = _g.eelse;
			var cond = _g.econd;
			var writeTo = [null];
			this.check(cond,writeTo,[]);
		}
		hxsl_Tools.iter(e,$bind(this,this.checkBranches));
	}
	,mapExpr: function(e,isVar) {
		var _gthis = this;
		var _g = e.e;
		switch(_g._hx_index) {
		case 4:
			var el = _g.el;
			var out = [];
			var count = 0;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e1 = el[_g1];
				++_g1;
				var isVar1 = isVar && count == el.length - 1;
				var e2 = this.mapExpr(e1,isVar1);
				if(hxsl_Tools.hasSideEffect(e2) || isVar1) {
					out.push(e2);
				}
				++count;
			}
			return { e : hxsl_TExprDef.TBlock(out), p : e.p, t : e.t};
		case 5:
			var _g1 = _g.op;
			var _g2 = _g.e1;
			var _g3 = _g.e2;
			switch(_g1._hx_index) {
			case 4:
				var _g3 = _g2.e;
				var _g4 = _g2.p;
				var _g4 = _g2.t;
				switch(_g3._hx_index) {
				case 1:
					var v = _g3.v;
					if(!this.get(v).used) {
						return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 9:
					var _g4 = _g3.e;
					var _g5 = _g3.regs;
					var _g3 = _g4.e;
					var _g5 = _g4.p;
					var _g5 = _g4.t;
					if(_g3._hx_index == 1) {
						var v = _g3.v;
						if(!this.get(v).used) {
							return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				default:
					return hxsl_Tools.map(e,function(e) {
						return _gthis.mapExpr(e,true);
					});
				}
				break;
			case 20:
				var _g3 = _g1.op;
				var _g1 = _g2.e;
				var _g3 = _g2.p;
				var _g3 = _g2.t;
				switch(_g1._hx_index) {
				case 1:
					var v = _g1.v;
					if(!this.get(v).used) {
						return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 9:
					var _g2 = _g1.e;
					var _g3 = _g1.regs;
					var _g1 = _g2.e;
					var _g3 = _g2.p;
					var _g3 = _g2.t;
					if(_g1._hx_index == 1) {
						var v = _g1.v;
						if(!this.get(v).used) {
							return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				default:
					return hxsl_Tools.map(e,function(e) {
						return _gthis.mapExpr(e,true);
					});
				}
				break;
			default:
				return hxsl_Tools.map(e,function(e) {
					return _gthis.mapExpr(e,true);
				});
			}
			break;
		case 7:
			var _g1 = _g.init;
			var v = _g.v;
			if(!this.get(v).used) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
			} else {
				return hxsl_Tools.map(e,function(e) {
					return _gthis.mapExpr(e,true);
				});
			}
			break;
		case 8:
			var _g1 = _g.e;
			var _g2 = _g.args;
			var _g3 = _g1.e;
			var _g4 = _g1.p;
			var _g4 = _g1.t;
			if(_g3._hx_index == 2) {
				switch(_g3.g._hx_index) {
				case 63:
					if(_g2.length == 3) {
						var _g1 = _g2[0];
						var _g1 = _g2[2];
						var _g3 = _g1.e;
						var _g4 = _g1.p;
						var _g4 = _g1.t;
						if(_g3._hx_index == 0) {
							var _g1 = _g3.c;
							if(_g1._hx_index == 2) {
								var cid = _g1.v;
								var uv = _g2[1];
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Texture), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(uv,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 64:
					if(_g2.length == 4) {
						var _g1 = _g2[0];
						var _g1 = _g2[3];
						var _g3 = _g1.e;
						var _g4 = _g1.p;
						var _g4 = _g1.t;
						if(_g3._hx_index == 0) {
							var _g1 = _g3.c;
							if(_g1._hx_index == 2) {
								var cid = _g1.v;
								var lod = _g2[2];
								var uv = _g2[1];
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.TextureLod), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(uv,true),this.mapExpr(lod,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 65:
					switch(_g2.length) {
					case 3:
						var _g1 = _g2[0];
						var _g1 = _g2[2];
						var _g3 = _g1.e;
						var _g4 = _g1.p;
						var _g4 = _g1.t;
						if(_g3._hx_index == 0) {
							var _g1 = _g3.c;
							if(_g1._hx_index == 2) {
								var cid = _g1.v;
								var pos = _g2[1];
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Texel), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(pos,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
						break;
					case 4:
						var _g1 = _g2[0];
						var _g1 = _g2[3];
						var _g3 = _g1.e;
						var _g4 = _g1.p;
						var _g4 = _g1.t;
						if(_g3._hx_index == 0) {
							var _g1 = _g3.c;
							if(_g1._hx_index == 2) {
								var cid = _g1.v;
								var lod = _g2[2];
								var pos = _g2[1];
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Texel), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(pos,true),this.mapExpr(lod,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
						break;
					default:
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 66:
					switch(_g2.length) {
					case 2:
						var _g1 = _g2[0];
						var _g1 = _g2[1];
						var _g3 = _g1.e;
						var _g4 = _g1.p;
						var _g4 = _g1.t;
						if(_g3._hx_index == 0) {
							var _g1 = _g3.c;
							if(_g1._hx_index == 2) {
								var cid = _g1.v;
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.TextureSize), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p}]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
						break;
					case 3:
						var _g1 = _g2[0];
						var _g1 = _g2[2];
						var _g3 = _g1.e;
						var _g4 = _g1.p;
						var _g4 = _g1.t;
						if(_g3._hx_index == 0) {
							var _g1 = _g3.c;
							if(_g1._hx_index == 2) {
								var cid = _g1.v;
								var lod = _g2[1];
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.TextureSize), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(lod,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
						break;
					default:
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				default:
					return hxsl_Tools.map(e,function(e) {
						return _gthis.mapExpr(e,true);
					});
				}
			} else {
				return hxsl_Tools.map(e,function(e) {
					return _gthis.mapExpr(e,true);
				});
			}
			break;
		case 10:
			var e1 = _g.econd;
			var econd = _g.eif;
			var eelse = _g.eelse;
			var e2 = this.mapExpr(e1,true);
			var econd1 = this.mapExpr(econd,isVar);
			var eelse1 = eelse == null ? null : this.mapExpr(eelse,isVar);
			if(!isVar && !hxsl_Tools.hasSideEffect(econd1) && (eelse1 == null || !hxsl_Tools.hasSideEffect(eelse1))) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e2.t, p : e2.p};
			}
			return { e : hxsl_TExprDef.TIf(e2,econd1,eelse1), p : e2.p, t : e2.t};
		case 13:
			var v = _g.v;
			var it = _g.it;
			var loop = _g.loop;
			var it1 = this.mapExpr(it,true);
			var loop1 = this.mapExpr(loop,false);
			if(!hxsl_Tools.hasSideEffect(loop1)) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
			}
			return { e : hxsl_TExprDef.TFor(v,it1,loop1), p : e.p, t : e.t};
		default:
			return hxsl_Tools.map(e,function(e) {
				return _gthis.mapExpr(e,true);
			});
		}
	}
	,__class__: hxsl_Dce
};
var hxsl_Eval = function() {
	this.varMap = new haxe_ds_ObjectMap();
	this.funMap = new haxe_ds_ObjectMap();
	this.constants = new haxe_ds_IntMap();
};
$hxClasses["hxsl.Eval"] = hxsl_Eval;
hxsl_Eval.__name__ = "hxsl.Eval";
hxsl_Eval.prototype = {
	setConstant: function(v,c) {
		this.constants.h[v.id] = hxsl_TExprDef.TConst(c);
	}
	,mapVar: function(v) {
		var v2 = this.varMap.h[v.__id__];
		if(v2 != null) {
			if(v == v2) {
				return v2;
			} else {
				return this.mapVar(v2);
			}
		}
		if(v.parent != null) {
			this.mapVar(v.parent);
			v2 = this.varMap.h[v.__id__];
			if(v2 != null) {
				if(v == v2) {
					return v2;
				} else {
					return this.mapVar(v2);
				}
			}
		}
		var _g = v.type;
		var v21;
		if(_g._hx_index == 17) {
			var _g1 = _g.size;
			v21 = true;
		} else {
			v21 = false;
		}
		v2 = { id : v21 ? v.id : hxsl_Tools.allocVarId(), name : v.name, type : v.type, kind : v.kind};
		if(v.parent != null) {
			v2.parent = this.mapVar(v.parent);
		}
		if(v.qualifiers != null) {
			v2.qualifiers = v.qualifiers.slice();
		}
		this.varMap.set(v,v2);
		this.varMap.set(v2,v2);
		var _g = v2.type;
		switch(_g._hx_index) {
		case 13:
			var vl = _g.vl;
			var _g1 = [];
			var _g2 = 0;
			while(_g2 < vl.length) {
				var v = vl[_g2];
				++_g2;
				_g1.push(this.mapVar(v));
			}
			v2.type = hxsl_Type.TStruct(_g1);
			break;
		case 15:
			var _g1 = _g.size;
			if(_g1._hx_index == 1) {
				var vs = _g1.v;
				var t = _g.t;
				var c = this.constants.h[vs.id];
				if(c != null) {
					if(c == null) {
						hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
					} else if(c._hx_index == 0) {
						var _g1 = c.c;
						if(_g1._hx_index == 2) {
							var v = _g1.v;
							var _g1 = v2.type;
							var tmp;
							if(_g1._hx_index == 15) {
								var _g2 = _g1.t;
								var _g2 = _g1.size;
								tmp = true;
							} else {
								tmp = false;
							}
							v2.type = tmp ? hxsl_Type.TArray(t,hxsl_SizeDecl.SConst(v)) : hxsl_Type.TBuffer(t,hxsl_SizeDecl.SConst(v));
						} else {
							hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
						}
					} else {
						hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
					}
				} else {
					var vs2 = this.mapVar(vs);
					var _g1 = v2.type;
					var tmp;
					if(_g1._hx_index == 15) {
						var _g2 = _g1.t;
						var _g2 = _g1.size;
						tmp = true;
					} else {
						tmp = false;
					}
					v2.type = tmp ? hxsl_Type.TArray(t,hxsl_SizeDecl.SVar(vs2)) : hxsl_Type.TBuffer(t,hxsl_SizeDecl.SVar(vs2));
				}
			}
			break;
		case 16:
			var _g1 = _g.size;
			if(_g1._hx_index == 1) {
				var vs = _g1.v;
				var t = _g.t;
				var c = this.constants.h[vs.id];
				if(c != null) {
					if(c == null) {
						hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
					} else if(c._hx_index == 0) {
						var _g = c.c;
						if(_g._hx_index == 2) {
							var v = _g.v;
							var _g = v2.type;
							var tmp;
							if(_g._hx_index == 15) {
								var _g1 = _g.t;
								var _g1 = _g.size;
								tmp = true;
							} else {
								tmp = false;
							}
							v2.type = tmp ? hxsl_Type.TArray(t,hxsl_SizeDecl.SConst(v)) : hxsl_Type.TBuffer(t,hxsl_SizeDecl.SConst(v));
						} else {
							hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
						}
					} else {
						hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
					}
				} else {
					var vs2 = this.mapVar(vs);
					var _g = v2.type;
					var tmp;
					if(_g._hx_index == 15) {
						var _g1 = _g.t;
						var _g1 = _g.size;
						tmp = true;
					} else {
						tmp = false;
					}
					v2.type = tmp ? hxsl_Type.TArray(t,hxsl_SizeDecl.SVar(vs2)) : hxsl_Type.TBuffer(t,hxsl_SizeDecl.SVar(vs2));
				}
			}
			break;
		default:
		}
		return v2;
	}
	,checkSamplerRec: function(t) {
		if(hxsl_Tools.isSampler(t)) {
			return true;
		}
		switch(t._hx_index) {
		case 13:
			var vl = t.vl;
			var _g = 0;
			while(_g < vl.length) {
				var v = vl[_g];
				++_g;
				if(this.checkSamplerRec(v.type)) {
					return true;
				}
			}
			return false;
		case 15:
			var _g = t.size;
			var t1 = t.t;
			return this.checkSamplerRec(t1);
		case 16:
			var _g = t.t;
			var size = t.size;
			return true;
		default:
		}
		return false;
	}
	,needsInline: function(f) {
		var _g = 0;
		var _g1 = f.args;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(this.checkSamplerRec(a.type)) {
				return true;
			}
		}
		return false;
	}
	,'eval': function(s) {
		var funs = [];
		var _g = 0;
		var _g1 = s.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			var f1 = f.kind;
			var f2 = this.mapVar(f.ref);
			var _g2 = [];
			var _g3 = 0;
			var _g4 = f.args;
			while(_g3 < _g4.length) {
				var a = _g4[_g3];
				++_g3;
				_g2.push(this.mapVar(a));
			}
			var f21 = { kind : f1, ref : f2, args : _g2, ret : f.ret, expr : f.expr};
			if(f.kind == hxsl_FunctionKind.Helper && this.inlineCalls || this.needsInline(f21)) {
				this.funMap.set(f21.ref,f);
			} else {
				funs.push(f21);
			}
		}
		var _g = 0;
		var _g1 = funs.length;
		while(_g < _g1) {
			var i = _g++;
			this.curFun = funs[i];
			this.curFun.expr = this.evalExpr(this.curFun.expr,false);
		}
		var s1 = s.name;
		var _g = [];
		var _g1 = 0;
		var _g2 = s.vars;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			_g.push(this.mapVar(v));
		}
		return { name : s1, vars : _g, funs : funs};
	}
	,hasReturn: function(e) {
		this.markReturn = false;
		this.hasReturnLoop(e);
		return this.markReturn;
	}
	,hasReturnLoop: function(e) {
		var _g = e.e;
		if(_g._hx_index == 12) {
			var _g1 = _g.e;
			this.markReturn = true;
		} else if(!this.markReturn) {
			hxsl_Tools.iter(e,$bind(this,this.hasReturnLoop));
		}
	}
	,handleReturn: function(e,isFinal) {
		if(isFinal == null) {
			isFinal = false;
		}
		var _g = e.e;
		switch(_g._hx_index) {
		case 3:
			var v = _g.e;
			var v1 = this.handleReturn(v,isFinal);
			return { e : hxsl_TExprDef.TParenthesis(v1), t : v1.t, p : e.p};
		case 4:
			var el = _g.el;
			var i = 0;
			var last = el.length;
			var out = [];
			_hx_loop1: while(i < last) {
				var e1 = el[i++];
				if(i == last) {
					out.push(this.handleReturn(e1,isFinal));
				} else {
					var _g1 = e1.e;
					switch(_g1._hx_index) {
					case 10:
						if(_g1.eelse == null) {
							var eif = _g1.eif;
							var econd = _g1.econd;
							if(isFinal && this.hasReturn(eif)) {
								out.push(this.handleReturn({ e : hxsl_TExprDef.TIf(econd,eif,{ e : hxsl_TExprDef.TBlock(el.slice(i)), t : e1.t, p : e1.p}), t : e1.t, p : e1.p}));
								break _hx_loop1;
							} else {
								out.push(this.handleReturn(e1));
							}
						} else {
							out.push(this.handleReturn(e1));
						}
						break;
					case 12:
						var e2 = _g1.e;
						out.push(this.handleReturn(e2,isFinal));
						break _hx_loop1;
					default:
						out.push(this.handleReturn(e1));
					}
				}
			}
			var t = isFinal ? out.length == 0 ? hxsl_Type.TVoid : out[out.length - 1].t : e.t;
			return { e : hxsl_TExprDef.TBlock(out), t : t, p : e.p};
		case 10:
			var cond = _g.econd;
			var eif = _g.eif;
			var eelse = _g.eelse;
			if(eelse != null && isFinal) {
				var cond1 = this.handleReturn(cond);
				var eif1 = this.handleReturn(eif,isFinal);
				return { e : hxsl_TExprDef.TIf(cond1,eif1,this.handleReturn(eelse,isFinal)), t : eif1.t, p : e.p};
			} else {
				return hxsl_Tools.map(e,$bind(this,this.handleReturnDef));
			}
			break;
		case 12:
			var v = _g.e;
			if(!isFinal) {
				hxsl_Error.t("Cannot inline not final return",e.p);
			}
			if(v == null) {
				return { e : hxsl_TExprDef.TBlock([]), t : hxsl_Type.TVoid, p : e.p};
			}
			return this.handleReturn(v,true);
		default:
			return hxsl_Tools.map(e,$bind(this,this.handleReturnDef));
		}
	}
	,handleReturnDef: function(e) {
		return this.handleReturn(e);
	}
	,evalCall: function(g,args,oldArgs,pos) {
		switch(g._hx_index) {
		case 38:
			if(args.length == 1) {
				var _g = args[0];
				var _g1 = _g.e;
				var _g2 = _g.p;
				var _g2 = _g.t;
				if(_g1._hx_index == 0) {
					var _g = _g1.c;
					if(_g._hx_index == 2) {
						var i = _g.v;
						return hxsl_TExprDef.TConst(hxsl_Const.CFloat(i));
					} else {
						return null;
					}
				} else {
					return null;
				}
			} else {
				return null;
			}
			break;
		case 63:case 64:
			var i;
			var _g = args[0].e;
			if(_g._hx_index == 0) {
				var _g1 = _g.c;
				if(_g1._hx_index == 2) {
					var i1 = _g1.v;
					i = i1;
				} else {
					hxsl_Error.t("Cannot eval complex channel " + hxsl_Printer.toString(args[0],true) + " " + this.constantsToString(),pos);
					throw haxe_Exception.thrown("assert");
				}
			} else {
				hxsl_Error.t("Cannot eval complex channel " + hxsl_Printer.toString(args[0],true) + " " + this.constantsToString(),pos);
				throw haxe_Exception.thrown("assert");
			}
			var channel = oldArgs[0];
			var _g = channel.e;
			var channel1;
			if(_g._hx_index == 1) {
				var v = _g.v;
				channel1 = hxsl_TExprDef.TVar(this.mapVar(v));
			} else {
				throw haxe_Exception.thrown("assert");
			}
			channel = { e : channel1, t : channel.t, p : channel.p};
			var count;
			var _g = channel.t;
			if(_g._hx_index == 17) {
				var i1 = _g.size;
				count = i1;
			} else {
				throw haxe_Exception.thrown("assert");
			}
			var channelMode = Type.createEnumIndex(hxsl_Channel,i & 7,null);
			var targs = [channel];
			var _g = 1;
			var _g1 = args.length;
			while(_g < _g1) {
				var i1 = _g++;
				targs.push(args[i1]);
			}
			targs.push({ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(i >> 3)), t : hxsl_Type.TInt, p : pos});
			var tget = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(g), t : hxsl_Type.TVoid, p : pos},targs), t : hxsl_Type.TVoid, p : pos};
			switch(channelMode._hx_index) {
			case 0:
				var zero = { e : hxsl_TExprDef.TConst(hxsl_Const.CFloat(0.)), t : hxsl_Type.TFloat, p : pos};
				if(count == 1) {
					return zero.e;
				}
				return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal([hxsl_TGlobal.Vec2,hxsl_TGlobal.Vec3,hxsl_TGlobal.Vec4][count - 2]), t : hxsl_Type.TVoid, p : pos},[zero]);
			case 1:case 2:case 3:case 4:
				var tmp;
				switch(count) {
				case 1:
					switch(channelMode._hx_index) {
					case 1:
						tmp = [hxsl_Component.X];
						break;
					case 2:
						tmp = [hxsl_Component.Y];
						break;
					case 3:
						tmp = [hxsl_Component.Z];
						break;
					case 4:
						tmp = [hxsl_Component.W];
						break;
					default:
						throw haxe_Exception.thrown("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
					}
					break;
				case 2:
					switch(channelMode._hx_index) {
					case 1:
						tmp = [hxsl_Component.X,hxsl_Component.Y];
						break;
					case 2:
						tmp = [hxsl_Component.Y,hxsl_Component.Z];
						break;
					case 3:
						tmp = [hxsl_Component.Z,hxsl_Component.W];
						break;
					default:
						throw haxe_Exception.thrown("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
					}
					break;
				case 3:
					switch(channelMode._hx_index) {
					case 1:
						tmp = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z];
						break;
					case 2:
						tmp = [hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
						break;
					default:
						throw haxe_Exception.thrown("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
					}
					break;
				default:
					throw haxe_Exception.thrown("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
				}
				return hxsl_TExprDef.TSwiz(tget,tmp);
			case 5:
				return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Unpack), t : hxsl_Type.TVoid, p : pos},[tget]);
			case 6:
				return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.UnpackNormal), t : hxsl_Type.TVoid, p : pos},[tget]);
			}
			break;
		case 67:
			var args1 = args;
			var _g = 0;
			while(_g < args1.length) {
				var a = args1[_g];
				++_g;
				haxe_Log.trace(hxsl_Printer.toString(a),{ fileName : a.p.file, lineNumber : 0, className : null, methodName : null});
			}
			return hxsl_TExprDef.TBlock([]);
		default:
			return null;
		}
	}
	,constantsToString: function() {
		var _g = [];
		var c = this.constants.keys();
		while(c.hasNext()) {
			var c1 = c.next();
			_g.push(c1 + " => " + hxsl_Printer.toString({ e : this.constants.h[c1], t : hxsl_Type.TVoid, p : null},true));
		}
		return _g.toString();
	}
	,ifBlock: function(e) {
		var tmp;
		if(e != null) {
			var _g = e.e;
			var tmp1;
			if(_g._hx_index == 10) {
				var _g1 = _g.econd;
				var _g1 = _g.eif;
				var _g1 = _g.eelse;
				tmp1 = true;
			} else {
				tmp1 = false;
			}
			tmp = !tmp1;
		} else {
			tmp = true;
		}
		if(tmp) {
			return e;
		}
		return { e : hxsl_TExprDef.TBlock([e]), t : e.t, p : e.p};
	}
	,evalExpr: function(e,isVal) {
		if(isVal == null) {
			isVal = true;
		}
		var _gthis = this;
		var d;
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var _g1 = _g.c;
			d = e.e;
			break;
		case 1:
			var v = _g.v;
			var c = this.constants.h[v.id];
			if(c != null) {
				d = c;
			} else {
				var v2 = this.mapVar(v);
				d = hxsl_TExprDef.TVar(v2);
			}
			break;
		case 2:
			var _g1 = _g.g;
			d = e.e;
			break;
		case 3:
			var e1 = _g.e;
			var e2 = this.evalExpr(e1,isVal);
			var _g1 = e2.e;
			if(_g1._hx_index == 0) {
				var _g2 = _g1.c;
				d = e2.e;
			} else {
				d = hxsl_TExprDef.TParenthesis(e2);
			}
			break;
		case 4:
			var el = _g.el;
			var out = [];
			var last = el.length - 1;
			var _g1 = 0;
			var _g2 = el.length;
			while(_g1 < _g2) {
				var i = _g1++;
				var isVal1 = isVal && i == last;
				var e1 = this.evalExpr(el[i],isVal1);
				var _g3 = e1.e;
				switch(_g3._hx_index) {
				case 0:
					var _g4 = _g3.c;
					if(isVal1) {
						out.push(e1);
					}
					break;
				case 1:
					var _g5 = _g3.v;
					if(isVal1) {
						out.push(e1);
					}
					break;
				default:
					out.push(e1);
				}
			}
			d = out.length == 1 && this.curFun.kind != hxsl_FunctionKind.Init ? out[0].e : hxsl_TExprDef.TBlock(out);
			break;
		case 5:
			var op = _g.op;
			var e1 = _g.e1;
			var e2 = _g.e2;
			var e11 = this.evalExpr(e1);
			var e21 = this.evalExpr(e2);
			switch(op._hx_index) {
			case 0:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					switch(_g3._hx_index) {
					case 2:
						if(_g2._hx_index == 0) {
							var _g1 = _g2.c;
							if(_g1._hx_index == 2) {
								var b = _g1.v;
								var a = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a + b | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						if(_g2._hx_index == 0) {
							var _g1 = _g2.c;
							if(_g1._hx_index == 3) {
								var b = _g1.v;
								var a = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a + b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 1:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					switch(_g3._hx_index) {
					case 2:
						if(_g2._hx_index == 0) {
							var _g1 = _g2.c;
							if(_g1._hx_index == 2) {
								var b = _g1.v;
								var a = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a * b | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						if(_g2._hx_index == 0) {
							var _g1 = _g2.c;
							if(_g1._hx_index == 3) {
								var b = _g1.v;
								var a = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a * b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 2:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					switch(_g3._hx_index) {
					case 2:
						if(_g2._hx_index == 0) {
							var _g1 = _g2.c;
							if(_g1._hx_index == 2) {
								var b = _g1.v;
								var a = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a / b | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						if(_g2._hx_index == 0) {
							var _g1 = _g2.c;
							if(_g1._hx_index == 3) {
								var b = _g1.v;
								var a = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a / b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 3:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					switch(_g3._hx_index) {
					case 2:
						if(_g2._hx_index == 0) {
							var _g1 = _g2.c;
							if(_g1._hx_index == 2) {
								var b = _g1.v;
								var a = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a - b | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						if(_g2._hx_index == 0) {
							var _g1 = _g2.c;
							if(_g1._hx_index == 3) {
								var b = _g1.v;
								var a = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a - b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 4:case 21:
				d = hxsl_TExprDef.TBinop(op,e11,e21);
				break;
			case 5:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					switch(_g3._hx_index) {
					case 0:
						d = _g2._hx_index == 0 ? _g2.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TBinop(op,e11,e21);
						break;
					case 1:
						var _g1 = _g3.b;
						if(_g2._hx_index == 0) {
							var _g4 = _g2.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								var b = _g4.b;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a == b ? 0 : 1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 2:
						var _g1 = _g3.v;
						if(_g2._hx_index == 0) {
							var _g4 = _g2.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								var b = _g4.v;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a - b == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						var _g1 = _g3.v;
						if(_g2._hx_index == 0) {
							var _g4 = _g2.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								var b = _g4.v;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 4:
						var _g1 = _g3.v;
						if(_g2._hx_index == 0) {
							var _g3 = _g2.c;
							switch(_g3._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								var b = _g3.v;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 6:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					switch(_g3._hx_index) {
					case 0:
						d = _g2._hx_index == 0 ? _g2.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TBinop(op,e11,e21);
						break;
					case 1:
						var _g1 = _g3.b;
						if(_g2._hx_index == 0) {
							var _g4 = _g2.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								var b = _g4.b;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a == b ? 0 : 1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 2:
						var _g1 = _g3.v;
						if(_g2._hx_index == 0) {
							var _g4 = _g2.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								var b = _g4.v;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a - b != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						var _g1 = _g3.v;
						if(_g2._hx_index == 0) {
							var _g4 = _g2.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								var b = _g4.v;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 4:
						var _g1 = _g3.v;
						if(_g2._hx_index == 0) {
							var _g3 = _g2.c;
							switch(_g3._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								var b = _g3.v;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 7:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					switch(_g3._hx_index) {
					case 0:
						d = _g2._hx_index == 0 ? _g2.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TBinop(op,e11,e21);
						break;
					case 1:
						var _g1 = _g3.b;
						if(_g2._hx_index == 0) {
							var _g4 = _g2.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								var b = _g4.b;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a == b ? 0 : 1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 2:
						var _g1 = _g3.v;
						if(_g2._hx_index == 0) {
							var _g4 = _g2.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								var b = _g4.v;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a - b > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						var _g1 = _g3.v;
						if(_g2._hx_index == 0) {
							var _g4 = _g2.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								var b = _g4.v;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 4:
						var _g1 = _g3.v;
						if(_g2._hx_index == 0) {
							var _g3 = _g2.c;
							switch(_g3._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								var b = _g3.v;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 8:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					switch(_g3._hx_index) {
					case 0:
						d = _g2._hx_index == 0 ? _g2.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TBinop(op,e11,e21);
						break;
					case 1:
						var _g1 = _g3.b;
						if(_g2._hx_index == 0) {
							var _g4 = _g2.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								var b = _g4.b;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a == b ? 0 : 1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 2:
						var _g1 = _g3.v;
						if(_g2._hx_index == 0) {
							var _g4 = _g2.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								var b = _g4.v;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a - b >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						var _g1 = _g3.v;
						if(_g2._hx_index == 0) {
							var _g4 = _g2.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								var b = _g4.v;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 4:
						var _g1 = _g3.v;
						if(_g2._hx_index == 0) {
							var _g3 = _g2.c;
							switch(_g3._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								var b = _g3.v;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 9:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					switch(_g3._hx_index) {
					case 0:
						d = _g2._hx_index == 0 ? _g2.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TBinop(op,e11,e21);
						break;
					case 1:
						var _g1 = _g3.b;
						if(_g2._hx_index == 0) {
							var _g4 = _g2.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								var b = _g4.b;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a == b ? 0 : 1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 2:
						var _g1 = _g3.v;
						if(_g2._hx_index == 0) {
							var _g4 = _g2.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								var b = _g4.v;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a - b < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						var _g1 = _g3.v;
						if(_g2._hx_index == 0) {
							var _g4 = _g2.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								var b = _g4.v;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 4:
						var _g1 = _g3.v;
						if(_g2._hx_index == 0) {
							var _g3 = _g2.c;
							switch(_g3._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								var b = _g3.v;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 10:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					switch(_g3._hx_index) {
					case 0:
						d = _g2._hx_index == 0 ? _g2.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TBinop(op,e11,e21);
						break;
					case 1:
						var _g1 = _g3.b;
						if(_g2._hx_index == 0) {
							var _g4 = _g2.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								var b = _g4.b;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a == b ? 0 : 1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 2:
						var _g1 = _g3.v;
						if(_g2._hx_index == 0) {
							var _g4 = _g2.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								var b = _g4.v;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a - b <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						var _g1 = _g3.v;
						if(_g2._hx_index == 0) {
							var _g4 = _g2.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								var b = _g4.v;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 4:
						var _g1 = _g3.v;
						if(_g2._hx_index == 0) {
							var _g3 = _g2.c;
							switch(_g3._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								var b = _g3.v;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 11:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					if(_g3._hx_index == 2) {
						if(_g2._hx_index == 0) {
							var _g1 = _g2.c;
							if(_g1._hx_index == 2) {
								var b = _g1.v;
								var a = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a & b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 12:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					if(_g3._hx_index == 2) {
						if(_g2._hx_index == 0) {
							var _g1 = _g2.c;
							if(_g1._hx_index == 2) {
								var b = _g1.v;
								var a = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a | b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 13:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					if(_g3._hx_index == 2) {
						if(_g2._hx_index == 0) {
							var _g1 = _g2.c;
							if(_g1._hx_index == 2) {
								var b = _g1.v;
								var a = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a ^ b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 14:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					if(_g3._hx_index == 1) {
						var _g1 = _g3.b;
						if(_g2._hx_index == 0) {
							var _g3 = _g2.c;
							if(_g3._hx_index == 1) {
								var b = _g3.b;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a && b));
							} else {
								var a = _g1;
								d = a == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e21.e;
							}
						} else {
							var a = _g1;
							d = a == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e21.e;
						}
					} else if(_g2._hx_index == 0) {
						var _g1 = _g2.c;
						if(_g1._hx_index == 1) {
							var a = _g1.b;
							d = a == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e11.e;
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else if(_g2._hx_index == 0) {
					var _g1 = _g2.c;
					if(_g1._hx_index == 1) {
						var a = _g1.b;
						d = a == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e11.e;
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 15:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					if(_g3._hx_index == 1) {
						var _g1 = _g3.b;
						if(_g2._hx_index == 0) {
							var _g3 = _g2.c;
							if(_g3._hx_index == 1) {
								var b = _g3.b;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a || b));
							} else {
								var a = _g1;
								d = a == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e21.e;
							}
						} else {
							var a = _g1;
							d = a == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e21.e;
						}
					} else if(_g2._hx_index == 0) {
						var _g1 = _g2.c;
						if(_g1._hx_index == 1) {
							var a = _g1.b;
							d = a == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e11.e;
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else if(_g2._hx_index == 0) {
					var _g1 = _g2.c;
					if(_g1._hx_index == 1) {
						var a = _g1.b;
						d = a == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e11.e;
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 16:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					if(_g3._hx_index == 2) {
						if(_g2._hx_index == 0) {
							var _g1 = _g2.c;
							if(_g1._hx_index == 2) {
								var b = _g1.v;
								var a = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a << b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 17:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					if(_g3._hx_index == 2) {
						if(_g2._hx_index == 0) {
							var _g1 = _g2.c;
							if(_g1._hx_index == 2) {
								var b = _g1.v;
								var a = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a >> b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 18:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					if(_g3._hx_index == 2) {
						if(_g2._hx_index == 0) {
							var _g1 = _g2.c;
							if(_g1._hx_index == 2) {
								var b = _g1.v;
								var a = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a >>> b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 19:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					switch(_g3._hx_index) {
					case 2:
						if(_g2._hx_index == 0) {
							var _g1 = _g2.c;
							if(_g1._hx_index == 2) {
								var b = _g1.v;
								var a = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a % b | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						if(_g2._hx_index == 0) {
							var _g1 = _g2.c;
							if(_g1._hx_index == 3) {
								var b = _g1.v;
								var a = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a % b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 20:
				var _g1 = op.op;
				d = hxsl_TExprDef.TBinop(op,e11,e21);
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
			break;
		case 6:
			var op = _g.op;
			var e1 = _g.e1;
			var e2 = this.evalExpr(e1);
			var _g1 = e2.e;
			if(_g1._hx_index == 0) {
				var c = _g1.c;
				switch(op._hx_index) {
				case 2:
					if(c._hx_index == 1) {
						var b = c.b;
						d = hxsl_TExprDef.TConst(hxsl_Const.CBool(!b));
					} else {
						d = hxsl_TExprDef.TUnop(op,e2);
					}
					break;
				case 3:
					switch(c._hx_index) {
					case 2:
						var i = c.v;
						d = hxsl_TExprDef.TConst(hxsl_Const.CInt(-i));
						break;
					case 3:
						var f = c.v;
						d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(-f));
						break;
					default:
						d = hxsl_TExprDef.TUnop(op,e2);
					}
					break;
				default:
					d = hxsl_TExprDef.TUnop(op,e2);
				}
			} else {
				d = hxsl_TExprDef.TUnop(op,e2);
			}
			break;
		case 7:
			var v = _g.v;
			var init = _g.init;
			d = hxsl_TExprDef.TVarDecl(this.mapVar(v),init == null ? null : this.evalExpr(init));
			break;
		case 8:
			var c = _g.e;
			var eargs = _g.args;
			var c1 = this.evalExpr(c);
			var _g1 = [];
			var _g2 = 0;
			while(_g2 < eargs.length) {
				var a = eargs[_g2];
				++_g2;
				_g1.push(this.evalExpr(a));
			}
			var args = _g1;
			var _g1 = c1.e;
			switch(_g1._hx_index) {
			case 1:
				var v = _g1.v;
				if(this.funMap.h.__keys__[v.__id__] != null) {
					var f = this.funMap.h[v.__id__];
					var outExprs = [];
					var undo = [];
					var _g2 = 0;
					var _g3 = f.args.length;
					while(_g2 < _g3) {
						var i = _g2++;
						var v = [f.args[i]];
						var e1 = args[i];
						var _g4 = e1.e;
						switch(_g4._hx_index) {
						case 0:
							var _g5 = _g4.c;
							var old = [this.constants.h[v[0].id]];
							undo.push((function(old,v) {
								return function() {
									if(old[0] == null) {
										_gthis.constants.remove(v[0].id);
									} else {
										_gthis.constants.h[v[0].id] = old[0];
									}
								};
							})(old,v));
							this.constants.h[v[0].id] = e1.e;
							break;
						case 1:
							var _g6 = _g4.v;
							var _g7 = _g6.id;
							var _g8 = _g6.name;
							var _g9 = _g6.parent;
							var _g10 = _g6.qualifiers;
							var _g11 = _g6.type;
							switch(_g6.kind._hx_index) {
							case 0:case 1:case 2:
								var old1 = [this.constants.h[v[0].id]];
								undo.push((function(old,v) {
									return function() {
										if(old[0] == null) {
											_gthis.constants.remove(v[0].id);
										} else {
											_gthis.constants.h[v[0].id] = old[0];
										}
									};
								})(old1,v));
								this.constants.h[v[0].id] = e1.e;
								break;
							default:
								var old2 = [this.varMap.h[v[0].__id__]];
								if(old2[0] == null) {
									undo.push((function(v) {
										return function() {
											_gthis.varMap.remove(v[0]);
										};
									})(v));
								} else {
									this.varMap.remove(v[0]);
									undo.push((function(old,v) {
										return function() {
											_gthis.varMap.set(v[0],old[0]);
										};
									})(old2,v));
								}
								var v2 = this.mapVar(v[0]);
								outExprs.push({ e : hxsl_TExprDef.TVarDecl(v2,e1), t : hxsl_Type.TVoid, p : e1.p});
							}
							break;
						default:
							var old3 = [this.varMap.h[v[0].__id__]];
							if(old3[0] == null) {
								undo.push((function(v) {
									return function() {
										_gthis.varMap.remove(v[0]);
									};
								})(v));
							} else {
								this.varMap.remove(v[0]);
								undo.push((function(old,v) {
									return function() {
										_gthis.varMap.set(v[0],old[0]);
									};
								})(old3,v));
							}
							var v21 = this.mapVar(v[0]);
							outExprs.push({ e : hxsl_TExprDef.TVarDecl(v21,e1), t : hxsl_Type.TVoid, p : e1.p});
						}
					}
					var e1 = this.handleReturn(this.evalExpr(f.expr,false),true);
					var _g2 = 0;
					while(_g2 < undo.length) {
						var u = undo[_g2];
						++_g2;
						u();
					}
					var _g2 = e1.e;
					if(_g2._hx_index == 4) {
						var el = _g2.el;
						var _g2 = 0;
						while(_g2 < el.length) {
							var e2 = el[_g2];
							++_g2;
							outExprs.push(e2);
						}
					} else {
						outExprs.push(e1);
					}
					d = hxsl_TExprDef.TBlock(outExprs);
				} else {
					d = hxsl_TExprDef.TCall(c1,args);
				}
				break;
			case 2:
				var g = _g1.g;
				var v1 = this.evalCall(g,args,eargs,e.p);
				d = v1 != null ? v1 : hxsl_TExprDef.TCall(c1,args);
				break;
			default:
				d = hxsl_Error.t("Cannot eval non-static call expresssion '" + new hxsl_Printer().exprString(c1) + "'",c1.p);
			}
			break;
		case 9:
			var e1 = _g.e;
			var r = _g.regs;
			d = hxsl_TExprDef.TSwiz(this.evalExpr(e1),r.slice());
			break;
		case 10:
			var econd = _g.econd;
			var eif = _g.eif;
			var eelse = _g.eelse;
			var econd1 = this.evalExpr(econd);
			var _g1 = econd1.e;
			if(_g1._hx_index == 0) {
				var _g2 = _g1.c;
				if(_g2._hx_index == 1) {
					var b = _g2.b;
					d = b ? this.evalExpr(eif,isVal).e : eelse == null ? hxsl_TExprDef.TConst(hxsl_Const.CNull) : this.evalExpr(eelse,isVal).e;
				} else if(isVal && eelse != null && this.eliminateConditionals) {
					d = hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mix), t : e.t, p : e.p},[this.evalExpr(eelse,true),this.evalExpr(eif,true),{ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToFloat), t : hxsl_Type.TFun([]), p : econd1.p},[econd1]), t : hxsl_Type.TFloat, p : e.p}]);
				} else {
					eif = this.evalExpr(eif,isVal);
					if(eelse != null) {
						eelse = this.evalExpr(eelse,isVal);
						var _g1 = eelse.e;
						if(_g1._hx_index == 0 && _g1.c._hx_index == 0) {
							eelse = null;
						}
					}
					eif = this.ifBlock(eif);
					eelse = this.ifBlock(eelse);
					d = hxsl_TExprDef.TIf(econd1,eif,eelse);
				}
			} else if(isVal && eelse != null && this.eliminateConditionals) {
				d = hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mix), t : e.t, p : e.p},[this.evalExpr(eelse,true),this.evalExpr(eif,true),{ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToFloat), t : hxsl_Type.TFun([]), p : econd1.p},[econd1]), t : hxsl_Type.TFloat, p : e.p}]);
			} else {
				eif = this.evalExpr(eif,isVal);
				if(eelse != null) {
					eelse = this.evalExpr(eelse,isVal);
					var _g1 = eelse.e;
					if(_g1._hx_index == 0 && _g1.c._hx_index == 0) {
						eelse = null;
					}
				}
				eif = this.ifBlock(eif);
				eelse = this.ifBlock(eelse);
				d = hxsl_TExprDef.TIf(econd1,eif,eelse);
			}
			break;
		case 11:
			d = hxsl_TExprDef.TDiscard;
			break;
		case 12:
			var e1 = _g.e;
			d = hxsl_TExprDef.TReturn(e1 == null ? null : this.evalExpr(e1));
			break;
		case 13:
			var v1 = _g.v;
			var it = _g.it;
			var loop = _g.loop;
			var v2 = this.mapVar(v1);
			var it1 = this.evalExpr(it);
			var e1;
			var _g1 = it1.e;
			if(_g1._hx_index == 5) {
				var _g2 = _g1.e1;
				var _g3 = _g1.e2;
				if(_g1.op._hx_index == 21) {
					var _g1 = _g2.e;
					var _g4 = _g2.p;
					var _g4 = _g2.t;
					if(_g1._hx_index == 0) {
						var _g2 = _g1.c;
						if(_g2._hx_index == 2) {
							var _g1 = _g3.e;
							var _g4 = _g3.p;
							var _g4 = _g3.t;
							if(_g1._hx_index == 0) {
								var _g3 = _g1.c;
								if(_g3._hx_index == 2) {
									var len = _g3.v;
									var start = _g2.v;
									if(this.unrollLoops) {
										var out = [];
										var _g1 = start;
										var _g2 = len;
										while(_g1 < _g2) {
											var i = _g1++;
											this.constants.h[v1.id] = hxsl_TExprDef.TConst(hxsl_Const.CInt(i));
											out.push(this.evalExpr(loop,false));
										}
										this.constants.remove(v1.id);
										e1 = hxsl_TExprDef.TBlock(out);
									} else {
										e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
									}
								} else {
									e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
								}
							} else {
								e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
							}
						} else {
							e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
						}
					} else {
						e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
					}
				} else {
					e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
				}
			} else {
				e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
			}
			this.varMap.remove(v1);
			d = e1;
			break;
		case 14:
			d = hxsl_TExprDef.TContinue;
			break;
		case 15:
			d = hxsl_TExprDef.TBreak;
			break;
		case 16:
			var e1 = _g.e;
			var e2 = _g.index;
			var e11 = this.evalExpr(e1);
			var e21 = this.evalExpr(e2);
			var _g1 = e11.e;
			var _g2 = e21.e;
			if(_g1._hx_index == 17) {
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					if(_g3._hx_index == 2) {
						var i = _g3.v;
						var el = _g1.el;
						d = i >= 0 && i < el.length ? el[i].e : hxsl_TExprDef.TArray(e11,e21);
					} else {
						d = hxsl_TExprDef.TArray(e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TArray(e11,e21);
				}
			} else {
				d = hxsl_TExprDef.TArray(e11,e21);
			}
			break;
		case 17:
			var el = _g.el;
			var _g1 = [];
			var _g2 = 0;
			while(_g2 < el.length) {
				var e1 = el[_g2];
				++_g2;
				_g1.push(this.evalExpr(e1));
			}
			d = hxsl_TExprDef.TArrayDecl(_g1);
			break;
		case 18:
			var e1 = _g.e;
			var cases = _g.cases;
			var def = _g.def;
			var e2 = this.evalExpr(e1);
			var _g1 = [];
			var _g2 = 0;
			while(_g2 < cases.length) {
				var c = cases[_g2];
				++_g2;
				var _g3 = [];
				var _g4 = 0;
				var _g5 = c.values;
				while(_g4 < _g5.length) {
					var v1 = _g5[_g4];
					++_g4;
					_g3.push(this.evalExpr(v1));
				}
				_g1.push({ values : _g3, expr : this.evalExpr(c.expr,isVal)});
			}
			var cases = _g1;
			var def1 = def == null ? null : this.evalExpr(def,isVal);
			var hasCase = false;
			var _g1 = e2.e;
			if(_g1._hx_index == 0) {
				var c = _g1.c;
				if(c._hx_index == 2) {
					var val = c.v;
					var _g1 = 0;
					while(_g1 < cases.length) {
						var c1 = cases[_g1];
						++_g1;
						var _g2 = 0;
						var _g3 = c1.values;
						while(_g2 < _g3.length) {
							var v1 = _g3[_g2];
							++_g2;
							var _g4 = v1.e;
							if(_g4._hx_index == 0) {
								var cst = _g4.c;
								switch(cst._hx_index) {
								case 2:
									var k = cst.v;
									if(k == val) {
										return c1.expr;
									}
									break;
								case 3:
									var k1 = cst.v;
									if(k1 == val) {
										return c1.expr;
									}
									break;
								default:
								}
							} else {
								hasCase = true;
							}
						}
					}
				} else {
					throw haxe_Exception.thrown("Unsupported switch constant " + Std.string(c));
				}
			} else {
				hasCase = true;
			}
			d = hasCase ? hxsl_TExprDef.TSwitch(e2,cases,def1) : def1 == null ? hxsl_TExprDef.TBlock([]) : def1.e;
			break;
		case 19:
			var cond = _g.e;
			var loop = _g.loop;
			var normalWhile = _g.normalWhile;
			var cond1 = this.evalExpr(cond);
			var loop1 = this.evalExpr(loop,false);
			d = hxsl_TExprDef.TWhile(cond1,this.ifBlock(loop1),normalWhile);
			break;
		case 20:
			var name = _g.m;
			var args = _g.args;
			var e1 = _g.e;
			var e2;
			if(name == "unroll") {
				var old4 = this.unrollLoops;
				this.unrollLoops = true;
				e2 = this.evalExpr(e1,isVal);
				this.unrollLoops = false;
			} else {
				e2 = this.evalExpr(e1,isVal);
			}
			d = hxsl_TExprDef.TMeta(name,args,e2);
			break;
		}
		return { e : d, t : e.t, p : e.p};
	}
	,__class__: hxsl_Eval
};
var hxsl__$Flatten_Alloc = function(g,t,pos,size) {
	this.g = g;
	this.t = t;
	this.pos = pos;
	this.size = size;
};
$hxClasses["hxsl._Flatten.Alloc"] = hxsl__$Flatten_Alloc;
hxsl__$Flatten_Alloc.__name__ = "hxsl._Flatten.Alloc";
hxsl__$Flatten_Alloc.prototype = {
	__class__: hxsl__$Flatten_Alloc
};
var hxsl_ARead = $hxEnums["hxsl.ARead"] = { __ename__:true,__constructs__:null
	,AIndex: ($_=function(a) { return {_hx_index:0,a:a,__enum__:"hxsl.ARead",toString:$estr}; },$_._hx_name="AIndex",$_.__params__ = ["a"],$_)
	,AOffset: ($_=function(a,stride,delta) { return {_hx_index:1,a:a,stride:stride,delta:delta,__enum__:"hxsl.ARead",toString:$estr}; },$_._hx_name="AOffset",$_.__params__ = ["a","stride","delta"],$_)
};
hxsl_ARead.__constructs__ = [hxsl_ARead.AIndex,hxsl_ARead.AOffset];
hxsl_ARead.__empty_constructs__ = [];
var hxsl_Flatten = function() {
};
$hxClasses["hxsl.Flatten"] = hxsl_Flatten;
hxsl_Flatten.__name__ = "hxsl.Flatten";
hxsl_Flatten.prototype = {
	flatten: function(s,kind,constsToGlobal) {
		this.globals = [];
		this.params = [];
		this.outVars = [];
		if(constsToGlobal) {
			this.consts = [];
			var p = s.funs[0].expr.p;
			var gc = { id : hxsl_Tools.allocVarId(), name : "__consts__", kind : hxsl_VarKind.Global, type : null};
			this.econsts = { e : hxsl_TExprDef.TVar(gc), t : null, p : p};
			var s1 = s.name;
			var s2 = s.vars.slice();
			var _g = [];
			var _g1 = 0;
			var _g2 = s.funs;
			while(_g1 < _g2.length) {
				var f = _g2[_g1];
				++_g1;
				_g.push(this.mapFun(f,$bind(this,this.mapConsts)));
			}
			s = { name : s1, vars : s2, funs : _g};
			var _g = 0;
			var _g1 = s.vars;
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				var _g2 = v.type;
				if(_g2._hx_index == 9) {
					var _g3 = _g2.size;
					this.allocConst(255,p);
				}
			}
			if(this.consts.length > 0) {
				gc.type = this.econsts.t = hxsl_Type.TArray(hxsl_Type.TFloat,hxsl_SizeDecl.SConst(this.consts.length));
				s.vars.push(gc);
			}
		}
		this.varMap = new haxe_ds_ObjectMap();
		this.allocData = new haxe_ds_ObjectMap();
		var _g = 0;
		var _g1 = s.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.gatherVar(v);
		}
		var prefix;
		switch(kind._hx_index) {
		case 0:
			prefix = "vertex";
			break;
		case 1:
			prefix = "fragment";
			break;
		default:
			throw haxe_Exception.thrown("assert");
		}
		this.pack(prefix + "Globals",hxsl_VarKind.Global,this.globals,hxsl_VecType.VFloat);
		this.pack(prefix + "Params",hxsl_VarKind.Param,this.params,hxsl_VecType.VFloat);
		var allVars = this.globals.concat(this.params);
		var textures = this.packTextures(prefix + "Textures",allVars,hxsl_Type.TSampler2D).concat(this.packTextures(prefix + "TexturesCube",allVars,hxsl_Type.TSamplerCube)).concat(this.packTextures(prefix + "TexturesArray",allVars,hxsl_Type.TSampler2DArray));
		this.packBuffers(allVars);
		var _g = [];
		var _g1 = 0;
		var _g2 = s.funs;
		while(_g1 < _g2.length) {
			var f = _g2[_g1];
			++_g1;
			_g.push(this.mapFun(f,$bind(this,this.mapExpr)));
		}
		var funs = _g;
		return { name : s.name, vars : this.outVars, funs : funs};
	}
	,mapFun: function(f,mapExpr) {
		return { kind : f.kind, ret : f.ret, args : f.args, ref : f.ref, expr : mapExpr(f.expr)};
	}
	,mapExpr: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			var a = this.varMap.h[v.__id__];
			if(a != null) {
				e = this.access(a,v.type,e.p,hxsl_ARead.AIndex(a));
			}
			break;
		case 16:
			var _g1 = _g.e;
			var _g2 = _g1.e;
			var _g3 = _g1.t;
			if(_g2._hx_index == 1) {
				var v = _g2.v;
				var vp = _g1.p;
				var eindex = _g.index;
				var _g = eindex.e;
				var e1;
				if(_g._hx_index == 0) {
					var _g1 = _g.c;
					if(_g1._hx_index == 2) {
						var _g = _g1.v;
						e1 = true;
					} else {
						e1 = false;
					}
				} else {
					e1 = false;
				}
				if(!e1) {
					var a = this.varMap.h[v.__id__];
					if(a != null) {
						var _g = v.type;
						if(_g._hx_index == 15) {
							var _g1 = _g.t;
							var _g2 = _g.size;
							var t = _g1;
							if(hxsl_Tools.isSampler(t)) {
								eindex = this.toInt(this.mapExpr(eindex));
								e = this.access(a,t,vp,hxsl_ARead.AOffset(a,1,eindex));
							} else {
								var t = _g1;
								var stride = this.varSize(t,a.t);
								if(stride == 0 || (stride & 3) != 0) {
									throw haxe_Exception.thrown(new hxsl_Error("Dynamic access to an Array which size is not 4 components-aligned is not allowed",e.p));
								}
								stride >>= 2;
								eindex = this.toInt(this.mapExpr(eindex));
								e = this.access(a,t,vp,hxsl_ARead.AOffset(a,stride,stride == 1 ? eindex : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpMult,eindex,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(stride)), t : hxsl_Type.TInt, p : vp}), t : hxsl_Type.TInt, p : vp}));
							}
						} else {
							throw haxe_Exception.thrown("assert");
						}
					}
				} else {
					e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
				}
			} else {
				e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
			}
			break;
		default:
			e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
		}
		return this.optimize(e);
	}
	,mapConsts: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var c = _g.c;
			switch(c._hx_index) {
			case 2:
				var v = c.v;
				return this.allocConst(v,e.p);
			case 3:
				var v = c.v;
				return this.allocConst(v,e.p);
			default:
				return e;
			}
			break;
		case 2:
			var g = _g.g;
			switch(g._hx_index) {
			case 0:
				this.allocConst(Math.PI / 180,e.p);
				break;
			case 1:
				this.allocConst(180 / Math.PI,e.p);
				break;
			case 9:
				this.allocConst(1.4426950408889634,e.p);
				break;
			case 10:
				this.allocConst(0.6931471805599453,e.p);
				break;
			case 24:
				this.allocConst(1,e.p);
				break;
			case 26:
				this.allocConst(2.0,e.p);
				this.allocConst(3.0,e.p);
				break;
			case 54:
				this.allocConsts([1,255,65025,16581375],e.p);
				this.allocConsts([0.00392156862745098,0.00392156862745098,0.00392156862745098,0],e.p);
				break;
			case 55:
				this.allocConsts([1,0.00392156862745098,1.5378700499807768e-005,6.0308629411010845e-008],e.p);
				break;
			case 56:
				this.allocConst(1,e.p);
				this.allocConst(0.5,e.p);
				break;
			case 57:
				this.allocConst(0.5,e.p);
				break;
			case 58:
				this.allocConsts([0.5,0.5],e.p);
				this.allocConsts([0.5,-0.5],e.p);
				break;
			case 59:
				this.allocConsts([2,-2],e.p);
				this.allocConsts([-1,1],e.p);
				break;
			default:
			}
			break;
		case 5:
			var _g1 = _g.e1;
			var _g1 = _g.e2;
			if(_g.op._hx_index == 1) {
				var _g2 = _g1.e;
				var _g2 = _g1.p;
				if(_g1.t._hx_index == 8) {
					this.allocConst(1,e.p);
				}
			}
			break;
		case 8:
			var _g1 = _g.e;
			var _g2 = _g.args;
			var _g3 = _g1.e;
			var _g4 = _g1.p;
			var _g4 = _g1.t;
			if(_g3._hx_index == 2) {
				if(_g3.g._hx_index == 42) {
					if(_g2.length == 2) {
						var _g1 = _g2[0];
						var _g3 = _g2[1];
						var _g2 = _g1.e;
						var _g4 = _g1.p;
						var _g4 = _g1.t;
						if(_g2._hx_index == 1) {
							var _g1 = _g2.v;
							var _g2 = _g1.id;
							var _g2 = _g1.name;
							var _g2 = _g1.parent;
							var _g2 = _g1.qualifiers;
							var _g2 = _g1.type;
							switch(_g1.kind._hx_index) {
							case 0:
								if(_g4._hx_index == 5) {
									if(_g4.size == 3) {
										if(_g4.t._hx_index == 1) {
											var _g1 = _g3.e;
											var _g2 = _g3.p;
											var _g2 = _g3.t;
											if(_g1._hx_index == 0) {
												var _g2 = _g1.c;
												if(_g2._hx_index == 2) {
													if(_g2.v == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							case 1:
								if(_g4._hx_index == 5) {
									if(_g4.size == 3) {
										if(_g4.t._hx_index == 1) {
											var _g1 = _g3.e;
											var _g2 = _g3.p;
											var _g2 = _g3.t;
											if(_g1._hx_index == 0) {
												var _g2 = _g1.c;
												if(_g2._hx_index == 2) {
													if(_g2.v == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							case 2:
								if(_g4._hx_index == 5) {
									if(_g4.size == 3) {
										if(_g4.t._hx_index == 1) {
											var _g1 = _g3.e;
											var _g2 = _g3.p;
											var _g2 = _g3.t;
											if(_g1._hx_index == 0) {
												var _g2 = _g1.c;
												if(_g2._hx_index == 2) {
													if(_g2.v == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							case 3:
								if(_g4._hx_index == 5) {
									if(_g4.size == 3) {
										if(_g4.t._hx_index == 1) {
											var _g1 = _g3.e;
											var _g2 = _g3.p;
											var _g2 = _g3.t;
											if(_g1._hx_index == 0) {
												var _g2 = _g1.c;
												if(_g2._hx_index == 2) {
													if(_g2.v == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							default:
							}
						}
					}
				}
			}
			break;
		case 16:
			var _g1 = _g.e;
			var _g2 = _g.index;
			var _g = _g2.e;
			var _g3 = _g2.p;
			var _g3 = _g2.t;
			if(_g._hx_index == 0) {
				var _g3 = _g.c;
				if(_g3._hx_index == 2) {
					var _g = _g3.v;
					var eindex = _g2;
					var ea = _g1;
					return { e : hxsl_TExprDef.TArray(this.mapConsts(ea),eindex), t : e.t, p : e.p};
				} else {
					var eindex = _g2;
					var ea = _g1;
					var _g = ea.t;
					if(_g._hx_index == 15) {
						var _g3 = _g.size;
						var t = _g.t;
						var stride = this.varSize(t,hxsl_VecType.VFloat) >> 2;
						this.allocConst(stride,e.p);
					}
				}
			} else {
				var eindex = _g2;
				var ea = _g1;
				var _g = ea.t;
				if(_g._hx_index == 15) {
					var _g1 = _g.size;
					var t = _g.t;
					var stride = this.varSize(t,hxsl_VecType.VFloat) >> 2;
					this.allocConst(stride,e.p);
				}
			}
			break;
		default:
		}
		return hxsl_Tools.map(e,$bind(this,this.mapConsts));
	}
	,allocConst: function(v,p) {
		var index = this.consts.indexOf(v);
		if(index < 0) {
			index = this.consts.length;
			this.consts.push(v);
		}
		return { e : hxsl_TExprDef.TArray(this.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p};
	}
	,allocConsts: function(va,p) {
		var _gthis = this;
		var pad = va.length - 1 & 3;
		var index = -1;
		var _g = 0;
		var _g1 = this.consts.length - (va.length - 1);
		while(_g < _g1) {
			var i = _g++;
			if(i >> 2 != i + pad >> 2) {
				continue;
			}
			var found = true;
			var _g2 = 0;
			var _g3 = va.length;
			while(_g2 < _g3) {
				var j = _g2++;
				if(this.consts[i + j] != va[j]) {
					found = false;
					break;
				}
			}
			if(found) {
				index = i;
				break;
			}
		}
		if(index < 0) {
			while(this.consts.length >> 2 != this.consts.length + pad >> 2) this.consts.push(0);
			index = this.consts.length;
			var _g = 0;
			while(_g < va.length) {
				var v = va[_g];
				++_g;
				this.consts.push(v);
			}
		}
		switch(va.length) {
		case 1:
			return { e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p};
		case 2:
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Vec2), t : hxsl_Type.TVoid, p : p},[{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 1)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p}]), t : hxsl_Type.TVec(2,hxsl_VecType.VFloat), p : p};
		case 3:
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Vec3), t : hxsl_Type.TVoid, p : p},[{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 1)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 2)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p}]), t : hxsl_Type.TVec(3,hxsl_VecType.VFloat), p : p};
		case 4:
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Vec4), t : hxsl_Type.TVoid, p : p},[{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 1)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 3)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 4)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p}]), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : p};
		default:
			throw haxe_Exception.thrown("assert");
		}
	}
	,access: function(a,t,pos,acc) {
		var _gthis = this;
		switch(t._hx_index) {
		case 6:
			var tmp = this.access(a,hxsl_Type.TMat3x4,pos,acc);
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat3), t : hxsl_Type.TFun([]), p : pos},[tmp]), t : hxsl_Type.TMat3, p : pos};
		case 7:
			var tmp = hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat4);
			var tmp1 = hxsl_Type.TFun([]);
			var tmp2;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp2 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var a1 = acc.a;
				var stride = acc.stride;
				var delta = acc.delta;
				var index = a1.t == null ? a1.pos : a1.pos >> 2;
				var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp2 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			var tmp3;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs + 1)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var a1 = acc.a;
				var stride = acc.stride;
				var delta = acc.delta;
				var index = (a1.t == null ? a1.pos : a1.pos >> 2) + 1;
				var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			var tmp4;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp4 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs + 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var a1 = acc.a;
				var stride = acc.stride;
				var delta = acc.delta;
				var index = (a1.t == null ? a1.pos : a1.pos >> 2) + 2;
				var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp4 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			var tmp5;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp5 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs + 3)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var a1 = acc.a;
				var stride = acc.stride;
				var delta = acc.delta;
				var index = (a1.t == null ? a1.pos : a1.pos >> 2) + 3;
				var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp5 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			return { e : hxsl_TExprDef.TCall({ e : tmp, t : tmp1, p : pos},[tmp2,tmp3,tmp4,tmp5]), t : hxsl_Type.TMat4, p : pos};
		case 8:
			var tmp = hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat3x4);
			var tmp1 = hxsl_Type.TFun([]);
			var tmp2;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp2 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var a1 = acc.a;
				var stride = acc.stride;
				var delta = acc.delta;
				var index = a1.t == null ? a1.pos : a1.pos >> 2;
				var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp2 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			var tmp3;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs + 1)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var a1 = acc.a;
				var stride = acc.stride;
				var delta = acc.delta;
				var index = (a1.t == null ? a1.pos : a1.pos >> 2) + 1;
				var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			var tmp4;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp4 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs + 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var a1 = acc.a;
				var stride = acc.stride;
				var delta = acc.delta;
				var index = (a1.t == null ? a1.pos : a1.pos >> 2) + 2;
				var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp4 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			return { e : hxsl_TExprDef.TCall({ e : tmp, t : tmp1, p : pos},[tmp2,tmp3,tmp4]), t : hxsl_Type.TMat3x4, p : pos};
		case 15:
			var _g = t.size;
			if(_g._hx_index == 0) {
				var len = _g.v;
				var t1 = t.t;
				var stride = a.size / len | 0;
				var _g = [];
				var _g1 = 0;
				var _g2 = len;
				while(_g1 < _g2) {
					var i = _g1++;
					var a1 = new hxsl__$Flatten_Alloc(a.g,a.t,a.pos + stride * i,stride);
					_g.push(this.access(a1,t1,pos,hxsl_ARead.AIndex(a1)));
				}
				var earr = _g;
				return { e : hxsl_TExprDef.TArrayDecl(earr), t : t1, p : pos};
			} else {
				if(hxsl_Tools.isSampler(t)) {
					var e;
					switch(acc._hx_index) {
					case 0:
						var a1 = acc.a;
						var offs = a1.t == null ? a1.pos : a1.pos >> 2;
						e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
						break;
					case 1:
						var a1 = acc.a;
						var stride = acc.stride;
						var delta = acc.delta;
						var index = a1.t == null ? a1.pos : a1.pos >> 2;
						var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
						e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
						break;
					}
					e.t = t;
					return e;
				}
				var size = this.varSize(t,a.t);
				if(size > 4) {
					return hxsl_Error.t("Access not supported for " + hxsl_Tools.toString(t),null);
				}
				var e;
				switch(acc._hx_index) {
				case 0:
					var a1 = acc.a;
					var offs = a1.t == null ? a1.pos : a1.pos >> 2;
					e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
					break;
				case 1:
					var a1 = acc.a;
					var stride = acc.stride;
					var delta = acc.delta;
					var index = a1.t == null ? a1.pos : a1.pos >> 2;
					var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
					e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
					break;
				}
				if(size == 4) {
					if(a.pos == -1) {
						return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Vec4), t : hxsl_Type.TFun([]), p : pos},[{ e : hxsl_TExprDef.TConst(hxsl_Const.CFloat(0)), t : hxsl_Type.TFloat, p : pos}]), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : pos};
					}
					if((a.pos & 3) != 0) {
						throw haxe_Exception.thrown("assert");
					}
				} else {
					var sw = [];
					var _g = 0;
					var _g1 = size;
					while(_g < _g1) {
						var i = _g++;
						sw.push(hxsl_Tools.SWIZ[i + (a.pos & 3)]);
					}
					e = { e : hxsl_TExprDef.TSwiz(e,sw), t : t, p : pos};
				}
				switch(t._hx_index) {
				case 1:
					e.t = hxsl_Type.TFloat;
					e = this.toInt(e);
					break;
				case 5:
					if(t.t._hx_index == 0) {
						var size = t.size;
						e.t = hxsl_Type.TVec(size,hxsl_VecType.VFloat);
						e = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal([hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4][size - 2]), t : hxsl_Type.TFun([]), p : pos},[e]), t : t, p : pos};
					}
					break;
				default:
				}
				return e;
			}
			break;
		default:
			if(hxsl_Tools.isSampler(t)) {
				var e;
				switch(acc._hx_index) {
				case 0:
					var a1 = acc.a;
					var offs = a1.t == null ? a1.pos : a1.pos >> 2;
					e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
					break;
				case 1:
					var a1 = acc.a;
					var stride = acc.stride;
					var delta = acc.delta;
					var index = a1.t == null ? a1.pos : a1.pos >> 2;
					var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
					e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
					break;
				}
				e.t = t;
				return e;
			}
			var size = this.varSize(t,a.t);
			if(size > 4) {
				return hxsl_Error.t("Access not supported for " + hxsl_Tools.toString(t),null);
			}
			var e;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var a1 = acc.a;
				var stride = acc.stride;
				var delta = acc.delta;
				var index = a1.t == null ? a1.pos : a1.pos >> 2;
				var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			if(size == 4) {
				if(a.pos == -1) {
					return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Vec4), t : hxsl_Type.TFun([]), p : pos},[{ e : hxsl_TExprDef.TConst(hxsl_Const.CFloat(0)), t : hxsl_Type.TFloat, p : pos}]), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : pos};
				}
				if((a.pos & 3) != 0) {
					throw haxe_Exception.thrown("assert");
				}
			} else {
				var sw = [];
				var _g = 0;
				var _g1 = size;
				while(_g < _g1) {
					var i = _g++;
					sw.push(hxsl_Tools.SWIZ[i + (a.pos & 3)]);
				}
				e = { e : hxsl_TExprDef.TSwiz(e,sw), t : t, p : pos};
			}
			switch(t._hx_index) {
			case 1:
				e.t = hxsl_Type.TFloat;
				e = this.toInt(e);
				break;
			case 5:
				if(t.t._hx_index == 0) {
					var size = t.size;
					e.t = hxsl_Type.TVec(size,hxsl_VecType.VFloat);
					e = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal([hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4][size - 2]), t : hxsl_Type.TFun([]), p : pos},[e]), t : t, p : pos};
				}
				break;
			default:
			}
			return e;
		}
	}
	,toInt: function(e) {
		if(e.t == hxsl_Type.TInt) {
			return e;
		}
		return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToInt), t : hxsl_Type.TFun([]), p : e.p},[e]), t : hxsl_Type.TInt, p : e.p};
	}
	,optimize: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 8:
			var _g1 = _g.e;
			var _g2 = _g.args;
			var _g3 = _g1.e;
			var _g4 = _g1.p;
			var _g4 = _g1.t;
			if(_g3._hx_index == 2) {
				if(_g3.g._hx_index == 52) {
					if(_g2.length == 1) {
						var _g1 = _g2[0];
						var _g2 = _g1.e;
						var _g3 = _g1.p;
						var _g3 = _g1.t;
						if(_g2._hx_index == 8) {
							var _g1 = _g2.e;
							var _g3 = _g1.e;
							var _g4 = _g1.p;
							var _g4 = _g1.t;
							if(_g3._hx_index == 2) {
								if(_g3.g._hx_index == 51) {
									var args = _g2.args;
									var rem = 0;
									var size = 0;
									while(size < 4) {
										var t = args[args.length - 1 - rem].t;
										size += this.varSize(t,hxsl_VecType.VFloat);
										++rem;
									}
									if(size == 4) {
										var _g1 = 0;
										var _g2 = rem;
										while(_g1 < _g2) {
											var i = _g1++;
											args.pop();
										}
										var emat;
										var _g1 = e.e;
										if(_g1._hx_index == 8) {
											var _g2 = _g1.args;
											var e1 = _g1.e;
											emat = e1;
										} else {
											throw haxe_Exception.thrown("assert");
										}
										return { e : hxsl_TExprDef.TCall(emat,args), t : e.t, p : e.p};
									}
								}
							}
						}
					}
				}
			}
			break;
		case 16:
			var _g1 = _g.e;
			var _g2 = _g.index;
			var _g = _g1.e;
			var _g3 = _g1.p;
			var _g3 = _g1.t;
			if(_g._hx_index == 17) {
				var _g1 = _g2.e;
				var _g3 = _g2.p;
				var _g3 = _g2.t;
				if(_g1._hx_index == 0) {
					var _g2 = _g1.c;
					if(_g2._hx_index == 2) {
						var i = _g2.v;
						var el = _g.el;
						if(i >= 0 && i < el.length) {
							return el[i];
						}
						hxsl_Error.t("Reading outside array bounds",e.p);
					}
				}
			}
			break;
		default:
		}
		return e;
	}
	,packTextures: function(name,vars,t) {
		var alloc = [];
		var g = { id : hxsl_Tools.allocVarId(), name : name, type : t, kind : hxsl_VarKind.Param};
		var pos = 0;
		var samplers = [];
		var _g = 0;
		while(_g < vars.length) {
			var v = vars[_g];
			++_g;
			var count = 1;
			if(v.type != t) {
				var _g1 = v.type;
				switch(_g1._hx_index) {
				case 15:
					var _g2 = _g1.size;
					if(_g2._hx_index == 0) {
						var n = _g2.v;
						var t2 = _g1.t;
						if(t2 == t) {
							count = n;
						} else {
							continue;
						}
					} else {
						continue;
					}
					break;
				case 17:
					var _g3 = _g1.size;
					if(t != hxsl_Type.TSampler2D) {
						continue;
					}
					break;
				default:
					continue;
				}
			}
			var a = new hxsl__$Flatten_Alloc(g,null,pos,count);
			a.v = v;
			if(v.qualifiers != null) {
				var _g4 = 0;
				var _g5 = v.qualifiers;
				while(_g4 < _g5.length) {
					var q = _g5[_g4];
					++_g4;
					if(q._hx_index == 12) {
						var name = q.name;
						var _g6 = 0;
						var _g7 = count;
						while(_g6 < _g7) {
							var i = _g6++;
							samplers[pos + i] = name;
						}
					}
				}
			}
			this.varMap.set(v,a);
			alloc.push(a);
			pos += count;
		}
		g.type = hxsl_Type.TArray(t,hxsl_SizeDecl.SConst(pos));
		if(samplers.length > 0) {
			var _g = 0;
			var _g1 = pos;
			while(_g < _g1) {
				var i = _g++;
				if(samplers[i] == null) {
					samplers[i] = "";
				}
			}
			if(g.qualifiers == null) {
				g.qualifiers = [];
			}
			g.qualifiers.push(hxsl_VarQualifier.Sampler(samplers.join(",")));
		}
		if(alloc.length > 0) {
			this.outVars.push(g);
			this.allocData.set(g,alloc);
		}
		return alloc;
	}
	,packBuffers: function(vars) {
		var alloc = [];
		var g = { id : hxsl_Tools.allocVarId(), name : "buffers", type : hxsl_Type.TVoid, kind : hxsl_VarKind.Param};
		var _g = 0;
		while(_g < vars.length) {
			var v = vars[_g];
			++_g;
			var _g1 = v.type;
			var tmp;
			if(_g1._hx_index == 16) {
				var _g2 = _g1.t;
				var _g3 = _g1.size;
				tmp = true;
			} else {
				tmp = false;
			}
			if(tmp) {
				var a = new hxsl__$Flatten_Alloc(g,null,alloc.length,1);
				a.v = v;
				alloc.push(a);
				this.outVars.push(v);
			}
		}
		g.type = hxsl_Type.TArray(hxsl_Type.TBuffer(hxsl_Type.TVoid,hxsl_SizeDecl.SConst(0)),hxsl_SizeDecl.SConst(alloc.length));
		this.allocData.set(g,alloc);
	}
	,pack: function(name,kind,vars,t) {
		var alloc = [];
		var apos = 0;
		var g = { id : hxsl_Tools.allocVarId(), name : name, type : hxsl_Type.TVec(0,t), kind : kind};
		var _g = 0;
		while(_g < vars.length) {
			var v = vars[_g];
			++_g;
			var tmp;
			if(!hxsl_Tools.isSampler(v.type)) {
				var _g1 = v.type;
				if(_g1._hx_index == 16) {
					var _g2 = _g1.t;
					var _g3 = _g1.size;
					tmp = true;
				} else {
					tmp = false;
				}
			} else {
				tmp = true;
			}
			if(tmp) {
				continue;
			}
			var _g4 = v.type;
			if(_g4._hx_index == 15) {
				var _g5 = _g4.size;
				var t1 = _g4.t;
				if(hxsl_Tools.isSampler(t1)) {
					continue;
				}
			}
			var size = this.varSize(v.type,t);
			if(size == 0) {
				var a = new hxsl__$Flatten_Alloc(g,t,-1,size);
				a.v = v;
				this.varMap.set(v,a);
				continue;
			}
			var best = null;
			var _g6 = 0;
			while(_g6 < alloc.length) {
				var a1 = alloc[_g6];
				++_g6;
				if(a1.v == null && a1.size >= size && (best == null || best.size > a1.size)) {
					best = a1;
				}
			}
			if(best != null) {
				var free = best.size - size;
				if(free > 0) {
					var i = alloc.indexOf(best);
					var a2 = new hxsl__$Flatten_Alloc(g,t,best.pos + size,free);
					alloc.splice(i + 1,0,a2);
					best.size = size;
				}
				best.v = v;
				this.varMap.set(v,best);
			} else {
				var a3 = new hxsl__$Flatten_Alloc(g,t,apos,size);
				apos += size;
				a3.v = v;
				this.varMap.set(v,a3);
				alloc.push(a3);
				var pad = (4 - size % 4) % 4;
				if(pad > 0) {
					var a4 = new hxsl__$Flatten_Alloc(g,t,apos,pad);
					apos += pad;
					alloc.push(a4);
				}
			}
		}
		g.type = hxsl_Type.TArray(hxsl_Type.TVec(4,t),hxsl_SizeDecl.SConst(apos >> 2));
		if(apos > 0) {
			this.outVars.push(g);
			this.allocData.set(g,alloc);
		}
		return g;
	}
	,varSize: function(v,t) {
		switch(v._hx_index) {
		case 1:case 3:
			if(t == hxsl_VecType.VFloat) {
				return 1;
			} else {
				throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 5:
			var n = v.size;
			var t2 = v.t;
			if(t == t2) {
				return n;
			} else {
				throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 7:
			if(t == hxsl_VecType.VFloat) {
				return 16;
			} else {
				throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 6:case 8:
			if(t == hxsl_VecType.VFloat) {
				return 12;
			} else {
				throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 15:
			var _g = v.size;
			if(_g._hx_index == 0) {
				var n = _g.v;
				var at = v.t;
				return this.varSize(at,t) * n;
			} else {
				throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		default:
			throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
		}
	}
	,gatherVar: function(v) {
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g = 0;
			while(_g < vl.length) {
				var v1 = vl[_g];
				++_g;
				this.gatherVar(v1);
			}
		} else {
			switch(v.kind._hx_index) {
			case 0:
				if(hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.PerObject)) {
					this.params.push(v);
				} else {
					this.globals.push(v);
				}
				break;
			case 2:
				this.params.push(v);
				break;
			default:
				this.outVars.push(v);
			}
		}
	}
	,__class__: hxsl_Flatten
};
var hxsl_Globals = function() {
	this.channels = [];
	this.map = new haxe_ds_IntMap();
};
$hxClasses["hxsl.Globals"] = hxsl_Globals;
hxsl_Globals.__name__ = "hxsl.Globals";
hxsl_Globals.allocID = function(path) {
	if(hxsl_Globals.MAP == null) {
		hxsl_Globals.MAP = new haxe_ds_StringMap();
		hxsl_Globals.ALL = [];
	}
	var id = hxsl_Globals.MAP.h[path];
	if(id == null) {
		id = hxsl_Globals.ALL.length;
		hxsl_Globals.ALL.push(path);
		hxsl_Globals.MAP.h[path] = id;
	}
	return id;
};
hxsl_Globals.getIDName = function(id) {
	return hxsl_Globals.ALL[id];
};
hxsl_Globals.prototype = {
	set: function(path,v) {
		var this1 = this.map;
		var key = hxsl_Globals.allocID(path);
		this1.h[key] = v;
	}
	,allocChannelID: function(t) {
		var _g = 0;
		var _g1 = this.maxChannels;
		while(_g < _g1) {
			var i = _g++;
			if(this.channels[i] == t) {
				return i;
			}
		}
		if(this.maxChannels == 1 << hxsl_Tools.MAX_CHANNELS_BITS) {
			throw haxe_Exception.thrown("Too many unique channels");
		}
		var i = this.maxChannels++;
		this.channels[i] = t;
		return i;
	}
	,__class__: hxsl_Globals
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var hxsl_GlslOut = function() {
	this.outIndex = 0;
	this.uniformBuffer = 0;
	this.exprIds = 0;
	this.varNames = new haxe_ds_IntMap();
	this.allNames = new haxe_ds_StringMap();
};
$hxClasses["hxsl.GlslOut"] = hxsl_GlslOut;
hxsl_GlslOut.__name__ = "hxsl.GlslOut";
hxsl_GlslOut.prototype = {
	decl: function(s) {
		var _g = 0;
		var _g1 = this.decls;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			if(d == s) {
				return;
			}
		}
		if(HxOverrides.cca(s,0) == 35) {
			this.decls.unshift(s);
		} else {
			this.decls.push(s);
		}
	}
	,addType: function(t) {
		switch(t._hx_index) {
		case 0:
			this.buf.b += Std.string("void");
			break;
		case 1:
			this.buf.b += Std.string("int");
			break;
		case 2:
			this.buf.b += Std.string("bool");
			break;
		case 3:
			this.buf.b += Std.string("float");
			break;
		case 4:
			this.buf.b += Std.string("string");
			break;
		case 5:
			var size = t.size;
			var k = t.t;
			switch(k._hx_index) {
			case 0:
				this.buf.b += Std.string("i");
				break;
			case 1:
				break;
			case 2:
				this.buf.b += Std.string("b");
				break;
			}
			this.buf.b += Std.string("vec");
			this.buf.b += Std.string(size);
			break;
		case 6:
			this.buf.b += Std.string("mat3");
			break;
		case 7:
			this.buf.b += Std.string("mat4");
			break;
		case 8:
			this.decl(hxsl_GlslOut.MAT34);
			this.buf.b += Std.string("_mat3x4");
			break;
		case 9:
			var n = t.size;
			this.buf.b += Std.string("vec");
			this.buf.b += Std.string(n);
			break;
		case 10:
			this.buf.b += Std.string("sampler2D");
			break;
		case 11:
			this.buf.b += Std.string("sampler2DArray");
			if(this.glES != null) {
				this.decl("precision lowp sampler2DArray;");
			}
			break;
		case 12:
			this.buf.b += Std.string("samplerCube");
			break;
		case 13:
			var vl = t.vl;
			this.buf.b += Std.string("struct { ");
			var _g = 0;
			while(_g < vl.length) {
				var v = vl[_g];
				++_g;
				this.addVar(v);
				this.buf.b += Std.string(";");
			}
			this.buf.b += Std.string(" }");
			break;
		case 14:
			var _g = t.variants;
			this.buf.b += Std.string("function");
			break;
		case 15:
			var t1 = t.t;
			var size = t.size;
			this.addType(t1);
			this.buf.b += Std.string("[");
			switch(size._hx_index) {
			case 0:
				var _g = size.v;
				if(_g == 1) {
					if(this.intelDriverFix) {
						this.buf.b += Std.string(2);
					} else {
						var v = _g;
						this.buf.b += Std.string(v);
					}
				} else {
					var v = _g;
					this.buf.b += Std.string(v);
				}
				break;
			case 1:
				var v = size.v;
				var v1 = this.varName(v);
				this.buf.b += Std.string(v1);
				break;
			}
			this.buf.b += Std.string("]");
			break;
		case 16:
			var _g = t.t;
			var _g = t.size;
			throw haxe_Exception.thrown("assert");
		case 17:
			var n = t.size;
			this.buf.b += Std.string("channel" + n);
			break;
		case 18:
			this.buf.b += Std.string("mat2");
			break;
		}
	}
	,addVar: function(v) {
		var _g = v.type;
		switch(_g._hx_index) {
		case 15:
			var t = _g.t;
			var size = _g.size;
			var old = v.type;
			v.type = t;
			this.addVar(v);
			v.type = old;
			this.buf.b += Std.string("[");
			switch(size._hx_index) {
			case 0:
				var _g1 = size.v;
				if(_g1 == 1) {
					if(this.intelDriverFix) {
						this.buf.b += Std.string(2);
					} else {
						var n = _g1;
						this.buf.b += Std.string(n);
					}
				} else {
					var n = _g1;
					this.buf.b += Std.string(n);
				}
				break;
			case 1:
				var v1 = size.v;
				var v2 = this.varName(v1);
				this.buf.b += Std.string(v2);
				break;
			}
			this.buf.b += Std.string("]");
			break;
		case 16:
			var t = _g.t;
			var size = _g.size;
			this.buf.b += Std.string((this.isVertex ? "vertex_" : "") + "uniform_buffer" + this.uniformBuffer++);
			this.buf.b += Std.string(" { ");
			v.type = hxsl_Type.TArray(t,size);
			this.addVar(v);
			v.type = hxsl_Type.TBuffer(t,size);
			this.buf.b += Std.string("; }");
			break;
		default:
			this.addType(v.type);
			this.buf.b += Std.string(" ");
			var v1 = this.varName(v);
			this.buf.b += Std.string(v1);
		}
	}
	,addValue: function(e,tabs) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 4:
			var el = _g.el;
			var name = "val" + this.exprIds++;
			var tmp = this.buf;
			this.buf = new StringBuf();
			this.addType(e.t);
			this.buf.b += Std.string(" ");
			this.buf.b += Std.string(name);
			this.buf.b += Std.string("(void)");
			var el2 = el.slice();
			var last = el2[el2.length - 1];
			el2[el2.length - 1] = { e : hxsl_TExprDef.TReturn(last), t : e.t, p : last.p};
			var e2 = { t : hxsl_Type.TVoid, e : hxsl_TExprDef.TBlock(el2), p : e.p};
			this.addExpr(e2,"");
			this.exprValues.push(this.buf.b);
			this.buf = tmp;
			this.buf.b += Std.string(name);
			this.buf.b += Std.string("()");
			break;
		case 10:
			var econd = _g.econd;
			var eif = _g.eif;
			var eelse = _g.eelse;
			this.buf.b += Std.string("( ");
			this.addValue(econd,tabs);
			this.buf.b += Std.string(" ) ? ");
			this.addValue(eif,tabs);
			this.buf.b += Std.string(" : ");
			this.addValue(eelse,tabs);
			break;
		case 20:
			var _g1 = _g.m;
			var _g1 = _g.args;
			var e1 = _g.e;
			this.addValue(e1,tabs);
			break;
		default:
			this.addExpr(e,tabs);
		}
	}
	,addBlock: function(e,tabs) {
		this.addExpr(e,tabs);
	}
	,getFunName: function(g,args,rt) {
		switch(g._hx_index) {
		case 20:
			if(rt == hxsl_Type.TInt && this.glES != null) {
				this.decl("int _imod( int x, int y ) { return int(mod(float(x),float(y))); }");
				return "_imod";
			}
			break;
		case 33:
			var _g = args[0].t;
			switch(_g._hx_index) {
			case 10:case 11:
				if(this.glES != null && this.glES <= 2) {
					return "texture2D";
				}
				break;
			case 12:
				if(this.glES != null && this.glES <= 2) {
					return "textureCube";
				}
				break;
			case 17:
				var _g1 = _g.size;
				if(this.glES != null && this.glES <= 2) {
					return "texture2D";
				}
				break;
			default:
			}
			break;
		case 34:
			var _g = args[0].t;
			switch(_g._hx_index) {
			case 10:case 11:
				if(this.glES != null && this.glES <= 2) {
					this.decl("#extension GL_EXT_shader_texture_lod : enable");
					return "texture2DLodEXT";
				}
				break;
			case 12:
				if(this.glES != null && this.glES <= 2) {
					this.decl("#extension GL_EXT_shader_texture_lod : enable");
					return "textureCubeLodEXT";
				}
				break;
			case 17:
				var _g1 = _g.size;
				if(this.glES != null && this.glES <= 2) {
					this.decl("#extension GL_EXT_shader_texture_lod : enable");
					return "texture2DLodEXT";
				}
				break;
			default:
			}
			break;
		case 35:
			return "texelFetch";
		case 36:
			var _g = args[0].t;
			switch(_g._hx_index) {
			case 10:
				this.decl("vec2 _textureSize(sampler2D sampler, int lod) { return vec2(textureSize(sampler, lod)); }");
				break;
			case 11:
				this.decl("vec3 _textureSize(sampler2DArray sampler, int lod) { return vec3(textureSize(sampler, lod)); }");
				break;
			case 12:
				this.decl("vec2 _textureSize(samplerCube sampler, int lod) { return vec2(textureSize(sampler, lod)); }");
				break;
			case 17:
				var _g1 = _g.size;
				this.decl("vec2 _textureSize(sampler2D sampler, int lod) { return vec2(textureSize(sampler, lod)); }");
				break;
			default:
			}
			return "_textureSize";
		case 50:
			if(args[0].t == hxsl_Type.TMat3x4) {
				this.decl(hxsl_GlslOut.MAT34);
				this.decl("mat3 _mat3( _mat3x4 v ) { return mat3(v.a.xyz,v.b.xyz,v.c.xyz); }");
				return "_mat3";
			}
			break;
		case 52:
			this.decl(hxsl_GlslOut.MAT34);
			if(args.length == 1) {
				this.decl("_mat3x4 mat_to_34( mat4 m ) { return _mat3x4(m[0],m[1],m[2]); }");
				return "mat_to_34";
			}
			break;
		case 54:
			this.decl("vec4 pack( float v ) { vec4 color = fract(v * vec4(1, 255, 255.*255., 255.*255.*255.)); return color - color.yzww * vec4(1. / 255., 1. / 255., 1. / 255., 0.); }");
			break;
		case 55:
			this.decl("float unpack( vec4 color ) { return dot(color,vec4(1., 1. / 255., 1. / (255. * 255.), 1. / (255. * 255. * 255.))); }");
			break;
		case 56:
			this.decl("vec4 packNormal( vec3 v ) { return vec4((v + vec3(1.)) * vec3(0.5),1.); }");
			break;
		case 57:
			this.decl("vec3 unpackNormal( vec4 v ) { return normalize((v.xyz - vec3(0.5)) * vec3(2.)); }");
			break;
		case 58:
			this.decl("vec2 screenToUv( vec2 v ) { return v * vec2(0.5,-0.5) + vec2(0.5,0.5); }");
			break;
		case 59:
			this.decl("vec2 uvToScreen( vec2 v ) { return v * vec2(2.,-2.) + vec2(-1., 1.); }");
			break;
		case 60:case 61:case 62:
			if(this.isVertex) {
				throw haxe_Exception.thrown("Can't use " + Std.string(g) + " in vertex shader");
			}
			if(this.version < 300) {
				this.decl("#extension GL_OES_standard_derivatives:enable");
			}
			break;
		default:
		}
		return hxsl_GlslOut.GLOBALS[g._hx_index];
	}
	,addExpr: function(e,tabs) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var c = _g.c;
			switch(c._hx_index) {
			case 0:
				this.buf.b += Std.string("null");
				break;
			case 1:
				var b = c.b;
				this.buf.b += Std.string(b);
				break;
			case 2:
				var v = c.v;
				this.buf.b += Std.string(v);
				break;
			case 3:
				var f = c.v;
				var str = "" + f;
				this.buf.b += Std.string(str);
				if(str.indexOf(".") == -1 && str.indexOf("e") == -1) {
					this.buf.b += Std.string(".");
				}
				break;
			case 4:
				var v = c.v;
				this.buf.b += Std.string("\"" + v + "\"");
				break;
			}
			break;
		case 1:
			var v = _g.v;
			var v1 = this.varName(v);
			this.buf.b += Std.string(v1);
			break;
		case 2:
			var g = _g.g;
			this.buf.b += Std.string(hxsl_GlslOut.GLOBALS[g._hx_index]);
			break;
		case 3:
			var e1 = _g.e;
			this.buf.b += Std.string("(");
			this.addValue(e1,tabs);
			this.buf.b += Std.string(")");
			break;
		case 4:
			var el = _g.el;
			this.buf.b += Std.string("{\n");
			var t2 = tabs + "\t";
			var _g1 = 0;
			while(_g1 < el.length) {
				var e1 = el[_g1];
				++_g1;
				this.buf.b += Std.string(t2);
				this.addExpr(e1,t2);
				this.newLine(e1);
			}
			this.buf.b += Std.string(tabs);
			this.buf.b += Std.string("}");
			break;
		case 5:
			var op = _g.op;
			var e1 = _g.e1;
			var e2 = _g.e2;
			var _g1 = e1.t;
			var _g2 = e2.t;
			switch(op._hx_index) {
			case 1:
				if(_g1._hx_index == 5) {
					if(_g1.size == 3) {
						if(_g1.t._hx_index == 1) {
							if(_g2._hx_index == 8) {
								this.decl(hxsl_GlslOut.MAT34);
								this.decl("vec3 m3x4mult( vec3 v, _mat3x4 m) { vec4 ve = vec4(v,1.0); return vec3(dot(m.a,ve),dot(m.b,ve),dot(m.c,ve)); }");
								var tmp;
								if(op._hx_index == 20) {
									var _g3 = op.op;
									tmp = true;
								} else {
									tmp = false;
								}
								if(tmp) {
									this.addValue(e1,tabs);
									this.buf.b += Std.string(" = ");
								}
								this.buf.b += Std.string("m3x4mult(");
								this.addValue(e1,tabs);
								this.buf.b += Std.string(",");
								this.addValue(e2,tabs);
								this.buf.b += Std.string(")");
							} else {
								this.addValue(e1,tabs);
								this.buf.b += Std.string(" ");
								var v = hxsl_Printer.opStr(op);
								this.buf.b += Std.string(v);
								this.buf.b += Std.string(" ");
								this.addValue(e2,tabs);
							}
						} else {
							this.addValue(e1,tabs);
							this.buf.b += Std.string(" ");
							var v = hxsl_Printer.opStr(op);
							this.buf.b += Std.string(v);
							this.buf.b += Std.string(" ");
							this.addValue(e2,tabs);
						}
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 5:
				if(_g1._hx_index == 5) {
					var _g3 = _g1.t;
					if(_g2._hx_index == 5) {
						var _g3 = _g2.size;
						var _g3 = _g2.t;
						var n = _g1.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 6:
				if(_g1._hx_index == 5) {
					var _g3 = _g1.t;
					if(_g2._hx_index == 5) {
						var _g3 = _g2.size;
						var _g3 = _g2.t;
						var n = _g1.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 7:
				if(_g1._hx_index == 5) {
					var _g3 = _g1.t;
					if(_g2._hx_index == 5) {
						var _g3 = _g2.size;
						var _g3 = _g2.t;
						var n = _g1.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 8:
				if(_g1._hx_index == 5) {
					var _g3 = _g1.t;
					if(_g2._hx_index == 5) {
						var _g3 = _g2.size;
						var _g3 = _g2.t;
						var n = _g1.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 9:
				if(_g1._hx_index == 5) {
					var _g3 = _g1.t;
					if(_g2._hx_index == 5) {
						var _g3 = _g2.size;
						var _g3 = _g2.t;
						var n = _g1.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 10:
				if(_g1._hx_index == 5) {
					var _g3 = _g1.t;
					if(_g2._hx_index == 5) {
						var _g3 = _g2.size;
						var _g3 = _g2.t;
						var n = _g1.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 18:
				this.decl("int _ushr( int i, int j ) { return int(uint(i) >> uint(j)); }");
				this.buf.b += Std.string("_ushr(");
				this.addValue(e1,tabs);
				this.buf.b += Std.string(",");
				this.addValue(e2,tabs);
				this.buf.b += Std.string(")");
				break;
			case 19:
				if(e.t != hxsl_Type.TInt) {
					var tmp;
					if(op._hx_index == 20) {
						var _g3 = op.op;
						tmp = true;
					} else {
						tmp = false;
					}
					if(tmp) {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" = ");
					}
					this.addExpr({ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mod), t : hxsl_Type.TFun([]), p : e.p},[e1,e2]), t : e.t, p : e.p},tabs);
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 20:
				switch(op.op._hx_index) {
				case 1:
					if(_g1._hx_index == 5) {
						if(_g1.size == 3) {
							if(_g1.t._hx_index == 1) {
								if(_g2._hx_index == 8) {
									this.decl(hxsl_GlslOut.MAT34);
									this.decl("vec3 m3x4mult( vec3 v, _mat3x4 m) { vec4 ve = vec4(v,1.0); return vec3(dot(m.a,ve),dot(m.b,ve),dot(m.c,ve)); }");
									var tmp;
									if(op._hx_index == 20) {
										var _g1 = op.op;
										tmp = true;
									} else {
										tmp = false;
									}
									if(tmp) {
										this.addValue(e1,tabs);
										this.buf.b += Std.string(" = ");
									}
									this.buf.b += Std.string("m3x4mult(");
									this.addValue(e1,tabs);
									this.buf.b += Std.string(",");
									this.addValue(e2,tabs);
									this.buf.b += Std.string(")");
								} else {
									this.addValue(e1,tabs);
									this.buf.b += Std.string(" ");
									var v = hxsl_Printer.opStr(op);
									this.buf.b += Std.string(v);
									this.buf.b += Std.string(" ");
									this.addValue(e2,tabs);
								}
							} else {
								this.addValue(e1,tabs);
								this.buf.b += Std.string(" ");
								var v = hxsl_Printer.opStr(op);
								this.buf.b += Std.string(v);
								this.buf.b += Std.string(" ");
								this.addValue(e2,tabs);
							}
						} else {
							this.addValue(e1,tabs);
							this.buf.b += Std.string(" ");
							var v = hxsl_Printer.opStr(op);
							this.buf.b += Std.string(v);
							this.buf.b += Std.string(" ");
							this.addValue(e2,tabs);
						}
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
					break;
				case 19:
					if(e.t != hxsl_Type.TInt) {
						var tmp;
						if(op._hx_index == 20) {
							var _g1 = op.op;
							tmp = true;
						} else {
							tmp = false;
						}
						if(tmp) {
							this.addValue(e1,tabs);
							this.buf.b += Std.string(" = ");
						}
						this.addExpr({ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mod), t : hxsl_Type.TFun([]), p : e.p},[e1,e2]), t : e.t, p : e.p},tabs);
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
					break;
				default:
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			default:
				this.addValue(e1,tabs);
				this.buf.b += Std.string(" ");
				var v = hxsl_Printer.opStr(op);
				this.buf.b += Std.string(v);
				this.buf.b += Std.string(" ");
				this.addValue(e2,tabs);
			}
			break;
		case 6:
			var op = _g.op;
			var e1 = _g.e1;
			var v;
			switch(op._hx_index) {
			case 0:
				v = "++";
				break;
			case 1:
				v = "--";
				break;
			case 2:
				v = "!";
				break;
			case 3:
				v = "-";
				break;
			case 4:
				v = "~";
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
			this.buf.b += Std.string(v);
			this.addValue(e1,tabs);
			break;
		case 7:
			var v = _g.v;
			var init = _g.init;
			this.locals.h[v.id] = v;
			if(init != null) {
				var v1 = this.varName(v);
				this.buf.b += Std.string(v1);
				this.buf.b += Std.string(" = ");
				this.addValue(init,tabs);
			} else {
				this.buf.b += Std.string("/*var*/");
			}
			break;
		case 8:
			var _g1 = _g.e;
			var _g2 = _g.args;
			var _g3 = _g1.e;
			var _g4 = _g1.p;
			var _g4 = _g1.t;
			if(_g3._hx_index == 2) {
				var _g4 = _g3.g;
				switch(_g4._hx_index) {
				case 35:
					var g = _g4;
					var args = _g2;
					var v = this.getFunName(g,args,e.t);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string("(");
					this.addValue(args[0],tabs);
					this.buf.b += Std.string(", ");
					this.addValue(args[1],tabs);
					if(args.length != 2) {
						this.buf.b += Std.string(", ");
						this.addValue(args[2],tabs);
						this.buf.b += Std.string(")");
					} else {
						this.buf.b += Std.string(", 0)");
					}
					break;
				case 36:
					var g = _g4;
					var args = _g2;
					var v = this.getFunName(g,args,e.t);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string("(");
					this.addValue(args[0],tabs);
					if(args.length != 1) {
						this.buf.b += Std.string(", ");
						this.addValue(args[1],tabs);
						this.buf.b += Std.string(")");
					} else {
						this.buf.b += Std.string(", 0)");
					}
					break;
				case 53:
					if(_g2.length == 1) {
						var e1 = _g2[0];
						this.buf.b += Std.string("clamp(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(", 0., 1.)");
					} else {
						var v = _g1;
						var args = _g2;
						var _g3 = v.e;
						if(_g3._hx_index == 2) {
							var g = _g3.g;
							var v1 = this.getFunName(g,args,e.t);
							this.buf.b += Std.string(v1);
						} else {
							this.addValue(v,tabs);
						}
						this.buf.b += Std.string("(");
						var first = true;
						var _g3 = 0;
						while(_g3 < args.length) {
							var e1 = args[_g3];
							++_g3;
							if(first) {
								first = false;
							} else {
								this.buf.b += Std.string(", ");
							}
							this.addValue(e1,tabs);
						}
						this.buf.b += Std.string(")");
					}
					break;
				default:
					var v = _g1;
					var args = _g2;
					var _g3 = v.e;
					if(_g3._hx_index == 2) {
						var g = _g3.g;
						var v1 = this.getFunName(g,args,e.t);
						this.buf.b += Std.string(v1);
					} else {
						this.addValue(v,tabs);
					}
					this.buf.b += Std.string("(");
					var first = true;
					var _g3 = 0;
					while(_g3 < args.length) {
						var e1 = args[_g3];
						++_g3;
						if(first) {
							first = false;
						} else {
							this.buf.b += Std.string(", ");
						}
						this.addValue(e1,tabs);
					}
					this.buf.b += Std.string(")");
				}
			} else {
				var v = _g1;
				var args = _g2;
				var _g1 = v.e;
				if(_g1._hx_index == 2) {
					var g = _g1.g;
					var v1 = this.getFunName(g,args,e.t);
					this.buf.b += Std.string(v1);
				} else {
					this.addValue(v,tabs);
				}
				this.buf.b += Std.string("(");
				var first = true;
				var _g1 = 0;
				while(_g1 < args.length) {
					var e1 = args[_g1];
					++_g1;
					if(first) {
						first = false;
					} else {
						this.buf.b += Std.string(", ");
					}
					this.addValue(e1,tabs);
				}
				this.buf.b += Std.string(")");
			}
			break;
		case 9:
			var e1 = _g.e;
			var regs = _g.regs;
			if(e1.t._hx_index == 3) {
				var _g1 = 0;
				while(_g1 < regs.length) {
					var r = regs[_g1];
					++_g1;
					if(r != hxsl_Component.X) {
						throw haxe_Exception.thrown("assert");
					}
				}
				switch(regs.length) {
				case 1:
					this.addValue(e1,tabs);
					break;
				case 2:
					this.decl("vec2 _vec2( float v ) { return vec2(v,v); }");
					this.buf.b += Std.string("_vec2(");
					this.addValue(e1,tabs);
					this.buf.b += Std.string(")");
					break;
				case 3:
					this.decl("vec3 _vec3( float v ) { return vec3(v,v,v); }");
					this.buf.b += Std.string("_vec3(");
					this.addValue(e1,tabs);
					this.buf.b += Std.string(")");
					break;
				case 4:
					this.decl("vec4 _vec4( float v ) { return vec4(v,v,v,v); }");
					this.buf.b += Std.string("_vec4(");
					this.addValue(e1,tabs);
					this.buf.b += Std.string(")");
					break;
				default:
					throw haxe_Exception.thrown("assert");
				}
			} else {
				this.addValue(e1,tabs);
				this.buf.b += Std.string(".");
				var _g1 = 0;
				while(_g1 < regs.length) {
					var r = regs[_g1];
					++_g1;
					var _this = this.buf;
					var _this1 = _this.b;
					var tmp;
					switch(r._hx_index) {
					case 0:
						tmp = "x";
						break;
					case 1:
						tmp = "y";
						break;
					case 2:
						tmp = "z";
						break;
					case 3:
						tmp = "w";
						break;
					}
					_this.b = _this1 + Std.string(tmp);
				}
			}
			break;
		case 10:
			var econd = _g.econd;
			var eif = _g.eif;
			var eelse = _g.eelse;
			this.buf.b += Std.string("if( ");
			this.addValue(econd,tabs);
			this.buf.b += Std.string(") ");
			this.addExpr(eif,tabs);
			if(eelse != null) {
				if(!this.isBlock(eif)) {
					this.buf.b += Std.string(";");
				}
				this.buf.b += Std.string(" else ");
				this.addExpr(eelse,tabs);
			}
			break;
		case 11:
			this.buf.b += Std.string("discard");
			break;
		case 12:
			var e1 = _g.e;
			if(e1 == null) {
				this.buf.b += Std.string("return");
			} else {
				this.buf.b += Std.string("return ");
				this.addValue(e1,tabs);
			}
			break;
		case 13:
			var v = _g.v;
			var it = _g.it;
			var loop = _g.loop;
			this.locals.h[v.id] = v;
			var _g1 = it.e;
			if(_g1._hx_index == 5) {
				if(_g1.op._hx_index == 21) {
					var e1 = _g1.e1;
					var e2 = _g1.e2;
					this.buf.b += Std.string("for(");
					this.buf.b += Std.string(v.name + "=");
					this.addValue(e1,tabs);
					this.buf.b += Std.string(";" + v.name + "<");
					this.addValue(e2,tabs);
					this.buf.b += Std.string(";" + v.name + "++) ");
					this.addBlock(loop,tabs);
				} else {
					throw haxe_Exception.thrown("assert");
				}
			} else {
				throw haxe_Exception.thrown("assert");
			}
			break;
		case 14:
			this.buf.b += Std.string("continue");
			break;
		case 15:
			this.buf.b += Std.string("break");
			break;
		case 16:
			var e1 = _g.e;
			var index = _g.index;
			this.addValue(e1,tabs);
			this.buf.b += Std.string("[");
			this.addValue(index,tabs);
			this.buf.b += Std.string("]");
			break;
		case 17:
			var el = _g.el;
			var _g1 = e.t;
			if(_g1._hx_index == 15) {
				var _g2 = _g1.size;
				var t = _g1.t;
				this.addType(t);
			} else {
				throw haxe_Exception.thrown("assert");
			}
			this.buf.b += Std.string("[" + el.length + "]");
			this.buf.b += Std.string("(");
			var first = true;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e = el[_g1];
				++_g1;
				if(first) {
					first = false;
				} else {
					this.buf.b += Std.string(", ");
				}
				this.addValue(e,tabs);
			}
			this.buf.b += Std.string(")");
			break;
		case 18:
			var _g1 = _g.e;
			var _g1 = _g.cases;
			var _g1 = _g.def;
			this.buf.b += Std.string("switch(...)");
			break;
		case 19:
			var _g1 = _g.e;
			var _g2 = _g.loop;
			if(_g.normalWhile == false) {
				var loop = _g2;
				var e = _g1;
				var old = tabs;
				tabs += "\t";
				this.buf.b += Std.string("do ");
				this.addBlock(loop,tabs);
				this.buf.b += Std.string(" while( ");
				this.addValue(e,tabs);
				this.buf.b += Std.string(" )");
			} else {
				var loop = _g2;
				var e = _g1;
				this.buf.b += Std.string("while( ");
				this.addValue(e,tabs);
				this.buf.b += Std.string(" ) ");
				this.addBlock(loop,tabs);
			}
			break;
		case 20:
			var _g1 = _g.m;
			var _g1 = _g.args;
			var e = _g.e;
			this.addExpr(e,tabs);
			break;
		}
	}
	,varName: function(v) {
		if(v.kind == hxsl_VarKind.Output) {
			if(this.isVertex) {
				return "gl_Position";
			}
			if(this.glES != null && this.glES <= 2) {
				if(this.outIndexes == null) {
					return "gl_FragColor";
				}
				return "gl_FragData[" + this.outIndexes.h[v.id] + "]";
			}
		}
		var n = this.varNames.h[v.id];
		if(n != null) {
			return n;
		}
		n = v.name;
		if(Object.prototype.hasOwnProperty.call(hxsl_GlslOut.KWDS.h,n)) {
			n = "_" + n;
		}
		if(Object.prototype.hasOwnProperty.call(this.allNames.h,n)) {
			var k = 2;
			n += "_";
			while(Object.prototype.hasOwnProperty.call(this.allNames.h,n + k)) ++k;
			n += k;
		}
		this.varNames.h[v.id] = n;
		this.allNames.h[n] = v.id;
		return n;
	}
	,newLine: function(e) {
		if(this.isBlock(e)) {
			this.buf.b += Std.string("\n");
		} else {
			this.buf.b += Std.string(";\n");
		}
	}
	,isBlock: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 4:
			var _g1 = _g.el;
			return true;
		case 13:
			var _g1 = _g.v;
			var _g1 = _g.it;
			var loop = _g.loop;
			return this.isBlock(loop);
		case 19:
			var _g1 = _g.e;
			if(_g.normalWhile == true) {
				var loop = _g.loop;
				return this.isBlock(loop);
			} else {
				return false;
			}
			break;
		default:
			return false;
		}
	}
	,initVar: function(v) {
		switch(v.kind._hx_index) {
		case 0:case 2:
			var _g = v.type;
			var tmp;
			if(_g._hx_index == 16) {
				var _g1 = _g.t;
				var _g1 = _g.size;
				tmp = true;
			} else {
				tmp = false;
			}
			if(tmp) {
				this.buf.b += Std.string("layout(std140) ");
			}
			this.buf.b += Std.string("uniform ");
			break;
		case 1:
			this.buf.b += Std.string(this.glES != null && this.glES <= 2 ? "attribute " : "in ");
			break;
		case 3:
			this.buf.b += Std.string(this.glES != null && this.glES <= 2 ? "varying " : this.isVertex ? "out " : "in ");
			break;
		case 4:
			break;
		case 5:
			if(this.glES != null && this.glES <= 2) {
				this.outIndexes.h[v.id] = this.outIndex++;
				return;
			}
			if(this.isVertex) {
				return;
			}
			if(this.glES != null) {
				this.buf.b += Std.string("layout(location=" + this.outIndex++ + ") ");
			}
			this.buf.b += Std.string("out ");
			break;
		case 6:
			return;
		}
		if(v.qualifiers != null) {
			var _g = 0;
			var _g1 = v.qualifiers;
			while(_g < _g1.length) {
				var q = _g1[_g];
				++_g;
				if(q._hx_index == 6) {
					var p = q.p;
					switch(p._hx_index) {
					case 0:
						this.buf.b += Std.string("lowp ");
						break;
					case 1:
						this.buf.b += Std.string("mediump ");
						break;
					case 2:
						this.buf.b += Std.string("highp ");
						break;
					}
				}
			}
		}
		this.addVar(v);
		this.buf.b += Std.string(";\n");
	}
	,initVars: function(s) {
		this.outIndex = 0;
		this.uniformBuffer = 0;
		this.outIndexes = new haxe_ds_IntMap();
		var _g = 0;
		var _g1 = s.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.initVar(v);
		}
		this.buf.b += Std.string("\n");
		if(this.outIndex < 2) {
			this.outIndexes = null;
		} else if(!this.isVertex && (this.glES != null && this.glES <= 2)) {
			this.decl("#extension GL_EXT_draw_buffers : enable");
		}
	}
	,run: function(s) {
		this.locals = new haxe_ds_IntMap();
		this.decls = [];
		this.buf = new StringBuf();
		this.exprValues = [];
		if(s.funs.length != 1) {
			throw haxe_Exception.thrown("assert");
		}
		var f = s.funs[0];
		this.isVertex = f.kind == hxsl_FunctionKind.Vertex;
		if(this.isVertex) {
			this.decl("precision highp float;");
		} else {
			this.decl("precision mediump float;");
		}
		this.initVars(s);
		var tmp = this.buf;
		this.buf = new StringBuf();
		this.buf.b += Std.string("void main(void) {\n");
		var _g = f.expr.e;
		if(_g._hx_index == 4) {
			var el = _g.el;
			var _g = 0;
			while(_g < el.length) {
				var e = el[_g];
				++_g;
				this.buf.b += Std.string("\t");
				this.addExpr(e,"\t");
				this.newLine(e);
			}
		} else {
			this.addExpr(f.expr,"");
		}
		if(this.isVertex) {
			this.buf.b += Std.string("\tgl_Position.z += gl_Position.z - gl_Position.w;\n");
		}
		this.buf.b += Std.string("}");
		this.exprValues.push(this.buf.b);
		this.buf = tmp;
		var locals = Lambda.array(this.locals);
		locals.sort(function(v1,v2) {
			return Reflect.compare(v1.name,v2.name);
		});
		var _g = 0;
		while(_g < locals.length) {
			var v = locals[_g];
			++_g;
			this.addVar(v);
			this.buf.b += Std.string(";\n");
		}
		this.buf.b += Std.string("\n");
		var _g = 0;
		var _g1 = this.exprValues;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			this.buf.b += Std.string(e);
			this.buf.b += Std.string("\n\n");
		}
		if(this.glES != null) {
			this.decl("#version " + (this.version < 100 ? 100 : this.version) + (this.version > 150 ? " es" : ""));
		} else if(this.version != null) {
			this.decl("#version " + (this.version > 150 ? 150 : this.version));
		} else {
			this.decl("#version 130");
		}
		this.decls.push(this.buf.b);
		this.buf = null;
		return this.decls.join("\n");
	}
	,__class__: hxsl_GlslOut
};
var hxsl__$Linker_AllocatedVar = function() {
};
$hxClasses["hxsl._Linker.AllocatedVar"] = hxsl__$Linker_AllocatedVar;
hxsl__$Linker_AllocatedVar.__name__ = "hxsl._Linker.AllocatedVar";
hxsl__$Linker_AllocatedVar.prototype = {
	__class__: hxsl__$Linker_AllocatedVar
};
var hxsl__$Linker_ShaderInfos = function(n,v) {
	this.name = n;
	this.uid = hxsl__$Linker_ShaderInfos.UID++;
	this.vertex = v;
	this.processed = new haxe_ds_IntMap();
	this.usedFunctions = [];
	this.read = new haxe_ds_IntMap();
	this.write = new haxe_ds_IntMap();
};
$hxClasses["hxsl._Linker.ShaderInfos"] = hxsl__$Linker_ShaderInfos;
hxsl__$Linker_ShaderInfos.__name__ = "hxsl._Linker.ShaderInfos";
hxsl__$Linker_ShaderInfos.prototype = {
	__class__: hxsl__$Linker_ShaderInfos
};
var hxsl_Linker = function(batchMode) {
	if(batchMode == null) {
		batchMode = false;
	}
	this.debugDepth = 0;
	this.batchMode = batchMode;
};
$hxClasses["hxsl.Linker"] = hxsl_Linker;
hxsl_Linker.__name__ = "hxsl.Linker";
hxsl_Linker.prototype = {
	error: function(msg,p) {
		return hxsl_Error.t(msg,p);
	}
	,mergeVar: function(path,v,v2,p,shaderName) {
		switch(v.kind._hx_index) {
		case 2:
			if(!(shaderName != null && hxsl_Tools.hasBorrowQualifier(v2,shaderName))) {
				throw haxe_Exception.thrown("assert");
			}
			break;
		case 0:case 1:case 3:case 4:case 5:
			break;
		case 6:
			throw haxe_Exception.thrown("assert");
		}
		if(v.kind != v2.kind && v.kind != hxsl_VarKind.Local && v2.kind != hxsl_VarKind.Local) {
			this.error("'" + path + "' kind does not match : " + Std.string(v.kind) + " should be " + Std.string(v2.kind),p);
		}
		var _g = v.type;
		var _g1 = v2.type;
		if(_g._hx_index == 13) {
			if(_g1._hx_index == 13) {
				var fl2 = _g1.vl;
				var fl1 = _g.vl;
				var _g = 0;
				while(_g < fl1.length) {
					var f1 = fl1[_g];
					++_g;
					var ft = null;
					var _g1 = 0;
					while(_g1 < fl2.length) {
						var f2 = fl2[_g1];
						++_g1;
						if(f1.name == f2.name) {
							ft = f2;
							break;
						}
					}
					if(ft == null) {
						fl2.push(this.allocVar(f1,p,shaderName).v);
					} else {
						this.mergeVar(path + "." + ft.name,f1,ft,p,shaderName);
					}
				}
			} else if(!Type.enumEq(v.type,v2.type)) {
				this.error("'" + path + "' type does not match : " + hxsl_Tools.toString(v.type) + " should be " + hxsl_Tools.toString(v2.type),p);
			}
		} else if(!Type.enumEq(v.type,v2.type)) {
			this.error("'" + path + "' type does not match : " + hxsl_Tools.toString(v.type) + " should be " + hxsl_Tools.toString(v2.type),p);
		}
	}
	,allocVar: function(v,p,shaderName,path,parent) {
		var _gthis = this;
		if(v.parent != null && parent == null) {
			parent = this.allocVar(v.parent,p,shaderName);
			var p1 = parent.v;
			path = p1.name;
			p1 = p1.parent;
			while(p1 != null) {
				path = p1.name + "." + path;
				p1 = p1.parent;
			}
		}
		var key = path == null ? v.name : path + "." + v.name;
		if(v.qualifiers != null) {
			var _g = 0;
			var _g1 = v.qualifiers;
			while(_g < _g1.length) {
				var q = _g1[_g];
				++_g;
				if(q._hx_index == 4) {
					var n = q.n;
					key = n;
				}
			}
		}
		var v2 = this.varMap.h[key];
		var vname = v.name;
		if(v2 != null) {
			var _g = 0;
			var _g1 = v2.merged;
			while(_g < _g1.length) {
				var vm = _g1[_g];
				++_g;
				if(vm == v) {
					return v2;
				}
			}
			var tmp;
			var borrowed = hxsl_Tools.hasBorrowQualifier(v2.v,shaderName);
			if(!(v.kind == hxsl_VarKind.Param && !borrowed && !hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Shared) && !_gthis.isBatchShader || v.kind == hxsl_VarKind.Function || (v.kind == hxsl_VarKind.Var || v.kind == hxsl_VarKind.Local) && hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Private))) {
				var v1 = v2.v;
				var borrowed = hxsl_Tools.hasBorrowQualifier(v,v2.rootShaderName);
				tmp = v1.kind == hxsl_VarKind.Param && !borrowed && !hxsl_Tools.hasQualifier(v1,hxsl_VarQualifier.Shared) && !_gthis.isBatchShader || v1.kind == hxsl_VarKind.Function || (v1.kind == hxsl_VarKind.Var || v1.kind == hxsl_VarKind.Local) && hxsl_Tools.hasQualifier(v1,hxsl_VarQualifier.Private);
			} else {
				tmp = true;
			}
			if(tmp || v.kind == hxsl_VarKind.Param && v2.v.kind == hxsl_VarKind.Param) {
				var k = 2;
				while(true) {
					var a = this.varMap.h[key + k];
					if(a == null) {
						break;
					}
					var _g = 0;
					var _g1 = a.merged;
					while(_g < _g1.length) {
						var vm = _g1[_g];
						++_g;
						if(vm == v) {
							return a;
						}
					}
					++k;
				}
				vname += k;
				key += k;
			} else {
				v2.merged.push(v);
				this.mergeVar(key,v,v2.v,p,v2.rootShaderName);
				this.varIdMap.h[v.id] = v2.id;
				return v2;
			}
		}
		var vid = this.allVars.length + 1;
		var v2 = { id : vid, name : vname, type : v.type, kind : v.kind, qualifiers : v.qualifiers, parent : parent == null ? null : parent.v};
		var a = new hxsl__$Linker_AllocatedVar();
		a.v = v2;
		a.merged = [v];
		a.path = key;
		a.id = vid;
		a.parent = parent;
		a.instanceIndex = this.curInstance;
		a.rootShaderName = shaderName;
		this.allVars.push(a);
		this.varMap.h[key] = a;
		var _g = v2.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g = [];
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v = vl[_g1];
				++_g1;
				_g.push(this.allocVar(v,p,shaderName,key,a).v);
			}
			v2.type = hxsl_Type.TStruct(_g);
		}
		return a;
	}
	,mapExprVar: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			if(!this.locals.h.hasOwnProperty(v.id)) {
				var v1 = this.allocVar(v,e.p);
				if(this.curShader != null && !this.curShader.write.h.hasOwnProperty(v1.id)) {
					this.curShader.read.h[v1.id] = v1;
					if(this.curShader.vertex == null && v1.v.kind == hxsl_VarKind.Var) {
						this.curShader.vertex = false;
					}
				}
				return { e : hxsl_TExprDef.TVar(v1.v), t : v1.v.type, p : e.p};
			}
			break;
		case 5:
			var op = _g.op;
			var e1 = _g.e1;
			var e2 = _g.e2;
			var _g1 = e1.e;
			switch(op._hx_index) {
			case 4:
				switch(_g1._hx_index) {
				case 1:
					var _g2 = _g1.v;
					var v = _g2;
					if(!this.locals.h.hasOwnProperty(v.id)) {
						var e21 = this.mapExprVar(e2);
						var v1 = this.allocVar(v,e1.p);
						if(this.curShader != null) {
							this.curShader.write.h[v1.id] = v1;
						}
						return { e : hxsl_TExprDef.TBinop(op,{ e : hxsl_TExprDef.TVar(v1.v), t : v1.v.type, p : e.p},e21), t : e.t, p : e.p};
					} else {
						var v = _g2;
						if(!this.locals.h.hasOwnProperty(v.id)) {
							var e11 = this.mapExprVar(e1);
							var e21 = this.mapExprVar(e2);
							var v1 = this.allocVar(v,e11.p);
							if(this.curShader != null) {
								this.curShader.write.h[v1.id] = v1;
							}
							return { e : hxsl_TExprDef.TBinop(op,e11,e21), t : e.t, p : e.p};
						}
					}
					break;
				case 9:
					var _g2 = _g1.e;
					var _g3 = _g1.regs;
					var _g3 = _g2.e;
					var _g4 = _g2.p;
					var _g4 = _g2.t;
					if(_g3._hx_index == 1) {
						var v = _g3.v;
						if(!this.locals.h.hasOwnProperty(v.id)) {
							var e11 = this.mapExprVar(e1);
							var e21 = this.mapExprVar(e2);
							var v1 = this.allocVar(v,e11.p);
							if(this.curShader != null) {
								this.curShader.write.h[v1.id] = v1;
							}
							return { e : hxsl_TExprDef.TBinop(op,e11,e21), t : e.t, p : e.p};
						}
					}
					break;
				default:
				}
				break;
			case 20:
				var _g2 = op.op;
				switch(_g1._hx_index) {
				case 1:
					var v = _g1.v;
					if(!this.locals.h.hasOwnProperty(v.id)) {
						var e11 = this.mapExprVar(e1);
						var e21 = this.mapExprVar(e2);
						var v1 = this.allocVar(v,e11.p);
						if(this.curShader != null) {
							this.curShader.write.h[v1.id] = v1;
						}
						return { e : hxsl_TExprDef.TBinop(op,e11,e21), t : e.t, p : e.p};
					}
					break;
				case 9:
					var _g2 = _g1.e;
					var _g3 = _g1.regs;
					var _g1 = _g2.e;
					var _g3 = _g2.p;
					var _g3 = _g2.t;
					if(_g1._hx_index == 1) {
						var v = _g1.v;
						if(!this.locals.h.hasOwnProperty(v.id)) {
							var e11 = this.mapExprVar(e1);
							var e21 = this.mapExprVar(e2);
							var v1 = this.allocVar(v,e11.p);
							if(this.curShader != null) {
								this.curShader.write.h[v1.id] = v1;
							}
							return { e : hxsl_TExprDef.TBinop(op,e11,e21), t : e.t, p : e.p};
						}
					}
					break;
				default:
				}
				break;
			default:
			}
			break;
		case 7:
			var _g1 = _g.init;
			var v = _g.v;
			this.locals.h[v.id] = true;
			break;
		case 11:
			if(this.curShader != null) {
				this.curShader.vertex = false;
				this.curShader.hasDiscard = true;
			}
			break;
		case 13:
			var _g1 = _g.it;
			var _g1 = _g.loop;
			var v = _g.v;
			this.locals.h[v.id] = true;
			break;
		default:
		}
		return hxsl_Tools.map(e,$bind(this,this.mapExprVar));
	}
	,addShader: function(name,vertex,e,p) {
		var s = new hxsl__$Linker_ShaderInfos(name,vertex);
		this.curShader = s;
		s.priority = p;
		s.body = this.mapExprVar(e);
		this.shaders.push(s);
		this.curShader = null;
		return s;
	}
	,sortByPriorityDesc: function(s1,s2) {
		if(s1.priority == s2.priority) {
			return s1.uid - s2.uid;
		}
		return s2.priority - s1.priority;
	}
	,buildDependency: function(s,v,isWritten) {
		var found = !isWritten;
		var _g = 0;
		var _g1 = this.shaders;
		while(_g < _g1.length) {
			var parent = _g1[_g];
			++_g;
			if(parent == s) {
				found = true;
				continue;
			} else if(!found) {
				continue;
			}
			if(!parent.write.h.hasOwnProperty(v.id)) {
				continue;
			}
			if(s.vertex) {
				if(parent.vertex == false) {
					continue;
				}
				if(parent.vertex == null) {
					parent.vertex = true;
				}
			}
			s.deps.set(parent,true);
			this.debugDepth++;
			this.initDependencies(parent);
			this.debugDepth--;
			if(!parent.read.h.hasOwnProperty(v.id)) {
				return;
			}
		}
		if(v.v.kind == hxsl_VarKind.Var) {
			this.error("Variable " + v.path + " required by " + s.name + " is missing initializer",null);
		}
	}
	,initDependencies: function(s) {
		if(s.deps != null) {
			return;
		}
		s.deps = new haxe_ds_ObjectMap();
		var r = s.read.iterator();
		while(r.hasNext()) {
			var r1 = r.next();
			this.buildDependency(s,r1,s.write.h.hasOwnProperty(r1.id));
		}
		if(s.vertex == null) {
			var d = s.deps.keys();
			while(d.hasNext()) {
				var d1 = d.next();
				if(d1.vertex == false) {
					s.vertex = false;
					break;
				}
			}
		}
		if(s.vertex) {
			var d = s.deps.keys();
			while(d.hasNext()) {
				var d1 = d.next();
				if(d1.vertex == null) {
					d1.vertex = true;
				}
			}
		}
	}
	,collect: function(cur,out,vertex) {
		if(cur.onStack) {
			this.error("Loop in shader dependencies (" + cur.name + ")",null);
		}
		if(cur.marked == vertex) {
			return;
		}
		cur.marked = vertex;
		cur.onStack = true;
		var _g = [];
		var d = cur.deps.keys();
		while(d.hasNext()) {
			var d1 = d.next();
			_g.push(d1);
		}
		var deps = _g;
		deps.sort($bind(this,this.sortByPriorityDesc));
		var _g = 0;
		while(_g < deps.length) {
			var d = deps[_g];
			++_g;
			this.collect(d,out,vertex);
		}
		if(cur.vertex == null) {
			cur.vertex = vertex;
		}
		if(cur.vertex == vertex) {
			out.push(cur);
		}
		cur.onStack = false;
	}
	,uniqueLocals: function(expr,locals) {
		var _g = expr.e;
		switch(_g._hx_index) {
		case 4:
			var el = _g.el;
			var _g1 = new haxe_ds_StringMap();
			var h = locals.h;
			var k_h = h;
			var k_keys = Object.keys(h);
			var k_length = k_keys.length;
			var k_current = 0;
			while(k_current < k_length) {
				var k = k_keys[k_current++];
				_g1.h[k] = true;
			}
			var locals1 = _g1;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e = el[_g1];
				++_g1;
				this.uniqueLocals(e,locals1);
			}
			break;
		case 7:
			var _g1 = _g.init;
			var v = _g.v;
			if(Object.prototype.hasOwnProperty.call(locals.h,v.name)) {
				var k = 2;
				while(Object.prototype.hasOwnProperty.call(locals.h,v.name + k)) ++k;
				v.name += k;
			}
			locals.h[v.name] = true;
			break;
		default:
			var _g = $bind(this,this.uniqueLocals);
			var locals1 = locals;
			hxsl_Tools.iter(expr,function(expr) {
				_g(expr,locals1);
			});
		}
	}
	,link: function(shadersData) {
		var _gthis = this;
		this.varMap = new haxe_ds_StringMap();
		this.varIdMap = new haxe_ds_IntMap();
		this.allVars = [];
		this.shaders = [];
		this.locals = new haxe_ds_IntMap();
		var dupShaders = new haxe_ds_ObjectMap();
		var _g = [];
		var _g1 = 0;
		while(_g1 < shadersData.length) {
			var s = shadersData[_g1];
			++_g1;
			var s1 = s;
			var sreal = s1;
			if(dupShaders.h.__keys__[s1.__id__] != null) {
				s1 = hxsl_Clone.shaderData(s1);
			}
			dupShaders.set(s1,sreal);
			_g.push(s1);
		}
		shadersData = _g;
		this.curInstance = 0;
		var outVars = [];
		var _g = 0;
		while(_g < shadersData.length) {
			var s = shadersData[_g];
			++_g;
			this.isBatchShader = this.batchMode && StringTools.startsWith(s.name,"batchShader_");
			var _g1 = 0;
			var _g2 = s.vars;
			while(_g1 < _g2.length) {
				var v = _g2[_g1];
				++_g1;
				var v2 = this.allocVar(v,null,s.name);
				if(this.isBatchShader && v2.v.kind == hxsl_VarKind.Param && !StringTools.startsWith(v2.path,"Batch_")) {
					v2.v.kind = hxsl_VarKind.Local;
				}
				if(v.kind == hxsl_VarKind.Output) {
					outVars.push(v);
				}
			}
			var _g3 = 0;
			var _g4 = s.funs;
			while(_g3 < _g4.length) {
				var f = _g4[_g3];
				++_g3;
				var v1 = this.allocVar(f.ref,f.expr.p);
				v1.kind = f.kind;
			}
			this.curInstance++;
		}
		var priority = 0;
		var initPrio_init = [-3000];
		var initPrio_vert = [-2000];
		var initPrio_frag = [-1000];
		var _g = 0;
		while(_g < shadersData.length) {
			var s = shadersData[_g];
			++_g;
			var _g1 = 0;
			var _g2 = s.funs;
			while(_g1 < _g2.length) {
				var f = _g2[_g1];
				++_g1;
				var v = this.allocVar(f.ref,f.expr.p);
				if(v.kind == null) {
					throw haxe_Exception.thrown("assert");
				}
				switch(v.kind._hx_index) {
				case 0:case 1:
					this.addShader(s.name + "." + (v.kind == hxsl_FunctionKind.Vertex ? "vertex" : "fragment"),v.kind == hxsl_FunctionKind.Vertex,f.expr,priority);
					break;
				case 2:
					var prio;
					var status;
					switch(f.ref.name) {
					case "__init__fragment":
						prio = initPrio_frag;
						status = false;
						break;
					case "__init__vertex":
						prio = initPrio_vert;
						status = true;
						break;
					default:
						prio = initPrio_init;
						status = null;
					}
					var _g3 = f.expr.e;
					if(_g3._hx_index == 4) {
						var el = _g3.el;
						var index = 0;
						var _g4 = 0;
						while(_g4 < el.length) {
							var e = el[_g4];
							++_g4;
							this.addShader(s.name + "." + f.ref.name + index++,status,e,prio[0]++);
						}
					} else {
						this.addShader(s.name + "." + f.ref.name,status,f.expr,prio[0]++);
					}
					break;
				case 3:
					throw haxe_Exception.thrown("Unexpected helper function in linker " + v.v.name);
				}
			}
			++priority;
		}
		this.shaders.sort($bind(this,this.sortByPriorityDesc));
		var entry = new hxsl__$Linker_ShaderInfos("<entry>",false);
		entry.deps = new haxe_ds_ObjectMap();
		var _g = 0;
		while(_g < outVars.length) {
			var v = outVars[_g];
			++_g;
			this.buildDependency(entry,this.allocVar(v,null),false);
		}
		var _g = 0;
		var _g1 = this.shaders;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.hasDiscard) {
				this.initDependencies(s);
				entry.deps.set(s,true);
			}
		}
		var _g = 0;
		var _g1 = this.shaders;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.vertex != null) {
				continue;
			}
			var onlyParams = true;
			var r = s.read.iterator();
			while(r.hasNext()) {
				var r1 = r.next();
				if(r1.v.kind != hxsl_VarKind.Param) {
					onlyParams = false;
					break;
				}
			}
			if(onlyParams) {
				s.vertex = false;
			}
		}
		var v = [];
		var f = [];
		this.collect(entry,v,true);
		this.collect(entry,f,false);
		if(f.pop() != entry) {
			throw haxe_Exception.thrown("assert");
		}
		var _g = 0;
		var _g1 = this.shaders;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			s.marked = null;
		}
		var _g = 0;
		var _g1 = v.concat(f);
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var d = s.deps.keys();
			while(d.hasNext()) {
				var d1 = d.next();
				if(d1.marked == null) {
					this.error(d1.name + " needed by " + s.name + " is unreachable",null);
				}
			}
			s.marked = true;
		}
		var outVars = [];
		var varMap_h = { };
		var addVar = null;
		addVar = function(v) {
			if(varMap_h.hasOwnProperty(v.id)) {
				return;
			}
			varMap_h[v.id] = true;
			if(v.v.parent != null) {
				addVar(v.parent);
			} else {
				outVars.push(v.v);
			}
		};
		var _g = 0;
		var _g1 = v.concat(f);
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var v1 = s.read.iterator();
			while(v1.hasNext()) {
				var v2 = v1.next();
				addVar(v2);
			}
			var v3 = s.write.iterator();
			while(v3.hasNext()) {
				var v4 = v3.next();
				addVar(v4);
			}
		}
		var cleanVar = null;
		cleanVar = function(v) {
			var _g = v.type;
			if(_g._hx_index == 13) {
				var vl = _g.vl;
				if(v.kind != hxsl_VarKind.Input) {
					var vout = [];
					var _g = 0;
					while(_g < vl.length) {
						var v1 = vl[_g];
						++_g;
						if(varMap_h.hasOwnProperty(v1.id)) {
							cleanVar(v1);
							vout.push(v1);
						}
					}
					v.type = hxsl_Type.TStruct(vout);
				}
			}
		};
		var _g = 0;
		while(_g < outVars.length) {
			var v1 = outVars[_g];
			++_g;
			cleanVar(v1);
		}
		var build = function(kind,name,a) {
			var v = { id : hxsl_Tools.allocVarId(), name : name, type : hxsl_Type.TFun([{ ret : hxsl_Type.TVoid, args : []}]), kind : hxsl_VarKind.Function};
			outVars.push(v);
			var exprs = [];
			var _g = 0;
			while(_g < a.length) {
				var s = a[_g];
				++_g;
				var _g1 = s.body.e;
				if(_g1._hx_index == 4) {
					var el = _g1.el;
					var _g2 = 0;
					while(_g2 < el.length) {
						var e = el[_g2];
						++_g2;
						exprs.push(e);
					}
				} else {
					exprs.push(s.body);
				}
			}
			var expr = { e : hxsl_TExprDef.TBlock(exprs), t : hxsl_Type.TVoid, p : exprs.length == 0 ? null : exprs[0].p};
			_gthis.uniqueLocals(expr,new haxe_ds_StringMap());
			return { kind : kind, ref : v, ret : hxsl_Type.TVoid, args : [], expr : expr};
		};
		var funs = [build(hxsl_FunctionKind.Vertex,"vertex",v),build(hxsl_FunctionKind.Fragment,"fragment",f)];
		var s = dupShaders.keys();
		while(s.hasNext()) {
			var s1 = s.next();
			var sreal = dupShaders.h[s1.__id__];
			if(s1 == sreal) {
				continue;
			}
			var _g = 0;
			var _g1 = s1.vars.length;
			while(_g < _g1) {
				var i = _g++;
				this.allocVar(s1.vars[i],null).merged.unshift(sreal.vars[i]);
			}
		}
		return { name : "out", vars : outVars, funs : funs};
	}
	,__class__: hxsl_Linker
};
var hxsl_Output = $hxEnums["hxsl.Output"] = { __ename__:true,__constructs__:null
	,Const: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"hxsl.Output",toString:$estr}; },$_._hx_name="Const",$_.__params__ = ["v"],$_)
	,Value: ($_=function(v,size) { return {_hx_index:1,v:v,size:size,__enum__:"hxsl.Output",toString:$estr}; },$_._hx_name="Value",$_.__params__ = ["v","size"],$_)
	,PackNormal: ($_=function(v) { return {_hx_index:2,v:v,__enum__:"hxsl.Output",toString:$estr}; },$_._hx_name="PackNormal",$_.__params__ = ["v"],$_)
	,PackFloat: ($_=function(v) { return {_hx_index:3,v:v,__enum__:"hxsl.Output",toString:$estr}; },$_._hx_name="PackFloat",$_.__params__ = ["v"],$_)
	,Vec2: ($_=function(a) { return {_hx_index:4,a:a,__enum__:"hxsl.Output",toString:$estr}; },$_._hx_name="Vec2",$_.__params__ = ["a"],$_)
	,Vec3: ($_=function(a) { return {_hx_index:5,a:a,__enum__:"hxsl.Output",toString:$estr}; },$_._hx_name="Vec3",$_.__params__ = ["a"],$_)
	,Vec4: ($_=function(a) { return {_hx_index:6,a:a,__enum__:"hxsl.Output",toString:$estr}; },$_._hx_name="Vec4",$_.__params__ = ["a"],$_)
	,Swiz: ($_=function(a,swiz) { return {_hx_index:7,a:a,swiz:swiz,__enum__:"hxsl.Output",toString:$estr}; },$_._hx_name="Swiz",$_.__params__ = ["a","swiz"],$_)
};
hxsl_Output.__constructs__ = [hxsl_Output.Const,hxsl_Output.Value,hxsl_Output.PackNormal,hxsl_Output.PackFloat,hxsl_Output.Vec2,hxsl_Output.Vec3,hxsl_Output.Vec4,hxsl_Output.Swiz];
hxsl_Output.__empty_constructs__ = [];
var hxsl_Printer = function(varId) {
	if(varId == null) {
		varId = false;
	}
	this.varId = varId;
};
$hxClasses["hxsl.Printer"] = hxsl_Printer;
hxsl_Printer.__name__ = "hxsl.Printer";
hxsl_Printer.opStr = function(op) {
	switch(op._hx_index) {
	case 0:
		return "+";
	case 1:
		return "*";
	case 2:
		return "/";
	case 3:
		return "-";
	case 4:
		return "=";
	case 5:
		return "==";
	case 6:
		return "!=";
	case 7:
		return ">";
	case 8:
		return ">=";
	case 9:
		return "<";
	case 10:
		return "<=";
	case 11:
		return "&";
	case 12:
		return "|";
	case 13:
		return "^";
	case 14:
		return "&&";
	case 15:
		return "||";
	case 16:
		return "<<";
	case 17:
		return ">>";
	case 18:
		return ">>>";
	case 19:
		return "%";
	case 20:
		var op1 = op.op;
		return hxsl_Printer.opStr(op1) + "=";
	case 21:
		return "...";
	case 22:
		return "=>";
	default:
		return "??" + Std.string(op);
	}
};
hxsl_Printer.toString = function(e,varId) {
	if(varId == null) {
		varId = false;
	}
	return new hxsl_Printer(varId).exprString(e);
};
hxsl_Printer.shaderToString = function(s,varId) {
	if(varId == null) {
		varId = false;
	}
	return new hxsl_Printer(varId).shaderString(s);
};
hxsl_Printer.prototype = {
	shaderString: function(s) {
		this.buffer = new StringBuf();
		var _g = 0;
		var _g1 = s.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.addVar(v,null);
			this.buffer.b += Std.string(";\n");
		}
		if(s.vars.length > 0) {
			this.buffer.b += Std.string("\n");
		}
		var _g = 0;
		var _g1 = s.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.addFun(f);
			this.buffer.b += Std.string("\n\n");
		}
		return this.buffer.b;
	}
	,exprString: function(e) {
		this.buffer = new StringBuf();
		this.addExpr(e,"");
		return this.buffer.b;
	}
	,addVar: function(v,defKind,tabs,parent) {
		if(tabs == null) {
			tabs = "";
		}
		if(v.qualifiers != null) {
			var _g = 0;
			var _g1 = v.qualifiers;
			while(_g < _g1.length) {
				var q = _g1[_g];
				++_g;
				var v1;
				switch(q._hx_index) {
				case 0:
					var max = q.max;
					v1 = "const" + (max == null ? "" : "(" + max + ")");
					break;
				case 1:
					v1 = "private";
					break;
				case 2:
					v1 = "nullable";
					break;
				case 3:
					v1 = "perObject";
					break;
				case 4:
					var n = q.n;
					v1 = "name('" + n + "')";
					break;
				case 5:
					v1 = "shared";
					break;
				case 6:
					var p = q.p;
					v1 = $hxEnums[p.__enum__].__constructs__[p._hx_index]._hx_name.toLowerCase() + "p";
					break;
				case 7:
					var min = q.min;
					var max1 = q.max;
					v1 = "range(" + min + "," + max1 + ")";
					break;
				case 8:
					v1 = "ignore";
					break;
				case 9:
					var n1 = q.v;
					v1 = "perInstance(" + n1 + ")";
					break;
				case 10:
					var s = q.s;
					v1 = "doc(\"" + StringTools.replace(s,"\"","\\\"") + "\")";
					break;
				case 11:
					var s1 = q.source;
					v1 = "borrow(" + s1 + ")";
					break;
				case 12:
					var s2 = q.name;
					v1 = "sampler(" + s2 + ")";
					break;
				}
				this.buffer.b += Std.string("@" + v1 + " ");
			}
		}
		if(v.kind != defKind) {
			switch(v.kind._hx_index) {
			case 0:
				this.buffer.b += Std.string("@global ");
				break;
			case 1:
				this.buffer.b += Std.string("@input ");
				break;
			case 2:
				this.buffer.b += Std.string("@param ");
				break;
			case 3:
				this.buffer.b += Std.string("@varying ");
				break;
			case 4:
				this.buffer.b += Std.string("@local ");
				break;
			case 5:
				this.buffer.b += Std.string("@output ");
				break;
			case 6:
				this.buffer.b += Std.string("@function ");
				break;
			}
		}
		this.buffer.b += Std.string("var ");
		if(v.parent == parent) {
			this.buffer.b += Std.string(v.name + (this.varId ? "@" + v.id : ""));
		} else {
			this.addVarName(v);
		}
		this.buffer.b += Std.string(" : ");
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			this.buffer.b += Std.string("{");
			var first = true;
			var _g = 0;
			while(_g < vl.length) {
				var v1 = vl[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buffer.b += Std.string(", ");
				}
				this.addVar(v1,v1.kind,tabs,v1);
			}
			this.buffer.b += Std.string("}");
		} else {
			var v1 = hxsl_Tools.toString(v.type);
			this.buffer.b += Std.string(v1);
		}
	}
	,addFun: function(f) {
		this.buffer.b += Std.string("function " + f.ref.name + "(");
		var first = true;
		var _g = 0;
		var _g1 = f.args;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(first) {
				this.buffer.b += Std.string(" ");
				first = false;
			} else {
				this.buffer.b += Std.string(", ");
			}
			this.addVar(a,hxsl_VarKind.Local);
		}
		if(f.args.length > 0) {
			this.buffer.b += Std.string(" ");
		}
		var v = ") : " + hxsl_Tools.toString(f.ret) + " ";
		this.buffer.b += Std.string(v);
		this.addExpr(f.expr,"");
	}
	,addVarName: function(v) {
		if(v.parent != null) {
			this.addVarName(v.parent);
			this.buffer.b += Std.string(".");
		}
		this.buffer.b += Std.string(v.name);
		if(this.varId) {
			this.buffer.b += Std.string("@" + v.id);
		}
	}
	,addConst: function(c) {
		var _this = this.buffer;
		var _this1 = _this.b;
		var tmp;
		switch(c._hx_index) {
		case 0:
			tmp = "null";
			break;
		case 1:
			var b = c.b;
			tmp = b;
			break;
		case 2:
			var i = c.v;
			tmp = i;
			break;
		case 3:
			var f = c.v;
			tmp = f;
			break;
		case 4:
			var s = c.v;
			tmp = "\"" + s + "\"";
			break;
		}
		_this.b = _this1 + Std.string(tmp);
	}
	,addExpr: function(e,tabs) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var c = _g.c;
			this.addConst(c);
			break;
		case 1:
			var v = _g.v;
			this.addVarName(v);
			break;
		case 2:
			var g = _g.g;
			var v = hxsl_Tools2.toString(g);
			this.buffer.b += Std.string(v);
			break;
		case 3:
			var e = _g.e;
			this.buffer.b += Std.string("(");
			this.addExpr(e,tabs);
			this.buffer.b += Std.string(")");
			break;
		case 4:
			var el = _g.el;
			this.buffer.b += Std.string("{");
			tabs += "\t";
			var _g1 = 0;
			while(_g1 < el.length) {
				var e = el[_g1];
				++_g1;
				this.buffer.b += Std.string("\n" + tabs);
				this.addExpr(e,tabs);
				this.buffer.b += Std.string(";");
			}
			tabs = HxOverrides.substr(tabs,1,null);
			if(el.length > 0) {
				this.buffer.b += Std.string("\n" + tabs);
			}
			this.buffer.b += Std.string("}");
			break;
		case 5:
			var op = _g.op;
			var e1 = _g.e1;
			var e2 = _g.e2;
			this.addExpr(e1,tabs);
			var v = " " + hxsl_Printer.opStr(op) + " ";
			this.buffer.b += Std.string(v);
			this.addExpr(e2,tabs);
			break;
		case 6:
			var op = _g.op;
			var e = _g.e1;
			var v;
			switch(op._hx_index) {
			case 0:
				v = "++";
				break;
			case 1:
				v = "--";
				break;
			case 2:
				v = "!";
				break;
			case 3:
				v = "-";
				break;
			case 4:
				v = "~";
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
			this.buffer.b += Std.string(v);
			this.addExpr(e,tabs);
			break;
		case 7:
			var v = _g.v;
			var init = _g.init;
			this.addVar(v,hxsl_VarKind.Local,tabs);
			if(init != null) {
				this.buffer.b += Std.string(" = ");
				this.addExpr(init,tabs);
			}
			break;
		case 8:
			var e = _g.e;
			var el = _g.args;
			this.addExpr(e,tabs);
			this.buffer.b += Std.string("(");
			var first = true;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e = el[_g1];
				++_g1;
				if(first) {
					first = false;
				} else {
					this.buffer.b += Std.string(", ");
				}
				this.addExpr(e,tabs);
			}
			this.buffer.b += Std.string(")");
			break;
		case 9:
			var e = _g.e;
			var regs = _g.regs;
			this.addExpr(e,tabs);
			this.buffer.b += Std.string(".");
			var _g1 = 0;
			while(_g1 < regs.length) {
				var r = regs[_g1];
				++_g1;
				this.buffer.b += Std.string(hxsl_Printer.SWIZ[r._hx_index]);
			}
			break;
		case 10:
			var cond = _g.econd;
			var eif = _g.eif;
			var eelse = _g.eelse;
			this.buffer.b += Std.string("if( ");
			this.addExpr(cond,tabs);
			this.buffer.b += Std.string(" ) ");
			this.addExpr(eif,tabs);
			if(eelse != null) {
				this.buffer.b += Std.string(" else ");
				this.addExpr(eelse,tabs);
			}
			break;
		case 11:
			this.buffer.b += Std.string("discard");
			break;
		case 12:
			var e = _g.e;
			this.buffer.b += Std.string("return");
			if(e != null) {
				this.buffer.b += Std.string(" ");
				this.addExpr(e,tabs);
			}
			break;
		case 13:
			var v = _g.v;
			var it = _g.it;
			var loop = _g.loop;
			this.buffer.b += Std.string("for( ");
			this.addVarName(v);
			this.buffer.b += Std.string(" in ");
			this.addExpr(it,tabs);
			this.buffer.b += Std.string(" ) ");
			this.addExpr(loop,tabs);
			break;
		case 14:
			this.buffer.b += Std.string("continue");
			break;
		case 15:
			this.buffer.b += Std.string("break");
			break;
		case 16:
			var e1 = _g.e;
			var e2 = _g.index;
			this.addExpr(e1,tabs);
			this.buffer.b += Std.string("[");
			this.addExpr(e2,tabs);
			this.buffer.b += Std.string("]");
			break;
		case 17:
			var el = _g.el;
			this.buffer.b += Std.string("[");
			var first = true;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e = el[_g1];
				++_g1;
				if(first) {
					first = false;
				} else {
					this.buffer.b += Std.string(", ");
				}
				this.addExpr(e,tabs);
			}
			this.buffer.b += Std.string("]");
			break;
		case 18:
			var e = _g.e;
			var cases = _g.cases;
			var def = _g.def;
			this.buffer.b += Std.string("switch( ");
			this.addExpr(e,tabs);
			this.buffer.b += Std.string(") {");
			var old = tabs;
			var _g1 = 0;
			while(_g1 < cases.length) {
				var c = cases[_g1];
				++_g1;
				this.buffer.b += Std.string("\n" + tabs);
				this.buffer.b += Std.string("case ");
				var first = true;
				var _g2 = 0;
				var _g3 = c.values;
				while(_g2 < _g3.length) {
					var v = _g3[_g2];
					++_g2;
					if(first) {
						first = false;
					} else {
						this.buffer.b += Std.string(", ");
					}
					this.addExpr(v,tabs);
				}
				tabs += "\t";
				this.buffer.b += Std.string(":\n" + tabs);
				this.addExpr(c.expr,tabs);
				tabs = old;
			}
			if(def != null) {
				this.buffer.b += Std.string("\n" + tabs);
				tabs += "\t";
				this.buffer.b += Std.string("default:\n" + tabs);
				this.addExpr(def,tabs);
				tabs = old;
			}
			this.buffer.b += Std.string("\n" + tabs + "}");
			break;
		case 19:
			var _g1 = _g.e;
			var _g2 = _g.loop;
			if(_g.normalWhile == false) {
				var loop = _g2;
				var e = _g1;
				var old = tabs;
				tabs += "\t";
				this.buffer.b += Std.string("do {\n" + tabs);
				this.addExpr(loop,tabs);
				tabs = old;
				this.buffer.b += Std.string("\n" + tabs + "} while( ");
				this.addExpr(e,tabs);
				this.buffer.b += Std.string(" )");
			} else {
				var loop = _g2;
				var e = _g1;
				this.buffer.b += Std.string("while( ");
				this.addExpr(e,tabs);
				var old = tabs;
				tabs += "\t";
				this.buffer.b += Std.string(" ) {\n" + tabs);
				this.addExpr(loop,tabs);
				tabs = old;
				this.buffer.b += Std.string("\n" + tabs + "}");
			}
			break;
		case 20:
			var m = _g.m;
			var args = _g.args;
			var e = _g.e;
			this.buffer.b += Std.string("@");
			this.buffer.b += Std.string(m);
			if(args.length > 0) {
				this.buffer.b += Std.string("(");
				var first = true;
				var _g = 0;
				while(_g < args.length) {
					var c = args[_g];
					++_g;
					if(first) {
						first = false;
					} else {
						this.buffer.b += Std.string(", ");
					}
					this.addConst(c);
				}
				this.buffer.b += Std.string(")");
			}
			this.buffer.b += Std.string(" ");
			this.addExpr(e,tabs);
			break;
		}
	}
	,__class__: hxsl_Printer
};
var hxsl_AllocParam = function(name,pos,instance,index,type) {
	this.name = name;
	this.pos = pos;
	this.instance = instance;
	this.index = index;
	this.type = type;
};
$hxClasses["hxsl.AllocParam"] = hxsl_AllocParam;
hxsl_AllocParam.__name__ = "hxsl.AllocParam";
hxsl_AllocParam.prototype = {
	__class__: hxsl_AllocParam
};
var hxsl_AllocGlobal = function(pos,path,type) {
	this.pos = pos;
	this.path = path;
	this.gid = hxsl_Globals.allocID(path);
	this.type = type;
};
$hxClasses["hxsl.AllocGlobal"] = hxsl_AllocGlobal;
hxsl_AllocGlobal.__name__ = "hxsl.AllocGlobal";
hxsl_AllocGlobal.prototype = {
	__class__: hxsl_AllocGlobal
};
var hxsl_RuntimeShaderData = function() {
};
$hxClasses["hxsl.RuntimeShaderData"] = hxsl_RuntimeShaderData;
hxsl_RuntimeShaderData.__name__ = "hxsl.RuntimeShaderData";
hxsl_RuntimeShaderData.prototype = {
	__class__: hxsl_RuntimeShaderData
};
var hxsl_ShaderInstanceDesc = function(shader,bits) {
	this.shader = shader;
	this.bits = bits;
};
$hxClasses["hxsl.ShaderInstanceDesc"] = hxsl_ShaderInstanceDesc;
hxsl_ShaderInstanceDesc.__name__ = "hxsl.ShaderInstanceDesc";
hxsl_ShaderInstanceDesc.prototype = {
	__class__: hxsl_ShaderInstanceDesc
};
var hxsl_RuntimeShader = function() {
	this.id = hxsl_RuntimeShader.UID++;
};
$hxClasses["hxsl.RuntimeShader"] = hxsl_RuntimeShader;
hxsl_RuntimeShader.__name__ = "hxsl.RuntimeShader";
hxsl_RuntimeShader.prototype = {
	__class__: hxsl_RuntimeShader
};
var hxsl_Serializer = function() {
};
$hxClasses["hxsl.Serializer"] = hxsl_Serializer;
hxsl_Serializer.__name__ = "hxsl.Serializer";
hxsl_Serializer.prototype = {
	readVarInt: function() {
		var b = this.input.readByte();
		if(b < 128) {
			return b;
		}
		if(b == 255) {
			return this.input.readInt32();
		}
		return (b & 127) << 8 | this.input.readByte();
	}
	,readType: function() {
		switch(this.input.readByte()) {
		case 0:
			return hxsl_Type.TVoid;
		case 1:
			return hxsl_Type.TInt;
		case 2:
			return hxsl_Type.TBool;
		case 3:
			return hxsl_Type.TFloat;
		case 4:
			return hxsl_Type.TString;
		case 5:
			var bits = this.input.readByte();
			var v = hxsl_Serializer.TVECS.h[bits];
			if(v == null) {
				v = hxsl_Type.TVec(bits & 7,Type.createEnumIndex(hxsl_VecType,bits >> 3,null));
				hxsl_Serializer.TVECS.h[bits] = v;
			}
			return v;
		case 6:
			return hxsl_Type.TMat3;
		case 7:
			return hxsl_Type.TMat4;
		case 8:
			return hxsl_Type.TMat3x4;
		case 9:
			return hxsl_Type.TBytes(this.input.readInt32());
		case 10:
			return hxsl_Type.TSampler2D;
		case 11:
			return hxsl_Type.TSampler2DArray;
		case 12:
			return hxsl_Type.TSamplerCube;
		case 13:
			var id = this.readVarInt();
			var t = this.types[id];
			if(t != null) {
				return t;
			}
			var f = $bind(this,this.readVar);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(f());
			}
			t = hxsl_Type.TStruct(_g);
			this.types[id] = t;
			return t;
		case 14:
			return hxsl_Type.TFun(null);
		case 15:
			var t = this.readType();
			var v = this.readVar();
			return hxsl_Type.TArray(t,v == null ? hxsl_SizeDecl.SConst(this.readVarInt()) : hxsl_SizeDecl.SVar(v));
		case 16:
			var t = this.readType();
			var v = this.readVar();
			return hxsl_Type.TBuffer(t,v == null ? hxsl_SizeDecl.SConst(this.readVarInt()) : hxsl_SizeDecl.SVar(v));
		case 17:
			return hxsl_Type.TChannel(this.input.readByte());
		case 18:
			return hxsl_Type.TMat2;
		default:
			throw haxe_Exception.thrown("assert");
		}
	}
	,readString: function() {
		var len = this.readVarInt();
		var s = this.input.read(len).getString(0,len);
		return s;
	}
	,readConst: function() {
		switch(this.input.readByte()) {
		case 0:
			return hxsl_Const.CNull;
		case 1:
			return hxsl_Const.CBool(this.input.readByte() != 0);
		case 2:
			return hxsl_Const.CInt(this.input.readInt32());
		case 3:
			return hxsl_Const.CFloat(this.input.readDouble());
		case 4:
			return hxsl_Const.CString(this.readString());
		default:
			throw haxe_Exception.thrown("assert");
		}
	}
	,readExpr: function() {
		var _gthis = this;
		var k = this.input.readByte();
		if(k-- == 0) {
			return null;
		}
		var e;
		switch(k) {
		case 0:
			e = hxsl_TExprDef.TConst(this.readConst());
			break;
		case 1:
			e = hxsl_TExprDef.TVar(this.readVar());
			break;
		case 2:
			e = hxsl_TExprDef.TGlobal(hxsl_Serializer.TGLOBALS[this.input.readByte()]);
			break;
		case 3:
			e = hxsl_TExprDef.TParenthesis(this.readExpr());
			break;
		case 4:
			var f = $bind(this,this.readExpr);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(f());
			}
			e = hxsl_TExprDef.TBlock(_g);
			break;
		case 5:
			var op = this.input.readByte();
			e = hxsl_TExprDef.TBinop(op >= 128 ? haxe_macro_Binop.OpAssignOp(hxsl_Serializer.BOPS[op & 127]) : hxsl_Serializer.BOPS[op],this.readExpr(),this.readExpr());
			break;
		case 6:
			e = hxsl_TExprDef.TUnop(hxsl_Serializer.UNOPS[this.input.readByte()],this.readExpr());
			break;
		case 7:
			e = hxsl_TExprDef.TVarDecl(this.readVar(),this.readExpr());
			break;
		case 8:
			var e1 = this.readExpr();
			var f = $bind(this,this.readExpr);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(f());
			}
			e = hxsl_TExprDef.TCall(e1,_g);
			break;
		case 9:
			var e1 = this.readExpr();
			var bits = this.input.readUInt16();
			var swiz = hxsl_Serializer.TSWIZ.h[bits];
			if(swiz == null) {
				var _g = [];
				var _g1 = 0;
				var _g2 = (bits & 3) + 1;
				while(_g1 < _g2) {
					var i = _g1++;
					_g.push(hxsl_Serializer.REGS[bits >> i * 2 + 2 & 3]);
				}
				swiz = _g;
				hxsl_Serializer.TSWIZ.h[bits] = swiz;
			}
			e = hxsl_TExprDef.TSwiz(e1,swiz);
			break;
		case 10:
			e = hxsl_TExprDef.TIf(this.readExpr(),this.readExpr(),this.readExpr());
			break;
		case 11:
			e = hxsl_TExprDef.TDiscard;
			break;
		case 12:
			e = hxsl_TExprDef.TReturn(this.readExpr());
			break;
		case 13:
			e = hxsl_TExprDef.TFor(this.readVar(),this.readExpr(),this.readExpr());
			break;
		case 14:
			e = hxsl_TExprDef.TContinue;
			break;
		case 15:
			e = hxsl_TExprDef.TBreak;
			break;
		case 16:
			e = hxsl_TExprDef.TArray(this.readExpr(),this.readExpr());
			break;
		case 17:
			var f = $bind(this,this.readExpr);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(f());
			}
			e = hxsl_TExprDef.TArrayDecl(_g);
			break;
		case 18:
			var e1 = this.readExpr();
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				var f = $bind(_gthis,_gthis.readExpr);
				var _g3 = [];
				var _g4 = 0;
				var _g5 = _gthis.readVarInt();
				while(_g4 < _g5) {
					var i1 = _g4++;
					_g3.push(f());
				}
				_g.push({ values : _g3, expr : _gthis.readExpr()});
			}
			e = hxsl_TExprDef.TSwitch(e1,_g,this.readExpr());
			break;
		case 19:
			e = hxsl_TExprDef.TWhile(this.readExpr(),this.readExpr(),this.input.readByte() != 0);
			break;
		case 20:
			var e1 = this.readString();
			var f = $bind(this,this.readConst);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(f());
			}
			e = hxsl_TExprDef.TMeta(e1,_g,this.readExpr());
			break;
		default:
			throw haxe_Exception.thrown("assert");
		}
		return { e : e, t : this.readType(), p : null};
	}
	,readVar: function() {
		var id = this.readVarInt();
		if(id == 0) {
			return null;
		}
		var v = this.varMap.h[id];
		if(v != null) {
			return v;
		}
		v = { id : hxsl_Tools.allocVarId(), name : this.readString(), type : null, kind : null};
		this.varMap.h[id] = v;
		v.type = this.readType();
		v.kind = hxsl_Serializer.VKINDS[this.input.readByte()];
		v.parent = this.readVar();
		var nq = this.input.readByte();
		if(nq > 0) {
			v.qualifiers = [];
			var _g = 0;
			var _g1 = nq;
			while(_g < _g1) {
				var i = _g++;
				var qid = this.input.readByte();
				var q;
				switch(qid) {
				case 0:
					var n = this.input.readInt32();
					q = hxsl_VarQualifier.Const(n == 0 ? null : n);
					break;
				case 1:
					q = hxsl_VarQualifier.Private;
					break;
				case 2:
					q = hxsl_VarQualifier.Nullable;
					break;
				case 3:
					q = hxsl_VarQualifier.PerObject;
					break;
				case 4:
					q = hxsl_VarQualifier.Name(this.readString());
					break;
				case 5:
					q = hxsl_VarQualifier.Shared;
					break;
				case 6:
					q = hxsl_VarQualifier.Precision(hxsl_Serializer.PRECS[this.input.readByte()]);
					break;
				case 7:
					q = hxsl_VarQualifier.Range(this.input.readDouble(),this.input.readDouble());
					break;
				case 8:
					q = hxsl_VarQualifier.Ignore;
					break;
				case 9:
					q = hxsl_VarQualifier.PerInstance(this.input.readInt32());
					break;
				case 10:
					q = hxsl_VarQualifier.Doc(this.readString());
					break;
				case 11:
					q = hxsl_VarQualifier.Borrow(this.readString());
					break;
				case 12:
					q = hxsl_VarQualifier.Sampler(this.readString());
					break;
				default:
					throw haxe_Exception.thrown("assert");
				}
				v.qualifiers.push(q);
			}
		}
		return v;
	}
	,readFun: function() {
		var tmp = hxsl_Serializer.FKIND[this.input.readByte()];
		var tmp1 = this.readVar();
		var f = $bind(this,this.readVar);
		var _g = [];
		var _g1 = 0;
		var _g2 = this.readVarInt();
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(f());
		}
		return { kind : tmp, ref : tmp1, args : _g, ret : this.readType(), expr : this.readExpr()};
	}
	,unserialize: function(data) {
		this.input = new haxe_io_BytesInput(haxe_crypto_Base64.decode(data,false));
		if(this.input.readByte() != (hxsl_Serializer.SIGN & 255) || this.input.readByte() != (hxsl_Serializer.SIGN >> 8 & 255) || this.input.readByte() != (hxsl_Serializer.SIGN >> 16 & 255)) {
			throw haxe_Exception.thrown("Invalid HXSL data");
		}
		this.varMap = new haxe_ds_IntMap();
		this.types = [];
		var tmp = this.readString();
		var f = $bind(this,this.readVar);
		var _g = [];
		var _g1 = 0;
		var _g2 = this.readVarInt();
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(f());
		}
		var tmp1 = _g;
		var f = $bind(this,this.readFun);
		var _g = [];
		var _g1 = 0;
		var _g2 = this.readVarInt();
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(f());
		}
		return { name : tmp, vars : tmp1, funs : _g};
	}
	,__class__: hxsl_Serializer
};
var hxsl_ShaderList = function(s,n) {
	this.s = s;
	this.next = n;
};
$hxClasses["hxsl.ShaderList"] = hxsl_ShaderList;
hxsl_ShaderList.__name__ = "hxsl.ShaderList";
hxsl_ShaderList.addSort = function(s,shaders) {
	var prev = null;
	var hd = shaders;
	while(hd != null && hd.s.priority < s.priority) {
		prev = hd;
		hd = hd.next;
	}
	if(prev == null) {
		var l = new hxsl_ShaderList(s,shaders);
		hxsl_ShaderList.checkSize(l);
		return l;
	}
	prev.next = new hxsl_ShaderList(s,prev.next);
	hxsl_ShaderList.checkSize(shaders);
	return shaders;
};
hxsl_ShaderList.checkSize = function(list) {
	if(hxsl_ShaderList.MAX_LIST_SIZE <= 0) {
		return;
	}
	var hd = list;
	var count = 0;
	while(hd != null) {
		if(!hxsl_ShaderList.ALLOW_DUPLICATES && hd.next != null && hd.next.s == hd.s) {
			throw haxe_Exception.thrown("Duplicate shader " + Std.string(hd.s));
		}
		++count;
		hd = hd.next;
	}
	if(count > hxsl_ShaderList.MAX_LIST_SIZE) {
		throw haxe_Exception.thrown("Too many shaders");
	}
};
hxsl_ShaderList.prototype = {
	__class__: hxsl_ShaderList
};
var hxsl_ShaderInstance = function(shader) {
	this.id = ++hxsl_ShaderInstance.UID;
	this.shader = shader;
	this.params = new haxe_ds_IntMap();
};
$hxClasses["hxsl.ShaderInstance"] = hxsl_ShaderInstance;
hxsl_ShaderInstance.__name__ = "hxsl.ShaderInstance";
hxsl_ShaderInstance.prototype = {
	__class__: hxsl_ShaderInstance
};
var hxsl_ShaderGlobal = function(v,gid) {
	this.v = v;
	this.globalId = gid;
};
$hxClasses["hxsl.ShaderGlobal"] = hxsl_ShaderGlobal;
hxsl_ShaderGlobal.__name__ = "hxsl.ShaderGlobal";
hxsl_ShaderGlobal.prototype = {
	__class__: hxsl_ShaderGlobal
};
var hxsl_ShaderConst = function(v,pos,bits) {
	this.v = v;
	this.pos = pos;
	this.bits = bits;
};
$hxClasses["hxsl.ShaderConst"] = hxsl_ShaderConst;
hxsl_ShaderConst.__name__ = "hxsl.ShaderConst";
hxsl_ShaderConst.prototype = {
	__class__: hxsl_ShaderConst
};
var hxsl_SharedShader = function(src) {
	this.instanceCache = new haxe_ds_IntMap();
	this.consts = null;
	this.globals = [];
	if(src == "") {
		return;
	}
	this.data = new hxsl_Serializer().unserialize(src);
	var _g = 0;
	var _g1 = this.data.vars;
	while(_g < _g1.length) {
		var v = _g1[_g];
		++_g;
		this.initVarId(v);
	}
	this.data = hxsl_SharedShader.compactMem(this.data);
	this.initialize();
};
$hxClasses["hxsl.SharedShader"] = hxsl_SharedShader;
hxsl_SharedShader.__name__ = "hxsl.SharedShader";
hxsl_SharedShader.compactMem = function(mem) {
	return mem;
};
hxsl_SharedShader.prototype = {
	initialize: function() {
		var _g = 0;
		var _g1 = this.data.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.browseVar(v);
		}
	}
	,makeInstance: function(constBits) {
		var $eval = new hxsl_Eval();
		var c = this.consts;
		while(c != null) {
			var c1 = c.v;
			var _g = c.v.type;
			var tmp;
			switch(_g._hx_index) {
			case 1:
				tmp = hxsl_Const.CInt(constBits >>> c.pos & (1 << c.bits) - 1);
				break;
			case 2:
				tmp = hxsl_Const.CBool((constBits >>> c.pos & 1) != 0);
				break;
			case 17:
				var _g1 = _g.size;
				tmp = hxsl_Const.CInt(constBits >>> c.pos & (1 << c.bits) - 1);
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
			$eval.setConstant(c1,tmp);
			c = c.next;
		}
		$eval.inlineCalls = true;
		$eval.unrollLoops = hxsl_SharedShader.UNROLL_LOOPS;
		var edata = $eval.eval(this.data);
		edata = hxsl_SharedShader.compactMem(edata);
		var i = new hxsl_ShaderInstance(edata);
		this.paramsCount = 0;
		var _g = 0;
		var _g1 = this.data.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.addParam($eval,i,v);
		}
		this.instanceCache.h[constBits] = i;
		return i;
	}
	,addParam: function($eval,i,v) {
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g = 0;
			while(_g < vl.length) {
				var v1 = vl[_g];
				++_g;
				this.addParam($eval,i,v1);
			}
		} else if(v.kind == hxsl_VarKind.Param) {
			i.params.h[$eval.varMap.h[v.__id__].id] = this.paramsCount;
			this.paramsCount++;
		}
	}
	,initVarId: function(v) {
		v.id = hxsl_Tools.allocVarId();
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g = 0;
			while(_g < vl.length) {
				var v = vl[_g];
				++_g;
				this.initVarId(v);
			}
		}
	}
	,browseVar: function(v,path) {
		if(path == null) {
			path = hxsl_Tools.getName(v);
		} else {
			path += "." + v.name;
		}
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g = 0;
			while(_g < vl.length) {
				var vs = vl[_g];
				++_g;
				this.browseVar(vs,path);
			}
		} else {
			var globalId = 0;
			if(v.kind == hxsl_VarKind.Global) {
				globalId = hxsl_Globals.allocID(path);
				this.globals.push(new hxsl_ShaderGlobal(v,globalId));
			}
			if(!hxsl_Tools.isConst(v)) {
				return;
			}
			var bits = hxsl_Tools.getConstBits(v);
			if(bits > 0) {
				var pos = this.consts == null ? 0 : this.consts.pos + this.consts.bits;
				var c = new hxsl_ShaderConst(v,pos,bits);
				c.globalId = globalId;
				c.next = this.consts;
				this.consts = c;
			}
		}
	}
	,__class__: hxsl_SharedShader
};
var hxsl__$Splitter_VarProps = function(v) {
	this.v = v;
	this.read = 0;
	this.write = 0;
};
$hxClasses["hxsl._Splitter.VarProps"] = hxsl__$Splitter_VarProps;
hxsl__$Splitter_VarProps.__name__ = "hxsl._Splitter.VarProps";
hxsl__$Splitter_VarProps.prototype = {
	__class__: hxsl__$Splitter_VarProps
};
var hxsl_Splitter = function() {
};
$hxClasses["hxsl.Splitter"] = hxsl_Splitter;
hxsl_Splitter.__name__ = "hxsl.Splitter";
hxsl_Splitter.prototype = {
	split: function(s) {
		var vfun = null;
		var vvars = new haxe_ds_IntMap();
		var ffun = null;
		var fvars = new haxe_ds_IntMap();
		this.varNames = new haxe_ds_StringMap();
		this.varMap = new haxe_ds_ObjectMap();
		var _g = 0;
		var _g1 = s.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			switch(f.kind._hx_index) {
			case 0:
				this.vars = vvars;
				vfun = f;
				this.checkExpr(f.expr);
				break;
			case 1:
				this.vars = fvars;
				ffun = f;
				this.checkExpr(f.expr);
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
		}
		vfun = { ret : vfun.ret, ref : vfun.ref, kind : vfun.kind, args : vfun.args, expr : this.mapVars(vfun.expr)};
		var _g = 0;
		var _g1 = Lambda.array(vvars);
		while(_g < _g1.length) {
			var inf = _g1[_g];
			++_g;
			var v = inf.v;
			switch(v.kind._hx_index) {
			case 3:case 4:
				v.kind = fvars.h.hasOwnProperty(v.id) ? hxsl_VarKind.Var : hxsl_VarKind.Local;
				break;
			default:
			}
			switch(v.kind._hx_index) {
			case 3:case 5:
				if(inf.read > 0 || inf.write > 1) {
					var nv = { id : hxsl_Tools.allocVarId(), name : v.name, kind : v.kind, type : v.type};
					this.vars = vvars;
					var ninf = this.get(nv);
					v.kind = hxsl_VarKind.Local;
					var p = vfun.expr.p;
					var e = { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(nv), t : nv.type, p : p},{ e : hxsl_TExprDef.TVar(v), t : v.type, p : p}), t : nv.type, p : p};
					this.addExpr(vfun,e);
					this.checkExpr(e);
					if(nv.kind == hxsl_VarKind.Var) {
						var old = fvars.h[v.id];
						this.varMap.set(v,nv);
						fvars.remove(v.id);
						var np = new hxsl__$Splitter_VarProps(nv);
						np.read = old.read;
						np.write = old.write;
						fvars.h[nv.id] = np;
					}
				}
				break;
			default:
			}
		}
		var finits = [];
		var todo = [];
		var inf = fvars.iterator();
		while(inf.hasNext()) {
			var inf1 = inf.next();
			var v = inf1.v;
			switch(v.kind._hx_index) {
			case 1:
				var nv = { id : hxsl_Tools.allocVarId(), name : v.name, kind : hxsl_VarKind.Var, type : v.type};
				this.uniqueName(nv);
				var i = vvars.h[v.id];
				if(i == null) {
					i = new hxsl__$Splitter_VarProps(v);
					vvars.h[v.id] = i;
				}
				i.read++;
				var vp = new hxsl__$Splitter_VarProps(nv);
				vp.write = 1;
				vvars.h[nv.id] = vp;
				var fp = new hxsl__$Splitter_VarProps(nv);
				fp.read = 1;
				todo.push(fp);
				this.addExpr(vfun,{ e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(nv), t : v.type, p : vfun.expr.p},{ e : hxsl_TExprDef.TVar(v), t : v.type, p : vfun.expr.p}), t : v.type, p : vfun.expr.p});
				this.varMap.set(v,nv);
				inf1.local = true;
				break;
			case 3:
				if(inf1.write > 0) {
					var nv1 = { id : hxsl_Tools.allocVarId(), name : v.name, kind : hxsl_VarKind.Local, type : v.type};
					this.uniqueName(nv1);
					finits.push({ e : hxsl_TExprDef.TVarDecl(nv1,{ e : hxsl_TExprDef.TVar(v), t : v.type, p : ffun.expr.p}), t : hxsl_Type.TVoid, p : ffun.expr.p});
					this.varMap.set(v,nv1);
				}
				break;
			default:
			}
		}
		var _g = 0;
		while(_g < todo.length) {
			var v = todo[_g];
			++_g;
			fvars.h[v.v.id] = v;
		}
		var v = vvars.iterator();
		while(v.hasNext()) {
			var v1 = v.next();
			this.checkVar(v1,true,vvars,vfun.expr.p);
		}
		var v = fvars.iterator();
		while(v.hasNext()) {
			var v1 = v.next();
			this.checkVar(v1,false,vvars,ffun.expr.p);
		}
		var v = this.varMap.keys();
		while(v.hasNext()) {
			var v1 = v.next();
			var v2 = this.varMap.h[this.varMap.h[v1.__id__].__id__];
			if(v2 != null) {
				this.varMap.set(v1,v2);
			}
		}
		ffun = { ret : ffun.ret, ref : ffun.ref, kind : ffun.kind, args : ffun.args, expr : this.mapVars(ffun.expr)};
		var _g = ffun.expr.e;
		if(_g._hx_index == 4) {
			var el = _g.el;
			var _g = 0;
			while(_g < finits.length) {
				var e = finits[_g];
				++_g;
				el.unshift(e);
			}
		} else {
			finits.push(ffun.expr);
			ffun.expr = { e : hxsl_TExprDef.TBlock(finits), t : hxsl_Type.TVoid, p : ffun.expr.p};
		}
		var _g = [];
		var v = vvars.iterator();
		while(v.hasNext()) {
			var v1 = v.next();
			if(!v1.local) {
				_g.push(v1.v);
			}
		}
		var vvars = _g;
		var _g = [];
		var v = fvars.iterator();
		while(v.hasNext()) {
			var v1 = v.next();
			if(!v1.local) {
				_g.push(v1.v);
			}
		}
		var fvars = _g;
		vvars.sort(function(v1,v2) {
			return v1.id - v2.id;
		});
		fvars.sort(function(v1,v2) {
			return v1.id - v2.id;
		});
		return { vertex : { name : "vertex", vars : vvars, funs : [vfun]}, fragment : { name : "fragment", vars : fvars, funs : [ffun]}};
	}
	,addExpr: function(f,e) {
		var _g = f.expr.e;
		if(_g._hx_index == 4) {
			var el = _g.el;
			el.push(e);
		} else {
			f.expr = { e : hxsl_TExprDef.TBlock([f.expr,e]), t : hxsl_Type.TVoid, p : f.expr.p};
		}
	}
	,checkVar: function(v,vertex,vvars,p) {
		switch(v.v.kind._hx_index) {
		case 3:
			if(!vertex) {
				var i = vvars.h[v.v.id];
				if(i == null || i.write == 0) {
					throw haxe_Exception.thrown(new hxsl_Error("Varying " + v.v.name + " is not written by vertex shader",p));
				}
			}
			break;
		case 4:
			if(v.requireInit) {
				throw haxe_Exception.thrown(new hxsl_Error("Variable " + v.v.name + " is used without being initialized",p));
			}
			break;
		default:
		}
	}
	,mapVars: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			var v2 = this.varMap.h[v.__id__];
			if(v2 == null) {
				return e;
			} else {
				return { e : hxsl_TExprDef.TVar(v2), t : e.t, p : e.p};
			}
			break;
		case 7:
			var v = _g.v;
			var init = _g.init;
			var v2 = this.varMap.h[v.__id__];
			if(v2 == null) {
				return hxsl_Tools.map(e,$bind(this,this.mapVars));
			} else {
				return { e : hxsl_TExprDef.TVarDecl(v2,this.mapVars(init)), t : e.t, p : e.p};
			}
			break;
		case 13:
			var v = _g.v;
			var it = _g.it;
			var loop = _g.loop;
			var v2 = this.varMap.h[v.__id__];
			if(v2 == null) {
				return hxsl_Tools.map(e,$bind(this,this.mapVars));
			} else {
				return { e : hxsl_TExprDef.TFor(v2,this.mapVars(it),this.mapVars(loop)), t : e.t, p : e.p};
			}
			break;
		default:
			return hxsl_Tools.map(e,$bind(this,this.mapVars));
		}
	}
	,get: function(v) {
		var i = this.vars.h[v.id];
		if(i == null) {
			var v2 = this.varMap.h[v.__id__];
			if(v2 != null) {
				return this.get(v2);
			}
			var oldName = v.name;
			this.uniqueName(v);
			if(v.kind == hxsl_VarKind.Local && oldName != v.name) {
				var nv = { id : hxsl_Tools.allocVarId(), name : v.name, kind : v.kind, type : v.type};
				this.varMap.set(v,nv);
				v.name = oldName;
				v = nv;
			}
			i = new hxsl__$Splitter_VarProps(v);
			this.vars.h[v.id] = i;
		}
		return i;
	}
	,uniqueName: function(v) {
		if(v.kind == hxsl_VarKind.Global || v.kind == hxsl_VarKind.Output || v.kind == hxsl_VarKind.Input) {
			return;
		}
		v.parent = null;
		var n = this.varNames.h[v.name];
		if(n != null && n != v) {
			var prefix = v.name;
			while(HxOverrides.cca(prefix,prefix.length - 1) >= 48 && HxOverrides.cca(prefix,prefix.length - 1) <= 57) prefix = HxOverrides.substr(prefix,0,-1);
			var k = prefix == v.name ? 2 : Std.parseInt(HxOverrides.substr(v.name,prefix.length,null));
			while(Object.prototype.hasOwnProperty.call(this.varNames.h,prefix + k)) ++k;
			v.name = prefix + k;
		}
		this.varNames.h[v.name] = v;
	}
	,checkExpr: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			var inf = this.get(v);
			if(inf.write == 0) {
				inf.requireInit = true;
			}
			inf.read++;
			break;
		case 5:
			var _g1 = _g.op;
			var _g2 = _g.e1;
			var _g3 = _g.e2;
			switch(_g1._hx_index) {
			case 4:
				var _g4 = _g2.e;
				var _g5 = _g2.p;
				var _g5 = _g2.t;
				switch(_g4._hx_index) {
				case 1:
					var v = _g4.v;
					var e1 = _g3;
					var inf = this.get(v);
					inf.write++;
					this.checkExpr(e1);
					break;
				case 9:
					var _g5 = _g4.e;
					var _g6 = _g4.regs;
					var _g4 = _g5.e;
					var _g6 = _g5.p;
					var _g6 = _g5.t;
					if(_g4._hx_index == 1) {
						var v = _g4.v;
						var e1 = _g3;
						var inf = this.get(v);
						inf.write++;
						this.checkExpr(e1);
					} else {
						hxsl_Tools.iter(e,$bind(this,this.checkExpr));
					}
					break;
				default:
					hxsl_Tools.iter(e,$bind(this,this.checkExpr));
				}
				break;
			case 20:
				var _g4 = _g1.op;
				var _g1 = _g2.e;
				var _g4 = _g2.p;
				var _g4 = _g2.t;
				switch(_g1._hx_index) {
				case 1:
					var v = _g1.v;
					var e1 = _g3;
					var inf = this.get(v);
					if(inf.write == 0) {
						inf.requireInit = true;
					}
					inf.read++;
					inf.write++;
					this.checkExpr(e1);
					break;
				case 9:
					var _g2 = _g1.e;
					var _g4 = _g1.regs;
					var _g1 = _g2.e;
					var _g4 = _g2.p;
					var _g4 = _g2.t;
					if(_g1._hx_index == 1) {
						var v = _g1.v;
						var e1 = _g3;
						var inf = this.get(v);
						if(inf.write == 0) {
							inf.requireInit = true;
						}
						inf.read++;
						inf.write++;
						this.checkExpr(e1);
					} else {
						hxsl_Tools.iter(e,$bind(this,this.checkExpr));
					}
					break;
				default:
					hxsl_Tools.iter(e,$bind(this,this.checkExpr));
				}
				break;
			default:
				hxsl_Tools.iter(e,$bind(this,this.checkExpr));
			}
			break;
		case 7:
			var v = _g.v;
			var init = _g.init;
			var inf = this.get(v);
			inf.local = true;
			if(init != null) {
				this.checkExpr(init);
				inf.write++;
			}
			break;
		case 13:
			var v = _g.v;
			var it = _g.it;
			var loop = _g.loop;
			this.checkExpr(it);
			var inf = this.get(v);
			inf.local = true;
			inf.write++;
			this.checkExpr(loop);
			break;
		default:
			hxsl_Tools.iter(e,$bind(this,this.checkExpr));
		}
	}
	,__class__: hxsl_Splitter
};
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = "js.html._CanvasElement.CanvasUtil";
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var name = "webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	var name = "experimental-webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	return null;
};
Math.__name__ = "Math";
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_Resource.content = [{ name : "R_level0_png", data : "iVBORw0KGgoAAAANSUhEUgAAAGsAAAAaCAIAAAA/ozU/AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA3VJREFUeNrMWbFuFDEQXSN3+QPoSR2k+wDaFKG/jopUJ51ExQ/QIJ1EBRWp6EmxbeiRSB16qGipl9nM7uycxx6PvbtRrNPJ54zHnuc34/HENcdt/+l5k2iHy19ZGaXh9GAu6Vy2/b758uzlazkOq89cEffPlThdVLe2DkojgnKvdoEAQYstduyCdZ1xpsWYxUGUxDFSWHJQn1gKMd+SL7L2x8UZfG+ub6lT5+9yf1wh9r+e/9u2J/3g5a3FEmMMsXhSVidnoqtAcLKNIchJTt9IB6nnz+EjfD/d77ATKIyeE/VBMwmnDjIVB4sCnGWKkH/31xKkFY38Q/JgJ3zkCHW4ZhCjJXifS1KfDxo3uXhzpRNgcx/u3ksOBu4Ah4O2caId3tw1zj2keY+xgf2SVpKGRJAer66bJLouSqs61q9hXanYk4pgASEG2Aec0oVBZvPt5z3R3QTZqxelyy3eeJAxRn950qTE27X0Lnm60y8sPthPAbz2uyHeA5ojfPpVvmqbcypRnyvLZoB96MUY2iQEWnrh3AZdYC/+BG7u3MMgWJFLQygHwzl8YP62OUHzvQV4WBWlyYujrJZejHj1HcRoRGoaGcGtwKIrvwd5ytI1nbtXEMQ+JROKPkx9NnYSXmA2qHh7M6HDGUdJ5hENAabvV+jOmwCpHGpZd5tJWjcqMGaOlOT2H4yD5/1Pr8/X8Q08InJEAJOiYaShzGajEWd+MQJRqEieh8DVNs3Ij4JXHYFI8StLW+QpjyNB+BtIPcIXYBdsce0rxbIQD1zBAXj9HpAMzTxFWXSbLlxxUQRhlHRSHIiKzQcicJSiQxquzethY9uLs8hNYtGYKVp8Pm3IAdtkyIte4hEj27ISzlJWFFUunB7CU/MVGb0ekw15csVH/gp0FqQtnLdnqkp9SSmXBpvEwWxmPr8ona36uCxAQdnKArGOpizz6itSSY2mGMuUWb+W9M/WCiWCXloezVH0GKycc6q0mZ0ybalNTrFgF4ASxB/+U4kncv80stZbigNdevGVPl2jmnUCyhQqEE5N5xxEJT4lGjXDfmkoHk0jWGQk96x+80cJYgF3zmP5yItTrLEwq4gjK1WrKtKaouQxdU740y+7e7kzBT5eYVzw/9QWp1Y8jB6/RtBddlv8n0dZmbpamz2/nV+tshyDolPexf8FGADolQQehUIuCQAAAABJRU5ErkJggg"},{ name : "R_sfx_missile02_wav", data : "//tQxAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAATAAAQUgANDQ0NDRoaGhoaKCgoKCg1NTU1NTVDQ0NDQ1BQUFBQXl5eXl5ra2tra2t5eXl5eYaGhoaGlJSUlJShoaGhoaGvr6+vr7y8vLy8ysrKysrX19fX19fl5eXl5fLy8vLy//////8AAAA6TEFNRTMuOTlyAaUAAAAALkMAABRAJAK8QgAAQAAAEFLuwp16AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/7UMQAAAhAtzI0YQABuxytPx5gAIgC02MIEEIgmTJp3d7zn+gQDAzv9pz0IQnIRv+QjOc7v/1O6Hf5zgAYW9YIQfD+IHcH3lwf5//ggCEoCAIAhKOy75k8ZLcpY1M2QNVYtB69rtA9XBPIY+ZFMDcnQTI5lwVhwYdvmWHdZKCBcLKQNJplkshNPYLfWhDLJoGomJ95Xb3sYZyoQG1LvDs02X/81svf9zc5fbfnhrOjEGNAYJzWpos3YwbhBlerk7bEoc/rpe/lgABMAjqP52f/+1LEBQCLtPthPMQACXIZ7TWEjXjhgTBPRnB+dsaTF6PRQIwaAoB8XIFzhGNMPEZClFzx9ocpcUiJ0cWwu+7uMtLMgdUIikT0QxFF24vjxjDzZVmdi7aITbqZ6r+or4d7vGZ7u756OteqxCAAJwC1isklLzs+YYnhKnVhyITwbBM00fBIyyK0yrRsSSYYJFpqzrwMKLvSZ6eQxzGY5tPV6eLN3dcsMqzMaF9PNYSDwt+/AmCMqFTxkibILLipo+IBRUhd9apyRFNBIkkpyvbAJv/7UsQFgAsAz3msMGfRgBEuNYYYODGk+pukexwOAGdCocesCQJhICZwlnZVswx5+cHbuXOm6WfJ2c9Aj5FVq9+mhgipUzI1LeH5/8f38sy5NPMG9ZjX1CrXx1v1L2WfQ+epkSUaIBAACm8IGmAcFQruLBWIQEiOOZWHtWdAiPCU4REdAUTWIKMTRTW0FQxtQ9ctA2MmyurYy9dD28OYwNlFgo0qmcFjjHZw+J5AuA3NNvcss56zC/XVb6qjCqv++OHK+u6QggpO0JKQtiDATgkD//tSxAeACyCte0ewY9GLHu5o9gz6oFQFIJVA4IoXC0pCSdXNTM8RHMS9qjti0SCK7TXN35guGXDln6mUbh/3PWjEWIcSAqVjFCZ5MBoPquc1C0o/lv6HM45Xf0Cie6qWUgAAAS6xb0E0GaeZiFgyEiYwHMvPjkYFYgLXU7TD9qwQon0r8KP21olkjjxwa02ozM8QiRd7Mpc0M0TMZcKW2exUmGnoxeVvV7/l/RVgNTxVy/oxl8e16jLTP2z0m1y9dq40gyEkIQABCm+HQhZuKYv/+1LEB4ALmNl155hvAYkSbjTEjWjNmIfR3F+UC7MB+plKbhvByIACllsapQNU3kdK8wDbPKMinKsmwg4DoYqwqTznrP2P9xl0v2dKHIX9GpEisZQBRp3R/0fTXdR5NK+eTjY2wwAAAAFPoAYqDsNI1gTEswLhBA0KZyCi4gWMEYY5QZUigEL7lGAqXMK4R1BkNkgBgZFbSSaHggVNDRqKdcyAgyhxRhBaQmDQ5QKsJeFCoNPoTdFhkkPSJVppR1//2qJ1kJHN0iAAAVBcfxBEsf/7UsQGAAtIjXOnmG0BWo2vsPSZjiQ5jiTpeEIerpQqtYSIWUIFQUFEd0oGH5JBWNyazMFaRnK5PX2Y0FlDZfVODHgcDwlcprAC5zbgIKVMb///9Tdj3JdHWLFBZbgGYTPio+NuOJIigsw7DAJMhkQrEiWEwms7SQm0aajZSFugPibgwhDC6yDT8POQNqwpCKsCF7ayu6jqVl0GskUYdOlgKtd1kw0+MSOQ0WZhT/b/ud2B116E2EVbXU4mWQAAEnQMCA/D6HgPiUQ1wX1EuxVH//tSxAuACnh7caYYcME7jS309hgwOp+ZLoo8L5yIEvS6L5RKTnvpmrJW03hlW9UZRQZRoVnRigkkq5DDwBLPQBZFi2MD1rVf///7UPGNGtf8XSLhbAAACskpQXBepXQxoJbIVIBuH47mMI/kEKrJ1ZiToxKBNBS5RQOaM3c57W+LUsUFTICcAyZMRCIc8qNEZkLGEV7Pto6qfVv/s90cj2KttpNEALoYLRME8vB0I4mGagdSwUlK80HsrOnTiGdwENo9PcSVsETEyFnLD/+EjFz/+1LEGAAKDKV7h7Bh8UgVbfTDDcilPXDvSLXz8AaHXUA8fGfKGBZ9//fXZ1/0CJ4ufvdTfRW6i0QQAX7LgIgdBAxLQ7CINY4mRBjEglmDTBPMQWNYmdWPVBdMUxaUmMehI/OnCqqlfXvuxzzuX3QhZPj5oUdvpsGJWj1e/pDpRlCt7tmuhf01+tlQBUGCOnkeqdZjGZkY/PoqgHx+SpdyM0+FrLoXCtvTHILi4WfmbnSZWvEGBVb73xIsUNihU+Lf4oyFr9nm1ynyb6GnaCFdmv/7UsQkgIn0i3UnpGkxPQ8stPYguFe1IRdRd0w0hAACNEAFRDjNOsnqbJifxcOg7LS7VSNzlAwnGRPKKQ7LC5acnNBc4UYPWFT4OORIQ42lauHkkzBgsMMBlQoHV7FF1sbMO1uK4qr/r//UUgABAAACcbjALIZZpqokygMFEI4u8Z2zmmgbCYnbDxk8GnmaZRPmd6URQ0S9Ig74USoM7TQxlUpPvyuECzSbyxtzyFH2+Gv/RSNXm9uj00Pd/pzgAAXbIdhWPYNxELIlkcPTsZWi//tSxDMAClCPZaekbQFKlWzcxI1wHjKM4dNRWbHUUlXNQV8WGl0Lk2kai6d10xo+ibK7kT3kIHouVM8jzBGYhahp4xCL9yvTG219f7e2+j9Sbak1Ve++kJ5TohHp5pEIWzlYC7Koch+pxKp9kXxAkGIHETc27yXQIRP9ZNY2NjByb/4xZ8NvvA0o7Lu5aKZQg9IiQmtZcyCQYIHJQahoHEqv/7HaUqacSTQAABL1B+H0QcDyIo+EoSnBmZtxCtcWRDwiLRXB00H61sYfbvOI8wH/+1LEPgAKMK1zB5hvcUaKrTTGGDCliI6IDIhNjioYiecC4qs+VD1aA0w40PrNMeMeKPFUjgaj6Sfu//YqqrlAAAAwAbAeiGYJoQijwKT4dz8kl0gpz8hEwQKNU5pwb1oc81omGwk+m0QcIRmawmxo4mGGvcxNBK+RQjcGMo+8WYh8SS4nQZkE8M2jh0LrHVtyKkgEABPAQxOChWOTgUkgPScEgvVEB02MFJQHrxjoQkrL6JTPetfw/c0Gg/eLi0Y/UggQn43vK3/z//m8j8uNtf/7UsRKAAo8pWNGGG8BSors9PYYMah/r+CWXP093/vm968cru2qsiljQAIABcCuG64mOnTDS6tQxVoluUKZSSMmQokI6nqDVW0GswWVzNwGMdIRG0Fs4fOjUtGDVHi4ytQMPXPlIsQXJFCIRQZCc4o4DTwhdR4cSvRt9rpECQAQYAbEYOB5HQIRWP4IlQpjmIx5R4nuiR0uVEnHcH2k5ra2jbkqe5e7T5M3hklyaE+3IZsZWXFiGwTODwkUZLEo/dZEm5qWXkIwgxpduiqSXyso//tSxFWACmRpY6ekbQFMlq10ww3MEgAlQE6cjdN8wVaXk/kJR3PBjL8SQIEBRAbJaBJP4KxBVfUXhJP6Wb77BzDOSSaZOsKunHlRETMOKOtMSLUp3iob3Oqa898YRGC0r7iQAEAfE+XpyLM0yXhOBWRCLxIbRGRgcr4IHFxAbHXQddgdqxApAj2gPSJiJzZ7jW3vGSjjvZV6Eez35zcMGD3dtU2mPHmxa0Sysz+qve/3vl/lWrjhQIAA4daEn0LaDmQShRYjMh2H1vAIlNT1YYH/+1LEYAAJ1HFjp5hsgVAMK/D2DKmaDH0b0qXoXzzoqK+Sg7h0BC/GRTTZ9tpnwYIl/inO4PcmBlXQ2lg8QioynHS36b9YTrt5lF/n8ciIKAKdrAWPZwDMPzsNoB0kQUpaXEE8QScFJ0s2LTkNj6pKrqlEOD7HCAmt62uFHg2h8KHVkRsCNcRGw+ee5w49Up+qGBSfhWXUpe+576G//9J2NIkAADeg+18cTxSpdGog0JBw6RYCBrE2SSo1BZ5iVLJmPRnRPgo0CpwUoKwGakrUof/7UsRsgApcsVmHsGeBUArr9MMNyBG1kO8qn7iSIUBhghENx40BWhVrXlm0FhymrIEllFVs/6UWWRTQgEIFuRIsRkmHESCMIOc6UN8fDw7HNx6mqCLMOXz/Bxlz0rAQpWIYSG6ZSlc8MPBYSNOiIOoB2NupIsqybCBJaAzZiiGqKkb7VM7XXVa+K1JU1SAA3MC8vBOVEWHUhS2hyqOZaX4K5c2AtiVDHkCPLQIT4QU6p/OFgwcKC5ESw7YWMgMQkmoSHg+aQba95dp5aWIpvNO0//tSxHcACnifV4eYaYFMjis88w3QJfclDUNIoU+qeqzCGf0JyttkIAqkDMs2CUOByFD68jH4+KSzh0ZK41PUcJHEGBDVg6aV56LHDHuK+GXDP2OepqULk+lI1ON5VeH3+d75vBSm4nXYm+kCRnqRCjXrPe//a37EKlv/9UCX10BeBBAYBURxWnKw+j+cFgTyOV2irgTih+hbRBt6rcIoiVzZBLBRcCiGSmKCtOLBlqjiHL1Kw4IhKBEHg8vArRdurY09AS0oShXPqIp///OI8yz/+1LEgYAKrE9ThjzDQVMcqjDBijjOqmVddIKrBXSnyXlEKVCp240UMYDeZmd0FBK3RiXzXhX2r8mlFAwwEQqJRVZQKzoj0tVEwGNm2AGJWKCVrNpRNEMLSNVUqkjq9Fu//rpqeGd5d4iIiJZ322ut0ttEgKKUHBMZ+lMoPiDQoFqI0gwG19q0bjzmP0OaByXRSxFhjSDg2QTxJCtCJiSCFS4RpeLRODKkAIEMqdLxigRxDicRL0yMTqGtaJqeLB8dBeL2tBFlLR1ILYySPF1Jkf/7UsSKAAqshVOFsGGBQ4mqep5gAHWy0nXUut0KjCyKRsxxNzVH39FdA0aeTNmTanNqKTN/9aCRm50ki9LvudsgMBAQCAUDAYCgYDgYAIRjwfHe5vqXwwZ/wEKxv8M5Sk/9UVJv/wpW5f/8rGRylRf//1ZFzKGM////lVjJRIYMW3VMQU1FMy45OS4zVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//tSxJSAEwFJafmoABkFqqS3DiABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVU"},{ name : "R_fonts_alterebro_png", data : "iVBORw0KGgoAAAANSUhEUgAAAIAAAACACAYAAADDPmHLAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAKT2lDQ1BQaG90b3Nob3AgSUNDIHByb2ZpbGUAAHjanVNnVFPpFj333vRCS4iAlEtvUhUIIFJCi4AUkSYqIQkQSoghodkVUcERRUUEG8igiAOOjoCMFVEsDIoK2AfkIaKOg6OIisr74Xuja9a89+bN/rXXPues852zzwfACAyWSDNRNYAMqUIeEeCDx8TG4eQuQIEKJHAAEAizZCFz/SMBAPh+PDwrIsAHvgABeNMLCADATZvAMByH/w/qQplcAYCEAcB0kThLCIAUAEB6jkKmAEBGAYCdmCZTAKAEAGDLY2LjAFAtAGAnf+bTAICd+Jl7AQBblCEVAaCRACATZYhEAGg7AKzPVopFAFgwABRmS8Q5ANgtADBJV2ZIALC3AMDOEAuyAAgMADBRiIUpAAR7AGDIIyN4AISZABRG8lc88SuuEOcqAAB4mbI8uSQ5RYFbCC1xB1dXLh4ozkkXKxQ2YQJhmkAuwnmZGTKBNA/g88wAAKCRFRHgg/P9eM4Ors7ONo62Dl8t6r8G/yJiYuP+5c+rcEAAAOF0ftH+LC+zGoA7BoBt/qIl7gRoXgugdfeLZrIPQLUAoOnaV/Nw+H48PEWhkLnZ2eXk5NhKxEJbYcpXff5nwl/AV/1s+X48/Pf14L7iJIEyXYFHBPjgwsz0TKUcz5IJhGLc5o9H/LcL//wd0yLESWK5WCoU41EScY5EmozzMqUiiUKSKcUl0v9k4t8s+wM+3zUAsGo+AXuRLahdYwP2SycQWHTA4vcAAPK7b8HUKAgDgGiD4c93/+8//UegJQCAZkmScQAAXkQkLlTKsz/HCAAARKCBKrBBG/TBGCzABhzBBdzBC/xgNoRCJMTCQhBCCmSAHHJgKayCQiiGzbAdKmAv1EAdNMBRaIaTcA4uwlW4Dj1wD/phCJ7BKLyBCQRByAgTYSHaiAFiilgjjggXmYX4IcFIBBKLJCDJiBRRIkuRNUgxUopUIFVIHfI9cgI5h1xGupE7yAAygvyGvEcxlIGyUT3UDLVDuag3GoRGogvQZHQxmo8WoJvQcrQaPYw2oefQq2gP2o8+Q8cwwOgYBzPEbDAuxsNCsTgsCZNjy7EirAyrxhqwVqwDu4n1Y8+xdwQSgUXACTYEd0IgYR5BSFhMWE7YSKggHCQ0EdoJNwkDhFHCJyKTqEu0JroR+cQYYjIxh1hILCPWEo8TLxB7iEPENyQSiUMyJ7mQAkmxpFTSEtJG0m5SI+ksqZs0SBojk8naZGuyBzmULCAryIXkneTD5DPkG+Qh8lsKnWJAcaT4U+IoUspqShnlEOU05QZlmDJBVaOaUt2ooVQRNY9aQq2htlKvUYeoEzR1mjnNgxZJS6WtopXTGmgXaPdpr+h0uhHdlR5Ol9BX0svpR+iX6AP0dwwNhhWDx4hnKBmbGAcYZxl3GK+YTKYZ04sZx1QwNzHrmOeZD5lvVVgqtip8FZHKCpVKlSaVGyovVKmqpqreqgtV81XLVI+pXlN9rkZVM1PjqQnUlqtVqp1Q61MbU2epO6iHqmeob1Q/pH5Z/YkGWcNMw09DpFGgsV/jvMYgC2MZs3gsIWsNq4Z1gTXEJrHN2Xx2KruY/R27iz2qqaE5QzNKM1ezUvOUZj8H45hx+Jx0TgnnKKeX836K3hTvKeIpG6Y0TLkxZVxrqpaXllirSKtRq0frvTau7aedpr1Fu1n7gQ5Bx0onXCdHZ4/OBZ3nU9lT3acKpxZNPTr1ri6qa6UbobtEd79up+6Ynr5egJ5Mb6feeb3n+hx9L/1U/W36p/VHDFgGswwkBtsMzhg8xTVxbzwdL8fb8VFDXcNAQ6VhlWGX4YSRudE8o9VGjUYPjGnGXOMk423GbcajJgYmISZLTepN7ppSTbmmKaY7TDtMx83MzaLN1pk1mz0x1zLnm+eb15vft2BaeFostqi2uGVJsuRaplnutrxuhVo5WaVYVVpds0atna0l1rutu6cRp7lOk06rntZnw7Dxtsm2qbcZsOXYBtuutm22fWFnYhdnt8Wuw+6TvZN9un2N/T0HDYfZDqsdWh1+c7RyFDpWOt6azpzuP33F9JbpL2dYzxDP2DPjthPLKcRpnVOb00dnF2e5c4PziIuJS4LLLpc+Lpsbxt3IveRKdPVxXeF60vWdm7Obwu2o26/uNu5p7ofcn8w0nymeWTNz0MPIQ+BR5dE/C5+VMGvfrH5PQ0+BZ7XnIy9jL5FXrdewt6V3qvdh7xc+9j5yn+M+4zw33jLeWV/MN8C3yLfLT8Nvnl+F30N/I/9k/3r/0QCngCUBZwOJgUGBWwL7+Hp8Ib+OPzrbZfay2e1BjKC5QRVBj4KtguXBrSFoyOyQrSH355jOkc5pDoVQfujW0Adh5mGLw34MJ4WHhVeGP45wiFga0TGXNXfR3ENz30T6RJZE3ptnMU85ry1KNSo+qi5qPNo3ujS6P8YuZlnM1VidWElsSxw5LiquNm5svt/87fOH4p3iC+N7F5gvyF1weaHOwvSFpxapLhIsOpZATIhOOJTwQRAqqBaMJfITdyWOCnnCHcJnIi/RNtGI2ENcKh5O8kgqTXqS7JG8NXkkxTOlLOW5hCepkLxMDUzdmzqeFpp2IG0yPTq9MYOSkZBxQqohTZO2Z+pn5mZ2y6xlhbL+xW6Lty8elQfJa7OQrAVZLQq2QqboVFoo1yoHsmdlV2a/zYnKOZarnivN7cyzytuQN5zvn//tEsIS4ZK2pYZLVy0dWOa9rGo5sjxxedsK4xUFK4ZWBqw8uIq2Km3VT6vtV5eufr0mek1rgV7ByoLBtQFr6wtVCuWFfevc1+1dT1gvWd+1YfqGnRs+FYmKrhTbF5cVf9go3HjlG4dvyr+Z3JS0qavEuWTPZtJm6ebeLZ5bDpaql+aXDm4N2dq0Dd9WtO319kXbL5fNKNu7g7ZDuaO/PLi8ZafJzs07P1SkVPRU+lQ27tLdtWHX+G7R7ht7vPY07NXbW7z3/T7JvttVAVVN1WbVZftJ+7P3P66Jqun4lvttXa1ObXHtxwPSA/0HIw6217nU1R3SPVRSj9Yr60cOxx++/p3vdy0NNg1VjZzG4iNwRHnk6fcJ3/ceDTradox7rOEH0x92HWcdL2pCmvKaRptTmvtbYlu6T8w+0dbq3nr8R9sfD5w0PFl5SvNUyWna6YLTk2fyz4ydlZ19fi753GDborZ752PO32oPb++6EHTh0kX/i+c7vDvOXPK4dPKy2+UTV7hXmq86X23qdOo8/pPTT8e7nLuarrlca7nuer21e2b36RueN87d9L158Rb/1tWeOT3dvfN6b/fF9/XfFt1+cif9zsu72Xcn7q28T7xf9EDtQdlD3YfVP1v+3Njv3H9qwHeg89HcR/cGhYPP/pH1jw9DBY+Zj8uGDYbrnjg+OTniP3L96fynQ89kzyaeF/6i/suuFxYvfvjV69fO0ZjRoZfyl5O/bXyl/erA6xmv28bCxh6+yXgzMV70VvvtwXfcdx3vo98PT+R8IH8o/2j5sfVT0Kf7kxmTk/8EA5jz/GMzLdsAAAAgY0hSTQAAeiUAAICDAAD5/wAAgOkAAHUwAADqYAAAOpgAABdvkl/FRgAACIlJREFUeNrsXd1y8yoMFJ08VN7/Jn0rnZu6R5H1iyHN1+7OZJLKYDCsAa+EO5iZgL+LjwXn2MEg3nhuwCEATzQ+f35+Hmk5IYU+zl6nf35+DiKir2/eSIpqnbxrZGVnpz05yE/NdJ7tGgG+OvL0HTQ+E9F3Rx2dJjqQFVGejus0stz7/U5ERPf7XdqHOs/VESirE4s2OB0//v76nNpM2mRa43zknS+o1zDaeLIVmImZ6fF48PFbffjr2Pe3TK/zPR6PI4/Mb5Wj7eScT6f3jrc+Mp/1+/F4PP2OyrPawmufSp2r54v6THyz+vspbWUNMKzv+/1uDc/HXTu+7mIWv+X5pJ2PfBGO9PIuMoZZcoZUa+gfUXmyPuK3zseBjSaHcVZtzYGNCvmHkfcbt4kF2akyX53DghxkdPJx7Cm9HPIrHXJ8G1PO03nk8KrPXy3TmjKsMsS1Pw3fRxsdNtlGRt5TGUdbyXTGTSDb1yKjdSP/n64zXFaHP2cK0FPHaRpIpoB0KC9+wjKd36c8WR26U0V27Y2pJGsP9qYADu4+OeyTMwSbLD7udsHaQUSsRoIrqC4KObj7hzOcyxGDnWknm044GcZHcm06HTs28ob5aOq7BQ1ZbXirw8lZE5AcwvQxY4hqzdXR8C7KGdY5rGlEdphc4ath2JtOhjcVFcpz0znljuSm8O0zK2hj1b/0I54I3qI+v/kzhBTMDlOi4aWbjp0hjpK0wxjyvBGCG+m9v628Twu7YpuNC23bufbs+rzr+V4DsHpk0HO7FjtO6bTYIQUQOf9G6SyhRKbzRCs9BVTTCxXzSfix8jpiEFWEmiydVD4PIahz7cn1edfztAYY1jyaPS5l6cS8dXqMm5nHd0AtUtkbHWSdrOux2qKaLmqvCxJ3aU1nCUEcrPafbCpdp3IdbZuL6aKyRrSINBai1JBaudjgXUHnCqmtpzizz24F5kTzWJlphngS2pw7z1tLeI9vltiSjkBqBc7d60nSnQSdrH6LnF7hGmDqUdCagyuKnjX0VdVAjyRR+pl6Vjo1qTtndblav5l+8tYA3bmDlTCUrfozeZIKTweZJsFFEvMM2RtlDOVJrLiix0TZwyDZEMN8aYq+RSOAPIGjBkbCiNTAyRNUMmHGqZt2TFlD8YgEHafs4eUtlNGqeyIkpYKQXLt44lXUj9+JJ0LCsrtg9g4DfgAfwaJK686sdABTd1cBDTSxyp1ZFXPhODfze9E9V+u6G9wmgCcgSHHImdOseeipMt3IlZkFUZLnFH1Tya+jdZJ2eht06/ShnhPJWTy4C4qoQCOI44ouMBUvdzxGamJm+aSX0vBYRnXjpM40kY6beSu/T4vATFvPVqjDe4xK1MTTs7BhY2PRxFZghBdoQcp7mZXpKXre37Id5DnEIvJ0LdV0XzegrnvUN6mC+X/vxgEGPBP80AzSkPGGU3F1Kt3pfF5MXzf2TsRGmmm97x02GVQj+6kbVHLL5pOiJl3y3Xvz88oFlTXdrPQr6PC3n4R6lJ2qUycm0H20qziOrHPJiCDnySESmkxXspqvxwKRafZau4JSKvRU+kat54b6OyaAXugFSlLVZ+DenUIGPZ1HC0iW0GTl9QSpIA1nIlMiFFW/M0HJFXoibcVyYjl19/0VO6J53jwqR64TpoJIN7TZ6sDX8ue2aV56WxRi+ah4l63EuHh8vuA33x1cibgdjfQ7yu040MaCeq46z5MU/M53KxeeIDzVMRJJeEG5XpknASbIw4H83i2b2tf77lGr3vxrbO4gYx/faU1SjTiulOuV6dms49a3t47yzrkqKvjVQ3or9iB40thhq0Yvd2yjOHVVI5Kv2so6wGoR5Xv4MgSV09+RHLrBJiN0ltoyKdmSa8Vv9uRxJQlXw8dPUwA7W4spsWc2c3tysC+wKvduk1dfYSvItVsl5dPewKsx5o7NfYGCF4nr7BO8st36yts1XlHGzCJ0KdpTgJQWo5gzufe/qM9zEJ5NysW71JZ4KZfYJuTml5Dgpjp1NJ+1o4UcNxqCPcFFzoe7bFVB64pt1uewGx/eClaR4jsgxAkxPm1yOLZUi23V0d1mBWy8CoPqwRxXbKvqeNpYogJ2U1s0BYyZCFPPcWHdeQUPmbeVexQdNy2bGm6HjmiWTqUrtoqzpuNA8tZRiRNrmxTMFe08cqM2yLJDm3iV5v92WEKAH+y8ZXX/i50vCbDD+QH8A/gIJMyo81vOFeD9CRAtFMLFlHqta2u9UDi2ilSd0CqeOCcvqhu/4PpMAqTuTM92qHdS+InUsEDg6Lh3qTMCXXTvdvPsdu+mT1GJjqOO7tGaWbg0ueJq7bh3Z14oNeve7ea56t61rm9nSNpup4sVT8eOo2mHjTeVke2f4KQuO+sTOeho5l3BVx6xTi+CdN4UvtLGydu5+aot2yOo1dKVZWf1qbwYavsUoGzmHaFfLbvKFrhjrXRXbNTdjfMKl3bzreL7A0JUQES4n2+RLVoILrP9FmhvIBlOhNBG8atTnuzWTqDVNnJ2ERk7hq7YVjl3iOydQC2btfsn2xG0RQq23oWnZdadbl1lk86dpWUsCPEK22bG9qO+gDcE/1XnzhUl8NcAnT83AsDJ84dHAKbetunVES/ATz4FULwluqctA//sCFByBjn/KBL4lwnQkBL1vyMD/thTQPR/+oA/QACMAL9xEdiREg07iPBLdAAAUwAAAgAgAAACACAAAAIAIAAAAgAgAAACACAAAAIAIAAAAgAgAAACACAAAAIAIAAAAgAgAAACACAAAAIAIAAAAgAgAAACACAAAAIAIAAAAgAgAAACACAAAAIAIAAAAgAgAAACACAAAAIAIAAAAgAgAAACACAAAAIAIAAAAgAgAAACACAAAAIAIAAAAgAgAAACACAAAAIAIAAAAgAgADCH/wYAMwbidIeMXPYAAAAASUVORK5CYII"},{ name : "R_props_json", data : "ew0KCSJmcy5jb252ZXJ0IiA6IHsNCgkJImZieCIgOiAiaG1kIiwNCgkJImZudCIgOiAiYmZudCIsDQoJCSJ3YXYiIDogIm1wMyINCgl9DQp9"},{ name : "R_level2_png", data : "iVBORw0KGgoAAAANSUhEUgAAAEAAAAAwCAIAAAAuKetIAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA0pJREFUeNrMWb1uFEEM3llNl5YKelJT8ABpKXiAdOlSIV2UBh4AmkgnUdHR5QFS0OYBrkgN/aWipV6MHFlzY4/Hnpk9MlpFe7PzY3s+258nYfPt9dTXtpe/6H1///3m5xf7+LTB3FdnF/hulyq6BBXXxU4SqySfMqWnRbu1dKvA15JApYnKFHubLaZynalR+lFtBhvoZjBKIC7SLL0iUvYp6vgWHWAIdqvr4FfRW1Jhon0bcb9lmsJo0V0j58754VAZy/QsMODTbILYBhKI2bzz8VjYM8LerUBzQzka1nwuCvSsGb0Tdu/fiD1v7x4GnoYdbPOqWWY5lMzir2n0HHwCmPnR0vtNfuLQ87j9SkeBElzBi9N9vScQve5CECLmSBCiT9x+aY9IgXBAA8kbCSHQodMTUtGXlRTgUvbLnZ0Y/gxjIeQ61pIjisjpzG5xvRDE1cggTrjHnuv7deoBe0QTByNdTxkh+Do+mSbjw6gIzeayq0rsMpKTMagS2EJVel5VQk9agJcG99ANXFyEXKZGUPypZFSugLjZ9elHTG0vNx/oBWdhxqCf2da4eLZ7qb6ZFXZaqjZFxdLBCoIR/aUUZszQ6eC5gaCKFYlY/lOKgL+37/64UgcvI0WzBnuESU8J4FG6wErHWLDOUeFyntDmZKUbOO5F5z9OUqaEhk99QKFGlhyqJrJPv6fPL9pyM4oFzzmrH6qI5eFb2SsY7b1StsZjRPnEC44q14j2nbykBfemmANOjHAiP87sEpo4WDRaV4epONiicP89RVBCTXUPtLGRdfLpGMrERFtFDi0YhpR2FoW5DqCA5R8CujkcYXSZltAadsW9SQF70OSqzh60tUu/GATKUmwpu+dO7NLea2ZaMDj9mEILVTnb6aJe0IgFwPBiV2d49A7oggdoLDLZksLRTtoU79QjVZvyOymF89Wilx0MieVUBKdZaL8RRgJf0m0RmzOOYnh7XVu6HQO5kertpqdKqLRa+8VWVe2snPeeGEB/VyaCB//gEIu34fcr1fsyevlXjib96U9+vNFYzh+zwb7gHoj+zDE4OE3XKsfXJC32+dWYm06vkexGYc99tXjMY7HEsTh89X7FXLlv/i9mGzj9rwADAKu/g510gynLAAAAAElFTkSuQmCC"},{ name : "R_lib_png", data : ""},{ name : "R_sfx_explode01_wav", data : "//tQxAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAAOAAAMPQASEhISEhISJCQkJCQkJDY2NjY2NjZJSUlJSUlJW1tbW1tbW21tbW1tbW2AgICAgICAkpKSkpKSkpKkpKSkpKSktra2tra2tsnJycnJycnb29vb29vb7e3t7e3t7f////////8AAAA6TEFNRTMuOTlyAaUAAAAALhIAABRAJAPIQgAAQAAADD0JlLeZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/7UMQAAAcIA2z0EQARyJJrwzDwAMBAhvW3qCAIOBBwgBAE3lAxBAEAQBDD8uCHn+D8Tg/8H5c///g+fqBMHwflwQqBAz/lAQOf/8uHy37sJ8LpbVVUKpL+FlFEy1KjUcddgDNMUqgI4COJ4KQKUPAuoOcWo/Lp4l4KU6DlGozi5mQgjrMxjUSrL7kiIiYhqGGeVGFHqB3p8vXmeZwyzPa/wjNP7tkuoHlHBYiLicQrYGgfBQWUaQaYiVezu//9Km5E0igSomUkCeOR4JmNglD/+1LECAAMbMF3vPQAMXmQ7TTxmlhLhyp0nJRk4QcjEpHN0QNkPxGD8FYpVtFjFNFcs2qg6Gg1aupi/iBZqnaf/4SPmxfWMQx5lFYwRMmnKoLLUDR8kt2ITuKaUpwQn3pOITXcixn//QmnAkCBb5t9SqRqfLEXNCxmmSZSlPaqpOBVsiXb2BD215LZnZCDPHAQFMsQKsPUsvPREOM6FoSPEA5wwTgYFVhMJNHHiQK7WIrsjgzjRUYRE50adcEol/FkXRhPTV+uLKQUIKUibSasLv/7UsQFAApYp2WnmG6hjxYsqYCnDKSY7i4PC5luJ0zqZmVbGkFUxG8IHB4MuUVmk4kxCv05/YkQHFFSzzAS2ZpNpaWfEK/QbHD5IVa55iLuI0Ef+mWv69DlzSf61FQAAOzBSAJWPArzNUYm0BeKpqZe79yBwH7dGLQj35fukkdOrxpzXWaIorGo4dGTKKjpVfJDpUyOalsXj9zWwJP/+ZLk5ROU1mKdbSdEI0jjTeHAcF2J//oY1qzAjGIss+//+6AqQBXGTHGA6pZXCShuBDR4//tSxAeBC/RjYOe9J8F0li0o9gkwGyQk8igPFeF81J+CRZQi5JA4kQoXywlmNWRIAHUQsXAXELUeYYco2xByy85NAL1PGObaaaMWFplhtn/e5tSZRBNk7ORPWVGq99qfRSK0imtBIQVinvxCjgFEuULL62mifqFBUeCA1onLvOCjGoEEkE50wcTJ3VUGQ11hqld1Qzv//K6qbfNVSmOpkcBCOPOr4CZ9oaa4uybCJkkoHRy5Umhe86lsVdxVayU7Fh+iZYQAP5zb4tAqNIlg2Ir/+1LEBwAK5IdrRgxSgYUibajzFhwjBiRBAHIgCkmFcoLzwtmC18vdzuFUGyVkIhYlgGw8OR0b/kdYlQJyLAuBDqUKGgSMe+vZqdgVaxwAJtMTJrIIUDa/TzOprNaEe3UIZ49bacxDnw0ictZKUYvnWgHKx1uLIzs0q9h0LXRWMVheBWI/bIM1xvFWK9Ef/W500EBjiyvpnGh8JmFxcyynsUlHt/+7bZKDLE1SjIPKJkmt13N4VShZ+9zbyW5vZXXpVRAowiSgY5ZiZDJmG4eyff/7UsQIgAsAu21HmG8xYpTsXPSNyC3hluQqRYkWU6SBlpuOHKPZ8oKJNW3ygZu8YwxQr4efWI3MMHdP9ZkRzIlKCh2smP4vq3UpFjgdiEVNnQaU3vX/pWKJVV/o0gHlLbaQNhPUo4AxRSiKQalSl2tJNKNVKeMgUgqoCy48YMoFjGK3gRSIiVur9N//L/k1DKauyZSUKoMAqy8cfcLV6mxApqyTnqQxjbPYuxsxoSmj27XbE1JNQjBgq+vRuEiNlFmaWp1n8ccM91h0qj/LbEVU//tSxA4AClipaaeYryFFkWuo9I0ocaEHFGQatLJysOTz8zrmfjPsvKfoVeiist7Djn1uOAtIDIlSrQ7yMwHVgdEa05r/3//f7+p/q3QAAOpVuAb4kBITKHISJPHMa7CdAIwjAcLh0aAdUPIzJNJEJUeJSFi39wR8OTWOqa2nn7IiPJjuWWDabhAKGi6CjDbO/lDA5Qp6Onvo80fhtdWWZpMFvezRuEaBXD/LgK6dgfZ3j0OCleQUOU060zlwCzLcGhFEj42W4KgstrH6K7MUhc7/+1LEGYAKgJNpp5iuoVAR66jzDhR6JFqRKPMDSYUOEXgExooealRw9g76dPzWc6lEWNp935ZFSU5UoiSSbh/jdNFmGIZb5GoBgL6ujiq9P9lftD2Uh6hIKRhFoNmT/pGjFX8noaGWRXJleyqoE2w6xNazaC6SdbASvSOSfo91gG7jZn9i/06GW+lADiUjKA6h4E7XDIQEJCynuf5yNRrDnFpBIwImwwojNTkFSBmEJiFEoW6HufkfsXGAq1lfTqGXtSrTyKEWZEX/VQfVDrhhVf/7UsQjgQmkw1bnpGzBQ5RqaPYMsOKBhX//9JACjLSQBABb1GTceatEyAGKCE1hKQxIYLoMlK0So06lnHDjNWFsdJbvFEuUpPqoy5Zxgt1qnHkOIpv4z3PZjSYnteVY5utlS6Sqv+z//9v/lmCBQ/qZBBAkAYEhpJoEeE4K3AjUkQsCnycJCRlJ6pWuC4w4pmepH9K0UpMOxoHU48sRLrOteAw9RUSXWjknSTVpLUvTxYLBwMnn3anWf+lOmZ1LIhbkjUkjbRAMhJHsBIAoig0f//tSxDKACmBpUSYYbsFPjOp2mGAAKgnigOTMWnBOSpSyQxM1Fzq7f3OvX7U8az7nzUhKtsWAcUFgikMlE2LzqhpYLtFTVBJIDA52tvIISn6rftk9P/RcRFRVVmd4Z3Zm22u1slcjYCDB1DrTQOuKlEoIofLFlPmILSo8PC9jjL8hQ9IH1iUzasxk+r7KpwgLlPaUMJXQKXy+WMQE95bVV066fQs+tMqB7nfvDkizRo88ktGSFOp73rmPZ893jdPElr7X+fmtae18VpSFPb5ra1v/+1LEPQASoSdn+PeAGSsGZfeyMAB7t9X+sZpv4/zjE1boGawWXeb2cbL9548nIxsJvt2xwpJQEA/ZOqFbjOPP3veOOP1pVGgFAwEBCjBU8sFVHtYKrBVxY9g0DSgaeCobX8FeWBoDQaxYOxKCr/1A1ET1hv+V8Gv//loBjDBJMBX1C/5D/Z/t/2f6f9v+z/Z/s/0lfUL/kP9n+3/Z/p/2/7P9n+z/TT1yCED8sxmAxRkf/MYJDPTCKwd0wJsEMME2AwDAjAHwwBIA/AQDOFQBUf/7UsQrA8MMAt7vgAAATQBbwfAAACAFkBj8ZD/YG/7SH9n+n/b//9n+z/T/sAGABnULBnULAb0/gy94AwAoDgBWqoAoALEKeICCgfwtmAphqH+FpgDQGziD//DjxQBaJ0kv/xwCyBuilxAMVz3/fFgE+DLlckioX9f+v8i5SHALgHWOMZMgBEP///JAn0DAukTHGRg4BwEP/v6v+/qyJkmXGRNicIoWSJjjIYRAiBN/////////582PG6qgOi4WjUfjcVgoAAkEgB1SabcV0/8X//tSxHMACDga3HXwABI1whvHLwAAkxggKqt/tbfss0We/yCD0H6dP5JAkYuZy2g/8Y4RguCEIaiiDC3f/quBpjQ83R6RbT+Or//s6GKxkUbPCrO6XQwEgaEp3g+BL/X+CADD7hEe7P8ocfLFTvXVTEFNRTMuOTkuM1VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX/+1LEaQAN5IcxubeAAAAANIOAAARVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ"},{ name : "R_sfx_resist01_wav", data : "//tQxAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAAKAAAI+QAZGRkZGRkZGRkzMzMzMzMzMzMzTExMTExMTExMTGZmZmZmZmZmZmaAgICAgICAgICAmZmZmZmZmZmZmbOzs7Ozs7Ozs7OzzMzMzMzMzMzM5ubm5ubm5ubm5ub///////////8AAAA6TEFNRTMuOTlyAaUAAAAALgcAABRAJAOwQgAAQAAACPlNFl0UAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/7UMQAAAjoP2b0EwARmLEqQxtAAP0ApmZWDGMYxjHAAAAAAAF3d60ECAWTJpg+fqOYPg+D4fggCAIAgD4P+sP3f/o/xICDvygIAgCAIA+D4Pg+DgIAgCAIFz8EB+GGPT0KkJ74XUC58PaC3oyFCmIlQH/Xg0NCCwHwVAGjSqBx4IAAItiCxDSCkB/zIvE0Yl3/yZMi8RYhoDQDx9B/fMws0Xlt6vzf/+sff+Rv+UCBoo6vjC/8y//rlgz+384S//+S6m4AJSAOKFA0B4kq1L//+1LEBoALoYtJvNoAETgs6Lx9wZrqHES4mK1ECFzFML4gY6OA/0BnSAAQECwUQBJ1kvKZqzUR8kh/9SP6/6zEgIIA5HG3V/+v/9bf/6nSEhRb//qM2/+v//0RXQ9oiRsii3/51iV2h1YwBf0SFEGWtSzJ2j7wQTen34afYi6eJ0R+JADSFvzejNS+VDdlY/kIr6vn/1/9wg0W6av/mr//t//1l0OQJJv//S/////RE+t/kiVmh1YwBf4GJkErI0+UPMXeJMpUCjUZdphtM4INIv/7UsQPAAs5Zz3lbkzRhrGlNN5RkjzTEeBnrV061knjVJsvHn1D5GItnVqujOmXrrb/hBpu3//q//t6q/6ZQNwAyFsdv/+SP/6///lITm/+SDjdbAAkQCAAaq1rU1q17WJO6tWggtuiZYoFgC3TJ/eAwaEAoGDzoUSDFJY+z5m90J0hEm6+vPev7fcINoLB2//9P7fqPf/6BfHUA5WTal//83//b//rUNcLIjdDb/86Wv0VJ3aHZjAX/w4kQZudSbTR5uAJvlPDjl0kbCwEcQNh//tSxA8ACilnQePuLNFcrOe0rcmagorYmu/+Bmgvmj7Y8bXVUrOE+7OpCtFL/C8SF//+v/9Tf/9EmQEQiSP//q/////YYjf6Fv/9oAv8HUgEGa7kZ1F1aPNxWGf5xWDI40zugUCO/SyYCeNZ0PYl5FLlYuvoHBiNvVrSrKz9Tqb/hOxR3//8w//ON6Ff9ZQSAtwqJ9v/+j/+v//6iL/9CiaGdlYwE/4SFkGSlOJqUyCCtcmZshrEXqU7Q6Qao0QJ5hdcKhauwMqEwLCjztyPOJv/+1LEGIAMqYs75u5s0XUxZvTeUZpWNwQxV5u6TsbWIhT10m/0Qa9DNv1er+Vj3/zje//UZmQIIjTb//rHv/9D//1D7Dlk///njbtnUAdoAwgEbZV2dJ+qA2kQHeh9rim7uKDmFiofiPYCHBewHAtddIZoL5UJ5rMNQVSTump1VtUa+ur/rCF2Diz//+v/85//6JiAgYRJH//rIp/+n9//ohoB7//56iWGZ1UgA/0OFEKWjTSRvd60aaGWdU1LKn1lTcQaqH5nq1plH5m1k2R8nv/7UsQVAAshiz3m7mzRlqzndI1Nqi66FIaw2VLT+rUW/VV/3BBUT83//oP/859H/zhuF5iqf//qMf/2//+PwpNXf/+eW/21YK/wmTAMWuTBVNyywXUjchuxBpalETaQBR5pcQXCqDg5asyRzlvnefG6TPDeoCsKNta6kWUtVT9Tq/pBAMd559av/k106K11uxHH11zaur6BuRgAExzVf/+T3/6v//uOJ/9FF2/0gD3wmTA2R3WB2p9BUEFsyN1Ff2JGpacMVpcPo393R04vnjOu//tSxBOACgllOaHuTpHLsaKw3tWYs5NFJIs9VWVV7r3/4bkhW//8623tzh/r7V/RJkGkDuR//89/+v//6yQBLUQAAUEACBddda3uq/uNNGoZcJgJeYwACUw3Vg/1WExtBIsAiYghEBhOUtHETpsi/9VOv/Uv9FNVlLUkakCAITILHYbJ9v/9F9X1aT6+r+Zj4FxAYfAIMABWZ//1KL//6H//UdEgBICmC7Gz+/1lglv0KhKk2AAUBACi6rNd7192qzEBtISPCgUMNsc2z1jCojP/+1LED4ALWY0XhvKOgT+s47R+UdABgEFJ0aDjflQ+z9vV/V/t/bqRLwFLYUlFV2//znVv+/t/0C+UAMQbIOh//5l////9j4DRIrobf/nD36RG9aUAHYHAAHW2eajVpRcbcsfuBF7iQoPPIUFEAvYJAd45havR/ekrX0/71/9IGiMKFmft+uvTbr1v1u/X2/YohAIJ5H//2/////KIgxv8hRZLq2CpIHCgptZMgSvLKrWlOqpCAeo7NqFp0WxOb7ff7/r//8HRT//9f/qv//3C/P/7UsQYAAapATGg5U6Qzx/ntBeeCrf6f/+IVvvtoHbstngqhU41wFyGD4U4jyHq8Yrhtnb/3p09P+v/AiLv/69H06f1t2/4DX/7Bnd/79/v9IBf+91mVZUWHWgkZ4QgAi1HxJqXo+rOjrfqZ1b//0cBb/TDi8r0qZrDv/kdO7+v6yRIABOJQuHc4WYeWKsxYWFRUMuivb/0RVni3//iom4uz+oWo//iwuKqTEFNRTMuOTkuM6qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq//tSxEGABjidOaCcUFCmgFx0EIwGqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqo"},{ name : "R_fonts_alterebroOutline_fnt", data : "QkZOVAABFABBbHRlcmVicm8gUGl4ZWwgRm9udAwAFABhbHRlcmVicm9PdXRsaW5lLnBuZw0ACwA/AAAA7wAAAGEATgAFAAkA/v8DAAMAAAAAADIAAABtAAIABgAJAP//AwAFAAAAAABQAAAANgAXAAYACQD//wMABQAAAAAAbAAAAGsAIgADAAkA//8DAAIAAAAAAGgAAABVACIABgAJAP//AwAFAAAAAAAxAAAAaAACAAQACQD//wMAAwAAAAAANAAAAAEADQAGAAkA//8DAAUAAAAAAMgAAAAWAD0ABgAMAP//AAAFAAAAAADbAAAAdAA9AAYADAD//wAABQAAAAAA+gAAABYAWgAGAAoA//8CAAUAAAAAAD4AAAA7AA8ABQAHAP//BQAEAAAAAABnAAAATgAkAAYACQD//wUABQAAAAAAZgAAAEgAIgAFAAkA//8DAAQAAAAAAGoAAABgACIABAALAP//AwADAAAAAADOAAAANwA9AAUADAD+/wAAAgAAAAAAbwAAAAEAMwAGAAcA//8FAAUAAAAAAFIAAABEABcABgAJAP//AwAFAAAAAABZAAAAdwAXAAcACQD//wMABgAAAAAAOAAAAB0ADQAGAAkA//8DAAUAAAAAAE8AAAAvABcABgAJAP//AwAFAAAAAADZAAAAZgA9AAYADAD//wAABQAAAAAAeQAAAEYAMwAGAAkA//8FAAUAAAAAAGUAAABBACQABgAHAP//BQAFAAAAAADRAAAAQwA+AAYACwD//wEABQAAAAAARQAAAGUADQAGAAkA//8DAAUAAAAAAM0AAAAyAD0ABAAMAP//AAACAAAAAADJAAAAHQA9AAYADAD//wAABQAAAAAA6wAAAE8AUAAGAAcA//8FAAUAAAAAAPYAAAAIAF0ABgAHAP//BQAFAAAAAADLAAAAKwA+AAYACwD//wEABQAAAAAAwwAAAAEAPgAGAAsA//8BAAUAAAAAAC0AAABQAAUABQADAP//BgAEAAAAAAA2AAAADwANAAYACQD//wMABQAAAAAATgAAACgAFwAGAAkA//8DAAUAAAAAAHYAAAAwADMABgAHAP//BQAFAAAAAABRAAAAPQAXAAYACQD//wMABQAAAAAATQAAACAAFwAHAAkA//8DAAYAAAAAAEYAAABsAA0ABgAJAP//AwAFAAAAAABeAAAAGQAiAAUABAD//wMABAAAAAAAbQAAAG8AJAAHAAcA//8FAAYAAAAAACQAAAAWAAEABwALAP//AgAGAAAAAABMAAAAGgAXAAUACQD//wMABAAAAAAA5wAAADMAUAAGAAkA//8FAAUAAAAAAPUAAAABAFsABgAJAP//AwAFAAAAAAA5AAAAJAANAAYACQD//wMABQAAAAAARAAAAF4ADQAGAAkA//8DAAUAAAAAANUAAABYAD4ABgALAP//AQAFAAAAAAB6AAAATQAzAAYABwD//wUABQAAAAAA7QAAAFYATQAEAAoA//8CAAIAAAAAAFUAAABaABcABgAJAP//AwAFAAAAAABkAAAAOgAiAAYACQD//wMABQAAAAAAYgAAACwAIgAGAAkA//8DAAUAAAAAAGkAAABcACIAAwAJAP//AwACAAAAAADWAAAAXwA+AAYACwD//wEABQAAAAAArCAAACsAWwAHAAkA//8DAAYAAAAAAMoAAAAkAD0ABgAMAP//AAAFAAAAAADhAAAAFwBNAAYACgD//wIABQAAAAAAPwAAAEEADQAHAAkA//8DAAYAAAAAANwAAAABAEwABgALAP//AQAFAAAAAACwAAAAWAAxAAUABQAAAAMABQAAAAAAMwAAAHQAAgAGAAkA//8DAAUAAAAAAGsAAABlACIABQAJAP//AwAEAAAAAADAAAAAZgAuAAYADAD//wAABQAAAAAA0wAAAEoAPQAGAAwA//8AAAUAAAAAAPkAAAAPAFoABgAKAP//AgAFAAAAAAAgAAAAAQAJAAIAAgD//woAAwAAAAAA4wAAACUATgAGAAkA//8DAAUAAAAAAFoAAAABACIABgAJAP//AwAFAAAAAADkAAAALABOAAYACQD//wMABQAAAAAA4gAAAB4ATQAGAAoA//8CAAUAAAAAACgAAAA0AAEABAALAP//AgADAAAAAADHAAAADwBAAAYACwD//wMABQAAAAAAQwAAAFcADQAGAAkA//8DAAUAAAAAADcAAAAWAA0ABgAJAP//AwAFAAAAAAB1AAAAKQAzAAYABwD//wUABQAAAAAAbgAAAHcAJAAGAAcA//8FAAUAAAAAAMEAAABtAC4ABgAMAP//AAAFAAAAAAA8AAAALwAPAAUABwD//wUABAAAAAAA9AAAAHUATQAGAAoA//8CAAUAAAAAAKEAAABUADEAAwAKAP//AwACAAAAAADEAAAACAA+AAYACwD//wEABQAAAAAA3wAAAAgATgAHAAkA//8DAAYAAAAAAHQAAAAjADEABQAJAP//AwAEAAAAAADzAAAAbgBNAAYACgD//wIABQAAAAAAwgAAAHQALgAGAAwA//8AAAUAAAAAACYAAAAoAAIABwAJAP//AwAGAAAAAAA9AAAANQAPAAUABQD//wUABAAAAAAA1AAAAFEAPQAGAAwA//8AAAUAAAAAAFcAAABoABcABwAJAP//AwAGAAAAAABxAAAADwAzAAYACQD//wUABQAAAAAAOgAAACsAEQADAAUA//8HAAIAAAAAAFQAAABSABcABwAJAP//AwAGAAAAAAAiAAAACAACAAUABAD//wMABAAAAAAASgAAAAwAFwAGAAkA//8DAAUAAAAAAHAAAAAIADMABgAJAP//BQAFAAAAAABLAAAAEwAXAAYACQD//wMABQAAAAAAMAAAAGEAAgAGAAkA//8DAAUAAAAAAPEAAABnAE4ABgAJAP//AwAFAAAAAAD7AAAAHQBaAAYACgD//wIABQAAAAAARwAAAHMADQAGAAkA//8DAAUAAAAAAOoAAABIAE0ABgAKAP//AgAFAAAAAAA1AAAACAANAAYACQD//wMABQAAAAAAQQAAAEkADQAGAAkA//8DAAUAAAAAAL8AAABeADIABwAJAP//BAAGAAAAAADaAAAAbQA9AAYADAD//wAABQAAAAAALwAAAFoAAgAGAAkA//8DAAUAAAAAAEkAAAAIABcAAwAJAP//AwACAAAAAAAsAAAATAAIAAMABAD//wkAAgAAAAAAWwAAAAgAIQAEAAsA//8CAAMAAAAAAHgAAAA/ADMABgAHAP//BQAFAAAAAABhAAAAJQAkAAYABwD//wUABQAAAAAASAAAAAEAFwAGAAkA//8DAAUAAAAAAGMAAAAzACQABgAHAP//BQAFAAAAAAByAAAAFgAzAAUABwD//wUABAAAAAAAIQAAAAQAAgADAAkA//8DAAIAAAAAACUAAAAeAAIACQAJAP//AwAIAAAAAABdAAAAFAAhAAQACwD//wIAAwAAAAAAdwAAADcAMwAHAAcA//8FAAYAAAAAAPwAAAAkAF0ABgAHAP//BQAFAAAAAAApAAAAOQABAAQACwD//wIAAwAAAAAA6QAAAEEATQAGAAoA//8CAAUAAAAAAF8AAAAfACgABQADAP//CQAEAAAAAADoAAAAOgBNAAYACgD//wIABQAAAAAAXAAAAA0AIgAGAAkA//8DAAUAAAAAAHMAAAAcADMABgAHAP//BQAFAAAAAAAqAAAAPgACAAUABQD//wMABAAAAAAA4AAAABAATQAGAAoA//8CAAUAAAAAAC4AAABWAAgAAwADAP//CQACAAAAAAAnAAAAMAACAAMABAD//wMAAgAAAAAAQgAAAFAADQAGAAkA//8DAAUAAAAAAFMAAABLABcABgAJAP//AwAFAAAAAADPAAAAPQA+AAUACwD+/wEAAgAAAAAAWAAAAHAAFwAGAAkA//8DAAUAAAAAACMAAAAOAAMABwAHAP//BAAGAAAAAADuAAAAWwBNAAUACgD+/wIAAgAAAAAAKwAAAEQAAwAHAAcA//8EAAYAAAAAAFYAAABhABcABgAJAP//AwAFAAAAAAAAAAAA"},{ name : "R_lib_atlas", data : ""},{ name : "R_level3_png", data : "iVBORw0KGgoAAAANSUhEUgAAAEkAAAAzCAIAAABUqLIsAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAwRJREFUeNrsWr1uFDEQti13tFTQk5qCB6BNwQPQ0VEhLUoDDwANukhUdHR5gBRp8wBBoiZ9qNKmPmYzJ2fwz3jstW93TxnpTrve9Xh+P8/4Tg8/Xqj/6fT9tWpHN5c/n79+J3z56s1L+H42fJBPYcjC5+3FE/g+O75TTQkF7UHUH4wnrLs6Ofq0u7jcjVDjIbu2Lg3p1fnv0dVDG272wWN/vlLpIZY8C+EtvLBV6te9T1CUK3JNb6mgqXe8W+pq750Mfb5VX54m/ca7npKGhdWcFAmfQLFRzlTsot9WTZaq5PSEEUw2BkVB+b+n32ksReOHPvKSFiE0nMsHcIFuuFI0r6Jqu0fVIJYKdTlCCiHNChcDdu41l/EelkT58PaGKWfqDmX1QMgRQt1wHGG+VVs9pr8fdBksEe4hjDdwFs3bb/dQDJsNBrM6epjrBt1eH04MJXGKRclIRPciwTOtdwuVABYDjkBWJxxDUI64QEAfwixvYjQ0YDA6bsOQKwJfGgmhq3Ek5Bzdo8EEbcHZpuSuzvhdJXDuG8WVOzTe3KL4FNVzmuNTeERlC/MqpYJtv40Gg+7W+TbMqIpKMgsHVgKMUzSn7hqz6GKEkCjn5rW1kfiktET2RAf/1CUSM1Eikm7bmKWghQ5GUadXzdW3iu3Z+O5Vtzqw6UT6AOr9Rzos0kWFb6sDHJ4hU3lM0o3fr/l6svRsgmc43bK6tHRMlZ2p5eXMs5VQqYbFunk1foUTuu6fU3WTL99ct9CyjLam+dr0ZGVenMz03ZuqJO6qlZx5pub6OLfts5HPBKeZ3br9VjFqhSQ0nKmw8WaPfcqUvaHGb3tLws30mov3GyywQESRbOImO2GxUFnTBwyLV0ZYeZmFJEkPfFqf3+Tl8sr2t6I+wEY7sWG1+BHRbV3KCA8dTJMOd4EByeUbz0i+zN5OmvEXRhqAWh4AqeaitBmp69CjfOhgeK2bxH0TnwiPwyT/g2igmyo8n6tgyJ8vRZ+6Qd0WuOaFoux/Xx5pzf34IdA/AQYAjXn2fNNyOdwAAAAASUVORK5CYII"},{ name : "R_sfx_step03_wav", data : "//tQxAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAAGAAAFtQAqKioqKioqKioqKioqKioqVVVVVVVVVVVVVVVVVVVVVVWAgICAgICAgICAgICAgICAqqqqqqqqqqqqqqqqqqqqqqrV1dXV1dXV1dXV1dXV1dXV1f////////////////////8AAAA6TEFNRTMuOTlyAaUAAAAALK0AABRAJAOiQgAAQAAABbX6O5MPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/7UMQAAAeUMUZ0wwAB0yTrtx6wAAQEiowJiO+kEgSBEEgSAbg3BuDcSz9+68AAAIIIQGMH/wTD/BB2XP/wTfwQBAMKLh///y4f//5QEz//4IIgAAAFyRyuViuVySNpgD4hQFKUDSethWRfjpBvgvbcxt0ydBg4aU5JSEyfL0Emtcs2oSOm6e3mdrqpholvl3/93yyDikv7ZF8xxcyx0Qh3cVW/uYpzj838cbtsQy99bJ6Sio/PKdsSuET1IvJ0ForS881Dw2ohuyyKJttuJGP/+1LEBIALBD9ZvPGAAWQUavz0jYgICTl2cCvPhjUSWVCrUjexPXbgAAYYSZOgcGwwsaKh0BhEGQYBNhoLNYUFpoc0ycFkmRWnIrvRYBIlYJGkw8pJkw1e1YnZ9M99Ni/66ab2AbVMzLKm31raQNcT8cTOZpxC9UarR7ii0WhSdIgHg5NBIYIqMbvghgnC1COMzxGLc9tcX+0jBzp89Mp8YGHQk5YTHtc1PfJ0IQxSfrc39k17GId7s1peudXVFHiImIeLtYyQATwugoWZIGQpzv/7UsQJgAr0g1vnpGzhrZDqdPekKEQliV6DVqnNNw2jaWpZE8ynBpJZ8kXKwSHELUxsk2hGaUpkWLoeEhgYFDQ8pLF1m3M3MZj6Khe6Bm4CTUtmz0fbq7qvaBLnZpLdokiUEM0wWogpfhum8XElquZUcgWk8bPHh8SD7CNAjQKLqLqJrFVkSqJlplEq0fMtmEZltg2jOLqI1F0CqFJVYHhMSDgUPGnVpELW1XMv0kX4y1j3ILhsZf6E9KhdaEB5DeilO/XoBGm1uHhJtpEiA3iZ//tSxAYACoxRU+ewYcFfh2n9h7AAgO8xD5IACERevREbNJjETlXuoyGF3ROx/cyHEh0EAiGHuB80gRqNFhqiYgGRcOFibgmHBYXAV23Qhuou9TkSoTus/oz7f6P9JQ0S81ENa42SACpJhB+MQJEYhHwuEk5OTFAXlYfzkjecNtwNzybyAMNGAmAhEBIGeOFZkRlBxF4icZN1vAYofELhx08/UmO0yD7taVN+zd1N006vZef6JRVKu5ushkssbRIEjrFVob6XtZopBG3Tn35jEOT/+1LEDYALDLlL9YGAAcUXaPcgYAA1DtBKxwmAB8EHIusmQWkgV2OAzoUgdDIx66+WO5TI4V5la+p5W/SoZhNjMpipl9qqUYuv6ePc/Ipt7q/9CSuz2mk12zkjhTJRJAIMYMYMZRJk1JGQFaTniwYnnBRbbah56KDaEoEgN4SCzSQC15eqdkPY5/CKRPc2fMS11nd7Q3s+Xjx432meAJQqiw+IEjmEXOFj9DxC5opDwce6WapmIlo/8qdPC5o9V/+i//9KjEguFguGwuFokAgAAP/7UsQGgAwwr0m5p4AQAAA0g4AABAF3ag7tNa/5O19ML/9l88gKLJf5czrq3fx0PUYKZOpL/n+X861WJMnWwb3/79jZp2M/XhKj9cP//G2/hwY6mYZmJhi///y5zv5tCqMBVn8qEgVEISpMQU1FMy45OS4zqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq"},{ name : "R_sfx_explode03_wav", data : "//tQxAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAALAAAJygAXFxcXFxcXFxcuLi4uLi4uLi5FRUVFRUVFRUVdXV1dXV1dXV10dHR0dHR0dHSLi4uLi4uLi4uioqKioqKioqK6urq6urq6urrR0dHR0dHR0dHo6Ojo6Ojo6Oj///////////8AAAA6TEFNRTMuOTlyAaUAAAAALjAAABRAJAJqQgAAQAAACcpPVouEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/7UMQAAAZwF1VUwYAh8RWqZzTAAAACPckfjVM7EgEAOCIeUovfD+HsQAgD4fB98oCHic+UBB3/EH/YD4P/wfE7///5c/3f4YAAFAmmmqqRRAPHCDLJhepqYZmMBEJL4EwMBFEUjHAi8bf8hMYjNOiMC2Ph6OjKrA/UcVnmLHkPceq8QmWoodf5nW7vdPZ+Xu1TvluYbUvSn+9D8/szAEUCY8Ljg48CISF1yORECB5K0paxe81DqlUV6StqpPZ2y6P///+tBh7xMcBQYNERAAb/+1LEBYAL2KVaHZeAAXASLrTzDeSDK1UiEJpi8IZSHbsXsQAAIBHI4KgfonQ1VWfw8DoZD8cW8y6Mavqr5Lv1ez2eP5/I81e+7U+P9/fx8x6XxnWbS7x6UnEAIchJl7T95Q4mrpb//64WVGSCnJIpMBIG0hhqvBumofqHnfhJHMuG1RzvylgEirWNStJN0hFJ5wjaQmOWxsRJTakR/tO/HNRahhMTpZD6SzFHnBD/ISikDexamM8g2KKWsUfuMKXYzr7FMQE3HIBdVcwj0qZBq//7UsQGAAus/WpnpE+BghHudPYhLMa410qf7GuFEzmPd4LRTVAMK1ydkZQlRdFGiFyYYdBRTMQI11wuRYhhPUDtzUNyVYfZWKcWY85nqyv/qvdSplR3tW81G63URW3CAaY4MVSV0YETHEyEUrkrXorokDIcxOi/JhPm6H5YIyhBFLcKdKpehMFZ91LRrgsYJykVjrkZlz5Vy+tlHFNF0v8yN3OEJ57irQkERUYRcQf6RrywieOgrHGzZvZKJJD1LcdHen77vzLG2YAFtrvg6BhE//tSxAUAC6ibb0eYcUFlni50ww3EDLAfQ0BXRvmY9nR6PRK4hq5HonU14pOyeKIFLKJXWTW9szy9hnnI3ws1pjpYRLYjl16Phbme4Rg2ZFBgWjRRTZsJOFQTJy32qHJc4BdIER7Ovvp8FScYIL1stoCgagDxuC0BZ2bEJUISQyL52Uz4iCB6qikqi1YGRsdh9KkzCAvVUicUZCTzASNSLPYibtQz/P6/f/iLv2OTIT3WZ9DGgNCVp7yCVs3pyT6fvGXyakQnbHHSWF1AIBrJolj/+1LEB4ALWHdtR5hO4WoO7KmGDShiSoalYqJZEPzMlHRgIQiDaD2lW7UzpT3MJlZoCwKheQDhEEygOirgCl6hbEkJNE4NFCKGkRylsQSSkTCapzovMt3XfVcwac7a8y6qQWhAXdJdCcKSCCReitr7xFl7PoUFSCTCEII5PnkllJZykDrW49EDc0BDRXQxJMAMgpsvHMGFwWqCZwOmkPhEvaXNMrpCUsW0vyRRjjnYOTdcGL3pzpNX/pu6lYURAClklkWMF8pSKagSAWORKD/4S//7UsQKgAp4yWNMMGPBOw4sKPSNyKcWJK8xWIaxc1d9L8FjHacaq49YlVc9lLEGYx0bjFs3quW3F7D13+03nO/ggKcumabHGSbjNNz9P7/T0/3fvAatAG1x1wWUEkCNBWD8F2KA8C2IpjYDXYGRBIaxNDarbL1UCm6GRuRsLZib8OKSqhOQxgS0oO20RAKUPaKnhaplc82vmXMbTjYr9Hr6PpUAQJAAB2uOMIAwoZ5UqHeVYFI+E1aFQim4QkHkSIuXSrTVjlUy/KB+N8LWjFsj//tSxBcACmCBXawwxUE+DOz08wncKf/g1Ct18nX8uoRuMMMBI6RIAUQhMKoy7Jjje5rzbGbGkal/6wFLdrZL9Ym4IDCENZUkh7QeB2qZDlAu4Bru1y5JEXHklD+Xtbo3bnMFo5tEL4dgdc0sLLJA60+bdPG8c+ptNtPVoqo7tg3p9Y34tsSnr9ylCklksbkjZJI7UecyXQ8Tg7FSejKyPkJRCcBoUqjaAs/6WHql0aOXRjAASBNwYhjmDUz6wOk5GVU9eZS7CthGSDQsCya7ND3/+1LEI4AKeKNtp6RpMU4M6zWGDRjULpqFQES9IzM29LOoA+Xa5x2SNpIbGnrDGws0ir9LufpyxEJ4vJhsgKiY0yuWCkoZaLCYatDdF1uciGhiCRS1IqlIjCB5iwKKLhdTRfd9x8UeZFal65KdcZ/z/+1uv/sVCcu3tskjaJKwPofjKIpqBEC50aBigAPbquBk8imHcBkTLHNTbedTPkzCFzI9evVtVj60t6RnV07mhXv2EY//QSRNY89dtyDqUKUsz2XeY9P/9gBMUlh77YDprv/7UsQtgApE0W2nsGNxTY3qMaYIeBGCQUUA0ZjuQgqLVyAIRr3VOSuWR2Xs6tZakoo4wRkl2NYrNW9BJks9JEXsJBsXJQWELVgySYCVk7DyZtorRa/fNN7f9329Hfv+tQGnNbXHI0UAYrZDOh6yUlgmPIFSGTFhIIBkJUEZ+xrMLjmCiq7qowSU2nEQqv8KvIoVJkoKME59rRRjSs5UMFE2SfUaEi0lTD6L26Ef9Svr7utdZc2291kkbIABlkgEse5KJiTK0fKALEX5FMxOjeU7//tSxDiACmx1UaywY4E2FK02nmAGckUSWQDhR2z8wtRb+r8tctsy7a+1Ttv76743fS5d27d5dzGEIlJQ0EIp1vdkP/rUKckluktkkksTbZSJQBTytVMhenghTOZKEl2USsgnwcB0J4DAzHwbkiMIRgORiSyQQxQVmySxsSDy5kYkk2Kzp9yJ0nqybuHegUONjUpLXks154t7WlT2pUz5OqmkpUutTtRPo9cXfb93X18ta37ZTv7r/dd99Xf/xC9nXNUmNQs20psyS01oPEj4EWT/+1LERgASNTVVuPWAESCF53+SYAD//Crv/0AzKqREokl39bHiCIIilnP4xihgiFQqFQBIwDUDQdg0eKgtiUFXgqCvqBo7iIGeDR1QNPO1Hm8FTsFXCL/BXzv+3gr/+JTuoGpMQU1FMy45OS4zqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqg"},{ name : "R_fonts_alterebroOutline_png", data : ""},{ name : "R_sfx_hive01_wav", data : ""},{ name : "R_sfx_hit01_wav", data : "//tQxAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAAHAAAGhgAkJCQkJCQkJCQkJCQkJElJSUlJSUlJSUlJSUlJbW1tbW1tbW1tbW1tbW2SkpKSkpKSkpKSkpKSkpK2tra2tra2tra2tra2ttvb29vb29vb29vb29vb//////////////////8AAAA6TEFNRTMuOTlyAaUAAAAALAoAABRAJAUIQgAAQAAABoZOkNYKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/7UMQAAAV4AXH0EYAiCZZtszGAAJQhAVABQAlxyYEFFAQLn3ygPh9/Zgh/g/8ochj/B/lDn//D/wfflDn///B9ytitxuuAqnX6qmqxEr2NFaYeLSHRsSZDLVjDqKVp1QaCPGlzjVaspbE32cXrSi/ADZZudxqwJjnUvRuzjO6oJFlhKJvuVH+seW7W7stxpcMa34Xfzy3nSfruX17XM7JAChYOoccS9rBUTpLLJmyBSBi8BERcSMH384p5/TYL2Jue1qq/YkhRYwEWAg0UJVr/+1LEBgALUHFt3PMAIXGOLTz0jdBBrF0OQNgO1SmKuW4kByHq4ZWKEGJBUp/WKOC0N/xWEpaI8MnmszV1htQdB8B0mnSIeHtFBJsUDwqkWnowm+LNfGHX2O2Hdh7v+7uv1dr82ChydSEEJpuQRlTmKS4bgcwcZNBXj8Ows1ER6QNZWpygSDZNPuQCKR7K4yZRgEg+UUsrnSxbBKsT4UC4UjmUG0zTrknUhMSsOkI5J4fIakMt27X0W7FCllq+5FG/E4YlIABVWnVoVNCyEqQZUf/7UsQIgAtIZ2HMMMxBZRXtOYMNzDay6CeiTR+iudpcpdBIaWHlxdCA5IQIlJpLNSe9o7KZ61Pm7iiQweoHg5IDaTYqKZIPpcUabQPsfLurZ2I257MaLi923VQv7vuzlJpVUQRa2Z1+WF0zTP2IwYCkNThxmzSXAZ3AUmd8IBk4u0UgZx2JQiFqYCWhFJxXgaceLbz3+u+2f8P54yGXiEehb4mPEUhpqSKhpk/IJz9iUoGK+heOtpWqcicgIQAbqge7tMrpzNUugpYxGk8EJbqm//tSxAyACzifXceYbsF9jis48w3Yqoj4fDYKLyziusiZp2XbIxDZYKLfC2CVu6m+NUKRMUzEecgqtECQUOLEIuLW8+9jDBFrzsy5hGhWm2p9H/alNa21gJhEhABaqIuh7ktjibSikkzhqU/GJRm68QEZA6RsIn0s5Iw4gHWR8VQ4ZnO7CzWlpRRE0HGBEQMMmSBwXhA6Re5bV0jgqUauQORdylFlD4trAibCvTWm5VVtCWbXSKqec2gzUgurQQe8Iux3tZIhPixh1KpMQk6dKkD/+1LEDYAK/GNfx6TMIVcO6zz2DOgy1QEURi+XdZ5pA+PmQaSbGLpS2NNgcwGywKAYLGiJBrlDR5QgkNlCJQdaZoUBkF+1iR/ynWesb6v9rdvUuETwKKQFJxtolr1s5IB6CLMYGxeYB6Yk1GTFa06bbMmYa+ceA1p8GVKD5imykzU9kgc4BQCJpk0BQ8kSYusBrKjWVw2w1Uhjn1EXPSfuAk1t3aLv/13drJbEopRpIBb3YCYIhWHavGmq4yHH81yIT0NCIXAgZnC0qrQw1acYO//7UsQUgAqQTVW09AACC6QrdzCQAjxZJ1ISHKlrgYXHbQUHoOsCcWAxnc56IfhIuKMrUpR5+DjHNXe/RMVf//63I5JJJJLdrbJI2002UE+mnjzlnLmdZo+nKkMzlFHuhqR1cBUYkrGgKRIUCqjZE8fCzIfXOBkoFVkQqNhlJdedTwxSLeqjTgbrySWYLsoZLNez73MtjDNeEFqTj/X6v3IyhP1e7v2tYlqvlL/+r/vP5NKJoLV6UkzEVTWaq1IHCYJnQ2oAAAAEAgUBgQBAMCAM//tSxAaACUVdF7ihAAAAADSDgAAEAA0TPIyH2IvDCvClb9QEIf/RwpW/9SoDK3/6lZJgv/+FIDKzo4X//8KQGFQKVlX///6zBQrVqqBQpP/+1dVMQU1FMy45OS4zVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVU"},{ name : "R_sfx_step02_wav", data : "//tQxAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAAGAAAFtQAqKioqKioqKioqKioqKioqVVVVVVVVVVVVVVVVVVVVVVWAgICAgICAgICAgICAgICAqqqqqqqqqqqqqqqqqqqqqqrV1dXV1dXV1dXV1dXV1dXV1f////////////////////8AAAA6TEFNRTMuOTlyAaUAAAAALLsAABRAJAOiQgAAQAAABbX2x57uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/7UMQAAAbMA1m0IAAh4ZarNzDwAAAAANq3rc3GBnwQBAEAfB8Hw/ghrB8Tn0AgCHicH3+H7wfBwEAQBB3+zWD9QIHPo//5d//KAgAAA1Lbts2kI20ymSiiXid8MXRM+nF7t9jKcOpENIgWO03RSyZszbBilejCwOEiSxaHMZiBcFd6wfn7jw9wPvOcW//9PSaPHtWsX/X16bzEprGMZ+4XCY/BcmycQMSPaIxW9ZrL1qH1UoNBacMiFNmHVFHFgKLXp60Ferqod1s2kRBBXI3/+1LEBgBKqGFd/PMAIT0JK7z2DNwsLaXFXpUvbCllQ2qhVG7KzH0MSft0n1J2vISlsbv/P1k4AhIATSAUJlzyyRBaXrIR62nRK/VY2WSE3MtV3sZ7qNO6zZj2UfzqAacq6lnXW6D6OlGGmX1eSBSDVYkggeGRXKxRNY0cQyk0MiDA0UMkWB0ihA8mhpG4yCTh617TDzCHFizRE1Kx/e06AfQQ/sbTV+yM+2n3UoUFSHiFhjtmsjTJ0ZxMy9GSlwgggZBC6D7KIBIhAdVIj8D4IP/7UsQRgAywfVnnsMqBWxArfMSY3CGJgskAR2ZsWYeUbqSKSCZC2edyo3LZjaleJ4JwiIUBwF2MKkQGZYPOpSNUkWcKxMkztaL7bXil/2Wb099dkB+Z2pCaqrqnt7v5EQAHngPC8XkwsDS8ZA2OCcZBIgHBHHTIGj2E1pfz3WfI15xkaRT3Tiq13TlSm0rC2eXCcKSwGiMFXdbwK0WHF566e6k2OWz1ykmulP/9mpUHm7u7h21taIADnQKcFKjF9OQgijTTOZCLdE5T6QZgILoj//tSxBEACrxFWee8waFijaq1hI0y09MnM5UE0CbAYApwONQwCPAYQUIgRiU0tbwTXFW0l6CKUbTlNidujZH2qXQy+279NKs32q37bSWxppEgWWvxuToutixyIMiYaA7hIeARKYBSzbomsVgoWRGiQit2z1z4CS/IleD041zgqlaZ5AVW9hV5q4VQw48hLNFjpaqh6tjc1GIq/HMd9zPo9FaFem19rcaZRJAG+iiNKWvdkDiNhic+7dVvHWhl86GLB0HQ44slBtmktAw4F4ciwm//+1LEF4ALwIVNtYQAEf2jqf8wgAGEQw0pEadmjhaHovcOhT0GK9ggvNB8KpQVcPvahNDKT51qKHUjDFSb8i9IkZ//61RriauYqaqYl///rtNba4CtOisOiuuTXmvU+dNVksOO1T0uMnAsBU1hMPCMFBwE9mBqEtHB0JKD5pUkWBse5tmDy4hmmhZnFpB2zUFFL/mGIqyY6TJ4HS0qv6xMQ3W9DV1qx3xqsXETUMM2WYZ8ZU8PL/7wqDTbN/KbLRTdG9NqICYdEQlEosCgTAIAAP/7UsQGgAwsuTG5p4AAAAA0g4AABAHwbE3aa1v5O18u1r/d+2pUgG/y5nXVu/joeoxNmFdf+Or1fHIMwthbv/1er479XsNE8wzf//eb791MwzMTDF///377+dwoMWFBiyf4KiEJCX/1uRVMQU1FMy45OS4zVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV"},{ name : "R_sfx_msg01_wav", data : "//tQxAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAANAAALbAATExMTExMTJycnJycnJyc7Ozs7Ozs7O05OTk5OTk5iYmJiYmJiYnZ2dnZ2dnZ2iYmJiYmJiZ2dnZ2dnZ2dsbGxsbGxsbHExMTExMTE2NjY2NjY2Njs7Ozs7Ozs7P////////8AAAA6TEFNRTMuOTlyAaUAAAAALjkAABRAJASaQgAAQAAAC2zsgideAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/7UMQAAAowKVpUwQAJfRyv/zAwAgAWoA4jxkgGgNAaCQYGa9evXr1698AEAAAAAYeHh4eAAAAAAYeHh48AAABhGf/+7//MPDw8eAAABgjDw//U//3mHh48AAAAz///d//v//3f/7IgiGUAUGVgVWu+/2++21FIAQslFJ49Fwcxu4sCTSrCM0v//hgL8gKgPb+sZueS/VVmhvtb1IqrDLD1uiIC9qvIZwie5Oo5ouueZ8KBzMVsTLOOper5oWQm9sWr3f+/pTAkasqXf7WtpJr/+1LEBQALuOdf/aKAIVSNq/2TDdTTE0BYHBIPMua9bf2XO+6rq0FBPyGkETuKqiLECEgcaJsroxWcx0d13JEzuzO7pu7IraUYlatb8z72uunZGOm4mnP3VObqiiEuIQm5bhSk2r6Pf6yAHmauon/WREqOoSzEQOUFAfTWWIKnlsB33IqwuzArtqExOJkizYxZLE6NVIX3ofrK43Rgw9rhyTYDYpT3DliJBc8aQxzz0VLGqzHfbvfq/3dn+5HUkQWJy7if99Gmgg81BVpBUINGXP/7UsQJgAvEl2HsmGzhiBasPZSNHAXbfR35fDj7u5KYBMAQ7CajrN3zBaimaLApIDbM+LkWa5QIvCE/oW5cIhSA1vPvXYgkHxrHIBc+0osDKXuSNWEJc2hIGY5qdDyLNdKBUlZMTr/q2yJRLBwAiGFBTaVP1NcYYQqodDYLMzTCi1sTLZuKShwh8XJenekYVJzJSJDe4khQJwZE4JaRg3FoDB9EMr6wKKGhOXCr5Jy00IbHC4gWveDBwwRrxdG3Qzp11aZQco6Ia7WtkoPCVVfZ//tSxAcAC7RnXeywaKFlDuv9hgzkRVGZ+SrwxRKzOwxFsdUpgPqDYboI7NCewhlLxjgG/KhDmAKF3DlNCQ2D4YDqQZkRVAVNH2hKJ3iqS6BwjFU+xlS2gY6gv3MVeuY/7WJVr1wgBCTkxF+0iRREKSxAZeYYi9z0tZorMx6D4gnVyqPR/Apl8OxIqBbCzW9VwgeC5OFWeuqGM6BKIgTFyUWaBGFnkgnuPyqLyrKYicQFRey6wUvdZYr/I+37kLkFys2qn/baRwiilDtmt6AmIir/+1LECYALNLFl7KRo4WiRKv2WDKCG05MbBEVAmm6BQhwvBIe6UiWfsSPkkSUj+KxctmZf6RYi6+hqefvHGrBxMiixmLscpou4sfTCmcrdnLFZMYKT8U03XX38xAAsPcqrfWSRpC0aTkfIDDKrfQBZIAOFbhuSgUXniUqOvEFaAyCIQA4ai3q0EHg9ise9kTnDyzrGMYvesLjFCpU80aCpdI20eF4spKYCatKaH2FpGj+nV/+/pnEDuXh2a2RtEgMmDRVW7LuiYyISYdFv6bHzWP/7UsQNgAr8W2/sdGcxTwuqvd0NGAi+MBAVZs3mFuVQBNROVUhGLUTX4hjXGmootxyLCJpogMsS4WSlFzCgdMJOb9Ynte9bjRfMvTuNFr6cz9KwhRbU6rLG2kQllVaUorADjvKBQaOl20NAQROlwNKHlkZqyO/Fs6XOjKs6oGJozLJ3j4KDrJlGiXAYkFyxhB5YkVMitoLrF55PeupG1327Tntt1WVpdAJYdmtlbJIKF6XUuuBF9xxgLosmDEUo3UeOQ7j49JCoUxMEvoATOd+u//tSxBWAChCHbewwynE6jS28/JjmUaQFMbdbif/14SlKGiKMuClEAGD7UWOaxQicjR45HWxfRakgrrSZQgWHZbLGygD76vWxXJ3hzaaS0lnB/ENLpnddKR3InRxRFe4uc34J5pl/79rZbgbOouhzyq2DwwbHMvHrZEzUDlXewxWZFSILlxkGWNWqSqVAA2ZdY22SFOeuQ8D7ug6zWZU/TSWImdKa4LQww3iAWovT8zUebOpvrVd0kADo0aJwIFogAM2gytRdyyI4YCGksNDhomL/+1LEI4AKXFNV7KTMAT4M672DDcykqR4jPCL/7PTRepb9eUgMtNta2iAmz2KsTex3XuXTfa9VfCXvYGTOqVa4oQPSQAZiSXh8c2NjNCc2LXr5DmgkcuFy4pNtNXRckuXEogWWELS5eAcczT72Lm09NW7e+QA5jX2NogNdGqQxlydSkPtlblPicYIRgy8P1f8zAMdgtqCCfufEMmGeA2OBY4+ScRiYa9j4duQsLSa0jGoPjgiPWUZiMe+9DbjjM//qX+3scEqP75EkhlIpOz8Px//7UsQwAAoAZV/mvGHhSQ5sPMwNjNJwoA48b2XlCJJVKBhlIdpuQ3BHSyNCDjmC3pbGXGdZn4McGVgkLiS46pC0g62SHK0RbjH2uF6FtP+nRbUHO3+z+pVYiHiCBFjkSJAB7wx+DFEQQxSBdghi3wBjgJ9ITwOxzL6mspSZik7b9tYdIdWpToQKgkag4N+9TavT93tZrZkT2b1K/z+fVvjnvta9UknH7//8QHn/extgj9uSGHFBRB3KxCC4sqgwkcsbKTQyP4iUWLpWe5qbhaQc//tSxDyACdCDZ+ewY7k5iyx89o3EXErwIouAtweCQLFxUihNCo+NtJHEOmbmxKtyiV+1rCtOXUSejOvN5Ahf9Y0SQejLSaJypD4TS76vPWEoUvVmtgLU4aNRm+XCDsKAXZmgcGt1Nj2EiJVww8LAuE6TJg1vfU8yZGlnjwmhETIVQv3p0VKZ2jko+9zbuVXKDPfZZGkFlxFz5ThLzLU208m14/zofrhVVykhL6C4e62Zn1ngkXvQAQAHPsMH0DjaxwoQDoyCqyvFWpXOuYbNMI3/+1LETAAKXGtd6Lxh4U+LqzzzDgDlGN26HnXUP//rUKS3266f/tzMBp29sSSBLSjBKM/U6dxvnikT/USsbJDdfRvB0IAgMSD1OIW7ruRsRUDOJ1lh1//PFb9rERC/jWG0CfFcYpWuLaqGqZc8Z51aqs4RQh//td3ZVdoMSiIRFlukiZKIIAG9NKG7ywXNAkri1e3O0btwzTVJK/gsgEqZBOisYUFsCZhdguQwwckL6QimbGhYtNjyBWbThfRPlRwyQLiiXNDqa1FZSUiU5qbJmf/7UsRWgApYl2H09AAiW60qPzDQAKa6SFTl46xqkeY8YOgqgktStkN1aKepdmo6T1uipBO6nVRZd9tutB96VLo36kVur6Rur9cVrWv/+5n/7E0N1zXos7ujJyACACB0SRFJq22rRJBqIpiYmICSqv5Imh3BUN5YGlA0HVnfKnVA0HPgqCqgZonuJTvBWGvv4NLO//iX/8qdTEFNRTMuOTkuM1VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//tSxD+DyMA3M5zDAAAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVU"},{ name : "R_sfx_missile01_wav", data : "//tQxAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAAUAAARIwAMDAwMGRkZGRkmJiYmJjMzMzMzQEBAQEBMTExMTFlZWVlZWWZmZmZzc3Nzc3OAgICAjIyMjIyZmZmZmaampqamprOzs7OzwMDAwMzMzMzM2dnZ2dnm5ubm5ubz8/Pz8/////8AAAA6TEFNRTMuOTlyAaUAAAAALkkAABRAJAYCQgAAQAAAESPe0pbFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/7UMQAAAUQA1u0EYACIyystx6AAS0m43UwTDDMN4gDEQBiJwcdEEEM+XqDGD4P5/+n/wQ/4n+UOf/+U8EK5YVJEnASSQQAAQEBGRtmNPAZj9WIDkdCajsMcyT9L2xiIKBcOVE5YhioPEAtNFDLIOEQXFBBYP1D8RBEc6SjQ7EgsLjaFhD3RjBlUXMuxo2CDxepej3qnjOlZo7Pa2SkqLdZtB0s8Qpz1UOoxccqVCV1b9/z1Npd1w/W5qzM/XX/0U/mX1ZrSFXa2VMloADAtZ7/+1LEBICLWF1rnPSACXWNrj2EjWhBeHkuEIPxEIRhSq1nT7HHV7HCFNo5Uy0HhIKR6m3Eb0eRycIwfFLFXbVjl5S4f5ntyM5+3XXf1XVrNUnvIX59tT5lgi/Wto+ue/i+n3fn/f9pmhoVFMQBSrMKFMOBAMdfJdtMdpM6zSSSNBIJCsDA4RnwxBZ0Mpe9UbI2MUcyLP0Mu2DQCAuLmyDTx4YosAxppEqsTgyhjBUMkhYCjmrYA2i08cQHNC5JTVf9SZ31KpNLW2QCCCVeXgfaiP/7UsQGAAuog3OnmHKBeyTvKPMJsp6rh6EuVY/08wnBGNN+YCgOtlLYnoskZVvFjR2qupLMszb3yld3Q5YPhKloBgoJDws8mSAjlLBOguQJgATCkq5Jiq+Y3t9O8ctDavf0ez6yYz/6YSCCU7Blj9JqW84RvigaR8K06llOttgAQAwUmSRKL1yxvPcAni0Mhu1ItNpGHBNlpl9GTRD17sGdc10JRxBFsqsT3uhWqmZnc+o3zsqyFcqzeqfsgNv36f9dOvrqbiSKQAJJLdY3zJXR//tSxAYAC+TbeaeYcRF3nC9o9I1yYTGPyOdikMCYqHJIwTOiJNZYmZfVRpsYd0lOcYRpnUGRL5pE3Ntz3LeA21OnZjzyERYuZHKW0/y1/8OQgomdB5EOmgSHA0aPkyRnf7/6E//+zqTf9SBJJTdg9LYO5EHqO1+0EqMs6TzdMBgqdDKRIySxT6G/a8hro4/djgvijDYthYKg1J9mZYz4wKH13hkpIX49OICpHIU2/JUvo/rBcCCww2+fNr/3f1/7KIkfMPrtjhsRIAAAKnybPtL/+1LEBYALqN11p6RrQWkk8CjEjLNF+PEY8yOOdLGmyHgFJQyKwGaULrp30Tzqkd00k2QeloIykUGY0PMHQ1l09+65uwKmdKQUyQIld4iEcm6ol/0DjpseiJwQ6fbnz+IBp/p//57F+7voBJKTgMApJJkIyUgIQKAlkecAZGud5o+fLEQqKlovKbV5So8Z+a9b2PXKmy87n3/5l8DEgmkf7yA0zsknmTnLJL5mVcxUhrgrSP5WWEcYQjlnPYuD44K/qps440QQCSlMIA8moel8Cv/7UsQHgAug3XumJGcBXYtusMSNkAUvTA9ECAYbMKodx7M2YdgeJuIoCZj8hOUvGNOMedlybsaefmXa5NleaMZQuNvtuxGX5BCci4wtr02M76xUgOLi7DblD9RCOAgnNNf06HbG4igCAVjUSwiVBO2K0ABpJHI8D4cyPJZzVE1IxI7q1dHYmaHqWcBnGijATYUBkGg8fCc4kOi59yUoi7YOXX3pvMjAID4GW15E6xwBa64kMaSyPQSq/VXfbS1sJNFObAIcHMJRxOyIExLLQ7px//tSxAsACnhve6SwYcE/DG509gygyWpkTBrZZCvEpAgh3IyLBlyvTB8EjVMYUpgkmlIBRTAmgVFXuGJe3VbJSq3AK6Ndcyhh7UgFXCrCykErvkbbG6iAAQU5wIC7HofFGpBGNkKwXYiGgJUBwxQILeYQ3BA6C1E4PxbMREbGMCCYZE14lOigiOkSoZixJwsJUZakXDS5OsNMikOhz/v1Dbu+1XUskgAAAU6AJqvEAAoigwiI4CAJDCINwQmwQL6J23j7z+VZKPdozbJTWjsva1P/+1LEFwAKJGVtp7EgyUwfLfTDDchq/dTQb/Z4C7fUk3e+tFZ0/lGP1GbmktldoftA9eQP5kqK/WUyyYAABKdgEIMmRzHodyeUHClEVTgQDwckyswY/JhD2DMuyBD0UjA0xJEbjyqZXyMiylyPVZM2JSzHPnG5oXf7N6piVnPy2hlFUUIIqAYhIUW0Ks5I0kAACUpgFZYBC4lhmBQRgOAIUjMcFY9KhwH/RIyKAskbj8pDLnMRkIHsZ8BZmXFQjyskcq7EbLrdi+HqpHFz78/74f/7UsQigApQ1W2mGG7BPxKs5MSZGY1ELEsKFxZlaVfYnr6PVUAAFsC2DUFEyUYjTEIp+UOlmwiIiA6G6LFwZJzYTxQSQPCqA5gVCZ6yo03Mt3lt8bSSLVu7FWVWpuxda0LjqrqLf4rdCwr/OCfysC2O9iptyJogEElOQCEocN5OHGP4PQJhUSSYJGjWweoQ7SlgOZ4x3n6sMyKQaEooyKCx06FVRIBIuMJB2k6kRAUDA1a2QSI7IUEvdpuMvXnf/7JI2ySQAAnNoFINxEAcCYSk//tSxC8ACbhJcaewxRFNl600wwoYUTTkTCG22QT04ZQHWTPAU5lf2VHQLY24jdOVNgyuGbREqZNlp3KhOhjOf0LQ7YOzF6vlFgYifjCcYmpbbE9v/P0f9FWe2SpsgJN3bHQhhIEg3PwPjuOI0FkkmokkEpIVRoXJhbzmnGHzbyEGMH56gQWswkRggABUAnUGTaSwnLre028zXKTTwEPYhr2Dpbp0er////5nuZAAAAU4AWaBoH5CCQ2BqkQD8tqgmLdDIqMIswemUTTk8VFmaBj/+1LEPAAKOGdtphhugU2P7CjGGDBQUmk8jaXsE0F39n2uuyD2W0Bh0EzhEuPzIlNCIiQCIuRemwtvc8VvBZXvYrSq5ugAAAFQBBAaBJOQysNh2MAbnYHmSEFELpXgWl5ck7LLDmcg2VmJ00cUjNtLqJCQGmoN83iEU3B2YwZwoDQKLekPVi8DJYeJLdhqkcquitTciaqAUoYlg2FBcENUMTAZFguJAFQCQQzESQgI13gkkfh22zY+oGHH2WzAJPMNgM+WBYJBcPIOKHyxuoWOW//7UsRHAIn8lV9GGHDBRwssNMSY2CYvYRmnKGkXokM8DabE///+7s9V12sjQABTusAnhpAgXhkPJ4HacdF4Up0B60Q+rFzSpmoiAOcpUjWxEbHMILBrYZE99MEWARskHQWeMAyjNAoVLHjJ5a0FAqGAE8UUzdZnReCH/UiONplgAAySVFILBBHoYm4yUDQUAMSDbYmHjmGMRltMtgSJO1RJlOx+Kg5gKiIiRDahKKJvDRYK0xzjqP0dPfis+DzhjHjBwaIhx6NQviNJNV//vbdm//tSxFQACmB7Y6ewYcFLCuv0xJjY60AAE9nGLmmVs0EkjkAe6eXTqQ0lIvL2noggLOZW0gp9khqR+IHDHXQY3bYzbxeZo6+uRZpSqf5cU6OWBVAkkp0s1U2nDSNVKiau1NVJJqleuzSzMAABKyQAeBQmDsKgUAMSyUPAmG68Co8m0QkWvn1TlQDZHDMQ8lB65YfhOpA82ShgpRzZA817x7CEo03H3DWlTH1RYeKIVvQSMIdY4VSTZxZRtFMAAAqVIiWJ4HB9A2BIEikTRJLhuPL/+1LEXwAKcK1fp5huwUoO67TEjZCIkDssMF7a6XTBc8q3220dFXIPKYDHQhVbhoTUzjr4hrxoUuew0LuMFR+xBdonLIaRib6NFn0v7V3/t/2xuvxFFBByxoB5gYIJEajHMrPEsoio7A6VIQSOJE1oHQi8mnSTrHiuj4vN5q8r3t0rrpstT3oR1tI2yb9Ev8HFzB88Yii/8pWFqaP///3KVodlVzEASXLYxkB0HB7BUsisOhs6WmiNdedj/WgMYms1B0Ygt2BQdY1D6tGr0STzIv/7UsRqAAqMg1mmMGXBOBkrtMMJsMvKtP9CHYPuSUB9JUpTNBd5obHBNZW8DMIsceqYZ78iL8dFVk9X1euWS6RoSDewz3YpYGR6JzwVvh1EPjJBdQSudkNpatMdO6Xrp9Tq368J6UARzgQCRsm5qRO8FgOLpMG3nWoLgIUUNILKtaQdbT3yuiz+32/9v+hEd4ZFMgBBTjaK50okoZSFqYyFwrzeMgZAdkQE5g+d6BRQFVeUsHcvJmtJ7rU8+g2Y6lv3zRCpRE8/m8MY6TOjywID//tSxHaACyCPXeYYboFECysw9hg4BsTgGcJk92SFjE/WtO+h3nLv9tFop1X/WWslGrqGMf5wksLqSsvR0na8erkvj1FqtC3aIguSjk/DJYgqjZIdNaT8uFyj2E2KvwnzCo66BTBA8FAKbGi6WCG8BOFrLR60kfru3s+13///0PpoV2RFMBZqqQdSFC6nunC/KMt6vJAvui2VHhSuNGHHXoWJeoqNMKS7bJRvEnNRrmygQpEhKwfmDVoIuMrpilKUIRU1Yvv/QtuMuRVJIW9/qU7/+1LEf4ALNLFZ56RqgU+SqvDzDdBncr/072TapA16kErNYbo1kRSEYBSKRyD0QAbj4Ti0YCPGuOXud07kMmawkFcHwXNgE6fCtCNIVUPKidQjPB1tsSHDAz3tnWhT23lxHazuJ8btQzs6vey/6TrtrW133IGvMdp0HOeA+mk5kgZR/MyKXaw5q7AE6JxMiicjP2VonRk49UV1Mccl0afIykK1lv8hmeXsXzBDSJVBAPM45yHos2H2q3XhrQ9nXJI/dvx9/oRVZ5d3VHe0UfRei//7UsSGgAqki1XHsGrBU4mqMYYMeOqRLIauEcOK8DITJ0QhE72Vy70y6F2xszeqrFVVVSjUv2ZmKezMx/nS6p/G8/pN+U/lAQEuGhEdBWo9lv/yvrDXaeEtAITcsjbaQSgSa+9r7XLqbxbqF+LM1C/Fmahf//+ZiwrxdnZ/+tVMQU1FMy45OS4zVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//tSxI+ACvCpT4eYb0E8mKh49gzoVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX/+1LEmgPEqAEHoIRgMAAANIAAAARVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ"},{ name : "R_sfx_death02_wav", data : "//tQxAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAASAAAPgQAODg4ODhwcHBwcHCoqKioqODg4ODg4R0dHR0dVVVVVVVVjY2NjY3FxcXFxcYCAgICAjo6Ojo6OnJycnJycqqqqqqq4uLi4uLjHx8fHx9XV1dXV1ePj4+Pj8fHx8fHx//////8AAAA6TEFNRTMuOTlyAaUAAAAALgUAABRAJAPsQgAAQAAAD4Gm6e24AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/7UMQAAAVAA3O0EYAiHJ3t8zDwAAiQHG2olIpKCJw+0MIwTB8Hz9QIAh1g+f8u/7v8QHOT+Xf4Y//lwf/8ECDFLpErNYWWUJUKCJMZTY8rN7cWIwa58ZUlWdqedHb4ElWjG2hE0UJYXmGLG6MwbRY1adgqGLSOStMKX7qpN4hQjx02KltUESz2L4dM51AZdfUeSHunv/mvp/S3pb73rdvq2I31H1/5/9/3pIHjYfH2FDIgtLz+hjRosQ00FxKvWwWaj2//9SoUVUG0NC0aZR7/+1LEBIALmPd13ZiAEXETLTkmHDAGKwLhD1/sYuNJgmsHlmpuIiMqa0omhjhfAjJLpJaki8McJcK1NvWiidWW3/rUU1fonVmxroopJIMakwn+qzPWtl0kql/7X/us6o7CZN4D6mf/f6gnogI4AVAABCouRF4KIfD62IY4n4EIpMmEePFQWEPuNQiF4EBYf8qWJGjQh6EweuLhIUn2HTFYqN35ykRITDMjYXiwUet4qdjlAgOAybBD4p9nteuyJKj4s1L3awzblG0zVAIRB5GLpv/7UsQGAAvsiWvIPQHBYxGuePKKyqVyNKVCznEjPA+cXmPU6/DkOwAUGlJ7niQUoE4H/9YvIoOf/dxjiEeLPc3u2oww4mUIguCjWNFVKDCYbbtNjTNRJhEm8si5lOz2Pp01hCkKtXWhAvLMTQhpyMqgjtE3UxKywSpEcoWbCMwIkdLyEzGD20sKHB6a1rV7Z1R+1DAQ4/HS9CB8JhqP6iIuohm+rRcWNWo0GQRJVLVUKttA0XY46drq7JD/T3XWkfXVHelzf1JHIQQACLvq3SKl//tSxAeAC8ylaew9TYF7FW189g2wcSOT+PbylaxXz4loqc+oSZRJCIFd/6+dK4fR4ofPv/22fqWEmPBQX3jL2U0hYNR8SEnR1Zh1W/OQeGiGkQp5Iy1meD7uFGj+Nf//0NfuTYF7dFGqbKsAkAAldmL3SfSLU8OtcF9EkObJIVq507FQwNx1RZN/Y47XGg9RhFffwkEEDZ2pJ5Bdtt2ieEUEQEOpe5kaGtXhP1mOCgv6i7UgKXJPa8skf7U9H/q+jXX0qh39ol9yQ4JqBKbJW+L/+1LEBoALbKlvx5hSwYIQbbkHoDDAwvjebFBKYRdInOtFKjxk6poqqd3v/t2NKhYdPflSscggtKmeIBhJzBk0yujOzM2uSDJgdPZavMGTiJcXY9hMhejrt7bKtjrq1vXoVT0D3/bL6gYgK8DyYCtKRJLZoxzyOUnw3Tn0Yx7KP2JgsRRoXX/4lDST7v+laWYff+pQ2pzRiOmjwqg4ZPSRMRh/4/sEly0EjDanoa56lSIcY5zmsJCAQNNNU0ebbmmgfzgpKaiGOVEQRpopDwvS3f/7UsQGgAtA73PMGK5RYZbtuYeIul0Fh2/xeZTZ5C76HjcuNnYeyhvQyzCyQN/sQ41v3Y6OERH9UVIsP9URnOQSfRXY8YWHSn0/0pbTe4rd4lb5UBK6A6//NJapkI0za2cXF5lkJ2EwAVUir8eeRmbkjkJFBM2Um49Z4ZHwq1uaSEwUkiIEfarpnHScGIC/0jILDfuWKQ6F9UZncFN51d2YMl3u0mqW0kmOUCjHuSorR2Mv6PRcP9JbvQoJmGM3YSFWWCI4m5Mx+k0MlRRE7VEh//tSxAsACnS7ccegT5FDlC348w3Swilxi4siZJZge9hKF1//4UVEIUr//thoxX/9mYoQnQz1R0VnCCLe6KIEgYv638WeQXihpQ3pcwxknMKd6lBExCFKiIAqiNXkxRx2wkYvIsV9gG+yGu5g1Rqhqz2PBPiYKLV//+1DZC/+w0gaH/yw3cBBjz7UMsdQ4XHipy4EE/R2Jn9c2X9Tv//rZa/baUoZh5QkYAQAQQZCIeKskpzHbKcqCbThPgLOArNeM9kYqlQPAdP1NEQw4gT8ziL/+1LEFoAKTI1pybyh0V6YrP0GNDhXD6E+ZjD0cCNlRkPghnbQIJ3/cW2LQl2pql1XJX/+9vs3lrBtYd/0wxBFmAAgQDKCxuSxWSAUjYuZthy+OMdO562s3JYTAxZ96nMCYaCahuHkX/ZBRIm7IfZbmyRWXlIf1ss0N3f/SSY+S8qDDPhz2iwf4lmj/sLO///qjxmrlkaDOskppgVqH2WlyTFjRp3vSatQS5hCh+u1uJU6ytVjY+2b9a2nTz7JBXNwP1FDXmBA1vnzwVyJccoPnf/7UsQfgApEWXnmvYFRTxjwPPKN7sUoK2HEWs0Et9ojHFB5FLgIhc8VXVujwhxJEkEFb0pcmh/H8rzIRTUqpTBhE7c9iZXNlKgdDf0LiQsE0V/zOrhR6f/GaqKFhP59X4Ydie/VLq5iAjFKJOtliTbLthOhxWTAbGWIkxsIiHUkYxwJBIAGp2hDUCeMY3GZz2mYT0ZhfzKiIA+0g/wudgOPWGQTEiE0QdTgyMJX8hxQMZwJvQhIlFczL8jlRmKOm91aVkj2////UMxEKbOQwogk//tSxCqACZTRbeekTtFBjy388ooakg8eZpAkWhChMNNOqna3uhkj4CDqhQMbj+Y6CQFIDq73oiKLhTiv2IHjHAgbtoGFQyd1CigRMvmDELhIl/8dLeLvo6G/X//sGJqWJXEYCQUSAe3IY6FwPwQYW9iJy4jto3DzOc/nSXVDFr+ULD09wtaR/KrCat+lHFxjqf1LNOhEb+XE2dXbfowUdo5ZvHf0foV+oIioYTcgwBVFw+1mCH1aoYEvgQABKaoCpOI07URl0epiCAxoxW+o4kj/+1LEOgAJcNFv56CwkTwVLXmEiOKX/nB0QyfVBh1Kxzu76kDRJk2bkA8eAR4UFGW+LX+PUjix1rLL2OUIiYc0ZBoIARII7k9XaFIsNMk8ZDUKR+EMCoG+nuuh0grIyeUOLrAqKvFr9VHcgg/0u6lqy/sjq9FN+/XdvoiEQcxBYJqQ6x2/9vvYz20BMRTmimOyMoR3PEnRip84TdRByxBXHrAGyG5cRZ7L3EmQPAjBu/1caHiBIUb9Ryigadv0QSoZC/3j7sz/rGsMGqMWEMor+//7UsRKgAnM1W3npE7RLRotuPYViv1WN99KCIeWI1AJAFUbXXmgvBpWOMuaF1Y1ejz2Es83Csx66CB2OKiLfU6DhsBX/Qm5lR/kEEcMK1GsJYBFXo3sApFf0HPiNpKy4VMrcts+RcRt//19xd/c5rxhASArY6lGIGiwhk1iiG6WQgG94kqoo5ndxAw7CTfVQauEOjt0QEDcxBbX7CDB0Dhk0lLlIDyH6yQOQF+z1wN41g7t////9dUXiYUmgz1FhA7OjVUj3xdTsPk5LHDQw4JT//tSxFuASiyZaceUcVEvEO09Fgg4JJsOtnjq3+aMSNWvFREE+1mEGRmT6IIbr+5wTuFqQnODIeAsc4MHRoiLUqf6f/7m+gt/8o8gjyZBZJJi++8idSR5wPfmJVWpq7oGMi6mzbVP4ulxUWnSEmf9rVIYO9FL/20lFUVttf91yzKqCjnb9MzGRX36VEKwwp50W+yP8tPm9d1f0Fuop2eFTNIkggpr1SmKxhxKkohFHL4cp3WQGwc6OSlQMelWqOJ5MI6rMnqDkkBWRpRvnnY6o3T/+1LEaoAJSKNtx4RUEU6aLP2FifCp7xlhqwgOIAMRJc60KgIs//6/87boWm0c/tc3kQxB2ARJcLZ/ELLoJYdOS6KSYLs0pIfQECUI/SqIiJKZm6qpaMV2+zEneQQ/610OR01q6QqBQRs2tK6E17FN+sW77gZZPNvHJ7NMAMgizplsRee1Rxm6zJDGC0YyXibh6fKV248hBML6M0nFgakoxsv/8OMcvPuCZDzBHVNJEFCqlRTCJcMFYBQ0KMHft6qUNZCd6nnbLxy7ZxVgEABEC//7UsR5gAngjX3sJE8xI5mseNYIMLXZBIRbCGSaaWFrYlXMVPMo69DuACAIV/6ORGEFKv9ytQLYx7nMswg5MYU9FwCFFCLiNgwceyhumuP9zfovjUj3Jf///cgazNZKkjJKril2XFXGEbg1LivtgmAsnoNO4xAnzLLlymv9P+yjBg8vn1VWMpn/qqxTfdLqzdQwbC44OyzwyZ9vQlTGa2JA0ducZYBaakhzF/7KtfQd3OQUwidPygUoyyFYHCsOZEKoQRhQhG0rbHimi8UqhgoA//tSxIuACkCNX8wwaUE8Eis5BgwwsSTs7KyuIxOv6KcIxc9v0SOmOzdDz0RSjzj0oiq7DpwOXoU5tc4t1GsloZt+j/foCGg9FYiBIEnMsYC3v+NIGdLm1/mlCB0NP9/gUEFsUXsEnJAd7qfkMjjtJAxWij5WLIpD1Lq2S/jhUdJw4jb6vx/JIzcexfLnR/8e0ukqO4Z1HxiaX1f8ouTSaSpkkMMskh6q9dv/8xJpYUhilAukiWDDCfDzJhWSvWtlfR//+PQ8SJ7/8sRVTEFNRTP/+1LEmQAKhKFbx7BlwUeXarqYcAAuOTkuM1VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7UsSkABDJozSZhoAAAAA0g4AABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV"},{ name : "R_sfx_switch01_wav", data : "//tQxAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAARAAAOsAAPDw8PDx4eHh4eHi0tLS0tLTw8PDw8PEtLS0tLS1paWlpaWmlpaWlpaXh4eHh4eIeHh4eHlpaWlpaWpaWlpaWltLS0tLS0w8PDw8PD0tLS0tLS4eHh4eHh8PDw8PDw//////8AAAA6TEFNRTMuOTlyAaUAAAAALi0AABRAJAL6QgAAQAAADrBndCewAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/7UMQAAAnYF2Z0YYABfw4tpzKQAASkm5AGT0wgQIEECdg+D4Pg4CAIAgCAPh/QCAIAgCAPg++UBAEAQDAPg/lHd/9APg+D4PgQEAQcgHw//fygIAgCAYB8HwfB8CAgGPB/UGEJNOtONIMMMMBs5rQEIXWTS8j0tX4znLUpkL7QH/kD0YM3zSNkmIi//jq1CglFRX/9ydypVh6JX4HQZDAMhLzo4uDIoa6LjcJNGMd8xyoqgcLJ+p1Nw6tIqx7W///+KIUCTyzzmSSRBRAmQ5D/+1LEBgAMAI1xOYSAAVGQLYMwkAA8KNl4WivJD7ox564xfwac41HIhWTkgYPKm0GCABwPXYvkiBg6ggzNBJqe+c5Sld5G4VsM8ISxzJsCOMAN4PjxQ85QogAZeLizI6qYo+gNvFFfo+wEqWgOPcoRKW3Tu44Eceh/pfF43nK5YjJh48ojQIlEaqyCC/QTepBvFKexNpKSknTunPyO1DXkyBoQhg0CxEIHDYsg0JWOFxwEQkVsMjRUW2/b9qUKGy2+2+Ab0YCcJkB7M9CjSUqSN//7UsQJgAxQd3C48wAJc5GtgzCQAU/LqiAqYD0aVY0OHJ0aQF9MQUdqUnJpWya0niinWmXzUECj4hIfcUESqM1ZClWoOmfFt09pWpYDtt0f/276/1N9nY5/L6d3//vv+n3Mf72wU1uIBQooIHvPE3IgiIMAhqUalEWnIXAkHE0yYw3RtUuYSVxHPbXty68HXOcO+sqsuU1NhkaqUO8nAPSQ8VxtauphyzddhilHNuStWetRTpd9f3d//Xr3//u///91E+i+YHULZE8vyxiafThb//tSxAeAC3CRYhmUgAGVly53MLAA+LYsSkf+G8AYDX5AfWIxEJv+zNhQ6RNFf/0kmcYRaQyv//0pCLEEOxQ9XgwtwFEoBBToal5MFRCMDR7zYnabLrLKPB0t9T/xx4iLWNIH2/n0+f++3s9gYEAgKzeqi9yJVv58DUUWdyth6XqFdNM1YEYKIna8aBIB9KLt/RUDQOAQzVFjq+8dJDjoKjWJjd1/k9NQ4cTnqPv/9y5o86fNG/w4FyA3/0nAGCQDE3/9zRyL3iT2hmJBF4/XotH/+1LEBQALuJN9uPQAEXeT8HcxMAKIxAIBW8a6vDsx9HmyHMw/oaZaGsvgBAFGv8RA/tWbuYQF4NzxaYKqPkUk8FgNCTV/4m9D7xcXkRHs+4PJBABAqdX5eD72iI8WBV3wQMwff//ghjyD9vsP/8LfYNAGAwIBGrfB3t3lVrJ+HUMRTgnv9lgKMjBlRQB6Qd5eaG7BfQRoHr/e4uQhhAyAe73zI6cLxj+nuyz5sam580/lxIFxX/t0//QDgqKNDn//NmTQXIi1A2kzdURE40knLP/7UsQFAAsceXf89AAhTpRtMrCgAEiKV6JAJOGirUtCsu1EzQjgfRgwasB+qi1QXDQO8uvP1GVuYzGxl/I/yJhTS7ic4t65pUpJz6nCsyt5eQn723Kl5O5Fl6notVTZcv1SFtxaxW0AUZQVMwbkiLWbIRHVjcBkuNdo6z7bPEBcnkgAcTXIx3HuM2oN6Fi08mxflWy+a9UyPQtk2V1My7VLzy3EJ5cpJXqtuu2XJ/Rq/VI3ey9FnoUS4n4DtO0ZFpPsya/RP20erB79P3Azv1zB//tSxAyADPihZhmEgAFLi61DMGAAAOiknHiJWBCUOESOiJe0RxHHFEbjLmEl7m3OFSUcklKOVHJY5nZShm5GCbTACFzSyQPpCrSswKCMSpHxcygLkjFqKDLxccxyBZdNnb/vrEJncKqW5CAjS3TkM5IX0+H52RxSRTgcYgeNONRPKOksuOmh71BO+jqhMFhYSlhYRiBI4MGhUMGhYYXjDx9zUmlLucLIKVC0x6at66m//o////9CNFZIVGZnRHQGuzGo8HgF3MKFVCUSsh8dGi3/+1LEDQANfKdx+aWAAXsQtLcetIJTMuaa9DrJnRw5jZKwJU3skgqHdbN67jGzVD/c2WmpKTNkbfNM/vY2Hun//rrzhqx6Qe6RxUShoDGiR7w6bxgFJMCpX/7AqIWCp4Q+vj3JvOoY1bRoLRsNRsLRKIBQIADiLyM2ia4CuStPtv4SwpYsL8LAjpP8BwAUBk61L8A8P4sIys0l/hwEcbA9EKlbZj/yemossbtATOCQDFnKq6D4cC5D/gmIgGLGD//zQ8gNmW0DDDTTDTDCDCApA//7UsQFgAulAWU5g4ABbJcwdx7QAgwfVIikXp8JhwzKv9x5+NQ1/jcRxFB7iWAQDgjXiwSycdOHht43G5MHg0NNab8gfjcbmoccrfnjQxqNqahz/zz3MbM/W//kzwI4AAN+3/zAXwg0tptthttZqNbqNBoAACW0XRtGbpnR4HYA2bfM/DZJ8+lKbAjwVHNz7CfAtwlroopvTLw9iRNkdbrfLxdPl41+++fNjU3NjyK69/rNzY8mfY39takPAaPuapyKVQAIM4gYMIMYIOhiAgCA//tSxAcAC+hxZ/mGAAFpjSyDMGAAQACjPl6XHBJF8WLCl6VkeVJ3ifKG9p86eBwmOq9nOOCYdL4L513LLHGPcme3+jYcf+IFxfQA3g+AzBDpE4eB8SCdP3FHBhLGGk/ggozb///7hhr9DilOwaVxGkR6CnakbtV4vM5SmkHmEiIYcRRPOONLLgxJS6SndJTD1kOlINBoKkkmQ2bMmgMJDIoXaZNB8yLpeGBa80amTRpbU15nFUH/S/+i1Na9n///WhdPdNNy2jAh4bRxItC6L0P/+1LECAAMVHNkuYSAATqNbTue0ADq/kbdyWyaQQ7FKIlHHoz6xaBYqtIsRl01uyrUonVHtW5K1mnzUWYcZIh0FzpscQD4FFhY2PeFEhUITAXWlJIUbvpMWuPWNXMLaKfc4dR7beh4qClJuiqArKLcICaBWIUphWhhK8bEFkEeKXTEOOsgVpbMT2dXWfrNMxbP5zUezfOORbeUtvVJ3qotuKW3KpvVTbdtuVTcqmzTbcu25dMjcmoSKidVUBSRiaaQ8A/FRZvFEIeJ4ZuFyQcVFP/7UsQNAAowm2f09QABXw0sAzBgAFOQasoAwUsMC2U2L0IcgapNkehaqZ7UNzO+uzyp2TuJzlzblS8mqm25Xcqi28tJXqosVR3/X2aBosYLNMaEBW5wFMvRD9JD8VltFIZZOJkw5SBE8QUYmxOTyj3qE5RxPFTMsy6EZQJguZAxgBoNlzBWAUjguZe0k8YKC+9bUvXSgUSb1967f//oX+/////66j/3//eBmTXRDFRQySYusd92FtZcVhruYwxD9JA4RDqMUA0XIElRWjQChCWR//tSxBYAD0SxXrmEgAlij+sDMGAAtoGyOZ42dgSrMtMJJn3atGD1U4a9huMtaZ2Udathmsgv9dOlrhRKiWwezKJWmiJtlEchzamWxeISKqPqK2bmo9V12u6d9vv///7/n//NncJdkn95lAgo4DWde0yalj/f7uWGAX4AGEwZf/sIkF5GP/00D0zVHSd//5Pt707Qk3h8BkAVFRFygEOHBEJhKJWeQQXGj0ltf4fLrU9dXR/WnuRb//2//jY/hUDSeHx9iBGVVf+H71R2v+V22Bv/+1LECoALvH1QGZMAATMfsLcaUALwtYCOJf/EzEjkp//ghnrTdf//xe3ZFwVEvSQILU1lVCRPBotZpl2PDV4sgq451pYXc9ketKjyStRVM09WgSFFuar/88AP/zYs3PvgMBQMBh8Bh8Pt9sJWSokYNcE8BJVWQNBxewDecSf8BYdb/EWGFGf93EnGov/9SoqG/3+lUtZP/7Nj2sZOndL5ZNLTp2qn8vcZo1Uk1iQSCsSCQOCSSRsNg/lgxdH1wVYNVmt+XOSOw/hbC4IWxQCAFP/7UsQTAAsEzXG49QARTYasv5gwBGcj8bj8iFghU1PKEpOQl0O/zHMsfVEv+h5BMU9apT9J6EBAHQJSxhLSToxmvf/0qp02grMzw7OjksjaYNzUKhBGgtj6SimvNSUVTA2PUzY4kNRAEAhDYsaFTIVIjEBQk8iMYZaPgUVMqtND4VSJj7vpUgSD4zn6FyFyFp89r3WDls/Q/6KVEdusqSTckaQyF8gxPU8hI3HU3F4iE8kC5AmodKokKINmQA8HBYWex5oLhkIioqEiaS7hylGR//tSxBsAClgtWaexJIFGFyo6nlAAC94eLjYqeWNXYqkyygLvCLEXLT2xbs9S23dn7KARJJEQxJ+uANIZaFFyHqEBMkP5HuT4/0ZCXSTg8BRYxh1BdomSi5ndxWYXaNI6K0zPbOWnXdsiT1MtC0ckgogF7rQPa1239/tZ/7/rVY3dc/oVKdo3+wn/+v+3u0gcBQInhONxJRTTP7Bthb2BA63osNhfqDhQOlNYzEdqiFgktm+MOpEZOLS2MezTMtuoAGQqqoWmCjgg4d9LmMSNBgP/+1LEJoAK4LlbuJGAAOUDX5uSMAAnD6f+hHNWiymtACAEolQCgBDLlkSKXkiRHhKdEp2BoilTvBpR6o8WPQV5Y8DT+/+rUe4i5U6VO/nuCqw1/9xLEv+IlUxBTUUzLjk5LjNVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ"},{ name : "R_music_js_mp3", data : ""},{ name : "R_sfx_shoot01_wav", data : "//tQxAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAASAAAPgQAODg4ODhwcHBwcHCoqKioqODg4ODg4R0dHR0dVVVVVVVVjY2NjY3FxcXFxcYCAgICAjo6Ojo6OnJycnJycqqqqqqq4uLi4uLjHx8fHx9XV1dXV1ePj4+Pj8fHx8fHx//////8AAAA6TEFNRTMuOTlyAaUAAAAALlEAABRAJAKAQgAAQAAAD4E4rQy8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/7UMQAAAhERV7UZIABvKVtVx6AAIAAAjXezyZMmTvIMIEIc8BggCAoJGPc9z3NduZ8H3lAQBMH+CDvB8Hw+7/dKAgn/wfB9//BAEHUh/+kHwfD//wQDGAYv22zihCseiGJo3E4eQtQjZaG6dJAkghCHAQBgGwIADhwAEAtREFhFFpFA2EALj1GQRZdnC2NGi5g1fhNjBkrC2qtU/FUfKWlbdun/oZnoZCdcTV3TX8XF/c8dV/z33EfN/zwKGGZfNI/dqv0CBWEK+drQ2J5XO7/+1LEBIALqP1wHPKAAW+VLuTBipgdo99RNTxrC5kYRUqIqnGCx7Es10lXXRK3QOCg0JHETOb/p+yoIBwODRcNBQGDz+n/ujKc7jRcQExAeHRWJfydQRCwsHwV/RicCEzQMgkPDb/3UKrJ+/Z1ABTh8Hgmh4VlwgARKqG0OhbPDBtCPpW2WW1x1bj2RYXixBwIFYJoZXCEHChmjMWZzvt5zncIGCoDSn/kxOBBUiCsN/xxhA+e+EJMgZcEniYGnuHylU0hlCpAxVREACAQAoEwFv/7UsQFgAvAm3WGGGrBdJdu9PSKmHoeLloGSMTQ/hEyAKAaCI1PUbMo1qE+k4V/00RXIMzT/ziZfQ7uBjgYALASBoNfLlAGIwdAQNWUUicgBD7CzOMBAuBxUVAQ83Z+Emnm3MKe65ogLT9sYUJQAAA3i5JZDWXLYuFchzE3TKWDaNCvG2/rX7jUYCYHKKC0vn/ylItKylL////VCQ6Jk0DZh6FDGdf8h5GPFg0gLfJrNhKYGl1j1KSZGFaMzUkz//Sltn/0VYp0hEVVAQABWK8s//tSxAWAC6ind8w8Z4FuDW748qXAaa1Glhyg3qZW1lHe41q1qdDRxKKN8KdukXmFx5kRILJlUpF//cDAxg4QCNVIv594aWUoZkDYMYdmRi0nkOWFhNEq2rb1IanZb9UbQPoGMb05mu+JbVDIQpAFREYCJINkow9RE+udnyXq7+O9fgbz0kAgNMzRwZRWhY//8E19Xew2dQKwYiCBM0Iw0AReaAqKXl3jkuFg2FRFah/YXPmTIStWpro9J8i0S57zFSep30fVdlEgAWsiTQxJRWj/+1LEBwAL1GF5zCTOAXMQrvjzDhgSsXFYiqtrc1YmbwiXStStpu5Y0GCwD0BMPnvcxs3NmcVeli4RMvBUxxgnMpQLCw4SurLwqd2WPOFCZgCmURwGvCzWZFP4nfYupd5y6zjm6G1I7R2wAQCtUVnwi2pHhTCOkoBZG1OqVyQI0T2Qi+29TBS9jKIGkpY4oq/l0WVqJnO71iN2U0eqCFNcNeYcwE0KNC7zQVUTA58IkTwlFtsH60tarZdsoKq+jqvpw2qWFFMxAAAAlCJtqEHAuP/7UsQHAArseXHHsMHJWYmuOYYYaJY9GQEjEzM0wgHx/hLcfoLLCiR0ILIsd6QPWGOSY3lv68y+NSbIlUFKcSdsPSDvvf/QfVviw3XmF7kSKHxv/u9lt/K+1u/y9nNdhIRGQgAAtKJwLINjUXACXNCAsEFEoHNl0oDoOwoUaiowuXLg8swRZJnUo0PYFBCDgXPNchAYFgWAqVGkjg+EQSWxcWAbBUijba1Dxr2OTtoTou9f7arXJAIRIgVEQApIYLq9R0FcL+hEJgUhDJVFAOA0//tSxA4ADET9b8ykZUF7HW348wnwjZ7ZNGkD1PDigLAj7JE7CJpD9iLnIEosVw1fuV1Y1Ip/00QDMIFYKWtL9i9ulkR76ZOYgWHl/8gUOBFjFfy71HD4JnH/9NkZsQmYigoAA6URKIuXnEAsCDxAVL1Cp1Fbi8l4OMQCwZqr6zy0W3eX+9/4/eDUwxJLUtd/Stfd+x6oAFFAKCjMX/9quxCMLIcg4NA0HUfECyjQmmY+LS4gCwqREqg59deUVkJYywEkB8LMsE+G5tZa1At9pED/+1LEC4AKSM137AxPQUqSbjjzCRhvs/1JTZ1ozEBhYSOCYNKVR1sy0lbNEEWVYZ9vt6c7kdkMUv//dThBIBRgaT1i7RAKiqSv8mQNmQkPBWTokNQMR0AREC2HoYqsDjVNU+sEjACidL2mYKKGDczIaSVgljaMHKGdDf/ZiEhwRQxwpg774fCAsBTolPYPgQuaDwFK6CgocJkHEQk8TA0eMdPW52mXh2Vigm03BmA4SFtEBCUofpzNYdQIChhY0icEbM7OTeMXggAwEHfgcPhEiP/7UsQXAAnMQXvnmAlBRQ2wtPSY3iwNcHwfAgmCYSBo821QD16V0NQBSIlzaFf/+9aIqyvxvuu+trcSJAIRhUkMlJsTxfoFKRgGcBLeheAKjPKeY//sHWCExrwl4+xMQQw840pIRLicHC4hBkRJYdhkImnucuQJGjQ8s2j3+77njUJATR4wlXRWikVDIgBQQAFhCcnY6FEnBQOhkVk5PRAyXtU1BNNyY0cAUXnt4IAgAIhYQOAJ0JO8SBogWuiQ9VTZetBIsOKsiieuQ0Vf01qW//tSxCUACnxba8YwwUlRCW58xJjoIPc0rRV72HFGuM0VTxbMMBBLF3ByoH4fzsGoiB42NAieZYCxICpIwIAwCY6KgKrWjBY4YOAKaAgJxUWApgJl4xEbNMGmLRZKKfmTKhKeETP//ZchzNgrNQ0o8W+39apb6y8gAAtHDMGwoOQvDszLgZKhuiCCC2ElB5gUQkAlplBBOB4oUVS0HhJIcdFGdBoZZVnXjUcHxZR48VaZDaXEp4qCoTERA6g49H7M8rO0bkt+vX/dO4AAL/xFSXP/+1LELoAKbHFlhjzGwUOQbLKwYADa5D6PG12M13cFRrGcd24lIWbuKBmoi8SNPKe0NXPN+NXt/W+m/r/tcx2O3cRCQNjBLWVZGBoG7NZmWrS4jvqV3bHvdcep+mqtAAAgAlyRwNRptFhME4wxy7EDVzcfyMMg7FNz/aJmN9YeZAKB1JIdo9CTMnc64wZoWjiYwJJayVonSorMlpJFZgbkv63NkTAyd3M7MNAJlSSK0V0jKySnYvl9JFSRkPQA2B1RZJJFTZu7qXZBSSSvRHeZLf/7UsQ6ABKVk2G49oAJWpctv5ggAkz1I1TTQ+7jhKNa2pKLg4EbO793Wgjv/svm6X6y+PVAY0MzNDMhWggkooMQ+lY+HMPT0suHQlG54Xo1y+BCN6zqBiQzrsUqrOjf+hAjCxJhRf//5CEAGFhCAQFd/WD4PiMEwSBUNf1ShkEwEJn+qD4ecfGipI8Gqt///rFIUQQEU75T85Zz6lVzVGVQ4KJjxks81ykIMKS32TTXQxfU5wMEGHKxn//zyQ5hACAp384TKAMEAKMDpVv/d/83//tSxCIACpCjaaeYSxFFEqx9hIh7HumTx0LlC44mZDwFUHckKIZmaHV0IqCAAQB5covUjQboFBSjDB5OJQyIq2NoIEBclb3WYhv5AMDCBRAEKt/+QhCFHHEwgp////HLAYGTBQX///+VHSibChuuhgAyWnS0mjaauqmaZX0rKJDKJyeSOAAhLgkBtsqdZ4MnKR0QBgnDrZH7OtSHeNBwIBhoeGlrp5GIIDhMaQWUNfiALEg6Cz3P44WNktsoNHC4qREtyv//cf1MPuQkyEh5V0f/+1LELQALRId97CSjsWiPK3zwpgg+TWTdKqQoAAAjXfnkafam9tu+Vm4sysZ1yUB1VxuFgP0c4HQNiNyJFK8//nqAgQJmydzVqxGVg+HwiCwSBqxgxZoVDLhwrA5RJo0FToqYVZ3/v/Tb3KSe//oqiqqZiId7Y0iUAddiRnMmzfjqtTtaga7F8HoIWJiTmh4EKjsivEABBEAegFYnH233OXksnrhISIbhk9Z5dx8uBBZoai+NFSyaXuEyiSVG3t/R/+dAz1+hs27qJeFoBaCK5v/7UsQwgArYbXvnmY5xRwurePeYeBIWeK4O1gViCFvAdyiS20fHiYfv2x0I+K8GaEAFE4nfc9ZMgHBSOKUZYEFhYKg0bFqEoMNPhYqlINXKSh1VeOUpF52mKf/+mnvJeahSIAbpB5wprJBAWMMQwRKzpVIBVCcKwUNh9Kw/JUhJMs4DyqW80DptDmn3jUkQEVWCpUiLElJeULGWzsqsSpNR5gXUPpq6F936On//0tkREQZCAi/ICWubw8TsL4W1eSy7UYyBwg1gvWVhXZooiCHJ//tSxDoAChxFWcewxwFGG6q48wngEjLqcXVM8y+bGlzRbNLTLKrJtlbdLF3VrIqJ0er7OV2K+uwwu1ZwklfT879/pRU5dWVkIQTcaSAK+49YsxzjfRx6kqHedDKZIrxmIcj1SfgLFHbLVStokqo84Ig2YEQ4RMeZWlClFRRSYWH1HtKjj099UWOoWuQRos6Ff1/W1tKyzOhRtokgjxusPTWiWUAS+9VgWGIDrzE1OUod203N1//aCVVPz+8v0953+NPim/cnCiQNaV188koAxUT/+1LERoAJ3EVT55huQVWQan6wYABPZCjLfNoJiURPd6Pv16PqqWx6ivMdehWoiJqruIvMx4jb67bW5wJAXJMSK0sqARpcEGrJXbKFruKrxwYedtobuDLERRNxmh4I8CPG2MiRMujHjMkXRJ80I4cweRqniwXlHTE+VGIYms8ZKRWg6A7zhqTx0oJmSaZ9t0bE4cWKUKhFlmiBit3ZK+1ZiXjdFROlVaSLKMS8mzateqtBqlqUcPKvY6BBRvx0o8+LoX493+kFEFtSNdAKUSQIiP/7UsRSABMhH1P5qIABFQak85gwBKiOjJdaZt9Vq12vV2AgIUeBpYKnVnREDT0wVDSzpYGjwigqCs6oGjxaJQV4NP4a5Z/DXU/kup/JdXtVTEFNRTMuOTkuM1VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV"},{ name : "R_fonts_alterebro_fnt", data : "QkZOVAABFABBbHRlcmVicm8gUGl4ZWwgRm9udAwADQBhbHRlcmVicm8ucG5nDQALAD8AAADvAAAAVAAuAAMABwD//wQAAwAAAAAAMgAAAEkAAgAEAAcAAAAEAAUAAAAAAFAAAABPAAsABAAHAAAABAAFAAAAAABsAAAATwAUAAEABwAAAAQAAgAAAAAAaAAAAEEAFAAEAAcAAAAEAAUAAAAAADEAAABGAAIAAgAHAAAABAADAAAAAAA0AAAAUwACAAQABwAAAAQABQAAAAAAyAAAAEUAHgAEAAoAAAABAAUAAAAAANsAAAALACsABAAKAAAAAQAFAAAAAAD6AAAAdgAtAAQACAAAAAMABQAAAAAAPgAAAHsABAADAAUAAAAGAAQAAAAAAGcAAAA8ABYABAAHAAAABgAFAAAAAABmAAAAOAAUAAMABwAAAAQABAAAAAAAagAAAEgAFAACAAkAAAAEAAMAAAAAAM4AAABcAB4AAwAKAP//AQACAAAAAABvAAAAXAAWAAQABQAAAAYABQAAAAAAUgAAAFkACwAEAAcAAAAEAAUAAAAAAFkAAAABABQABQAHAAAABAAGAAAAAAA4AAAAZwACAAQABwAAAAQABQAAAAAATwAAAEoACwAEAAcAAAAEAAUAAAAAANkAAAABACsABAAKAAAAAQAFAAAAAAB5AAAAEQAjAAQABwAAAAYABQAAAAAAZQAAADMAFgAEAAUAAAAGAAUAAAAAANEAAABkAB8ABAAJAAAAAgAFAAAAAABFAAAAGwALAAQABwAAAAQABQAAAAAAzQAAAFkAHgACAAoAAAABAAIAAAAAAMkAAABKAB4ABAAKAAAAAQAFAAAAAADrAAAASAAwAAQABQAAAAYABQAAAAAA9gAAAGwAMAAEAAUAAAAGAAUAAAAAAMsAAABUAB8ABAAJAAAAAgAFAAAAAADDAAAANgAfAAQACQAAAAIABQAAAAAALQAAADYABQADAAEAAAAHAAQAAAAAADYAAABdAAIABAAHAAAABAAFAAAAAABOAAAARQALAAQABwAAAAQABQAAAAAAdgAAAAEAIwAEAAUAAAAGAAUAAAAAAFEAAABUAAsABAAHAAAABAAFAAAAAABNAAAAPwALAAUABwAAAAQABgAAAAAARgAAACAACwAEAAcAAAAEAAUAAAAAAF4AAAAXABQAAwACAAAABAAEAAAAAABtAAAAUQAWAAUABQAAAAYABgAAAAAAJAAAAA4AAQAFAAkAAAADAAYAAAAAAEwAAAA7AAsAAwAHAAAABAAEAAAAAADnAAAANAAwAAQABwAAAAYABQAAAAAA9QAAAGcALgAEAAcAAAAEAAUAAAAAADkAAABsAAIABAAHAAAABAAFAAAAAABEAAAAFgALAAQABwAAAAQABQAAAAAA1QAAAHMAHwAEAAkAAAACAAUAAAAAAHoAAAAWACMABAAFAAAABgAFAAAAAADtAAAATQAtAAIACAAAAAMAAgAAAAAAVQAAAGkACwAEAAcAAAAEAAUAAAAAAGQAAAAuABQABAAHAAAABAAFAAAAAABiAAAAJAAUAAQABwAAAAQABQAAAAAAaQAAAEYAFAABAAcAAAAEAAIAAAAAANYAAAB4AB8ABAAJAAAAAgAFAAAAAACsIAAACwA5AAUABwAAAAQABgAAAAAAygAAAE8AHgAEAAoAAAABAAUAAAAAAOEAAAAgAC0ABAAIAAAAAwAFAAAAAAA/AAAAAQALAAUABwAAAAQABgAAAAAA3AAAABAALAAEAAkAAAACAAUAAAAAALAAAAAdACEAAwADAAEABAAFAAAAAAAzAAAATgACAAQABwAAAAQABQAAAAAAawAAAEsAFAADAAcAAAAEAAQAAAAAAMAAAAAnAB4ABAAKAAAAAQAFAAAAAADTAAAAaQAeAAQACgAAAAEABQAAAAAA+QAAAHEALQAEAAgAAAADAAUAAAAAACAAAAABAAkAAAAAAAAACwADAAAAAADjAAAAKgAuAAQABwAAAAQABQAAAAAAWgAAAAcAFAAEAAcAAAAEAAUAAAAAAOQAAAAvAC4ABAAHAAAABAAFAAAAAADiAAAAJQAtAAQACAAAAAMABQAAAAAAKAAAACQAAQACAAkAAAADAAMAAAAAAMcAAABAACEABAAJAAAABAAFAAAAAABDAAAAEQALAAQABwAAAAQABQAAAAAANwAAAGIAAgAEAAcAAAAEAAUAAAAAAHUAAAB4ABYABAAFAAAABgAFAAAAAABuAAAAVwAWAAQABQAAAAYABQAAAAAAwQAAACwAHgAEAAoAAAABAAUAAAAAADwAAABzAAQAAwAFAAAABgAEAAAAAAD0AAAAYgAtAAQACAAAAAMABQAAAAAAoQAAABsAIQABAAgAAAAEAAIAAAAAAMQAAAA7AB8ABAAJAAAAAgAFAAAAAADfAAAAFQAuAAUABwAAAAQABgAAAAAAdAAAAHQAFAADAAcAAAAEAAQAAAAAAPMAAABdAC0ABAAIAAAAAwAFAAAAAADCAAAAMQAeAAQACgAAAAEABQAAAAAAJgAAABwAAgAFAAcAAAAEAAYAAAAAAD0AAAB3AAQAAwADAAAABgAEAAAAAADUAAAAbgAeAAQACgAAAAEABQAAAAAAVwAAAHMACwAFAAcAAAAEAAYAAAAAAHEAAABmABYABAAHAAAABgAFAAAAAAA6AAAAcQAGAAEAAwAAAAgAAgAAAAAAVAAAAGMACwAFAAcAAAAEAAYAAAAAACIAAAAEAAIAAwACAAAABAAEAAAAAABKAAAAMQALAAQABwAAAAQABQAAAAAAcAAAAGEAFgAEAAcAAAAGAAUAAAAAAEsAAAA2AAsABAAHAAAABAAFAAAAAAAwAAAAQQACAAQABwAAAAQABQAAAAAA8QAAAFgALgAEAAcAAAAEAAUAAAAAAPsAAAABADgABAAIAAAAAwAFAAAAAABHAAAAJQALAAQABwAAAAQABQAAAAAA6gAAAEMALQAEAAgAAAADAAUAAAAAADUAAABYAAIABAAHAAAABAAFAAAAAABBAAAABwALAAQABwAAAAQABQAAAAAAvwAAACEAIgAFAAcAAAAFAAYAAAAAANoAAAAGACsABAAKAAAAAQAFAAAAAAAvAAAAPAACAAQABwAAAAQABQAAAAAASQAAAC8ACwABAAcAAAAEAAIAAAAAACwAAAA0AAgAAQACAAAACgACAAAAAABbAAAADAATAAIACQAAAAMAAwAAAAAAeAAAAAwAIwAEAAUAAAAGAAUAAAAAAGEAAAAfABYABAAFAAAABgAFAAAAAABIAAAAKgALAAQABwAAAAQABQAAAAAAYwAAACkAFgAEAAUAAAAGAAUAAAAAAHIAAABrABYAAwAFAAAABgAEAAAAAAAhAAAAAgACAAEABwAAAAQAAgAAAAAAJQAAABQAAgAHAAcAAAAEAAgAAAAAAF0AAAAUABMAAgAJAAAAAwADAAAAAAB3AAAABgAjAAUABQAAAAYABgAAAAAA/AAAAAYAOwAEAAUAAAAGAAUAAAAAACkAAAAnAAEAAgAJAAAAAwADAAAAAADpAAAAPgAtAAQACAAAAAMABQAAAAAAXwAAABsAGgADAAEAAAAKAAQAAAAAAOgAAAA5AC0ABAAIAAAAAwAFAAAAAABcAAAADwAUAAQABwAAAAQABQAAAAAAcwAAAG8AFgAEAAUAAAAGAAUAAAAAACoAAAAqAAIAAwADAAAABAAEAAAAAADgAAAAGwAtAAQACAAAAAMABQAAAAAALgAAADoACAABAAEAAAAKAAIAAAAAACcAAAAiAAIAAQACAAAABAACAAAAAABCAAAADAALAAQABwAAAAQABQAAAAAAUwAAAF4ACwAEAAcAAAAEAAUAAAAAAM8AAABgAB8AAwAJAP//AgACAAAAAABYAAAAeQALAAQABwAAAAQABQAAAAAAIwAAAAgAAwAFAAUAAAAFAAYAAAAAAO4AAABQAC0AAwAIAP//AwACAAAAAAArAAAALgADAAUABQAAAAUABgAAAAAAVgAAAG4ACwAEAAcAAAAEAAUAAAAAAAAAAAA"},{ name : "R_level1_png", data : "iVBORw0KGgoAAAANSUhEUgAAAEYAAAAxCAIAAADoa0iqAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyxJREFUeNrMWL1yFDEM9u6oo6WjT2qKPAAtBQ+Qju7aMNeEB4CGITNU6eh4AIpr7wEoUpM+qWipD8+YUYQta2XJ3sVzc3PZ2Fr9fvqsEEzr4fi1fHh1eyZvkFc8nj6Gs3RB8C0042Z3Hz9NR9Kp0Ht5Tcp0OoUwhTVW8kt8O/7ITcJ/2IIejyehk/WgLTXoD5TDROnFq7eLCbM/v47fP968jN8X3+88+YPaoJD90RXAWV8JHr2j8cl+mxzqTa1JshI1uTE+8YM7yyO1h06ryuP0yTzCT+VKxjtBqGZVZiEISujVFY4sykGFsDJlq3B/grsyYmBzmLOCe6Ucm8BQoraM42iMBu4Fx5faeDLzH5MoZEct05/omAjWn35+lAsaT1EbnKSmA3vIQAm7snP1cnwTdYRqwhzCt9e/S8CpVbNc3IbMZFM0pn2NCeQgzoJsknV5eJZerGnHbBfaJvHYyD5c8R5lXYvP2QjUouHJzJKw8ibFsNLXRwtb39q9flo5Ghh0rSldxm2onbUqmDZEW9ui8MDm3t++JCMP7Twy8UPp5RHashZRy0M7QQOyegpLSdfoC3ktVjmIyyis6b9denRTRfFM/EmPw5BbYJR/sbvrHhm2nECDWlmDYlOryzqF06SbXwjOBWEf1djAdwxEceoxXwL6eixuWZVsimKAgaGdQ9tq2fiUmmmuhkoEN2M9LDo4Ps8UpeZlb830GIrdNXiYWR7dqspWBJwtkFnG++5upkoM6mBejldLPNuNsE8tKcnbEwCcX3dhaP441zKobej1eXf/eFShNhufcuzWOubX5Co0dcl3t2d7Hx/LxJprlR7M4gYCLLJ3hwzQW2umF94I4YXF15e5S2Vdbj08CbWZOHV2bUhLOw/uL+OzzjWZJpF2zK+HWj3facJlwTVy9oJ+3EEvGnT/482XlQdDsnlgyJMOqfX+V/jw3GlAM9I49WZZX5NMswKzTbnwf8yKpVqqDWOF+5/hfmW7LIgXe+YaDIvilLPVTdbk53iLlmT0T+9y3OmnF7OZp/SqpTTzGDJ76MK+ahxqNe7nYg+9aqn7xRlGVO0KUxRh/RFgALw8RWz8WIP/AAAAAElFTkSuQmCC"},{ name : "R_sfx_explode04_wav", data : ""},{ name : "R_sfx_death01_wav", data : "//tQxAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAASAAAPgQAODg4ODhwcHBwcHCoqKioqODg4ODg4R0dHR0dVVVVVVVVjY2NjY3FxcXFxcYCAgICAjo6Ojo6OnJycnJycqqqqqqq4uLi4uLjHx8fHx9XV1dXV1ePj4+Pj8fHx8fHx//////8AAAA6TEFNRTMuOTlyAaUAAAAALggAABRAJAQkQgAAQAAAD4Hat9KoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/7UMQAAAYQAXO0EQAiA5/tszCwAAiU8iySXJJKcWD4fNHJ9QP5co7h/lDnL/4Ph/hjw/xACDsTh/UCHE4P8QHOJ//7uXRMSYIJAaJlVkQVUHyu6Vo0Vo0ySBWMSORPdNNy+A9ugXZxUfykhDWRM6QCA3MR+NiCHaNOHw8NBeNxMOmKmQGQbZJxuVZWcbpu0POaDdM5NsbquahOw9p1UuZuqInmNk7vrf8fH19Jnji7Bzi62KIFl2rUeJKtQoCNLda//////WonqTvldShZlBb/+1LEBIALRI1v3YkAAXkRrfmDCgrLuvLg72cRfmZUeImxeOs5gCtEo0LYALAeB1si6y8OcOWf6TqSMi0+klMjIzLmkkjU502UkkjSdZcNwNLIBjiYLWRQMagq1lI451sqqfTV6fWEyqLLCoAKqqhHswchkC0LbIGBgY48SFIKKbL9hcXY3bdXfT1zPLEDwsW/UELMEI3QOJGU76AxE8nBgnHM4+LC5goGAZUsaD4CYazQT2O7TetlVTWjXiFAYuJzb7/9dQmZQ5Y1KtJIhI1eT//7UsQGAAuIvXfnsFERgQ+uOYeU+lnVx2nOP9ckZFDMZJdRC7MRdGNdg/lcTPWP7Q4XjoAooncbh3cnuhWeoqdOYeWMD5V/ajxYkb0EKIAhvnQ7v9FWCTsb7P/+25ye9Cd1Hp/6xiWUmQkCRFWKGfPu29Ljyx4yZGKKCQeurdWiKcIJsLIvI0uv81YSmUesfNh4SArD13dlGI3YpmEypsiscMMcebTCbjr4giByG2pSzRaYWTUw2qVaTqVa9cu9ymu7vcu+9R/6Y9sFABFGKI+w//tSxAWAi5CFa8w9A8Flky149ZXICNGWl5CybTCG+7ATkRtzZX+OwqA4MfPysA2CAd/+UdR71+1iooLmLfyqoUWe+oJAN8gKuUwRPCogMzqBzwDJNQ6qr/VGvnRZk/dS9hFVXdd5AP6JKaMQRUEd2Q+EGnpViCXUwU2FxNRjYns2RDgaPv84kHgIH3+rgYTHH9GDpxABx/VyoLCLk+wqCIYJXhpRCkegpqc4BvrEcpESq3oY7W1ucHnhXKk27PpQGZdDVxIVGqoOzhnpxVm4YMX/+1LECIALaNF1x5hu0WAO7XjymdKKQMnpCy8TYUj85fBIDBgTf/5MHWFGf/MacOfxiIzFIva3fQRWcMjFCRBa825ygjyLKfgje54oUJ3GGBNyEACcU4hMa9dVRZ9nWgIhjFGAAAAAQePHCTJzP1YNSEftC9ikFgq9yocRAoQDBd/GgqKYwmhvauaq6Vd9qqbNTUmBAECiEARwlWAjI4I73MawlAy1rXrU7//V9t9K5MieefpFP3rqGJdSNyEwBVYHyQl8YxtD9hqYurCW0tTw5//7UsQMgAt4nW/IvQGRTZbt+RegOhLzP5QdHFg4HYRzJNbFFTQcV/qvTOovfHxc1FMffrx6xIwhnlTLRITy0mGOtJffcXL6a3u9n7uBnicWcSc8k0ZbLjhmJYydAIQVRB5qgeuU2SChpK4dimL6Mxh0P94460xP1IDoUCOq/2cmgaFlLfG01CETf+sX6vFPxc1WbQ2KtbX4ZCnHB7biPcpYtvHk1dEXZ///9NUJqGQ3YRBFVRqcdI7HwdCRQrJ8NRpgskJcQzI8Bp4YG+kyDYWX//tSxBKACeidb8ekrlGAom449hXS+wxAYRZ/kKHxihhvlVhWhWN6mR4mC1ZQ6Jh4zaumhutPQwUs9n03/+z6QqYdTZjJAWmI7kuCMqJLrk3sJ9VF3WQlKXJHiHq2xnDqqAUCR3T6K4sLB8n9VUpRz/2KVgoOv/mNE0t6oZ7C7I3YpWzDn2oZbqphyWo7+gi+Aez9/pQaratQmck3vFmiiimZhCRAAARQKQepCLujjGWfKmaU7tBDUPLqhLQ+8eZn+jjhE5voVXEiAKMYn6IcQOT/+1LEGIAKQMdtzJiukTeZ7bzzCeK3QpSRMeQHKKVKVpynq61b3tQVJmnPOJFRVznutYkdsUoJmYclcggQBIIG1ySKYKkP9Lt+CdLoh8riQkWZFuxdKBv8insbQz/Hr/sVY80BBegYwJzBCk/vZUAym/1scx2bl1dTIOEvGrGe2z6Zn9k8zdtXt0qjSJAat78NClz7roQ7sqUmigYcuqrQl/yjTpWY4zS0kINsUVFOh0LQF5PKpgD/o4JRDICVT+mjynowYi7kfELgL8r/wvBkw//7UsQmgApMz4nspHBxSRltuReUOj5K/7UdIxMOpIxAiKqgzWBzO0Y5xEuVKdfE52ho8ybo3PiRZ9AsYFDxev6oNEhYXcn6kEB8UI/7DxQGFiRxOqFU0pBQnoqKhjxMk62SorZJy6+6Uv39/1IpqodGdzpRSQQB7c4D+R5opwh+VlmPxlbAkAV401V1XHgP6Mh8NjktFM4gUrWPYfYMCOCEu/o7uh5m+p7AQUAKgfUbcIjThOLnho0yLcl//3/p6BmYhkWDKgkkkhNj4YiTvV4Y//tSxDIACmCVd+ewVBE3ky49hgnajEvZ9QNyjTBxJ6GjbUQvWBCJU/aCBDMyMYjREddyF3cW5BIr9FxYsS7J2uZznOwptbVnxg/VLwrbt3f/0ReXlTRjCFFACtjtZeLbdIhflNgqVQI6XYUJwv9x8qHPhJ50AhiA+dngyGDANGF/7NAwQcZw6JzMlKsFOmRfmR5kZJzM9U4GkCYpQoerr/blukJl4QUYARRURtcJ0ch9IIcEIbBOYy0ApcKCD0CEd/68DDo6/0UAAgQRxZH8YCD/+1LEP4AKKMlryLxj0UyXLXj0iLoRQscEEZaQYIOpVs9m3aVWVbcUdIjkLU1fi5FHYGXCvv////s9KhmZhzVyGBEkkgLbrI8QQEUuIuSoL8pBxKQv4pQhZLdiHFQr75ImSLIYASkW/vBkVAFj7EDgQuviqX9xgZX6MxKNZbAyxzHiKEgPbVLo/Qr6QiZhCVwDBFFGry5GFOTm0hYixyJnEQtXZRUVbi3MvOiofdwkMvTaPDqMf/NNFI0Kq5jdkaqNTc9P+pBRNhHOkgMaCKnU1//7UsRLAAoIl2/npG6RORZtePOOKv1f7d3/Qz/+igialiRhGAEElAtObSCJShxgkxbTuchlqQ90yer9zCkCxXyQNUVNrh1IPij6i1NdfIfygLMmHBMzrMtVq/2RzrjfGs9SPpu9olOrNmhM4s9jggHimZhTRyCFWpBlS2HEeJLjILAYL1PruISM6jbziVvhsGgAcYM8U+j8QyCpW9XIaiibdBCvQiI/kbvrl36zKwpRtinNOh0wtFzGrVi11n/az/6KGZh2M2EEVWkRHhBR6TN3//tSxFmAClC5beegTxFEGa35J4g6s1J1CTEkjCF8ciM15HPMmU4zXd/tBy2iP/wwx63RP2Jxlhqs2Fm7SgYJCsXTOt8VSffe0iwY2tAVajivXef+gO/ck3oAoIBIAC28yPQlbczpTzYyuEfkLVh2VOZJf/4lOh7Rjclbv7xtobicf7IecMc4pP1Y4oMZx3961DKpjnbsqSiscdWVvV7iO3SqxP////qqG9v3JIMMAAAHsY1HSpnoGFj4bUFKoYapaHA24IF2GBmNRj8+XJomBLP/+1LEZYAJ0Idtx4hwkUsabHz0ieALrc/2zvcLrP/jNlm814zUg04WdELRPMmFgQRF6+5h6jI2fvoLv3bOLEKCQkkgGCII/hMTCA0yHITh9GTxKJ55WBE898aC4AwXGm3QofEBUG/M7btDFBSuDo44eMtvaNJCwWGzAuo2EvvZ3oUltHkf1/1e1NUc78c1gggAZQnedsysJ8nCRqFfim9VUo8HJuUVVGf0JiJE7xP9TQCdxSB1QuzLBxaTJ6nijQvEgNZFq5Ot7BdglQKP7K92lf/7UsRygAmol2HIMMFBP49svNYMOJi9lKgM39n2fUot3NcocQAERAopAJThuaFFoDg2KZPaWE4di1xhjfIOLDR1X/cRtAaVVvX85EMmaIXmS5ClYhgEHUC4qXNKJRVhxUk0W3MI+yn8//r//3ooeIQ2YhGqohm7NEcSMN4uCecCxVO1DTIjpxlcnU8KHMBATi/9GdQhS/kqkGehzp/GOMDQERA2IkDD5MWWpS2TNtaySrzyWa9f//7u6zunaCnJxymRHVRAFJjFtOs7z+WnhkOc//tSxIGACiCRX8ekbME2kqu5BgwwZTw0Oq3OLyQ1LTTZDFjQzZxDKY9+xQjltx8cMY9tkqYr/iN6hUfYJcsiDO9SQaJPNoFDICPk0diH+bp6nfnjN//M/65sQhgWBoECQAAbAncyTwMxQCIq4DTQsa8iwEdSwseAFwcEYrbiVBYEQYHrK/ikgxULcOcv/xXjEc0Y0L5Bv3/5DSHFcipMkBDLv/+OUM0QIuuRU1IsHs/6/+OcRUjjAc4jUjYV0vkEX/r//G0TwrUqEyaDnCvCxEz/+1LEkAAKAItlx4hwkV8R6jqesACogRPikh6X/9f//ygRU1HVTEFNRTMuOTkuM1VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7UsSaABD9oS95OIAAAAA0g4AABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV"},{ name : "R_sfx_step01_wav", data : "//tQxAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAAGAAAFtQAqKioqKioqKioqKioqKioqVVVVVVVVVVVVVVVVVVVVVVWAgICAgICAgICAgICAgICAqqqqqqqqqqqqqqqqqqqqqqrV1dXV1dXV1dXV1dXV1dXV1f////////////////////8AAAA6TEFNRTMuOTlyAaUAAAAALLUAABRAJAOiQgAAQAAABbVscKOmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/7UMQAAAYMFV+0MYAiAxxrNzLAAQQAAlfrdtZO78RERBYPny4fBC6XP1h84CAY4Ph/KAg75z6wff5d//+GP/+CDv/lAwUQAAEW5Za3XK3JIm2kWaZsdobEBJrFkEKf6a/3nfyNX++WxZ9YXXCopL1aQLG3zgez9dRlbFuYntRBpPw3q41s0csxsV6fLXflMpLL975eaT1azXu/9y/QMTTb5e/XzoxSXhH4eWmgBVnIsw0t4aFKf5fHhhEviNf+7fTN/2yO/aoKS7fNySRpIAD/+1LEBIALrH9TvPQAAWcLKvT2GOB4BbLbtTk0Qw85S/tqoNDBfz+VkERQEJDNkQfdl3StdIhHM6Z8W8c1Nvpfeg0VPnjbBw8E0OLiYXAjTQwgaXXPACbPs0FkJrorF/sINcpKf9yfsX0AyXbWyWWRpEsRjk1bjyTJovAmMRyEZkRTwSi0PJ8ytgAVAo0qWS2chK20iqkubBYOjA6IhKCwNnXHjBEILOsBdooARgw003nTT86WMs6OW6F7We9Hs2dHR4rVBGqqi3iLvtq0gf4tSP/7UsQGgAtIe1nnsGdBTAcqfPYY2AbjFjF3JsF5gB7xINB0KB7e7BxQ+bdhOEbTw7pZui3CnNmMWdXIwmNBVRkHwObMA2UQQABZiRMgoByjyxUKCiUI6YwAeq9f/d/a/ps6gFod6hmWSWRIgC0GoMmc/D9JuqAXNCULA8KRgNUqjTdBAclBcpiwTAzh5hBIJGIKwMGRKcFBphiXCWeCRVzFqABT0vlqvNUseptySnpX9dP/9/qVAERWeFR7bW0iC5j9MRvuYg5tFASC+OwUDmSh//tSxA2AS9CbU+ewZcFTESo89gx4sBMTD5xOmovacJaVGsbDE4SDOgl0EuCiB4roruxAepo5OWf5SmCwciyWPWoaKvokNhaMQa1Qy2+DvG7u3tay37+7VrB6eYmoZNa6caaVgxg9CQ3JqYQA+MSorPUA+HQ5WRmufCuPLNMWJMFyC13K0yPQXYXk3yZEKXJiaHA1FxRFaiveoctb14DTU/Yg2peWVTJUzj+r8rpVNrq4q3ZP1kAaW5LfTb8xJyHbeaGpx/rLWXOgR6rZ60kxhpL/+1LEEYAK/HFH1YMAAfUgKL8wsAAjP/vvcJfs8Q6Psp2rtOpcRFRVx82ly3GDU2PStDDmFVRi2PWYbYK6/3FayFhhW2j+y393NEiMzTDtDq7IyyRyKNOEgEFCulfapXv30kFrDenni0mh6mpik2DJZrUEhtOEMIsy1Y6XQVQb22HOPHTVQ3Uk5/u2qWk6DVDXlj2/w75ZGqsdUqzyLv+WulR0TDjyPdKTdN/4dLW2dlzTRqWNGP+ks0y2Nk2mBRCyD/54Q//0KqxoPh4Ph8Ph6P/7UsQEgAusrVm5l4IQAAA0g4AABNAGAAACNdy3aa1/ydr6YX/7L59AUWS/y5nXVu/joeowUydSX/jq9XxxJk62De//fv48N+frwlR+uH//j3fx8w1MwzMTDF///377+dwgVEIS/yQq4lVMQU1FMy45OS4zVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV"},{ name : "R_sfx_menu01_wav", data : "//tQxAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAAHAAAGhgAkJCQkJCQkJCQkJCQkJElJSUlJSUlJSUlJSUlJbW1tbW1tbW1tbW1tbW2SkpKSkpKSkpKSkpKSkpK2tra2tra2tra2tra2ttvb29vb29vb29vb29vb//////////////////8AAAA6TEFNRTMuOTlyAaUAAAAALAMAABRAJALmQgAAQAAABoZq15oUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/7UMQAAAYcAWdUEYAh9J2t5zCwAJEFWBKbjmWJxOfLh8HwfD4IAg6Udwxy5/o/wx/u4JvWD4fdKAg7+7+CDv/g+H/p/DFKMyC0AMlMMskYpRprWVCbkWyczUOxyizVTuqqX7THsKDEMqLYHWVoDqH42ablhmwnG8JmCKppVVvNoTYfYcMGveb21QttxwnKd2a/Vsq/k0e1JRZOnxcf5yPZXzcbJaaBc65IfKOfhWgkky8Vrd+8LtNkDxIDn9///7P/6jqIeGYRAVViDJZTxan/+1LEBoAL9E913PMAIXuOrXz2DHiI8y7bUY3CdkzCvFpQl6/PxRAOASJanzd75VQ8orFXzYREghMhdh4egJkBYOhosDQ4uSoWtI3gKLlW6wECIeUXc4TqF6m2b0uL366NNTCKWi3VQfEqixCAkEpsyAidk1MJgBIehqHA5mZZBEfRwFYOCM6xifH13qh24QdVY5LDh6oFjNroMwXGKImAaKM2HXhpxk8ibemmydGNu43TZFBA+gYPALgiSS0ieCpZ/cV7fYI1P0FoQDQyipUWwf/7UsQFAAuEm2fnlFRBfJatPYMOGBOzEEhVRJtpknCYemTtSFET1x8LvHJ+alXB9FhW5+xVAQyHbDgQo26h3Er2Uy/ABXeHDoiQCAMnVk1Mo7EVgUA2GmVOfSnCLAVGR5K67/R/brc3VCWwQRZhzR3E1bTOV3L1W9dcF86FgtLjiuZ4q/ww7d63IK377MiAspKndxKWf+rH/1YOEL4zb/qqon95iJ7HcXH/+OWtxkUHyDTBEnS0MPJMOGEta9aV/9y1x9RtRtUpRUkwMBRBkSbO//tSxAUAC2CdW+exBQGDn2i09glwV8LSEjG9s7C4GSsdRfVcOAEi0rCwoeQWKrkLUkHRXxZNE18qULHf6kipv/Etfo6lCy/KHCUhKySHtd/qUePLcdMqedAtEs0jEMrK9Lf/YS2pkEhaRYADJsApSRaB2qEfotU7C11VYShStWk0f34DIaAY2utSA6FV0zz4jlms4cHMU2yIT1I9DhwRs45dCBxJSyKVvzy7uRjPOlaX2ZW6K2jlQziwQ4LQL1JMBlZ388pikCYEhKEFEAFlOhL/+1LEBQALmHtB57DOwWIOZ/RXpHDez2GEqPKrkfArhjKV4N/Qxp507GRMVUFasnfzZLKircOwF28IJV2MLRyz6O17TVUHogFj2JwcGicVDQZGHnJUJnh8aCosVDSBE/+3+NWZeFl0oNX3jZARST1oboH2lDhYo4igembwyZiHKrUpKzQd50hSz8SDLMemi6vXRXW1K8pRPNuCsAqLCV/wKlB14SRYNFSwkC4oJCxGAUekoWUsGupS1PcxK70//0oqBCZmaCMAVG5bRUISVlcLv//7UsQIAAnsdzngvMPA8IultBSMdAcyFehZizGWaJ7plCYuKMahpyhITjSSS/USrxc54sjjOyXqTiQFZ0nVA6gJOKkYGekSgECtCT/7hgr//Slf/QAmlbYm5JHtzyJrZvLzolwywuAVGS5QEawCgrwwFYyw7sfAoZEoiiX6yyCrhL5LdO2f87V7C1kl+jwV/spMQU1FMy45OS4zqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq//tSxCADwAABpAAAACAAADSAAAAEqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqo"},{ name : "R_sfx_explode02_wav", data : "//tQxAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAAOAAAMPQASEhISEhISJCQkJCQkJDY2NjY2NjZJSUlJSUlJW1tbW1tbW21tbW1tbW2AgICAgICAkpKSkpKSkpKkpKSkpKSktra2tra2tsnJycnJycnb29vb29vb7e3t7e3t7f////////8AAAA6TEFNRTMuOTlyAaUAAAAALhEAABRAJAN2QgAAQAAADD0sVxhRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/7UMQAAAdMTVh0YwABzqCtKx6wAAADI9oiCAIAAAg4AABAgQBAgghviIh7JkCAIACBBCIJkwfB8HwcBCj5cPl/0//z/+D/KHPg+//p8EHAAYIAAAiSVwkSOQDjSUQlBcQwiYuxjHGgFCdQR8/yDH4hQKDQGIpEENwkHcH9JAoWL0TMdB8PA81VmCLLMdFZxjTkj3/mx2F3QbcbKg3Pqnje/3RPXnrZB2r44jt742cx////+6dZDhW0ilKUMrXv5OtyqzS2AQ1q5K5aZayTBQL/+1LEBoALoLNrvPMAIWUUrLT2DPRE6ziN9WKZaV02k6knyOE4R4BFWooiRR9PJEiS3bZ/Hb//E4dlzKt9fzn2Zxv2qm///y4LpwkD8lR8sHYNA8RrU1qztCHMOShti1Kjfs/7KQQSSkZYpJG2ZR2KE5kUZZNUKEEPxFHb0ITR/M0y5QOC96Fy0ULv9PPn9GYgW0RTsyBKywykn3799GLo6jIwywgGDgWSjC7DQlKFUEGVNPossv3abzXqXqs6FYUATCQUsy2oP9QGmYSweBsqNf/7UsQJAApodWWnpG6hvJhs9ZGnFENKSTty4shL0mwKoxDbDkaWMJtqDC5vXNC+mL4pZEZ0gZIKA230GROx8aHn9efQlU0roirB0oYwiq6c+7ajr6NiQAAAQv2q4kA+7uuM9USW7msBB6+JA7ODxTsOvO6lJCJ/Tby2Mt8CCW6mFODZjVJMIUGADwxQzHhEDIqeHopVtUWQAbkEl/n/lCZKUoNAYJFHRRQAmbehIphUHBOamy1FV4mEALGLnW/TzUgaY1RJ6gA1GEpMAHqgjliO//tSxAWAC9DJYOfgVEFpjGzo9hi4sXQQIxAzFMSBRDMiC+lVyGIMyBFzJN8yS3oYQcuCBR6ZS+TEMBFg1SF4qd2nHklWntaCuhSX5/fXW6U1TS46pF0LSSU7KwxSz//ftaISBxJd71miqIAAnadtFuMMQlNlvJyB0Og4bMR7CcaQMOtB+3pTHU/ULwpoYoByhLCtIjVLMrt9/FQYRFISLMcedkBklEQZAQdAUNQG+a/+ztJZsigaeBYOgIRStn/+8dwnWAA/FbcqzCQ8gCEiwOb/+1LEBwAMFM9k57BHwWWZbij0jXYkQkiteI/DmBkpmaEVYSEOK0dmSYWmOepS9IYkQQcGCqWBgxIq6mWgmvykP6MqPlbSVzlf9HZAgIK4UcTjBb5PrQxjTZoipw9bBiXegkV/9tg811MyIKhJJQm5MTkHoMNlPrJyKMyzlZGA+JTYNwmKi8CqC0KOC7a7dJxsYekmzPaMCDozZuUjz7/S///Rv0VDjkZnCTqMLcQHnrJGf/v6mNNPJqQRQRM2f//o+VUEBQAEIv4K4jJIyfE6Mf/7UsQIAAqUdW1HsMbxgBhsNPSOEI0IRcP6GBSBhleaIBRMOWcieRRQYP0IouoPZ4Ryx0fmr/Z01GlGmDDeuo2pwbxQjFRIdB4PW/0O1cW+L9StfdZ3NS7VeEAAIAAHm5YCBFvJ4NggRKzNcky5msfxXmQX1VqA3XzOfTEPmx6NxwSjJEeGV06c4CDGmJ2EgxDNLwp5ml/f9+zPLsq33vDMQY5tJgAirY5GK3qitzzUIuLHiqRqli7MkiBEAAAAc1BATtEFIXLZQKg0FQdSY3Kp//tSxAuACpB1YaekTwFQjOyoxIzkmFeqiADGQKFBwDxgyBwDme0m46TpIDsMx8F+ikf9gqFlMBbilosGnioIijnrHBdxkE1oHs//71rVoKKuYRlwkECZlxQEwIhaKhvEWwNDRAIAWPoyJ5cFBdzzFQUB4tQ0Gj4iogR+mWJfEjE1sOvhozKcTmT4wqS5tZ8y4DPP1ZI+sqpdKFS7XuF70PT7VdP5v21xIEoAAvtywFMFWWIhdD4OhSoS7UMBMItQjwHLyM4PxJIknTKoTSkkE8X/+1LEFQAJsFdhp7DMQSmJquj2GSA9UW3WXEZhGCRgqsqL9w5pkRNSKkSdYicQv+y1PbCSV3r/cMIBAACNJogpRXTeN0vhuHbDKbjmLXiuC6gfDw2I6Y5Cp4+0cerimpUww8QsBd5lw9jCEsFxiC7lG44qgq1VD2LmGirGDQg76///0CiMVAGFYkgCH3jwIYVQik/DksLxoBE0hEhYCCZg4UBlUwWRRTgxT5aWkoWtO3TQImiJpRY4FIu5jJZQJDSWcIgIVJqICRrZMZ+tv5l/Qv/7UsQnAApsX12mJMqhSwvraPYYML6LU9e9PtqIAzORtCSG+Bw3XiowE4qgOGBDL64WBLxJBRSlEw1JCm8O+Sd5RuNjd5uRceoMMD8CiRwsAhyEAVZJDAkGmg/QtSFkaburuYxztisfdus7f/VVSsRRATfKCI4VPhePUJkToYh0MMdP2OqybfJYGKIJQnqJMSxSanno3kuajRcucNBtIxVrzAGlkhJwAGUsMPYyg81mSbHXL0rsfXsXo67bHO193ooNlQCkDeNZXFhU5OVYQI3S//tSxDGAimhXWYY8w2FGiaok9hkQnQjBsUMcVR6CDQmcRTJLbISLCkmly0DzryYNpQoUMjQ8JAWHEWmzUyeWtZgokwvQKN1k5VKGXKchZlFq9/z6v//SkbjaRMskaKATSPSo/kOXixbRLtGtS+r1Ahz5YRKKASTnUU1PA5zZ2MlMChAdFoRWZcEgkCbhCTABUuZbFFuYi3oVYv7v9lsw/PsZ6JN4o85s22iAC+XEOPkYRKDLXKXZnyoXKrXiwyBIX5Q/gPKZoiASELiUFTFI06j/+1LEPQAJgFdVp5huwUYHajUHmChCSRSwUKuHLQ9MeIBAo4Sq0IpQKtYsj21/3fd1JVRriq7rnuqazKbya1tpACihE5LQVloioQgoBqZoF4CS0JY42OVmpC0nSzUYyt8IEgODho2HlMeBDS3JGDkPBAmt7AfWRIo2oNIRSZQiALUGS1rP+zdo//ef1aEdoNVRnbSxgc5x9EPQsoCTlzVKQwRl6Cg4m2quuodm0iOUGgig4JT+E70xyzXBqLydwhYtLS5CNMcQKGpBhRWqrOK0Cf/7UsRMAEp4VVGnsGOBRY4qPPSNIFIv1MldLf//ZWjp+bVVlZr3uskbSIAP8wEeEPGgDJ0pBEsFm5PJJyWvJWuvMASnDKYdBYFjR2eMmQiaeCYVaeChPUoEb7FD5cm5KW1fOFK1zActMVJZ1UKfosb97P/sWYZzJVl6l99ZGiBGghhDDUVQxEg6Otcq07y4EEJ4hrVBJqJDTdC9LTKMM93pkpoMpMwRLCwdEoUaDh4kZFgnTahrK6TJJlxLQR3Ehy/ajqX/WkhYLR9vhqLRYLBY//tSxFcAClBBT6ewY4FAiqr+nmAAHA0FXDq5a4X+A7ElkDpv/Fw0Zd1hn+BlGAzYLRSLGThy4NnCgGNRXRg8O0KXFyk8XyLEqTnqIaMuQAvmpeJkxKvxzCbHGTRLFBaRMlpH+TxBThmXB+LJdMTzmR09/K5AyKjHGBBiXIITaJkXqkloq/65q50xu5xNFT51IxMEUv/oKPIMdpsfZazpittwkkAjJEtKB1YaiU6IntPTqg1/IlniVwqdnv2TsrLf+sNKPL/4lcIv/WGlB1YdTEH/+1LEY4ASyV9duYmAELsAWjeAMARNRTMuOTkuM6qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqg"},{ name : "R_sfx_death03_wav", data : "//tQxAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAASAAAPgQAODg4ODhwcHBwcHCoqKioqODg4ODg4R0dHR0dVVVVVVVVjY2NjY3FxcXFxcYCAgICAjo6Ojo6OnJycnJycqqqqqqq4uLi4uLjHx8fHx9XV1dXV1ePj4+Pj8fHx8fHx//////8AAAA6TEFNRTMuOTlyAaUAAAAALAAAABRAJAQQQgAAQAAAD4HBXIfzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/7UMQAAAUAAXO0EYAiICOt8zDwAAiSpY2mnI5KGFg+D5o44oCB/B815vWDhzp/3/7+j/1Agc4f//8u/hhBZOXW6NlKqlWWlke7DqbHlcPTMiMBTzY4pahW3ksPHg7crtKF1HA1nIUuiNEQo19z2n9YyoOhD8/Y2mTcj+Rx0vbeMLurhqHbxq4x4FcWziTW/Nb7+tfEH0taTxrQPr3+ceBXGvivp/vH9/jOPLjOPjX/pu8WrVzRdJN8+KLnM+Jlu0WFi6moBFQ2llIgGURC2Wv/+1LEBYAK8MFv3YgAEZOcbXkMIDJ7ca9TylwWUlvxIrautD77XZC10GuF7ETWoyJoixBRCxa+s4Uj3RRRSlR/rMTQr6SSSM2Ju2tJJMxPs3rc3V9TnVcqQ4Qd//M6Wv1gcIhzN2IwBFRQqWiQOuBwWGCMbdC5jBJyVxVtpRWcEBphn8LIhhUaL3/lCGhAon6AuMD8fT/KHRUu/qMt4REt6vr+smKnStHNmkl9x5arN1aUVSi9Xp6yIpeITwHKQ9FmqbL//f1KGIgUZiQFAAUjj//7UsQFAEtgkWvMLO8RaA3tuYYwgqFSmiaitim6tmT4LpjMKtVZi2+vjFY5JxL0FR+Lv+JTJAnJd/zzglI+tDyBT8w0k/FhblxfpGP1iLoWY9+vYVAgFGtAgsMBVqQGNVxj/dvWIhiWEnY1CACcGTBG4Kzq4MQPXTAPPgCgkST5cX02CkomsbBlM7E4GpUU5ttqxAy90/u2eYYfY9pYSBEm1bTIDT71XRa9lN5CK0o/+deFGjXCzXMZOhaUsJ//mQ7qo+83YAQQCosnBnnE4t5f//tSxAiADEyZZ8k9IYFZE+689bZKSUpsTpWFoKUoESZylqWDwub9xTQojADKQz/3WqDxx1f3H4FqIFPvutgynPdq47JXEAQY0Vm0yJkKLlhMRdUaAqjCzw1wHHsuFPZQepj012DNwxDsj0yqnGkUAE72dGIhWxjKin6PYgoSBljm0g5b6ayQhELqbP8JwkJiNTPk0eIYSRHgPRF2cwE+EZE/CwHw0W+p2H0vWv6Si+TObQwz3+K9wTCG9STdDu2UfiUzEgQQAqOPMXJNJ8mR6VX/+1LECgAMNKtp6D0hQYmV7XmEjeIs4cR8xO5Qg/8CAGzP//uZGI0wiZf/6QCACBMCw2g3/wRpkjhGOH8/pTLvFZV/c93IwXY3YNJGhArSGiEckTNC6kNImXbCDP/v3t+5X0i8OhHJEYgqKTg9kFxrr6Oi+XHreFkK3qL6BUTT/6RC4rSz/3H69Guq1n/tCQoNANP2CiQkXFpeMblA9Ejlc3uSSjiRKiMnnYAUdBIkKPFLr7lP8B9taxZkek662KEqcY9/mTmZgyhSRQZqJ1aJEP/7UsQGAAqIq3PMpGjRZgpt+QYYMl3WSTrQWZyNcuA8Cc+2ESW7iIVgNxf69UE44AIL+q3HiF+zHtTR/2bzMv/YzoJyB8q7bMdjTHHC421Txy7ls+rzqd63NTlqukXmIMmYjEFWQewNHYA5EGolmRIsOIqMJNnH9jgrWo8LU///a1oAZO8sEiwgdUSFiQIOQDREAtaAmllhs23mxRVaC046tZgNi6bxpIuB0AabFGEF00/0uoXXrRiZhTdzUlqqB4c5DCdlA7FWpycKQlBKCW7b//tSxA0AS6ElccectFFAl6549JWaMvXm8R/m78WBU0pj54liUDgNf9VEhv5CMsQD4Z1IIEY4uQATec8jOOCJP6bof89EQgu3tpPKLP/ZmGkfURd7fps6KgmppjdyQQja5Un4MlMHQQoAWqxFGw2GI7HW0S+slfcUwaP5n9FGnHij/oZGK7/qrNcMfp3cgqPdZS/IUe73jX8ugk1W4c9Obhm6nd//zal2KgiIhCZhIAREDs5OTjOUxkIXTwV+REKApXIW/Z5n1uocMK/1OOGEm/f/+1LEFAAJ3KNpx7BMUTidbfjzFYoyKHBJ9mKhzggZHbYYSMIcWIdmzTzObNlEumDA0V79n0EzLjqKJVYTEwyO5GINNFp1bATzI5nke68riXEjDoc0iAIEwkblFBM/+UokCE/zGUX/1LIen6lnTblZHKJjyn/dVcn9bxBnyH70JemA92vMdNPLs+0ImHUnZDathBWdLHCpSbmSjk6yNbmyFLwJYgyy1OwAHiXH0v6jxdEuE5PfdBj5aJOJca9amTPy8MGHKcotuYTcvkUeoV5Qb//7UsQjgAsw8WvHmayRTheufPSK2uyazNBL/ZkDrN/seX+K/KCX4EGYmUN3Qok2kCBU81T4y0obKyp6CknI6KKdmvPAyudQoahl1//9NyvIUQxFKPf/7p6H5IkfnvER0WExGLFQwBGXWrLszY1ZGK63Lp1Dv6bH2Vf/6RmYlzdyKFFYCoksCrP9QMpTlOLGwlojxWOlFtJrtUxXu4qPHf0EDihjf5wQHOKo3ziAcHh8RJ8yifwTMgAg6qxepq4v1Ls7RVQVNMEKmUpvLu7qXblN//tSxCsACgCHa8i8odFEmCz5N5w4kUQHhmKpsIptVWlDARbWHzAPB8r5ZrPTHKhOXCV/6UGwLhq/9JEHoNLf7qNRqNm/7nFi//Q44dPfEnUKJNdBgWbwuSGB7vFFf//2VQ7+7jrcaxAlkkVnRp9x1Qwox4mFyn8H9V0/pNRmkiy0eDUPB2/dh9GFBUF5D+tZdHaQSf6CQkA53/zGMPX/KVRjdYlUFeMepHoEH4b+Lt///oD8vqHcU+kQCSBWdnRL+WNIpFA/LBos4hJx5tXoPjT/+1LEOAAKMMFp57SywTmQrTz0mXBlpm/6uC4UAA2YbF2oZ/mwsMPWiVGf3FwhaY0P3mnuToe+Ybqxq6m7CFjVwA5e29gHV4UmhFgBRBU80VqJU/n75nlNI9Dxwgo0Yv5N+ocdTj7DRIIoo1epyHAxJyt+hAoZF/U7AyGR/7MbJf4lNQTwM+tRKqTYJ3fd9QqvcLpT1XF//rr3w7pCbTAPbrs/kOkUbOyq3zQDvuaavhLtPWgPccBtD4kM/OQQIVwetX6GOKH/0cwIGz/VlUgkpP/7UsRGAAoUuWnHiHURRZetvPUKGCdHqQocMusjknqISSIfQ0h7RoN1Y68ZmHdFZV9ViA7OeZcUmknhwLKvSI/lyG0tHljLylIlMNiuVJJVPE1/87YE4ZC8RmCeMH/2uBpBQIz/96yzFT3lzCNkQkmWvsHf/9EcKTX1DEw6nDmco0wFtzxhGWdhs3czNXaGoaRDkpD8LqqqvdIhIZDZL+7pDhDt/gggM7flczFBH+UpVcyn7zO7ikCghb7hRI4MF79Dme9UVdD+shVVGJiVOHNZ//tSxFMACeSPb8e8adFAF+2484oKRVgGEq8nCol46zrLqaArw5cxB0nIu4CB4MpRMD4iJzM4f6qUIRdE3v/9dlpHNC3GEgdDWx5QKJpaoJhTqu9Yp23P0e0pKIDydEygXeHMVUjABAQZEujTHNeOpbLRAgFZOelYpqlXu7K+A+Fad4ggOYCTH+jsoarGPcO6WCrqu75HqXVrmDYYJYLW9KOuV4vHW1f//TVJHGsVYmM2KRiYc2hUUVaqFTzBTxzmSPc9E6XFyKInY1E2i0Fp16P/+1LEYQAKGGlryD0hkUgU7LkmDHoGgDCyCTbFt5kPG/QSoZhF0aDAFH8dGY6ISKl33uQqgRxbmqOLW8rT2/d9u7dUO9lnHyyqDSIPDjNbmxBn4yPWZhRw9TFIcY/oG2cCooFiM/c7kSpZFR1/6qhoCYlqEZwDgqdQBQ+GMBOIjioKoWOdIBxJDDY1yqw6OVqR///fp0IO77W9iIebayt5bUcN1gEeC4ioYMRHF6xSQTTMguOQwsjJQmYEBEOT4VxxLj/mQCIx/lYqEa3RYkSvdP/7UsRtgAmcZ23HpE6RSwusePStwPGTC9zumWdpsY2esd/1dtQaY85O8ypAwv/YNsZlFquwdPN9QmUYBlrsuccDQm/ZC4bzFEJMir9w6CDFE/UEMjgQrw5hRTARk5FNmsmRU0mNVKe+r/7K/9mTt7joMRpK/d2fYVMyipL1rmvNx7yZa222QAau1MoiwF+VgtyUVb9HKBnVCLVjD8zqs5r2/qDOBFY3qsIRzepXOQUb7ugkVDI64tooFy9j+h4vXgmBt7vPSd13q1VWvptbj9DF//tSxHuAClCjZcewRYFFIGx49IjoU6XzSmBdMKnCAgJOOdqoV52HQ0p5IIaxnqmyGoaiFFodGBroVPCWZJl+wvNRvsYPTlb6qd1uphQ0dOlyzjdSj6b2BGdtEgoJax2SvPenqU/2dq9VRQzAzAqgiAVQ3FowGAwFAQdf6VZ/5yGQmaREv8lSvKLOj/hLAFqYnMYMP4LQdMUOOdMTYWy1/ksRBhxgiCjMUVfGc+aGZ1Ba//cxNUTIexX//mJwxMTElS6xl//+YstFE8x80QN/////+1LEh4AKNKON54hzOVQS63qeoADPVoM6DOcljExBTUUzLjk5LjOqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqv/7UsSSAA39U135hoAIAAA0g4AABKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq"}];
haxe_ds_ObjectMap.count = 0;
haxe_MainLoop.add(hxd_System.updateCursor,-1);
js_Boot.__toStr = ({ }).toString;
dn_heaps_assets_SfxDirectory._CACHE = new haxe_ds_StringMap();
dn_heaps_Sfx.SPATIAL_LISTENER_X = 0.;
dn_heaps_Sfx.SPATIAL_LISTENER_Y = 0.;
dn_heaps_Sfx.SPATIAL_LISTENER_RANGE = 1.;
dn_heaps_Sfx.ON_PLAY_CB = new haxe_ds_StringMap();
dn_heaps_Sfx.SOUND_VOLUMES_OVERRIDE = new haxe_ds_StringMap();
dn_heaps_Sfx.SOUND_DEFAULT_GROUPS = new haxe_ds_StringMap();
dn_heaps_Sfx.GLOBAL_GROUPS = new haxe_ds_IntMap();
dn_heaps_Sfx.DEFAULT_GROUP_ID = 0;
Assets.SBANK = (function($this) {
	var $r;
	var death01 = function(quickPlayVolume) {
		if(!Object.prototype.hasOwnProperty.call(dn_heaps_assets_SfxDirectory._CACHE.h,"sfx/death01.wav")) {
			var this1 = dn_heaps_assets_SfxDirectory._CACHE;
			var value = hxd_Res.load("sfx/death01.wav").toSound();
			this1.h["sfx/death01.wav"] = value;
		}
		var snd = dn_heaps_assets_SfxDirectory._CACHE.h["sfx/death01.wav"];
		if(quickPlayVolume != null) {
			var s = new dn_heaps_Sfx(snd);
			return s.play(null,quickPlayVolume);
		} else {
			return new dn_heaps_Sfx(snd);
		}
	};
	var death02 = function(quickPlayVolume) {
		if(!Object.prototype.hasOwnProperty.call(dn_heaps_assets_SfxDirectory._CACHE.h,"sfx/death02.wav")) {
			var this1 = dn_heaps_assets_SfxDirectory._CACHE;
			var value = hxd_Res.load("sfx/death02.wav").toSound();
			this1.h["sfx/death02.wav"] = value;
		}
		var snd = dn_heaps_assets_SfxDirectory._CACHE.h["sfx/death02.wav"];
		if(quickPlayVolume != null) {
			var s = new dn_heaps_Sfx(snd);
			return s.play(null,quickPlayVolume);
		} else {
			return new dn_heaps_Sfx(snd);
		}
	};
	var death03 = function(quickPlayVolume) {
		if(!Object.prototype.hasOwnProperty.call(dn_heaps_assets_SfxDirectory._CACHE.h,"sfx/death03.wav")) {
			var this1 = dn_heaps_assets_SfxDirectory._CACHE;
			var value = hxd_Res.load("sfx/death03.wav").toSound();
			this1.h["sfx/death03.wav"] = value;
		}
		var snd = dn_heaps_assets_SfxDirectory._CACHE.h["sfx/death03.wav"];
		if(quickPlayVolume != null) {
			var s = new dn_heaps_Sfx(snd);
			return s.play(null,quickPlayVolume);
		} else {
			return new dn_heaps_Sfx(snd);
		}
	};
	var explode01 = function(quickPlayVolume) {
		if(!Object.prototype.hasOwnProperty.call(dn_heaps_assets_SfxDirectory._CACHE.h,"sfx/explode01.wav")) {
			var this1 = dn_heaps_assets_SfxDirectory._CACHE;
			var value = hxd_Res.load("sfx/explode01.wav").toSound();
			this1.h["sfx/explode01.wav"] = value;
		}
		var snd = dn_heaps_assets_SfxDirectory._CACHE.h["sfx/explode01.wav"];
		if(quickPlayVolume != null) {
			var s = new dn_heaps_Sfx(snd);
			return s.play(null,quickPlayVolume);
		} else {
			return new dn_heaps_Sfx(snd);
		}
	};
	var explode02 = function(quickPlayVolume) {
		if(!Object.prototype.hasOwnProperty.call(dn_heaps_assets_SfxDirectory._CACHE.h,"sfx/explode02.wav")) {
			var this1 = dn_heaps_assets_SfxDirectory._CACHE;
			var value = hxd_Res.load("sfx/explode02.wav").toSound();
			this1.h["sfx/explode02.wav"] = value;
		}
		var snd = dn_heaps_assets_SfxDirectory._CACHE.h["sfx/explode02.wav"];
		if(quickPlayVolume != null) {
			var s = new dn_heaps_Sfx(snd);
			return s.play(null,quickPlayVolume);
		} else {
			return new dn_heaps_Sfx(snd);
		}
	};
	var explode03 = function(quickPlayVolume) {
		if(!Object.prototype.hasOwnProperty.call(dn_heaps_assets_SfxDirectory._CACHE.h,"sfx/explode03.wav")) {
			var this1 = dn_heaps_assets_SfxDirectory._CACHE;
			var value = hxd_Res.load("sfx/explode03.wav").toSound();
			this1.h["sfx/explode03.wav"] = value;
		}
		var snd = dn_heaps_assets_SfxDirectory._CACHE.h["sfx/explode03.wav"];
		if(quickPlayVolume != null) {
			var s = new dn_heaps_Sfx(snd);
			return s.play(null,quickPlayVolume);
		} else {
			return new dn_heaps_Sfx(snd);
		}
	};
	var explode04 = function(quickPlayVolume) {
		if(!Object.prototype.hasOwnProperty.call(dn_heaps_assets_SfxDirectory._CACHE.h,"sfx/explode04.wav")) {
			var this1 = dn_heaps_assets_SfxDirectory._CACHE;
			var value = hxd_Res.load("sfx/explode04.wav").toSound();
			this1.h["sfx/explode04.wav"] = value;
		}
		var snd = dn_heaps_assets_SfxDirectory._CACHE.h["sfx/explode04.wav"];
		if(quickPlayVolume != null) {
			var s = new dn_heaps_Sfx(snd);
			return s.play(null,quickPlayVolume);
		} else {
			return new dn_heaps_Sfx(snd);
		}
	};
	var hit01 = function(quickPlayVolume) {
		if(!Object.prototype.hasOwnProperty.call(dn_heaps_assets_SfxDirectory._CACHE.h,"sfx/hit01.wav")) {
			var this1 = dn_heaps_assets_SfxDirectory._CACHE;
			var value = hxd_Res.load("sfx/hit01.wav").toSound();
			this1.h["sfx/hit01.wav"] = value;
		}
		var snd = dn_heaps_assets_SfxDirectory._CACHE.h["sfx/hit01.wav"];
		if(quickPlayVolume != null) {
			var s = new dn_heaps_Sfx(snd);
			return s.play(null,quickPlayVolume);
		} else {
			return new dn_heaps_Sfx(snd);
		}
	};
	var hive01 = function(quickPlayVolume) {
		if(!Object.prototype.hasOwnProperty.call(dn_heaps_assets_SfxDirectory._CACHE.h,"sfx/hive01.wav")) {
			var this1 = dn_heaps_assets_SfxDirectory._CACHE;
			var value = hxd_Res.load("sfx/hive01.wav").toSound();
			this1.h["sfx/hive01.wav"] = value;
		}
		var snd = dn_heaps_assets_SfxDirectory._CACHE.h["sfx/hive01.wav"];
		if(quickPlayVolume != null) {
			var s = new dn_heaps_Sfx(snd);
			return s.play(null,quickPlayVolume);
		} else {
			return new dn_heaps_Sfx(snd);
		}
	};
	var menu01 = function(quickPlayVolume) {
		if(!Object.prototype.hasOwnProperty.call(dn_heaps_assets_SfxDirectory._CACHE.h,"sfx/menu01.wav")) {
			var this1 = dn_heaps_assets_SfxDirectory._CACHE;
			var value = hxd_Res.load("sfx/menu01.wav").toSound();
			this1.h["sfx/menu01.wav"] = value;
		}
		var snd = dn_heaps_assets_SfxDirectory._CACHE.h["sfx/menu01.wav"];
		if(quickPlayVolume != null) {
			var s = new dn_heaps_Sfx(snd);
			return s.play(null,quickPlayVolume);
		} else {
			return new dn_heaps_Sfx(snd);
		}
	};
	var missile01 = function(quickPlayVolume) {
		if(!Object.prototype.hasOwnProperty.call(dn_heaps_assets_SfxDirectory._CACHE.h,"sfx/missile01.wav")) {
			var this1 = dn_heaps_assets_SfxDirectory._CACHE;
			var value = hxd_Res.load("sfx/missile01.wav").toSound();
			this1.h["sfx/missile01.wav"] = value;
		}
		var snd = dn_heaps_assets_SfxDirectory._CACHE.h["sfx/missile01.wav"];
		if(quickPlayVolume != null) {
			var s = new dn_heaps_Sfx(snd);
			return s.play(null,quickPlayVolume);
		} else {
			return new dn_heaps_Sfx(snd);
		}
	};
	var missile02 = function(quickPlayVolume) {
		if(!Object.prototype.hasOwnProperty.call(dn_heaps_assets_SfxDirectory._CACHE.h,"sfx/missile02.wav")) {
			var this1 = dn_heaps_assets_SfxDirectory._CACHE;
			var value = hxd_Res.load("sfx/missile02.wav").toSound();
			this1.h["sfx/missile02.wav"] = value;
		}
		var snd = dn_heaps_assets_SfxDirectory._CACHE.h["sfx/missile02.wav"];
		if(quickPlayVolume != null) {
			var s = new dn_heaps_Sfx(snd);
			return s.play(null,quickPlayVolume);
		} else {
			return new dn_heaps_Sfx(snd);
		}
	};
	var msg01 = function(quickPlayVolume) {
		if(!Object.prototype.hasOwnProperty.call(dn_heaps_assets_SfxDirectory._CACHE.h,"sfx/msg01.wav")) {
			var this1 = dn_heaps_assets_SfxDirectory._CACHE;
			var value = hxd_Res.load("sfx/msg01.wav").toSound();
			this1.h["sfx/msg01.wav"] = value;
		}
		var snd = dn_heaps_assets_SfxDirectory._CACHE.h["sfx/msg01.wav"];
		if(quickPlayVolume != null) {
			var s = new dn_heaps_Sfx(snd);
			return s.play(null,quickPlayVolume);
		} else {
			return new dn_heaps_Sfx(snd);
		}
	};
	var resist01 = function(quickPlayVolume) {
		if(!Object.prototype.hasOwnProperty.call(dn_heaps_assets_SfxDirectory._CACHE.h,"sfx/resist01.wav")) {
			var this1 = dn_heaps_assets_SfxDirectory._CACHE;
			var value = hxd_Res.load("sfx/resist01.wav").toSound();
			this1.h["sfx/resist01.wav"] = value;
		}
		var snd = dn_heaps_assets_SfxDirectory._CACHE.h["sfx/resist01.wav"];
		if(quickPlayVolume != null) {
			var s = new dn_heaps_Sfx(snd);
			return s.play(null,quickPlayVolume);
		} else {
			return new dn_heaps_Sfx(snd);
		}
	};
	var shoot01 = function(quickPlayVolume) {
		if(!Object.prototype.hasOwnProperty.call(dn_heaps_assets_SfxDirectory._CACHE.h,"sfx/shoot01.wav")) {
			var this1 = dn_heaps_assets_SfxDirectory._CACHE;
			var value = hxd_Res.load("sfx/shoot01.wav").toSound();
			this1.h["sfx/shoot01.wav"] = value;
		}
		var snd = dn_heaps_assets_SfxDirectory._CACHE.h["sfx/shoot01.wav"];
		if(quickPlayVolume != null) {
			var s = new dn_heaps_Sfx(snd);
			return s.play(null,quickPlayVolume);
		} else {
			return new dn_heaps_Sfx(snd);
		}
	};
	var step01 = function(quickPlayVolume) {
		if(!Object.prototype.hasOwnProperty.call(dn_heaps_assets_SfxDirectory._CACHE.h,"sfx/step01.wav")) {
			var this1 = dn_heaps_assets_SfxDirectory._CACHE;
			var value = hxd_Res.load("sfx/step01.wav").toSound();
			this1.h["sfx/step01.wav"] = value;
		}
		var snd = dn_heaps_assets_SfxDirectory._CACHE.h["sfx/step01.wav"];
		if(quickPlayVolume != null) {
			var s = new dn_heaps_Sfx(snd);
			return s.play(null,quickPlayVolume);
		} else {
			return new dn_heaps_Sfx(snd);
		}
	};
	var step02 = function(quickPlayVolume) {
		if(!Object.prototype.hasOwnProperty.call(dn_heaps_assets_SfxDirectory._CACHE.h,"sfx/step02.wav")) {
			var this1 = dn_heaps_assets_SfxDirectory._CACHE;
			var value = hxd_Res.load("sfx/step02.wav").toSound();
			this1.h["sfx/step02.wav"] = value;
		}
		var snd = dn_heaps_assets_SfxDirectory._CACHE.h["sfx/step02.wav"];
		if(quickPlayVolume != null) {
			var s = new dn_heaps_Sfx(snd);
			return s.play(null,quickPlayVolume);
		} else {
			return new dn_heaps_Sfx(snd);
		}
	};
	var step03 = function(quickPlayVolume) {
		if(!Object.prototype.hasOwnProperty.call(dn_heaps_assets_SfxDirectory._CACHE.h,"sfx/step03.wav")) {
			var this1 = dn_heaps_assets_SfxDirectory._CACHE;
			var value = hxd_Res.load("sfx/step03.wav").toSound();
			this1.h["sfx/step03.wav"] = value;
		}
		var snd = dn_heaps_assets_SfxDirectory._CACHE.h["sfx/step03.wav"];
		if(quickPlayVolume != null) {
			var s = new dn_heaps_Sfx(snd);
			return s.play(null,quickPlayVolume);
		} else {
			return new dn_heaps_Sfx(snd);
		}
	};
	var switch01 = function(quickPlayVolume) {
		if(!Object.prototype.hasOwnProperty.call(dn_heaps_assets_SfxDirectory._CACHE.h,"sfx/switch01.wav")) {
			var this1 = dn_heaps_assets_SfxDirectory._CACHE;
			var value = hxd_Res.load("sfx/switch01.wav").toSound();
			this1.h["sfx/switch01.wav"] = value;
		}
		var snd = dn_heaps_assets_SfxDirectory._CACHE.h["sfx/switch01.wav"];
		if(quickPlayVolume != null) {
			var s = new dn_heaps_Sfx(snd);
			return s.play(null,quickPlayVolume);
		} else {
			return new dn_heaps_Sfx(snd);
		}
	};
	$r = { death01 : death01, death02 : death02, death03 : death03, explode01 : explode01, explode02 : explode02, explode03 : explode03, explode04 : explode04, hit01 : hit01, hive01 : hive01, menu01 : menu01, missile01 : missile01, missile02 : missile02, msg01 : msg01, resist01 : resist01, shoot01 : shoot01, step01 : step01, step02 : step02, step03 : step03, switch01 : switch01, _precacheAllSounds : function() {
		var this1 = dn_heaps_assets_SfxDirectory._CACHE;
		var value = hxd_Res.load("sfx/death01.wav").toSound();
		this1.h["sfx/death01.wav"] = value;
		var this1 = dn_heaps_assets_SfxDirectory._CACHE;
		var value = hxd_Res.load("sfx/death02.wav").toSound();
		this1.h["sfx/death02.wav"] = value;
		var this1 = dn_heaps_assets_SfxDirectory._CACHE;
		var value = hxd_Res.load("sfx/death03.wav").toSound();
		this1.h["sfx/death03.wav"] = value;
		var this1 = dn_heaps_assets_SfxDirectory._CACHE;
		var value = hxd_Res.load("sfx/explode01.wav").toSound();
		this1.h["sfx/explode01.wav"] = value;
		var this1 = dn_heaps_assets_SfxDirectory._CACHE;
		var value = hxd_Res.load("sfx/explode02.wav").toSound();
		this1.h["sfx/explode02.wav"] = value;
		var this1 = dn_heaps_assets_SfxDirectory._CACHE;
		var value = hxd_Res.load("sfx/explode03.wav").toSound();
		this1.h["sfx/explode03.wav"] = value;
		var this1 = dn_heaps_assets_SfxDirectory._CACHE;
		var value = hxd_Res.load("sfx/explode04.wav").toSound();
		this1.h["sfx/explode04.wav"] = value;
		var this1 = dn_heaps_assets_SfxDirectory._CACHE;
		var value = hxd_Res.load("sfx/hit01.wav").toSound();
		this1.h["sfx/hit01.wav"] = value;
		var this1 = dn_heaps_assets_SfxDirectory._CACHE;
		var value = hxd_Res.load("sfx/hive01.wav").toSound();
		this1.h["sfx/hive01.wav"] = value;
		var this1 = dn_heaps_assets_SfxDirectory._CACHE;
		var value = hxd_Res.load("sfx/menu01.wav").toSound();
		this1.h["sfx/menu01.wav"] = value;
		var this1 = dn_heaps_assets_SfxDirectory._CACHE;
		var value = hxd_Res.load("sfx/missile01.wav").toSound();
		this1.h["sfx/missile01.wav"] = value;
		var this1 = dn_heaps_assets_SfxDirectory._CACHE;
		var value = hxd_Res.load("sfx/missile02.wav").toSound();
		this1.h["sfx/missile02.wav"] = value;
		var this1 = dn_heaps_assets_SfxDirectory._CACHE;
		var value = hxd_Res.load("sfx/msg01.wav").toSound();
		this1.h["sfx/msg01.wav"] = value;
		var this1 = dn_heaps_assets_SfxDirectory._CACHE;
		var value = hxd_Res.load("sfx/resist01.wav").toSound();
		this1.h["sfx/resist01.wav"] = value;
		var this1 = dn_heaps_assets_SfxDirectory._CACHE;
		var value = hxd_Res.load("sfx/shoot01.wav").toSound();
		this1.h["sfx/shoot01.wav"] = value;
		var this1 = dn_heaps_assets_SfxDirectory._CACHE;
		var value = hxd_Res.load("sfx/step01.wav").toSound();
		this1.h["sfx/step01.wav"] = value;
		var this1 = dn_heaps_assets_SfxDirectory._CACHE;
		var value = hxd_Res.load("sfx/step02.wav").toSound();
		this1.h["sfx/step02.wav"] = value;
		var this1 = dn_heaps_assets_SfxDirectory._CACHE;
		var value = hxd_Res.load("sfx/step03.wav").toSound();
		this1.h["sfx/step03.wav"] = value;
		var this1 = dn_heaps_assets_SfxDirectory._CACHE;
		var value = hxd_Res.load("sfx/switch01.wav").toSound();
		this1.h["sfx/switch01.wav"] = value;
	}};
	return $r;
}(this));
Const.FPS = 45;
Const.SCALE = 1;
Const.AUTO_SCALE_TARGET_WID = -1;
Const.AUTO_SCALE_TARGET_HEI = 370;
Const.GRID = 16;
Const.LWID = 0;
Const.LHEI = 0;
Const.SHADOW = 0.6;
Const.SHOOT_RANGE = 200;
Const.uniq = 0;
Const.DP_BG = Const.uniq++;
Const.DP_HUMANS = Const.uniq++;
Const.DP_ENTITY = Const.uniq++;
Const.DP_BG_FRONTS = Const.uniq++;
Const.DP_ARMS = Const.uniq++;
Const.DP_BODY = Const.uniq++;
Const.DP_FEET = Const.uniq++;
Const.DP_MOB_SHADOWS = Const.uniq++;
Const.DP_FLYERS = Const.uniq++;
Const.DP_FX = Const.uniq++;
Const.DP_BULLET = Const.uniq++;
Const.DP_UI = Const.uniq++;
dn_Process.MAX_PROCESSES = 1024;
dn_Process.FIXED_UPDATE_FPS = 30;
dn_Process.CUSTOM_STAGE_WIDTH = -1;
dn_Process.CUSTOM_STAGE_HEIGHT = -1;
dn_Process.UNIQ_ID = 0;
dn_Process.ROOTS = new dn_struct_FixedArray("RootProcesses",dn_Process.MAX_PROCESSES);
dn_Process.BEGINNING_OF_FRAME_CALLBACKS = new dn_struct_FixedArray(null,256);
dn_Process.END_OF_FRAME_CALLBACKS = new dn_struct_FixedArray(null,256);
dn_Process.RESIZE_REQUESTED = true;
dn_Process.PROFILING = false;
dn_Process.PROFILER_TIMES = new haxe_ds_StringMap();
Game.kidMode = false;
Scenery.ALL = [];
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
dn_Cooldown.__meta__ = { obj : { indexes : ["test","jump","a","b","c","click","exit","click2","stun","fixed","alive","blur","lockSwitch","refresh","panic","idle","shake","spawn","eye","ccheck","emitterLife","emitterTick","damaged","resist","legMoving","switch","shoot","sfxMG","sfxMiss","missileReload","launch","ignite","lockDir","hole","t_","won","clock","warn","check"]}};
dn_Cooldown.DEFAULT_COUNT_LIMIT = 512;
dn_Tweenie.DEFAULT_DURATION = 1000.0;
dn_heaps_assets_Atlas.CACHE_ANIMS = [];
dn_heaps_slib_AnimManager.ANYTHING = "*";
h2d_Object.tmpPoint = new h2d_col_Point();
dn_heaps_slib_SpriteLib.DISABLE_ANIM_UPDATES = false;
en_Human.ALL = [];
en_Leg.ALL = [];
en_Mob.ALL = [];
en_Quad.ALL = [];
en_m_Creeper.ALL = [];
format_mp3_MPEG.Reserved = 1;
format_mp3_MPEG.V1_Bitrates = [[format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_40,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_320,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_320,format_mp3_Bitrate.BR_384,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_288,format_mp3_Bitrate.BR_320,format_mp3_Bitrate.BR_352,format_mp3_Bitrate.BR_384,format_mp3_Bitrate.BR_416,format_mp3_Bitrate.BR_448,format_mp3_Bitrate.BR_Bad]];
format_mp3_MPEG.V2_Bitrates = [[format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_8,format_mp3_Bitrate.BR_16,format_mp3_Bitrate.BR_24,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_40,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_144,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_8,format_mp3_Bitrate.BR_16,format_mp3_Bitrate.BR_24,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_40,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_144,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_144,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_176,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_Bad]];
format_mp3_MPEG.SamplingRates = [[format_mp3_SamplingRate.SR_11025,format_mp3_SamplingRate.SR_12000,format_mp3_SamplingRate.SR_8000,format_mp3_SamplingRate.SR_Bad],[format_mp3_SamplingRate.SR_Bad,format_mp3_SamplingRate.SR_Bad,format_mp3_SamplingRate.SR_Bad,format_mp3_SamplingRate.SR_Bad],[format_mp3_SamplingRate.SR_22050,format_mp3_SamplingRate.SR_24000,format_mp3_SamplingRate.SR_12000,format_mp3_SamplingRate.SR_Bad],[format_mp3_SamplingRate.SR_44100,format_mp3_SamplingRate.SR_48000,format_mp3_SamplingRate.SR_32000,format_mp3_SamplingRate.SR_Bad]];
format_mp3_CLayer.LReserved = 0;
h2d_filter_Filter.defaultUseScreenResolution = false;
h3d_Buffer.GUID = 0;
h3d_Engine.SOFTWARE_DRIVER = false;
h3d_Engine.ANTIALIASING = 0;
h3d_impl_InputNames.UID = 0;
h3d_impl_InputNames.CACHE = new haxe_ds_StringMap();
h3d_impl_GlDriver.ALLOW_WEBGL2 = true;
h3d_impl_GlDriver.BLACK = new h3d_Vector(0,0,0,0);
h3d_impl_GlDriver.outOfMemoryCheck = false;
h3d_impl_GlDriver.TFILTERS = [[[9728,9728],[9729,9729]],[[9728,9984],[9729,9985]],[[9728,9986],[9729,9987]]];
h3d_impl_GlDriver.TWRAP = [33071,10497];
h3d_impl_GlDriver.FACES = [0,1028,1029,1032];
h3d_impl_GlDriver.BLEND = [1,0,770,768,772,774,771,769,773,775,32769,32771,32770,32772,776];
h3d_impl_GlDriver.COMPARE = [519,512,514,517,516,518,513,515];
h3d_impl_GlDriver.STENCIL_OP = [7680,0,7681,7682,34055,7683,34056,5386];
h3d_impl_GlDriver.OP = [32774,32778,32779,32775,32776];
h3d_impl_GlDriver.CUBE_FACES = [34069,34070,34071,34072,34073,34074];
h3d_impl_GlDriver.CBUFFERS = (function($this) {
	var $r;
	var _g = [];
	{
		var _g1 = 0;
		while(_g1 < 32) {
			var i = _g1++;
			var _g2 = [];
			var _g3 = 0;
			var _g4 = i;
			while(_g3 < _g4) {
				var k = _g3++;
				_g2.push(36064 + k);
			}
			_g.push(_g2);
		}
	}
	$r = _g;
	return $r;
}(this));
h3d_impl_MemoryManager.ALL_FLAGS = h3d_BufferFlag.__empty_constructs__.slice();
h3d_mat_Defaults.defaultKillAlphaThreshold = 0.5;
h3d_mat_Defaults.loadingTextureColor = -65281;
h3d_mat_MaterialSetup.current = new h3d_mat_MaterialSetup("Default");
h3d_mat_Texture.UID = 0;
h3d_mat_Texture.PREVENT_AUTO_DISPOSE = 2147483647;
h3d_mat_Texture.nativeFormat = hxd_PixelFormat.RGBA;
h3d_pass_Blur.__meta__ = { obj : { ignore : ["shader"]}};
h3d_shader_ScreenShader.SRC = "HXSLF2gzZC5zaGFkZXIuU2NyZWVuU2hhZGVyBwEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACghfX2luaXRfXw4GAAALBnZlcnRleA4GAAACAgoAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAALAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAA";
h3d_pass__$Border_BorderShader.SRC = "HXSLHWgzZC5wYXNzLl9Cb3JkZXIuQm9yZGVyU2hhZGVyCQEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgVjb2xvcgUMAgAACwhfX2luaXRfXw4GAAAMBnZlcnRleA4GAAANCGZyYWdtZW50DgYAAAMCCwAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAAwAAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ0AAAUBBgQCCAUMAgoFDAUMAA";
h3d_pass_ColorMatrixShader.SRC = "HXSLGmgzZC5wYXNzLkNvbG9yTWF0cml4U2hhZGVyFQEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgd0ZXh0dXJlCgIAAAsGbWF0cml4BwIAAAwIdXNlQWxwaGECAgABAAAAAAANB3VzZU1hc2sCAgABAAAAAAAOCm1hc2tJbnZlcnQCAgABAAAAAAAPD2hhc1NlY29uZE1hdHJpeAICAAEAAAAAABAHbWF0cml4MgcCAAARBG1hc2sKAgAAEghtYXNrTWF0QQULAgAAEwhtYXNrTWF0QgULAgAAFAltYXNrUG93ZXIDAgAAFQttYXNrQ2hhbm5lbAUMAgAAFghfX2luaXRfXw4GAAAXBnZlcnRleA4GAAAYBWFwcGx5DgYAABkIZnJhZ21lbnQOBgAABAIWAAAFAgYEAgcFDAIIBQwFDAYEAgkFCgIDBQoFCgAAFwAABQEGBAIGBQwJAyoOBAoCAgUKAAADBgEKAgIFCgQAAwIEAwMBAwAAAAAAAAAAAwEDAAAAAAAA8D8DBQwFDAADGAIaBWNvbG9yBQwEAAAbA21hdAcEAAAFDAUBDQsCDAIGAQIaBQwCGwcFDAYBCQMqDgIKAhoFDJIABQsBAwAAAAAAAPA/AwUMAhsHBQwFDAAAARkAAAUBCwINAgUFCBwFY29sb3IFDAQAAAkDIQ4CAgoKAgMFCgUMAAgdAnV2BQsEAAAJAykOAgIDBQoBAwAAAAAAAPA/AwULAAgeAWsDBAAACQMIDgIJAx0OAgkDIQ4CAhEKCQMoDgIJAx0OAgIdBQsCEgULAwkDHQ4CAh0FCwITBQsDBQoFDAIVBQwDAhQDAwAIHwZjb2xvcjIFDAQAAAsCDwIJAhgOAgIcBQwCEAcFDAIcBQwFDAAGBAIHBQwLAg4CCQMYDgMCHwUMCQIYDgICHAUMAgsHBQwCHgMFDAkDGA4DCQIYDgICHAUMAgsHBQwCHwUMAh4DBQwFDAUMAAYEAgcFDAkCGA4CCQMhDgICCgoCAwUKBQwCCwcFDAUMAAA";
h3d_pass__$Copy_ArrayCopyShader.SRC = "HXSLHmgzZC5wYXNzLl9Db3B5LkFycmF5Q29weVNoYWRlcgoBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoHdGV4dHVyZQsCAAALBWxheWVyAQIAAAwIX19pbml0X18OBgAADQZ2ZXJ0ZXgOBgAADghmcmFnbWVudA4GAAADAgwAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAANAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEOAAAFAQYEAggFDAkDIQ4CAgoLCQMpDgICCQUKCQMmDgECCwEDBQsFDAUMAA";
h3d_pass__$Copy_CopyShader.SRC = "HXSLGWgzZC5wYXNzLl9Db3B5LkNvcHlTaGFkZXIJAQVpbnB1dA0BAgIIcG9zaXRpb24FCgEBAAMCdXYFCgEBAAEAAAQFZmxpcFkDAgAABQZvdXRwdXQNAgIGCHBvc2l0aW9uBQwEBQAHBWNvbG9yBQwEBQAEAAAICnBpeGVsQ29sb3IFDAQAAAkMY2FsY3VsYXRlZFVWBQoEAAAKB3RleHR1cmUKAgAACwhfX2luaXRfXw4GAAAMBnZlcnRleA4GAAANCGZyYWdtZW50DgYAAAMCCwAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAAwAAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ0AAAUBBgQCCAUMCQMhDgICCgoCCQUKBQwFDAA";
h3d_pass__$CubeCopy_CubeCopyShader.SRC = "HXSLIWgzZC5wYXNzLl9DdWJlQ29weS5DdWJlQ29weVNoYWRlcgoBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoHdGV4dHVyZQwCAAALA21hdAYCAAAMCF9faW5pdF9fDgYAAA0GdmVydGV4DgYAAA4IZnJhZ21lbnQOBgAAAwIMAAAFAgYEAgcFDAIIBQwFDAYEAgkFCgIDBQoFCgAADQAABQEGBAIGBQwJAyoOBAoCAgUKAAADBgEKAgIFCgQAAwIEAwMBAwAAAAAAAAAAAwEDAAAAAAAA8D8DBQwFDAABDgAABQIIDwJ1dgUKBAAABgMGAQIJBQoBAwAAAAAAAABAAwUKAQMAAAAAAADwPwMFCgAGBAIIBQwJAyEOAgIKDAkDHw4BBgEJAykOAgIPBQoBAwAAAAAAAPA/AwULAgsGBQsFCwUMBQwA";
h3d_pass__$HardwarePick_FixedColor.SRC = "HXSLIWgzZC5wYXNzLl9IYXJkd2FyZVBpY2suRml4ZWRDb2xvcgUBB2NvbG9ySUQFDAIAAAIIdmlld3BvcnQFDAIAAAMGb3V0cHV0DQECBAhwb3NpdGlvbgUMBAMABQdjb2xvcklEBQwEAwAEAAAGBnZlcnRleA4GAAAHCGZyYWdtZW50DgYAAAIABgAABQEGBAIEBQwGAQQGAAIEBQwGAQkDKg4DCgICBQwRAAUKAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwUMCgIEBQwMAAMFDAUMBQwJAyoOAwoCAgUMOQAFCgEDAAAAAAAA8D8DAQMAAAAAAADwPwMFDAUMBQwAAQcAAAUBBgQCBQUMAgEFDAUMAA";
h3d_pass_ShaderManager.STRICT = true;
h3d_shader_AmbientLight.SRC = "HXSLF2gzZC5zaGFkZXIuQW1iaWVudExpZ2h0CgEGZ2xvYmFsDQECAgxhbWJpZW50TGlnaHQFCwABAAMQcGVyUGl4ZWxMaWdodGluZwIAAQEAAAAAAAAAAAQKcGl4ZWxDb2xvcgUMBAAABQ9saWdodFBpeGVsQ29sb3IFCwQAAAYKbGlnaHRDb2xvcgULBAAABwhhZGRpdGl2ZQICAAEAAAAAAAgIX19pbml0X18OBgAACRBfX2luaXRfX2ZyYWdtZW50DgYAAAoJY2FsY0xpZ2h0DgYAAAsGdmVydGV4DgYAAAwIZnJhZ21lbnQOBgAABQIIAAAFAQYEAgYFCwsCBwICAgULCQMpDgEBAwAAAAAAAAAAAwULBQsFCwACCQAABQEGBAIFBQsLAgcCAgIFCwkDKQ4BAQMAAAAAAAAAAAMFCwULBQsAAwoBDQpsaWdodENvbG9yBQsEAAAFCwUBDQsCBwICDQULBAYAAgIFCwYBCQMWDgIEBgMBAwAAAAAAAPA/AwICBQsFCwULAQMAAAAAAAAAAAMFCwINBQsFCwULBQsFCwAAAAsAAAUBCwcCAgMCAgaBCgIEBQySAAULCQIKDgECBgULBQsFCwAAAAEMAAAFAQsCAwIGgQoCBAUMkgAFCwkCCg4BAgUFCwULBQsAAAA";
h3d_shader_Base2d.SRC = "HXSLEWgzZC5zaGFkZXIuQmFzZTJkGwEFaW5wdXQNAQMCCHBvc2l0aW9uBQoBAQADAnV2BQoBAQAEBWNvbG9yBQwBAQABAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgEdGltZQMAAAAJBnpWYWx1ZQMCAAAKB3RleHR1cmUKAgAACw5zcHJpdGVQb3NpdGlvbgUMBAAADBBhYnNvbHV0ZVBvc2l0aW9uBQwEAAANCnBpeGVsQ29sb3IFDAQAAA4MdGV4dHVyZUNvbG9yBQwEAAAPDGNhbGN1bGF0ZWRVVgUKAwAAEAppc1JlbGF0aXZlAgIAAQAAAAAAEQVjb2xvcgUMAgAAEg9hYnNvbHV0ZU1hdHJpeEEFCwIAABMPYWJzb2x1dGVNYXRyaXhCBQsCAAAUDWZpbHRlck1hdHJpeEEFCwIAABUNZmlsdGVyTWF0cml4QgULAgAAFghoYXNVVlBvcwICAAEAAAAAABcFdXZQb3MFDAIAABgJa2lsbEFscGhhAgIAAQAAAAAAGQpwaXhlbEFsaWduAgIAAQAAAAAAGhBoYWxmUGl4ZWxJbnZlcnNlBQoCAAAbCXZpZXdwb3J0QQULAgAAHAl2aWV3cG9ydEIFCwIAAB0Ob3V0cHV0UG9zaXRpb24FDAQAAB4IX19pbml0X18OBgAAHwZ2ZXJ0ZXgOBgAAIAhmcmFnbWVudA4GAAADAh4AAAUGBgQCCwUMCQMqDgMCAgUKAgkDAQMAAAAAAADwPwMFDAUMCwIQAgUDBgQKAgwFDAAAAwkDHQ4CCQMpDgIKAgsFDBEABQoBAwAAAAAAAPA/AwULAhIFCwMDBgQKAgwFDAQAAwkDHQ4CCQMpDgIKAgsFDBEABQoBAwAAAAAAAPA/AwULAhMFCwMDBgQKAgwFDDkABQoKAgsFDDkABQoFCgAGBAIMBQwCCwUMBQwABgQCDwUKCwIWAgYABgECAwUKCgIXBQw5AAUKBQoKAhcFDBEABQoFCgIDBQoFCgUKBgQCDQUMCwIQAgYBAhEFDAIEBQwFDAIEBQwFDAUMBgQCDgUMCQMhDgICCgoCDwUKBQwFDAaBAg0FDAIOBQwFDAAAHwAABQUIIQN0bXAFCwQAAAkDKQ4CCgIMBQwRAAUKAQMAAAAAAADwPwMFCwAGBAIhBQsJAykOAwkDHQ4CAiEFCwIUBQsDCQMdDgICIQULAhUFCwMBAwAAAAAAAPA/AwULBQsGBAIdBQwJAyoOAwkDHQ4CAiEFCwIbBQsDCQMdDgICIQULAhwFCwMKAgwFDDkABQoFDAUMCwIZAgaDCgIdBQwRAAUKAhoFCgUKAAAGBAIGBQwCHQUMBQwAASAAAAUCCwYOAhgCBgkKAg0FDAwAAwED/Knx0k1iUD8DAgIMAAAABgQCBwUMAg0FDAUMAA";
h3d_shader_BaseMesh.SRC = "HXSLE2gzZC5zaGFkZXIuQmFzZU1lc2gXAQZjYW1lcmENAQoCBHZpZXcHAAEAAwRwcm9qBwABAAQIcG9zaXRpb24FCwABAAUIcHJvakZsaXADAAEABghwcm9qRGlhZwULAAEABwh2aWV3UHJvagcAAQAID2ludmVyc2VWaWV3UHJvagcAAQAJBXpOZWFyAwABAAoEekZhcgMAAQALA2RpcgULAwEAAAAADAZnbG9iYWwNAgQNBHRpbWUDAAwADglwaXhlbFNpemUFCgAMAA8JbW9kZWxWaWV3BwAMAQMQEG1vZGVsVmlld0ludmVyc2UHAAwBAwAAABEFaW5wdXQNAwISCHBvc2l0aW9uBQsBEQATBm5vcm1hbAULAREAAQAAFAZvdXRwdXQNBAUVCHBvc2l0aW9uBQwEFAAWBWNvbG9yBQwEFAAXBWRlcHRoAwQUABgGbm9ybWFsBQsEFAAZCXdvcmxkRGlzdAMEFAAEAAAaEHJlbGF0aXZlUG9zaXRpb24FCwQAABsTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAHBhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAB0RdHJhbnNmb3JtZWROb3JtYWwFCwQAAB4RcHJvamVjdGVkUG9zaXRpb24FDAQAAB8KcGl4ZWxDb2xvcgUMBAAAIAVkZXB0aAMEAAAhCHNjcmVlblVWBQoEAAAiCXNwZWNQb3dlcgMEAAAjCXNwZWNDb2xvcgULBAAAJAl3b3JsZERpc3QDBAAAJQVjb2xvcgUMAgAAJg1zcGVjdWxhclBvd2VyAwIAAQcAAAAAAAAAAAAAAAAAAFlAJw5zcGVjdWxhckFtb3VudAMCAAEHAAAAAAAAAAAAAAAAAAAkQCgNc3BlY3VsYXJDb2xvcgULAgAAKQhfX2luaXRfXw4GAAAqEF9faW5pdF9fZnJhZ21lbnQOBgAAKwZ2ZXJ0ZXgOBgAALAhmcmFnbWVudA4GAAAEAikAAAULBgQCGgULAhIFCwULBgQCGwULBgECGgULCQM0DgECDwcIBQsFCwYEAh4FDAYBCQMqDgICGwULAQMAAAAAAADwPwMFDAIHBwUMBQwGBAIdBQsJAx8OAQQGAQITBQsJAzIOAQIPBwYFCwULBQsFCwYEAgsFCwkDHw4BBAYDAgQFCwIbBQsFCwULBQsFCwYEAh8FDAIlBQwFDAYEAiIDAiYDAwYEAiMFCwYBAigFCwInAwULBQsGBAIhBQoJAzoOAQYCCgIeBQwRAAUKCgIeBQwMAAMFCgUKBQoGBAIgAwYCCgIeBQwIAAMKAh4FDAwAAwMDBgQCJAMGAgkDGw4BBgMCGwULAgQFCwULAwIKAwMDAAIqAAAFBQYEAh0FCwkDHw4BAh0FCwULBQsGBAIhBQoJAzoOAQYCCgIeBQwRAAUKCgIeBQwMAAMFCgUKBQoGBAIgAwYCCgIeBQwIAAMKAh4FDAwAAwMDBgQCIgMCJgMDBgQCIwULBgECKAULAicDBQsFCwAAKwAABQIGBAIVBQwGAQIeBQwJAyoOBAEDAAAAAAAA8D8DAgUDAQMAAAAAAADwPwMBAwAAAAAAAPA/AwUMBQwFDAYEAhwFCwIbBQsFCwABLAAABQQGBAIWBQwCHwUMBQwGBAIXAwIgAwMGBAIYBQsCHQULBQsGBAIZAwIkAwMA";
h3d_shader_Blur.SRC = "HXSLD2gzZC5zaGFkZXIuQmx1choBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoVY2FtZXJhSW52ZXJzZVZpZXdQcm9qBwIAAAsHdGV4dHVyZQoCAAAMDGRlcHRoVGV4dHVyZQoCAAANB1F1YWxpdHkBAgABAAAAAAAOB2lzRGVwdGgCAgABAAAAAAAPBnZhbHVlcw8DDQIAABAHb2Zmc2V0cw8DDQIAABEFcGl4ZWwFCgIAABINaGFzRml4ZWRDb2xvcgICAAEAAAAAABMQc21vb3RoRml4ZWRDb2xvcgICAAEAAAAAABQKZml4ZWRDb2xvcgUMAgAAFRBpc0RlcHRoRGVwZW5kYW50AgIAAQAAAAAAFgloYXNOb3JtYWwCAgABAAAAAAAXDW5vcm1hbFRleHR1cmUKAgAAGAZpc0N1YmUCAgABAAAAAAAZC2N1YmVUZXh0dXJlDAIAABoHY3ViZURpcgYCAAAbCF9faW5pdF9fDgYAABwGdmVydGV4DgYAAB0IZnJhZ21lbnQOBgAAHgtnZXRQb3NpdGlvbg4GAAAEAhsAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAAcAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEdAAAFAgsCFQIFBggfBHBjdXIFCwQAAAkCHg4BAgMFCgULAAggBGNjdXIFDAQAAAkDIQ4CAgsKAgMFCgUMAAghBWNvbG9yBQwEAAAJAyoOBAEDAAAAAAAAAAADAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwEDAAAAAAAAAAADBQwACCIEbmN1cgULBAAACQM5DgEJAyEOAgIXCgIDBQoFDAULABUGdW5yb2xsAA4jAWkBBAAABhUGAAcDAg0BAQECAQAAAAEBAg0BDwEAAAUICCQCdXYFCgQAAAYAAgMFCgYBAhEFChECEA8DDQsGCQIjAQECAAAAAAECBwMCIwEBAiMBAQMFCgUKAAglAWMFDAQAAAkDIQ4CAgsKAiQFCgUMAAgmAXAFCwQAAAkCHg4BAiQFCgULAAgnAWQDBAAACQMdDgIEBgMCJgULAh8FCwULBQsGAwImBQsCHwULBQsDAAgoAW4FCwQAAAkDOQ4BCQMhDgICFwoCJAUKBQwFCwAGBAIlBQwJAxgOAwIgBQwCJQUMCQMdDgICIgULAigFCwMFDAUMBgQCJQUMCQMYDgMCJQUMAiAFDAkDFQ4CBAYBCQMWDgIEBgMCJwMBA/yp8dJNYlA/AwMDAQMAAAAAAAAAAAMDAQMAAAAAAGr4QAMDAwEDAAAAAAAA8D8DAwUMBQwGgAIhBQwGAQIlBQwRAg8PAw0LBgkCIwEBAgAAAAABAgcDAiMBAQIjAQEDBQwFDAAAAAYEAggFDAIhBQwFDAALAg4CBQMIKQN2YWwDBAAAAQMAAAAAAAAAAAMAFQZ1bnJvbGwADioBaQEEAAAGFQYABwMCDQEBAQIBAAAAAQECDQEPAQAABQELAhgCBoACKQMGAQkDNw4BCQMhDgICGQwGAQkDKQ4CBgMGAQQGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIqAQECAAAAAAECBwMCKgEBAioBAQMFCgkDJg4BAioBAwUKBQoFCgEDAAAAAAAAAEADBQoBAwAAAAAAAPA/AwUKAQMAAAAAAADwPwMFCwIaBgULBQwDEQIPDwMNCwYJAioBAQIAAAAAAQIHAwIqAQECKgEBAwMDBoACKQMGAQkDNw4BCQMhDgICCwoGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIqAQECAAAAAAECBwMCKgEBAioBAQMFCgkDJg4BAioBAwUKBQoFDAMRAg8PAw0LBgkCKgEBAgAAAAABAgcDAioBAQIqAQEDAwMAAAAABgQCCAUMCQM2DgEJAxUOAgIpAwEDyxpQyv//7z8DAwUMBQwABQMIKwVjb2xvcgUMBAAACQMqDgQBAwAAAAAAAAAAAwEDAAAAAAAAAAADAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwUMABUGdW5yb2xsAA4sAWkBBAAABhUGAAcDAg0BAQECAQAAAAEBAg0BDwEAAAUBCwIYAgaAAisFDAYBCQMhDgICGQwGAQkDKQ4CBgMGAQQGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIsAQECAAAAAAECBwMCLAEBAiwBAQMFCgkDJg4BAiwBAwUKBQoFCgEDAAAAAAAAAEADBQoBAwAAAAAAAPA/AwUKAQMAAAAAAADwPwMFCwIaBgULBQwRAg8PAw0LBgkCLAEBAgAAAAABAgcDAiwBAQIsAQEDBQwFDAaAAisFDAYBCQMhDgICCwoGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIsAQECAAAAAAECBwMCLAEBAiwBAQMFCgkDJg4BAiwBAwUKBQoFDBECDw8DDQsGCQIsAQECAAAAAAECBwMCLAEBAiwBAQMFDAUMAAAAAAYEAggFDAIrBQwFDAAAAAsCEgIFAgsCEwIGgQoCCAUMDAADCgIUBQwMAAMDBgQKAggFDAwAAwYBCgIUBQwMAAMJAyYOAQYHCgIIBQwMAAMBAwAAAAAAAAAAAwIDAwMABgQKAggFDJIABQsGAQoCFAUMkgAFCwoCCAUMDAADBQsFCwAAAAADHgEtAnV2BQoEAAAFCwUECC4FZGVwdGgDBAAACQM3DgEJAyEOAgIMCgItBQoFDAMACC8EdGVtcAUMBAAABgEJAyoOAwkDOw4BAi0FCgUKAi4DAQMAAAAAAADwPwMFDAIKBwUMAAgwCG9yaWdpbldTBQsEAAAGAgoCLwUMkgAFCwoCLwUMDAADBQsADQIwBQsAAA";
h3d_shader_ColorAdd.SRC = "HXSLE2gzZC5zaGFkZXIuQ29sb3JBZGQDAQpwaXhlbENvbG9yBQwEAAACBWNvbG9yBQsCAAADCGZyYWdtZW50DgYAAAEBAwAABQEGgAoCAQUMkgAFCwICBQsFCwA";
h3d_shader_ColorKey.SRC = "HXSLE2gzZC5zaGFkZXIuQ29sb3JLZXkDAQhjb2xvcktleQUMAgAAAgx0ZXh0dXJlQ29sb3IFDAQAAAMIZnJhZ21lbnQOBgAAAQEDAAAFAggEBWNkaWZmBQwEAAAGAwICBQwCAQUMBQwACwYJCQMdDgICBAUMAgQFDAMBA/Fo44i1+OQ+AwIMAAAAAA";
h3d_shader_ColorMatrix.SRC = "HXSLFmgzZC5zaGFkZXIuQ29sb3JNYXRyaXgDAQpwaXhlbENvbG9yBQwEAAACBm1hdHJpeAcCAAADCGZyYWdtZW50DgYAAAEBAwAABQEGBAIBBQwJAyoOAgoEBgEJAyoOAgoCAQUMkgAFCwEDAAAAAAAA8D8DBQwCAgcFDAUMkgAFCwoEBgECAQUMAgIHBQwFDAwAAwUMBQwA";
h3d_shader_DirShadow.SRC = "HXSLFGgzZC5zaGFkZXIuRGlyU2hhZG93EAEGZW5hYmxlAgIAAQAAAAAAAgdVU0VfRVNNAgIAAQAAAAAAAwtzaGFkb3dQb3dlcgMCAAAEB1VTRV9QQ0YCAgABAAAAAAAFC1BDRl9TQU1QTEVTAQIAAQAAAAAABghwY2ZTY2FsZQMCAAAHCXNoYWRvd1JlcwUKAgAACAlzaGFkb3dNYXARAQIAAAkKc2hhZG93UHJvaggCAAAKCnNoYWRvd0JpYXMDAgAACxN0cmFuc2Zvcm1lZFBvc2l0aW9uBQsEAAAMBnNoYWRvdwMEAAANCWRpclNoYWRvdwMEAAAOC3BvaXNzb25EaXNrDwUMBQIAAA8EcmFuZA4GAAAQCGZyYWdtZW50DgYAAAIDDwERAXYDBAAAAwUCCBICZHADBAAACQMdDgIJAyoOAQIRAwUMCQMqDgQBA18pyxDH+ilAAwED9P3UeOmOU0ADAQOiRbbz/ZRGQAMBA1CNl24Sq1dAAwUMAwANCQMTDgEGAQkDAg4BAhIDAwEDUPwYc9Fd5UADAwMAAAEQAAAFAgsCAQIFAQsCBAIFCwYEAgwDAQMAAAAAAADwPwMDCBMJdGV4ZWxTaXplBQoEAAAGAgEDAAAAAAAA8D8DAgcFCgUKAAgUCXNoYWRvd1BvcwULBAAABgECCwULAgkIBQsACBUIc2hhZG93VXYFCgQAAAkDOg4BCgIUBQsRAAUKBQoACBYEek1heAMEAAAJAzUOAQoCFAULCAADAwAIFwNyb3QDBAAABgEGAQkCDw4BBgAGAAoCCwULAAADCgILBQsEAAMDCgILBQsIAAMDAwEDH4XrUbgeCUADAwEDAAAAAAAAAEADAwAIGARjb3NSAwQAAAkDAw4BAhcDAwAIGQRzaW5SAwQAAAkDAg4BAhcDAwAIGg5zYW1wbGVTdHJlbmd0aAMEAAAGAgEDAAAAAAAA8D8DCQMmDgECBQEDAwAIGwhvZmZTY2FsZQUKBAAABgECEwUKAgYDBQoADhwBaQEEAAAGFQECAAAAAAECBQEPAQAABQQIHQZvZmZzZXQFCgQAAAYBChECDg8FDAUCHAEFDBEABQoCGwUKBQoABgQCHQUKCQMoDgIGAwYBAhgDCgIdBQoAAAMDBgECGQMKAh0FCgQAAwMDBgAGAQIYAwoCHQUKBAADAwYBAhkDCgIdBQoAAAMDAwUKBQoIHgVkZXB0aAMEAAAJA0AOAwIIEQEGAAIVBQoCHQUKBQoBAwAAAAAAAAAAAwMABoMCDAMLBAYHBgMCFgMCCgMDAh4DAgICGgMBAwAAAAAAAAAAAwMDAAAACwICAgUFCB8Jc2hhZG93UG9zBQsEAAAGAQILBQsCCQgFCwAIIAVkZXB0aAMEAAAJAz8OAgIIEQEJAzoOAQoCHwULEQAFCgUKAwAIIQR6TWF4AwQAAAkDNQ4BCgIfBQsIAAMDAAgiBWRlbHRhAwQAAAYDCQMVDgIEBgACIAMCCgMDAwIhAwMCIQMDAAYEAgwDCQM1DgEJAwkOAQYBAgMDAiIDAwMDAwAFBAgjCXNoYWRvd1BvcwULBAAABgECCwULAgkIBQsACCQIc2hhZG93VXYFCgQAAAkDOg4BCgIjBQsRAAUKBQoACCUFZGVwdGgDBAAACQM/DgICCBEBCgIkBQoRAAUKAwAGBAIMAwsGBwYDCQM1DgEKAiMFCwgAAwMCCgMDAiUDAgEDAAAAAAAAAAADAQMAAAAAAADwPwMDAwAAAAAAAAYEAg0DAgwDAwA";
h3d_shader_GenTexture.SRC = "HXSLFWgzZC5zaGFkZXIuR2VuVGV4dHVyZQoBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoEbW9kZQECAAEAAAAAAAsFY29sb3IFDAIAAAwIX19pbml0X18OBgAADQZ2ZXJ0ZXgOBgAADghmcmFnbWVudA4GAAADAgwAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAANAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEOAAAFARMEAgoBAQEBAQIAAAAAAQUBBgQCCAUMCwYHCQMbDgEKAgYFDBEABQoDAQMAAAAAAADwPwMCCQMqDgEBAwAAAAAAAAAAAwUMAgsFDAUMBQwAAAAA";
h3d_shader_LineShader.SRC = "HXSLFWgzZC5zaGFkZXIuTGluZVNoYWRlcgwBBmNhbWVyYQ0BAwIEdmlldwcAAQADBHByb2oHAAEABAh2aWV3UHJvagcAAQAAAAAFBmdsb2JhbA0CAgYJcGl4ZWxTaXplBQoABQAHCW1vZGVsVmlldwcABQEDAAAACAVpbnB1dA0DAwkIcG9zaXRpb24FCwEIAAoGbm9ybWFsBQsBCAALAnV2BQoBCAABAAAMBm91dHB1dA0EAQ0IcG9zaXRpb24FDAQMAAQAAA4RdHJhbnNmb3JtZWROb3JtYWwFCwQAAA8TdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAEBFwcm9qZWN0ZWRQb3NpdGlvbgUMBAAAEQtsZW5ndGhTY2FsZQMCAAASBXdpZHRoAwIAABMEcGRpcgUMBAAAFAhfX2luaXRfXw4GAAAVBnZlcnRleA4GAAACAhQAAAUBBQUIFgNkaXIFCwQAAAYBAgoFCwkDMg4BAgcHBgULAAYEAhMFDAYBCQMqDgIGAQIWBQsJAzIOAQICBwYFCwEDAAAAAAAA8D8DBQwCAwcFDAUMBoEKAhMFDBEABQoGAgEDAAAAAAAA8D8DCQMNDgEGAAYBCgITBQwAAAMKAhMFDAAAAwMGAQoCEwUMBAADCgITBQwEAAMDAwMDBQoGgAIPBQsGAQYBAhYFCwoCCwUKAAADBQsCEQMFCwULBgQCDgULCQMfDgECFgULBQsFCwAAABUAAAUBBoAKAhAFDBEABQoGAQYBBgEGAQQGAQoCEwUMBQAFCgkDKA4CAQMAAAAAAADwPwMBAwAAAAAAAPC/AwUKBQoFCgQGAwoCCwUKBAADAQMAAAAAAADgPwMDAwUKCgIQBQwIAAMFCgIGBQoFCgISAwUKBQoA";
h3d_shader_MinMaxShader.SRC = "HXSLF2gzZC5zaGFkZXIuTWluTWF4U2hhZGVyCwEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgR0ZXhBCgIAAAsEdGV4QgoCAAAMBWlzTWF4AgIAAQAAAAAADQhfX2luaXRfXw4GAAAOBnZlcnRleA4GAAAPCGZyYWdtZW50DgYAAAMCDQAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAA4AAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ8AAAUDCBABYQUMBAAACQMhDgICCgoCCQUKBQwACBEBYgUMBAAACQMhDgICCwoCCQUKBQwABgQCCAUMCwIMAgkDFg4CAhAFDAIRBQwFDAkDFQ4CAhAFDAIRBQwFDAUMBQwA";
h3d_shader_CubeMinMaxShader.SRC = "HXSLG2gzZC5zaGFkZXIuQ3ViZU1pbk1heFNoYWRlcgwBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoEdGV4QQwCAAALBHRleEIMAgAADAVpc01heAICAAEAAAAAAA0DbWF0BgIAAA4IX19pbml0X18OBgAADwZ2ZXJ0ZXgOBgAAEAhmcmFnbWVudA4GAAADAg4AAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAAPAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEQAAAFBQgRAnV2BQoEAAAGAwYBAgkFCgEDAAAAAAAAAEADBQoBAwAAAAAAAPA/AwUKAAgSA2RpcgULBAAABgEJAykOAgIRBQoBAwAAAAAAAPA/AwULAg0GBQsACBMBYQUMBAAACQMhDgICCgwCEgULBQwACBQBYgUMBAAACQMhDgICCwwCEgULBQwABgQCCAUMCwIMAgkDFg4CAhMFDAIUBQwFDAkDFQ4CAhMFDAIUBQwFDAUMBQwA";
h3d_shader_NormalMap.SRC = "HXSLFGgzZC5zaGFkZXIuTm9ybWFsTWFwCgEGY2FtZXJhDQECAghwb3NpdGlvbgULAAEAAwNkaXIFCwMBAAAAAAQGZ2xvYmFsDQIBBQltb2RlbFZpZXcHAAQBAwAAAAYFaW5wdXQNAwIHBm5vcm1hbAULAQYACAd0YW5nZW50BQsBBgABAAAJB3RleHR1cmUKAgAACgxjYWxjdWxhdGVkVVYFCgQAAAsTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAADBF0cmFuc2Zvcm1lZE5vcm1hbAULBAAADRJ0cmFuc2Zvcm1lZFRhbmdlbnQFDAMAAA4OX19pbml0X192ZXJ0ZXgOBgAADwhmcmFnbWVudA4GAAACAg4AAAUBBgQCDQUMCQMqDgIGAQIIBQsJAzIOAQIFBwYFCwsGBwkDHQ4CAggFCwIIBQsDAQMAAAAAAADgPwMCAQMAAAAAAADwPwMBAwAAAAAAAPC/AwMFDAUMAAEPAAAFBQgQAW4FCwQAAAIMBQsACBECbmYFCwQAAAkDOQ4BCQMhDgICCQoCCgUKBQwFCwAIEgR0YW5YBQsEAAAJAx8OAQoCDQUMkgAFCwULAAgTBHRhblkFCwQAAAYBCQMeDgICEAULAhIFCwULBwMKAg0FDAwAAwMFCwAGBAIMBQsJAx8OAQQGAAYABgEKAhEFCwAAAwISBQsFCwYBCgIRBQsEAAMCEwULBQsFCwYBCgIRBQsIAAMCEAULBQsFCwULBQsFCwA";
h3d_shader_Shadow.SRC = "HXSLEWgzZC5zaGFkZXIuU2hhZG93BgEGc2hhZG93DQEFAgNtYXARAQABAAMEcHJvaggAAQAEBWNvbG9yBQsAAQAFBXBvd2VyAwABAAYEYmlhcwMAAQAAAAAHCnBpeGVsQ29sb3IFDAQAAAgTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAACRhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAoJc2hhZG93UG9zBQsEAAEBCwhmcmFnbWVudA4GAAABAQsAAAUGCAwJc2hhZG93UG9zBQsEAAAGAQIJBQsCAwgFCwAIDQVkZXB0aAMEAAAJAz8OAgICEQEJAzoOAQoCDAULEQAFCgUKAwAIDgR6TWF4AwQAAAkDNQ4BCgIMBQsIAAMDAAgPBWRlbHRhAwQAAAYDCQMVDgIEBgACDQMCBgMDAwIOAwMCDgMDAAgQBXNoYWRlAwQAAAkDNQ4BCQMJDgEGAQIFAwIPAwMDAwAGgQoCBwUMkgAFCwYABgEEBgMBAwAAAAAAAPA/AwIQAwMDCgIEBQuSAAULBQsCEAMFCwULAA";
h3d_shader_SignedDistanceField.SRC = "HXSLHmgzZC5zaGFkZXIuU2lnbmVkRGlzdGFuY2VGaWVsZA8BBWlucHV0DQEDAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEABAVjb2xvcgUMAQEAAQAABQZvdXRwdXQNAgIGCHBvc2l0aW9uBQwEBQAHBWNvbG9yBQwEBQAEAAAIBHRpbWUDAAAACQ5zcHJpdGVQb3NpdGlvbgUMBAAAChBhYnNvbHV0ZVBvc2l0aW9uBQwEAAALCnBpeGVsQ29sb3IFDAQAAAwMdGV4dHVyZUNvbG9yBQwEAAANDGNhbGN1bGF0ZWRVVgUKAwAADg5vdXRwdXRQb3NpdGlvbgUMBAAADwdjaGFubmVsAQIAAQAAAAAAEA1hdXRvU21vb3RoaW5nAgIAAQAAAAAAEQthbHBoYUN1dG9mZgMCAAASCXNtb290aGluZwMCAAATBm1lZGlhbg4GAAAUCGZyYWdtZW50DgYAAAIDEwMVAXIDBAAAFgFnAwQAABcBYgMEAAADBQENCQMWDgIJAxUOAgIVAwIWAwMJAxUOAgkDFg4CAhUDAhYDAwIXAwMDAAABFAAABQUIGA10ZXh0dXJlU2FtcGxlBQwEAAACDAUMAAgZCGRpc3RhbmNlAwQAAAAABgQCGQMLBgUCDwEBAgAAAAABAgoCGAUMAAADCwYFAg8BAQIBAAAAAQIKAhgFDAQAAwsGBQIPAQECAgAAAAECCgIYBQwIAAMLBgUCDwEBAgMAAAABAgoCGAUMDAADCQITDgMKAhgFDAAAAwoCGAUMBAADCgIYBQwIAAMDAwMDAwMIGglzbW9vdGhWYWwDBAAACwIQAgkDDw4BBgEJAz4OAQIZAwMBAwAAAAAAAOA/AwMDAhIDAwAGBAIMBQwJAyoOBAEDAAAAAAAA8D8DAQMAAAAAAADwPwMBAwAAAAAAAPA/AwkDGg4DBgMCEQMCGgMDBgACEQMCGgMDAhkDAwUMBQwA";
h3d_shader_SkinBase.SRC = "HXSLE2gzZC5zaGFkZXIuU2tpbkJhc2UGARByZWxhdGl2ZVBvc2l0aW9uBQsEAAACE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAMRdHJhbnNmb3JtZWROb3JtYWwFCwQAAAQITWF4Qm9uZXMBAgABAAAAAAAFEWZvdXJCb25lc0J5VmVydGV4AgIAAQAAAAAABg1ib25lc01hdHJpeGVzDwgEAgABCAA";
h3d_shader_Skin.SRC = "HXSLD2gzZC5zaGFkZXIuU2tpbgkBEHJlbGF0aXZlUG9zaXRpb24FCwQAAAITdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAAxF0cmFuc2Zvcm1lZE5vcm1hbAULBAAABAhNYXhCb25lcwECAAEAAAAAAAURZm91ckJvbmVzQnlWZXJ0ZXgCAgABAAAAAAAGDWJvbmVzTWF0cml4ZXMPCAQCAAEIBwVpbnB1dA0BBAgIcG9zaXRpb24FCwEHAAkGbm9ybWFsBQsBBwAKB3dlaWdodHMFCwEHAAsHaW5kZXhlcwkEAAAAAQcAAQAADBJ0cmFuc2Zvcm1lZFRhbmdlbnQFDAQAAA0GdmVydGV4DgYAAAEADQAABQQGBAICBQsGAAYABgEEBgECAQULEQIGDwgECQMlDgEKAgsJBAAAAAAAAwEIBQsFCwoCCgULAAADBQsGAQQGAQIBBQsRAgYPCAQJAyUOAQoCCwkEAAAABAADAQgFCwULCgIKBQsEAAMFCwULBgEEBgECAQULEQIGDwgECQMlDgEKAgsJBAAAAAgAAwEIBQsFCwoCCgULCAADBQsFCwULBgQCAwULBgAGAAYBBAYBAgkFCwkDMg4BEQIGDwgECQMlDgEKAgsJBAAAAAAAAwEIBgULBQsKAgoFCwAAAwULBgEEBgECCQULCQMyDgERAgYPCAQJAyUOAQoCCwkEAAAABAADAQgGBQsFCwoCCgULBAADBQsFCwYBBAYBAgkFCwkDMg4BEQIGDwgECQMlDgEKAgsJBAAAAAgAAwEIBgULBQsKAgoFCwgAAwULBQsFCwsCBQIFAwgOAnc0AwQAAAYDAQMAAAAAAADwPwMEBgAGAAoCCgULAAADCgIKBQsEAAMDCgIKBQsIAAMDAwMABoACAgULBgEEBgECAQULEQIGDwgECQMlDgEKAgsJBAAAAAwAAwEIBQsFCwIOAwULBQsGgAIDBQsGAQQGAQIJBQsJAzIOARECBg8IBAkDJQ4BCgILCQQAAAAIAAMBCAYFCwULAg4DBQsFCwAAAAYEAgMFCwkDHw4BAgMFCwULBQsA";
h3d_shader_SkinTangent.SRC = "HXSLFmgzZC5zaGFkZXIuU2tpblRhbmdlbnQJARByZWxhdGl2ZVBvc2l0aW9uBQsEAAACE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAMRdHJhbnNmb3JtZWROb3JtYWwFCwQAAAQITWF4Qm9uZXMBAgABAAAAAAAFEWZvdXJCb25lc0J5VmVydGV4AgIAAQAAAAAABg1ib25lc01hdHJpeGVzDwgEAgABCAcFaW5wdXQNAQUICHBvc2l0aW9uBQsBBwAJBm5vcm1hbAULAQcACgd0YW5nZW50BQsBBwALB3dlaWdodHMFCwEHAAwHaW5kZXhlcwkEAAAAAQcAAQAADRJ0cmFuc2Zvcm1lZFRhbmdlbnQFDAQAAA4GdmVydGV4DgYAAAEADgAABQYGBAICBQsGAAYABgEEBgECAQULEQIGDwgECQMlDgEKAgwJBAAAAAAAAwEIBQsFCwoCCwULAAADBQsGAQQGAQIBBQsRAgYPCAQJAyUOAQoCDAkEAAAABAADAQgFCwULCgILBQsEAAMFCwULBgEEBgECAQULEQIGDwgECQMlDgEKAgwJBAAAAAgAAwEIBQsFCwoCCwULCAADBQsFCwULBgQCAwULBgAGAAYBBAYBAgkFCwkDMg4BEQIGDwgECQMlDgEKAgwJBAAAAAAAAwEIBgULBQsKAgsFCwAAAwULBgEEBgECCQULCQMyDgERAgYPCAQJAyUOAQoCDAkEAAAABAADAQgGBQsFCwoCCwULBAADBQsFCwYBBAYBAgkFCwkDMg4BEQIGDwgECQMlDgEKAgwJBAAAAAgAAwEIBgULBQsKAgsFCwgAAwULBQsFCwYECgINBQySAAULBgAGAAYBBAYBCgIKBQuSAAULCQMyDgERAgYPCAQJAyUOAQoCDAkEAAAAAAADAQgGBQsFCwoCCwULAAADBQsGAQQGAQoCCgULkgAFCwkDMg4BEQIGDwgECQMlDgEKAgwJBAAAAAQAAwEIBgULBQsKAgsFCwQAAwULBQsGAQQGAQoCCgULkgAFCwkDMg4BEQIGDwgECQMlDgEKAgwJBAAAAAgAAwEIBgULBQsKAgsFCwgAAwULBQsFCwsCBQIFBAgPAnc0AwQAAAYDAQMAAAAAAADwPwMEBgAGAAoCCwULAAADCgILBQsEAAMDCgILBQsIAAMDAwMABoACAgULBgEEBgECAQULEQIGDwgECQMlDgEKAgwJBAAAAAwAAwEIBQsFCwIPAwULBQsGgAIDBQsGAQQGAQIJBQsJAzIOARECBg8IBAkDJQ4BCgIMCQQAAAAIAAMBCAYFCwULAg8DBQsFCwaACgINBQySAAULBgEEBgEKAgoFC5IABQsJAzIOARECBg8IBAkDJQ4BCgIMCQQAAAAMAAMBCAYFCwULAg8DBQsFCwAAAAYEAgMFCwkDHw4BAgMFCwULBQsGBAoCDQUMkgAFCwkDHw4BCgINBQySAAULBQsFCwA";
h3d_shader_SpecularTexture.SRC = "HXSLGmgzZC5zaGFkZXIuU3BlY3VsYXJUZXh0dXJlBAEHdGV4dHVyZQoCAAACDGNhbGN1bGF0ZWRVVgUKBAAAAwlzcGVjQ29sb3IFCwQAAAQIZnJhZ21lbnQOBgAAAQEEAAAFAQaBAgMFCwoJAyEOAgIBCgICBQoFDJIABQsFCwA";
h3d_shader_Texture.SRC = "HXSLEmgzZC5zaGFkZXIuVGV4dHVyZQsBBWlucHV0DQEBAgJ1dgUKAQEAAQAAAwhhZGRpdGl2ZQICAAEAAAAAAAQJa2lsbEFscGhhAgIAAQAAAAAABQ1zcGVjdWxhckFscGhhAgIAAQAAAAAABhJraWxsQWxwaGFUaHJlc2hvbGQDAgABBwAAAAAAAAAAAAAAAAAA8D8HB3RleHR1cmUKAgAACAxjYWxjdWxhdGVkVVYFCgQAAAkKcGl4ZWxDb2xvcgUMBAAACglzcGVjQ29sb3IFCwQAAAsGdmVydGV4DgYAAAwIZnJhZ21lbnQOBgAAAgALAAAFAQYEAggFCgICBQoFCgABDAAABQQIDQFjBQwEAAAJAyEOAgIHCgIIBQoFDAALBg4CBAIGCQYDCgINBQwMAAMCBgMDAQMAAAAAAAAAAAMCAgwAAAALAgMCBoACCQUMAg0FDAUMBoECCQUMAg0FDAUMAAsCBQIGgQIKBQsKAg0FDP4ABQsFCwAAAA";
h3d_shader_UVDelta.SRC = "HXSLEmgzZC5zaGFkZXIuVVZEZWx0YQQBB3V2RGVsdGEFCgIAAAIHdXZTY2FsZQUKAgAAAwxjYWxjdWxhdGVkVVYFCgQAAAQGdmVydGV4DgYAAAEABAAABQEGBAIDBQoGAAYBAgMFCgICBQoFCgIBBQoFCgUKAA";
h3d_shader_VertexColorAlpha.SRC = "HXSLG2gzZC5zaGFkZXIuVmVydGV4Q29sb3JBbHBoYQQBBWlucHV0DQEBAgVjb2xvcgUMAQEAAQAAAwpwaXhlbENvbG9yBQwEAAAECGFkZGl0aXZlAgIAAQAAAAAABQhmcmFnbWVudA4GAAABAQUAAAUBCwIEAgaAAgMFDAICBQwFDAaBAgMFDAICBQwFDAAA";
h3d_shader_VolumeDecal.SRC = "HXSLFmgzZC5zaGFkZXIuVm9sdW1lRGVjYWwYAQZjYW1lcmENAQoCBHZpZXcHAAEAAwRwcm9qBwABAAQIcG9zaXRpb24FCwABAAUIcHJvakZsaXADAAEABghwcm9qRGlhZwULAAEABwh2aWV3UHJvagcAAQAID2ludmVyc2VWaWV3UHJvagcAAQAJBXpOZWFyAwABAAoEekZhcgMAAQALA2RpcgULAwEAAAAADAZnbG9iYWwNAgQNBHRpbWUDAAwADglwaXhlbFNpemUFCgAMAA8JbW9kZWxWaWV3BwAMAQMQEG1vZGVsVmlld0ludmVyc2UHAAwBAwAAABEFaW5wdXQNAwISCHBvc2l0aW9uBQsBEQATBm5vcm1hbAULAREAAQAAFAZvdXRwdXQNBAUVCHBvc2l0aW9uBQwEFAAWBWNvbG9yBQwEFAAXBWRlcHRoAwQUABgGbm9ybWFsBQsEFAAZCXdvcmxkRGlzdAMEFAAEAAAaEHJlbGF0aXZlUG9zaXRpb24FCwQAABsTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAHBhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAB0RdHJhbnNmb3JtZWROb3JtYWwFCwQAAB4RcHJvamVjdGVkUG9zaXRpb24FDAQAAB8KcGl4ZWxDb2xvcgUMBAAAIAVkZXB0aAMEAAAhCHNjcmVlblVWBQoEAAAiCXNwZWNQb3dlcgMEAAAjCXNwZWNDb2xvcgULBAAAJAl3b3JsZERpc3QDBAAAJQhkZXB0aE1hcBEBAAAAJgVzY2FsZQUKAgAAJwZub3JtYWwFCwIAACgHdGFuZ2VudAULAgAAKQppc0NlbnRlcmVkAgIAAQAAAAAAKgxjYWxjdWxhdGVkVVYFCgQAACsSdHJhbnNmb3JtZWRUYW5nZW50BQwEAAAsDl9faW5pdF9fdmVydGV4DgYAAC0IZnJhZ21lbnQOBgAAAgIsAAAFAgYEAh0FCwkDHw4BBAYBAicFCwkDMg4BAg8HBgULBQsFCwULBgQCKwUMCQMqDgIJAx8OAQQGAQIoBQsJAzIOAQIPBwYFCwULBQsBAwAAAAAAAPA/AwUMBQwAAS0AAAUJCC4GbWF0cml4BwQAAAYBAggHAhAHBwAILwlzY3JlZW5Qb3MFCgQAAAYCCgIeBQwRAAUKCgIeBQwMAAMFCgAIMANydXYFDAQAAAkDKg4DAi8FCgkDPw4CAiURAQkDOg4BAi8FCgUKAwEDAAAAAAAA8D8DBQwACDEEd3BvcwUMBAAABgECMAUMAi4HBQwACDIEcHBvcwUMBAAABgECMAUMAggHBQwABgQCHAULBgIKAjIFDJIABQsKAjIFDAwAAwULBQsGBAIqBQoGAQImBQoEBgIKAjEFDBEABQoKAjEFDAwAAwUKBQoFCgUKCwIpAgaAAioFCgEDAAAAAAAA4D8DBQoAAAsGCQkDFQ4CCQMVDgIKAioFCgAAAwoCKgUKBAADAwkDFQ4CBgMBAwAAAAAAAPA/AwoCKgUKAAADAwYDAQMAAAAAAADwPwMKAioFCgQAAwMDAwEDAAAAAAAAAAADAgwAAAAA";
haxe_EntryPoint.pending = [];
haxe_EntryPoint.threadCount = 0;
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_io_FPHelper.helper = new DataView(new ArrayBuffer(8));
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	h.h["lt"] = "<";
	h.h["gt"] = ">";
	h.h["amp"] = "&";
	h.h["quot"] = "\"";
	h.h["apos"] = "'";
	$r = h;
	return $r;
}(this));
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
hxd_Charset.complementChars = (function($this) {
	var $r;
	var str = "ヽヾーァィゥェォッャュョヮヵヶぁぃぅぇぉっゃゅょゎゕゖㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ々〻";
	var _g = new haxe_ds_IntMap();
	{
		var _g1 = 0;
		var _g2 = str.length;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.h[HxOverrides.cca(str,i)] = true;
		}
	}
	$r = _g;
	return $r;
}(this));
hxd_Key.initDone = false;
hxd_Key.keyPressed = [];
hxd_Key.ALLOW_KEY_REPEAT = false;
hxd_Timer.wantedFPS = 60.;
hxd_Timer.maxDeltaTime = 0.5;
hxd_Timer.smoothFactor = 0.95;
hxd_Timer.lastTimeStamp = HxOverrides.now() / 1000;
hxd_Timer.elapsedTime = 0.;
hxd_Timer.frameCount = 0;
hxd_Timer.dt = 1 / hxd_Timer.wantedFPS;
hxd_Timer.currentDT = 1 / hxd_Timer.wantedFPS;
hxd_System.setCursor = hxd_System.setNativeCursor;
hxd_System.loopInit = false;
hxd_System.fpsLimit = -1;
hxd_fs_EmbedFileSystem.invalidChars = new EReg("[^A-Za-z0-9_]","g");
hxd_res_Resource.LIVE_UPDATE = false;
hxd_res_Image.DEFAULT_FILTER = h3d_mat_Filter.Linear;
hxd_res_Image.ENABLE_AUTO_WATCH = true;
hxd_res_Image.BLACK_1x1 = hxd_Pixels.alloc(1,1,hxd_PixelFormat.RGBA);
hxd_res_Image.LOG_TEXTURE_LOAD = false;
hxd_res_Sound.ENABLE_AUTO_WATCH = true;
hxd_snd_Channel.ID = 0;
hxd_snd_Source.ID = 0;
hxd_snd_Manager.STREAM_DURATION = 5.;
hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT = 44100;
hxd_snd_Manager.BUFFER_QUEUE_LENGTH = 2;
hxd_snd_Manager.MAX_SOURCES = 16;
hxd_snd_Manager.SOUND_BUFFER_CACHE_SIZE = 256;
hxd_snd_Manager.VIRTUAL_VOLUME_THRESHOLD = 1e-5;
hxd_snd_Manager.BUFFER_STREAM_SPLIT = 16;
hxsl_Tools.UID = 0;
hxsl_Tools.SWIZ = hxsl_Component.__empty_constructs__.slice();
hxsl_Tools.MAX_CHANNELS_BITS = 3;
hxsl_BatchShader.SRC = "HXSLEGh4c2wuQmF0Y2hTaGFkZXIDAQ9CYXRjaF9IYXNPZmZzZXQCAgABAAAAAAACC0JhdGNoX0NvdW50AQIAAQAAAAEAAwxCYXRjaF9CdWZmZXIQBQwCAgAAAA";
hxsl_GlslOut.KWD_LIST = ["input","output","discard","sample","dvec2","dvec3","dvec4","hvec2","hvec3","hvec4","fvec2","fvec3","fvec4","int","float","bool","long","short","double","half","fixed","unsigned","superp","lowp","mediump","highp","precision","invariant","discard","struct","asm","union","template","this","packed","goto","sizeof","namespace","noline","volatile","external","flat","input","output","out","attribute","const","uniform","varying","inout","void"];
hxsl_GlslOut.KWDS = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var _g1 = 0;
		var _g2 = hxsl_GlslOut.KWD_LIST;
		while(_g1 < _g2.length) {
			var k = _g2[_g1];
			++_g1;
			_g.h[k] = true;
		}
	}
	$r = _g;
	return $r;
}(this));
hxsl_GlslOut.GLOBALS = (function($this) {
	var $r;
	var gl = [];
	{
		var _g = 0;
		var _g1 = hxsl_TGlobal.__empty_constructs__.slice();
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			var n = "" + Std.string(g);
			n = n.charAt(0).toLowerCase() + HxOverrides.substr(n,1,null);
			gl[g._hx_index] = n;
		}
	}
	gl[hxsl_TGlobal.ToInt._hx_index] = "int";
	gl[hxsl_TGlobal.ToFloat._hx_index] = "float";
	gl[hxsl_TGlobal.ToBool._hx_index] = "bool";
	gl[hxsl_TGlobal.LReflect._hx_index] = "reflect";
	gl[hxsl_TGlobal.Mat3x4._hx_index] = "_mat3x4";
	gl[hxsl_TGlobal.VertexID._hx_index] = "gl_VertexID";
	gl[hxsl_TGlobal.InstanceID._hx_index] = "gl_InstanceID";
	gl[hxsl_TGlobal.IVec2._hx_index] = "ivec2";
	gl[hxsl_TGlobal.IVec3._hx_index] = "ivec3";
	gl[hxsl_TGlobal.IVec4._hx_index] = "ivec4";
	gl[hxsl_TGlobal.BVec2._hx_index] = "bvec2";
	gl[hxsl_TGlobal.BVec3._hx_index] = "bvec3";
	gl[hxsl_TGlobal.BVec4._hx_index] = "bvec4";
	gl[hxsl_TGlobal.FragCoord._hx_index] = "gl_FragCoord";
	gl[hxsl_TGlobal.FrontFacing._hx_index] = "gl_FrontFacing";
	{
		var _g = 0;
		while(_g < gl.length) {
			var g = gl[_g];
			++_g;
			hxsl_GlslOut.KWDS.h[g] = true;
		}
	}
	$r = gl;
	return $r;
}(this));
hxsl_GlslOut.MAT34 = "struct _mat3x4 { vec4 a; vec4 b; vec4 c; };";
hxsl__$Linker_ShaderInfos.UID = 0;
hxsl_Printer.SWIZ = ["x","y","z","w"];
hxsl_RuntimeShader.UID = 0;
hxsl_Serializer.TVECS = new haxe_ds_IntMap();
hxsl_Serializer.BOPS = (function($this) {
	var $r;
	var ops = haxe_macro_Binop.__empty_constructs__.slice();
	ops.splice(haxe_macro_Binop.OpAssignOp(null)._hx_index,0,null);
	$r = ops;
	return $r;
}(this));
hxsl_Serializer.UNOPS = haxe_macro_Unop.__empty_constructs__.slice();
hxsl_Serializer.TGLOBALS = hxsl_TGlobal.__empty_constructs__.slice();
hxsl_Serializer.TSWIZ = new haxe_ds_IntMap();
hxsl_Serializer.REGS = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
hxsl_Serializer.VKINDS = hxsl_VarKind.__empty_constructs__.slice();
hxsl_Serializer.PRECS = hxsl_Prec.__empty_constructs__.slice();
hxsl_Serializer.FKIND = hxsl_FunctionKind.__empty_constructs__.slice();
hxsl_Serializer.SIGN = 9139229;
hxsl_ShaderList.MAX_LIST_SIZE = 0;
hxsl_ShaderList.ALLOW_DUPLICATES = true;
hxsl_ShaderInstance.UID = 0;
hxsl_SharedShader.UNROLL_LOOPS = false;
{
	Boot.main();
	haxe_EntryPoint.run();
}
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
